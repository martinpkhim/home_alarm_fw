
home_alarm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d4c  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000fc  08004e8c  08004e8c  00014e8c  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f88  08004f88  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08004f88  08004f88  00014f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f90  08004f90  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f90  08004f90  00014f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f94  08004f94  00014f94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08004f98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002c20  20000014  08004fac  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002c34  08004fac  00022c34  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ecff  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000570d  00000000  00000000  0003ed3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00011d19  00000000  00000000  00044449  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001378  00000000  00000000  00056168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001fb0  00000000  00000000  000574e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000179be  00000000  00000000  00059490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000257f1  00000000  00000000  00070e4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000916b4  00000000  00000000  0009663f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00127cf3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003b54  00000000  00000000  00127d44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000014 	.word	0x20000014
 800015c:	00000000 	.word	0x00000000
 8000160:	08004e74 	.word	0x08004e74

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000018 	.word	0x20000018
 800017c:	08004e74 	.word	0x08004e74

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_dmul>:
 8000190:	b570      	push	{r4, r5, r6, lr}
 8000192:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000196:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800019a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800019e:	bf1d      	ittte	ne
 80001a0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001a4:	ea94 0f0c 	teqne	r4, ip
 80001a8:	ea95 0f0c 	teqne	r5, ip
 80001ac:	f000 f8de 	bleq	800036c <__aeabi_dmul+0x1dc>
 80001b0:	442c      	add	r4, r5
 80001b2:	ea81 0603 	eor.w	r6, r1, r3
 80001b6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001ba:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001be:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001c2:	bf18      	it	ne
 80001c4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80001c8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80001cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001d0:	d038      	beq.n	8000244 <__aeabi_dmul+0xb4>
 80001d2:	fba0 ce02 	umull	ip, lr, r0, r2
 80001d6:	f04f 0500 	mov.w	r5, #0
 80001da:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001de:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001e2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001e6:	f04f 0600 	mov.w	r6, #0
 80001ea:	fbe1 5603 	umlal	r5, r6, r1, r3
 80001ee:	f09c 0f00 	teq	ip, #0
 80001f2:	bf18      	it	ne
 80001f4:	f04e 0e01 	orrne.w	lr, lr, #1
 80001f8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80001fc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000200:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000204:	d204      	bcs.n	8000210 <__aeabi_dmul+0x80>
 8000206:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800020a:	416d      	adcs	r5, r5
 800020c:	eb46 0606 	adc.w	r6, r6, r6
 8000210:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000214:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000218:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800021c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000220:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000224:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000228:	bf88      	it	hi
 800022a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800022e:	d81e      	bhi.n	800026e <__aeabi_dmul+0xde>
 8000230:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000234:	bf08      	it	eq
 8000236:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800023a:	f150 0000 	adcs.w	r0, r0, #0
 800023e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000242:	bd70      	pop	{r4, r5, r6, pc}
 8000244:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000248:	ea46 0101 	orr.w	r1, r6, r1
 800024c:	ea40 0002 	orr.w	r0, r0, r2
 8000250:	ea81 0103 	eor.w	r1, r1, r3
 8000254:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000258:	bfc2      	ittt	gt
 800025a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800025e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000262:	bd70      	popgt	{r4, r5, r6, pc}
 8000264:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000268:	f04f 0e00 	mov.w	lr, #0
 800026c:	3c01      	subs	r4, #1
 800026e:	f300 80ab 	bgt.w	80003c8 <__aeabi_dmul+0x238>
 8000272:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000276:	bfde      	ittt	le
 8000278:	2000      	movle	r0, #0
 800027a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800027e:	bd70      	pople	{r4, r5, r6, pc}
 8000280:	f1c4 0400 	rsb	r4, r4, #0
 8000284:	3c20      	subs	r4, #32
 8000286:	da35      	bge.n	80002f4 <__aeabi_dmul+0x164>
 8000288:	340c      	adds	r4, #12
 800028a:	dc1b      	bgt.n	80002c4 <__aeabi_dmul+0x134>
 800028c:	f104 0414 	add.w	r4, r4, #20
 8000290:	f1c4 0520 	rsb	r5, r4, #32
 8000294:	fa00 f305 	lsl.w	r3, r0, r5
 8000298:	fa20 f004 	lsr.w	r0, r0, r4
 800029c:	fa01 f205 	lsl.w	r2, r1, r5
 80002a0:	ea40 0002 	orr.w	r0, r0, r2
 80002a4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002a8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002ac:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002b0:	fa21 f604 	lsr.w	r6, r1, r4
 80002b4:	eb42 0106 	adc.w	r1, r2, r6
 80002b8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002bc:	bf08      	it	eq
 80002be:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002c2:	bd70      	pop	{r4, r5, r6, pc}
 80002c4:	f1c4 040c 	rsb	r4, r4, #12
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f304 	lsl.w	r3, r0, r4
 80002d0:	fa20 f005 	lsr.w	r0, r0, r5
 80002d4:	fa01 f204 	lsl.w	r2, r1, r4
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e4:	f141 0100 	adc.w	r1, r1, #0
 80002e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002ec:	bf08      	it	eq
 80002ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002f2:	bd70      	pop	{r4, r5, r6, pc}
 80002f4:	f1c4 0520 	rsb	r5, r4, #32
 80002f8:	fa00 f205 	lsl.w	r2, r0, r5
 80002fc:	ea4e 0e02 	orr.w	lr, lr, r2
 8000300:	fa20 f304 	lsr.w	r3, r0, r4
 8000304:	fa01 f205 	lsl.w	r2, r1, r5
 8000308:	ea43 0302 	orr.w	r3, r3, r2
 800030c:	fa21 f004 	lsr.w	r0, r1, r4
 8000310:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000314:	fa21 f204 	lsr.w	r2, r1, r4
 8000318:	ea20 0002 	bic.w	r0, r0, r2
 800031c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f094 0f00 	teq	r4, #0
 8000330:	d10f      	bne.n	8000352 <__aeabi_dmul+0x1c2>
 8000332:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000336:	0040      	lsls	r0, r0, #1
 8000338:	eb41 0101 	adc.w	r1, r1, r1
 800033c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000340:	bf08      	it	eq
 8000342:	3c01      	subeq	r4, #1
 8000344:	d0f7      	beq.n	8000336 <__aeabi_dmul+0x1a6>
 8000346:	ea41 0106 	orr.w	r1, r1, r6
 800034a:	f095 0f00 	teq	r5, #0
 800034e:	bf18      	it	ne
 8000350:	4770      	bxne	lr
 8000352:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000356:	0052      	lsls	r2, r2, #1
 8000358:	eb43 0303 	adc.w	r3, r3, r3
 800035c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000360:	bf08      	it	eq
 8000362:	3d01      	subeq	r5, #1
 8000364:	d0f7      	beq.n	8000356 <__aeabi_dmul+0x1c6>
 8000366:	ea43 0306 	orr.w	r3, r3, r6
 800036a:	4770      	bx	lr
 800036c:	ea94 0f0c 	teq	r4, ip
 8000370:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000374:	bf18      	it	ne
 8000376:	ea95 0f0c 	teqne	r5, ip
 800037a:	d00c      	beq.n	8000396 <__aeabi_dmul+0x206>
 800037c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000380:	bf18      	it	ne
 8000382:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000386:	d1d1      	bne.n	800032c <__aeabi_dmul+0x19c>
 8000388:	ea81 0103 	eor.w	r1, r1, r3
 800038c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000390:	f04f 0000 	mov.w	r0, #0
 8000394:	bd70      	pop	{r4, r5, r6, pc}
 8000396:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800039a:	bf06      	itte	eq
 800039c:	4610      	moveq	r0, r2
 800039e:	4619      	moveq	r1, r3
 80003a0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003a4:	d019      	beq.n	80003da <__aeabi_dmul+0x24a>
 80003a6:	ea94 0f0c 	teq	r4, ip
 80003aa:	d102      	bne.n	80003b2 <__aeabi_dmul+0x222>
 80003ac:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003b0:	d113      	bne.n	80003da <__aeabi_dmul+0x24a>
 80003b2:	ea95 0f0c 	teq	r5, ip
 80003b6:	d105      	bne.n	80003c4 <__aeabi_dmul+0x234>
 80003b8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003bc:	bf1c      	itt	ne
 80003be:	4610      	movne	r0, r2
 80003c0:	4619      	movne	r1, r3
 80003c2:	d10a      	bne.n	80003da <__aeabi_dmul+0x24a>
 80003c4:	ea81 0103 	eor.w	r1, r1, r3
 80003c8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003cc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003d4:	f04f 0000 	mov.w	r0, #0
 80003d8:	bd70      	pop	{r4, r5, r6, pc}
 80003da:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003de:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003e2:	bd70      	pop	{r4, r5, r6, pc}

080003e4 <__aeabi_drsub>:
 80003e4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003e8:	e002      	b.n	80003f0 <__adddf3>
 80003ea:	bf00      	nop

080003ec <__aeabi_dsub>:
 80003ec:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080003f0 <__adddf3>:
 80003f0:	b530      	push	{r4, r5, lr}
 80003f2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003f6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003fa:	ea94 0f05 	teq	r4, r5
 80003fe:	bf08      	it	eq
 8000400:	ea90 0f02 	teqeq	r0, r2
 8000404:	bf1f      	itttt	ne
 8000406:	ea54 0c00 	orrsne.w	ip, r4, r0
 800040a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800040e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000412:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000416:	f000 80e2 	beq.w	80005de <__adddf3+0x1ee>
 800041a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800041e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000422:	bfb8      	it	lt
 8000424:	426d      	neglt	r5, r5
 8000426:	dd0c      	ble.n	8000442 <__adddf3+0x52>
 8000428:	442c      	add	r4, r5
 800042a:	ea80 0202 	eor.w	r2, r0, r2
 800042e:	ea81 0303 	eor.w	r3, r1, r3
 8000432:	ea82 0000 	eor.w	r0, r2, r0
 8000436:	ea83 0101 	eor.w	r1, r3, r1
 800043a:	ea80 0202 	eor.w	r2, r0, r2
 800043e:	ea81 0303 	eor.w	r3, r1, r3
 8000442:	2d36      	cmp	r5, #54	; 0x36
 8000444:	bf88      	it	hi
 8000446:	bd30      	pophi	{r4, r5, pc}
 8000448:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800044c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000450:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000454:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000458:	d002      	beq.n	8000460 <__adddf3+0x70>
 800045a:	4240      	negs	r0, r0
 800045c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000460:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000464:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000468:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800046c:	d002      	beq.n	8000474 <__adddf3+0x84>
 800046e:	4252      	negs	r2, r2
 8000470:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000474:	ea94 0f05 	teq	r4, r5
 8000478:	f000 80a7 	beq.w	80005ca <__adddf3+0x1da>
 800047c:	f1a4 0401 	sub.w	r4, r4, #1
 8000480:	f1d5 0e20 	rsbs	lr, r5, #32
 8000484:	db0d      	blt.n	80004a2 <__adddf3+0xb2>
 8000486:	fa02 fc0e 	lsl.w	ip, r2, lr
 800048a:	fa22 f205 	lsr.w	r2, r2, r5
 800048e:	1880      	adds	r0, r0, r2
 8000490:	f141 0100 	adc.w	r1, r1, #0
 8000494:	fa03 f20e 	lsl.w	r2, r3, lr
 8000498:	1880      	adds	r0, r0, r2
 800049a:	fa43 f305 	asr.w	r3, r3, r5
 800049e:	4159      	adcs	r1, r3
 80004a0:	e00e      	b.n	80004c0 <__adddf3+0xd0>
 80004a2:	f1a5 0520 	sub.w	r5, r5, #32
 80004a6:	f10e 0e20 	add.w	lr, lr, #32
 80004aa:	2a01      	cmp	r2, #1
 80004ac:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004b0:	bf28      	it	cs
 80004b2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004b6:	fa43 f305 	asr.w	r3, r3, r5
 80004ba:	18c0      	adds	r0, r0, r3
 80004bc:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004c4:	d507      	bpl.n	80004d6 <__adddf3+0xe6>
 80004c6:	f04f 0e00 	mov.w	lr, #0
 80004ca:	f1dc 0c00 	rsbs	ip, ip, #0
 80004ce:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004d2:	eb6e 0101 	sbc.w	r1, lr, r1
 80004d6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004da:	d31b      	bcc.n	8000514 <__adddf3+0x124>
 80004dc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004e0:	d30c      	bcc.n	80004fc <__adddf3+0x10c>
 80004e2:	0849      	lsrs	r1, r1, #1
 80004e4:	ea5f 0030 	movs.w	r0, r0, rrx
 80004e8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80004ec:	f104 0401 	add.w	r4, r4, #1
 80004f0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004f4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80004f8:	f080 809a 	bcs.w	8000630 <__adddf3+0x240>
 80004fc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000500:	bf08      	it	eq
 8000502:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000506:	f150 0000 	adcs.w	r0, r0, #0
 800050a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800050e:	ea41 0105 	orr.w	r1, r1, r5
 8000512:	bd30      	pop	{r4, r5, pc}
 8000514:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000518:	4140      	adcs	r0, r0
 800051a:	eb41 0101 	adc.w	r1, r1, r1
 800051e:	3c01      	subs	r4, #1
 8000520:	bf28      	it	cs
 8000522:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000526:	d2e9      	bcs.n	80004fc <__adddf3+0x10c>
 8000528:	f091 0f00 	teq	r1, #0
 800052c:	bf04      	itt	eq
 800052e:	4601      	moveq	r1, r0
 8000530:	2000      	moveq	r0, #0
 8000532:	fab1 f381 	clz	r3, r1
 8000536:	bf08      	it	eq
 8000538:	3320      	addeq	r3, #32
 800053a:	f1a3 030b 	sub.w	r3, r3, #11
 800053e:	f1b3 0220 	subs.w	r2, r3, #32
 8000542:	da0c      	bge.n	800055e <__adddf3+0x16e>
 8000544:	320c      	adds	r2, #12
 8000546:	dd08      	ble.n	800055a <__adddf3+0x16a>
 8000548:	f102 0c14 	add.w	ip, r2, #20
 800054c:	f1c2 020c 	rsb	r2, r2, #12
 8000550:	fa01 f00c 	lsl.w	r0, r1, ip
 8000554:	fa21 f102 	lsr.w	r1, r1, r2
 8000558:	e00c      	b.n	8000574 <__adddf3+0x184>
 800055a:	f102 0214 	add.w	r2, r2, #20
 800055e:	bfd8      	it	le
 8000560:	f1c2 0c20 	rsble	ip, r2, #32
 8000564:	fa01 f102 	lsl.w	r1, r1, r2
 8000568:	fa20 fc0c 	lsr.w	ip, r0, ip
 800056c:	bfdc      	itt	le
 800056e:	ea41 010c 	orrle.w	r1, r1, ip
 8000572:	4090      	lslle	r0, r2
 8000574:	1ae4      	subs	r4, r4, r3
 8000576:	bfa2      	ittt	ge
 8000578:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800057c:	4329      	orrge	r1, r5
 800057e:	bd30      	popge	{r4, r5, pc}
 8000580:	ea6f 0404 	mvn.w	r4, r4
 8000584:	3c1f      	subs	r4, #31
 8000586:	da1c      	bge.n	80005c2 <__adddf3+0x1d2>
 8000588:	340c      	adds	r4, #12
 800058a:	dc0e      	bgt.n	80005aa <__adddf3+0x1ba>
 800058c:	f104 0414 	add.w	r4, r4, #20
 8000590:	f1c4 0220 	rsb	r2, r4, #32
 8000594:	fa20 f004 	lsr.w	r0, r0, r4
 8000598:	fa01 f302 	lsl.w	r3, r1, r2
 800059c:	ea40 0003 	orr.w	r0, r0, r3
 80005a0:	fa21 f304 	lsr.w	r3, r1, r4
 80005a4:	ea45 0103 	orr.w	r1, r5, r3
 80005a8:	bd30      	pop	{r4, r5, pc}
 80005aa:	f1c4 040c 	rsb	r4, r4, #12
 80005ae:	f1c4 0220 	rsb	r2, r4, #32
 80005b2:	fa20 f002 	lsr.w	r0, r0, r2
 80005b6:	fa01 f304 	lsl.w	r3, r1, r4
 80005ba:	ea40 0003 	orr.w	r0, r0, r3
 80005be:	4629      	mov	r1, r5
 80005c0:	bd30      	pop	{r4, r5, pc}
 80005c2:	fa21 f004 	lsr.w	r0, r1, r4
 80005c6:	4629      	mov	r1, r5
 80005c8:	bd30      	pop	{r4, r5, pc}
 80005ca:	f094 0f00 	teq	r4, #0
 80005ce:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005d2:	bf06      	itte	eq
 80005d4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005d8:	3401      	addeq	r4, #1
 80005da:	3d01      	subne	r5, #1
 80005dc:	e74e      	b.n	800047c <__adddf3+0x8c>
 80005de:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005e2:	bf18      	it	ne
 80005e4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005e8:	d029      	beq.n	800063e <__adddf3+0x24e>
 80005ea:	ea94 0f05 	teq	r4, r5
 80005ee:	bf08      	it	eq
 80005f0:	ea90 0f02 	teqeq	r0, r2
 80005f4:	d005      	beq.n	8000602 <__adddf3+0x212>
 80005f6:	ea54 0c00 	orrs.w	ip, r4, r0
 80005fa:	bf04      	itt	eq
 80005fc:	4619      	moveq	r1, r3
 80005fe:	4610      	moveq	r0, r2
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	ea91 0f03 	teq	r1, r3
 8000606:	bf1e      	ittt	ne
 8000608:	2100      	movne	r1, #0
 800060a:	2000      	movne	r0, #0
 800060c:	bd30      	popne	{r4, r5, pc}
 800060e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000612:	d105      	bne.n	8000620 <__adddf3+0x230>
 8000614:	0040      	lsls	r0, r0, #1
 8000616:	4149      	adcs	r1, r1
 8000618:	bf28      	it	cs
 800061a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800061e:	bd30      	pop	{r4, r5, pc}
 8000620:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000624:	bf3c      	itt	cc
 8000626:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800062a:	bd30      	popcc	{r4, r5, pc}
 800062c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000630:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000634:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000638:	f04f 0000 	mov.w	r0, #0
 800063c:	bd30      	pop	{r4, r5, pc}
 800063e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000642:	bf1a      	itte	ne
 8000644:	4619      	movne	r1, r3
 8000646:	4610      	movne	r0, r2
 8000648:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800064c:	bf1c      	itt	ne
 800064e:	460b      	movne	r3, r1
 8000650:	4602      	movne	r2, r0
 8000652:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000656:	bf06      	itte	eq
 8000658:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800065c:	ea91 0f03 	teqeq	r1, r3
 8000660:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000664:	bd30      	pop	{r4, r5, pc}
 8000666:	bf00      	nop

08000668 <__aeabi_ui2d>:
 8000668:	f090 0f00 	teq	r0, #0
 800066c:	bf04      	itt	eq
 800066e:	2100      	moveq	r1, #0
 8000670:	4770      	bxeq	lr
 8000672:	b530      	push	{r4, r5, lr}
 8000674:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000678:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800067c:	f04f 0500 	mov.w	r5, #0
 8000680:	f04f 0100 	mov.w	r1, #0
 8000684:	e750      	b.n	8000528 <__adddf3+0x138>
 8000686:	bf00      	nop

08000688 <__aeabi_i2d>:
 8000688:	f090 0f00 	teq	r0, #0
 800068c:	bf04      	itt	eq
 800068e:	2100      	moveq	r1, #0
 8000690:	4770      	bxeq	lr
 8000692:	b530      	push	{r4, r5, lr}
 8000694:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000698:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800069c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006a0:	bf48      	it	mi
 80006a2:	4240      	negmi	r0, r0
 80006a4:	f04f 0100 	mov.w	r1, #0
 80006a8:	e73e      	b.n	8000528 <__adddf3+0x138>
 80006aa:	bf00      	nop

080006ac <__aeabi_f2d>:
 80006ac:	0042      	lsls	r2, r0, #1
 80006ae:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006b2:	ea4f 0131 	mov.w	r1, r1, rrx
 80006b6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006ba:	bf1f      	itttt	ne
 80006bc:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006c0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006c4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006c8:	4770      	bxne	lr
 80006ca:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006ce:	bf08      	it	eq
 80006d0:	4770      	bxeq	lr
 80006d2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006d6:	bf04      	itt	eq
 80006d8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006dc:	4770      	bxeq	lr
 80006de:	b530      	push	{r4, r5, lr}
 80006e0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006e8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	e71c      	b.n	8000528 <__adddf3+0x138>
 80006ee:	bf00      	nop

080006f0 <__aeabi_ul2d>:
 80006f0:	ea50 0201 	orrs.w	r2, r0, r1
 80006f4:	bf08      	it	eq
 80006f6:	4770      	bxeq	lr
 80006f8:	b530      	push	{r4, r5, lr}
 80006fa:	f04f 0500 	mov.w	r5, #0
 80006fe:	e00a      	b.n	8000716 <__aeabi_l2d+0x16>

08000700 <__aeabi_l2d>:
 8000700:	ea50 0201 	orrs.w	r2, r0, r1
 8000704:	bf08      	it	eq
 8000706:	4770      	bxeq	lr
 8000708:	b530      	push	{r4, r5, lr}
 800070a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800070e:	d502      	bpl.n	8000716 <__aeabi_l2d+0x16>
 8000710:	4240      	negs	r0, r0
 8000712:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000716:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800071a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800071e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000722:	f43f aed8 	beq.w	80004d6 <__adddf3+0xe6>
 8000726:	f04f 0203 	mov.w	r2, #3
 800072a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800072e:	bf18      	it	ne
 8000730:	3203      	addne	r2, #3
 8000732:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000736:	bf18      	it	ne
 8000738:	3203      	addne	r2, #3
 800073a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800073e:	f1c2 0320 	rsb	r3, r2, #32
 8000742:	fa00 fc03 	lsl.w	ip, r0, r3
 8000746:	fa20 f002 	lsr.w	r0, r0, r2
 800074a:	fa01 fe03 	lsl.w	lr, r1, r3
 800074e:	ea40 000e 	orr.w	r0, r0, lr
 8000752:	fa21 f102 	lsr.w	r1, r1, r2
 8000756:	4414      	add	r4, r2
 8000758:	e6bd      	b.n	80004d6 <__adddf3+0xe6>
 800075a:	bf00      	nop

0800075c <__gedf2>:
 800075c:	f04f 3cff 	mov.w	ip, #4294967295
 8000760:	e006      	b.n	8000770 <__cmpdf2+0x4>
 8000762:	bf00      	nop

08000764 <__ledf2>:
 8000764:	f04f 0c01 	mov.w	ip, #1
 8000768:	e002      	b.n	8000770 <__cmpdf2+0x4>
 800076a:	bf00      	nop

0800076c <__cmpdf2>:
 800076c:	f04f 0c01 	mov.w	ip, #1
 8000770:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000774:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000778:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800077c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000780:	bf18      	it	ne
 8000782:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000786:	d01b      	beq.n	80007c0 <__cmpdf2+0x54>
 8000788:	b001      	add	sp, #4
 800078a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800078e:	bf0c      	ite	eq
 8000790:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000794:	ea91 0f03 	teqne	r1, r3
 8000798:	bf02      	ittt	eq
 800079a:	ea90 0f02 	teqeq	r0, r2
 800079e:	2000      	moveq	r0, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	f110 0f00 	cmn.w	r0, #0
 80007a6:	ea91 0f03 	teq	r1, r3
 80007aa:	bf58      	it	pl
 80007ac:	4299      	cmppl	r1, r3
 80007ae:	bf08      	it	eq
 80007b0:	4290      	cmpeq	r0, r2
 80007b2:	bf2c      	ite	cs
 80007b4:	17d8      	asrcs	r0, r3, #31
 80007b6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80007ba:	f040 0001 	orr.w	r0, r0, #1
 80007be:	4770      	bx	lr
 80007c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007c8:	d102      	bne.n	80007d0 <__cmpdf2+0x64>
 80007ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80007ce:	d107      	bne.n	80007e0 <__cmpdf2+0x74>
 80007d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007d8:	d1d6      	bne.n	8000788 <__cmpdf2+0x1c>
 80007da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80007de:	d0d3      	beq.n	8000788 <__cmpdf2+0x1c>
 80007e0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80007e4:	4770      	bx	lr
 80007e6:	bf00      	nop

080007e8 <__aeabi_cdrcmple>:
 80007e8:	4684      	mov	ip, r0
 80007ea:	4610      	mov	r0, r2
 80007ec:	4662      	mov	r2, ip
 80007ee:	468c      	mov	ip, r1
 80007f0:	4619      	mov	r1, r3
 80007f2:	4663      	mov	r3, ip
 80007f4:	e000      	b.n	80007f8 <__aeabi_cdcmpeq>
 80007f6:	bf00      	nop

080007f8 <__aeabi_cdcmpeq>:
 80007f8:	b501      	push	{r0, lr}
 80007fa:	f7ff ffb7 	bl	800076c <__cmpdf2>
 80007fe:	2800      	cmp	r0, #0
 8000800:	bf48      	it	mi
 8000802:	f110 0f00 	cmnmi.w	r0, #0
 8000806:	bd01      	pop	{r0, pc}

08000808 <__aeabi_dcmpeq>:
 8000808:	f84d ed08 	str.w	lr, [sp, #-8]!
 800080c:	f7ff fff4 	bl	80007f8 <__aeabi_cdcmpeq>
 8000810:	bf0c      	ite	eq
 8000812:	2001      	moveq	r0, #1
 8000814:	2000      	movne	r0, #0
 8000816:	f85d fb08 	ldr.w	pc, [sp], #8
 800081a:	bf00      	nop

0800081c <__aeabi_dcmplt>:
 800081c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000820:	f7ff ffea 	bl	80007f8 <__aeabi_cdcmpeq>
 8000824:	bf34      	ite	cc
 8000826:	2001      	movcc	r0, #1
 8000828:	2000      	movcs	r0, #0
 800082a:	f85d fb08 	ldr.w	pc, [sp], #8
 800082e:	bf00      	nop

08000830 <__aeabi_dcmple>:
 8000830:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000834:	f7ff ffe0 	bl	80007f8 <__aeabi_cdcmpeq>
 8000838:	bf94      	ite	ls
 800083a:	2001      	movls	r0, #1
 800083c:	2000      	movhi	r0, #0
 800083e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000842:	bf00      	nop

08000844 <__aeabi_dcmpge>:
 8000844:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000848:	f7ff ffce 	bl	80007e8 <__aeabi_cdrcmple>
 800084c:	bf94      	ite	ls
 800084e:	2001      	movls	r0, #1
 8000850:	2000      	movhi	r0, #0
 8000852:	f85d fb08 	ldr.w	pc, [sp], #8
 8000856:	bf00      	nop

08000858 <__aeabi_dcmpgt>:
 8000858:	f84d ed08 	str.w	lr, [sp, #-8]!
 800085c:	f7ff ffc4 	bl	80007e8 <__aeabi_cdrcmple>
 8000860:	bf34      	ite	cc
 8000862:	2001      	movcc	r0, #1
 8000864:	2000      	movcs	r0, #0
 8000866:	f85d fb08 	ldr.w	pc, [sp], #8
 800086a:	bf00      	nop

0800086c <__aeabi_d2f>:
 800086c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000870:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000874:	bf24      	itt	cs
 8000876:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800087a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800087e:	d90d      	bls.n	800089c <__aeabi_d2f+0x30>
 8000880:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000884:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000888:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800088c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000890:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000894:	bf08      	it	eq
 8000896:	f020 0001 	biceq.w	r0, r0, #1
 800089a:	4770      	bx	lr
 800089c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80008a0:	d121      	bne.n	80008e6 <__aeabi_d2f+0x7a>
 80008a2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80008a6:	bfbc      	itt	lt
 80008a8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80008ac:	4770      	bxlt	lr
 80008ae:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008b2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008b6:	f1c2 0218 	rsb	r2, r2, #24
 80008ba:	f1c2 0c20 	rsb	ip, r2, #32
 80008be:	fa10 f30c 	lsls.w	r3, r0, ip
 80008c2:	fa20 f002 	lsr.w	r0, r0, r2
 80008c6:	bf18      	it	ne
 80008c8:	f040 0001 	orrne.w	r0, r0, #1
 80008cc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008d0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008d4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008d8:	ea40 000c 	orr.w	r0, r0, ip
 80008dc:	fa23 f302 	lsr.w	r3, r3, r2
 80008e0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008e4:	e7cc      	b.n	8000880 <__aeabi_d2f+0x14>
 80008e6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008ea:	d107      	bne.n	80008fc <__aeabi_d2f+0x90>
 80008ec:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80008f0:	bf1e      	ittt	ne
 80008f2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80008f6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80008fa:	4770      	bxne	lr
 80008fc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000900:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000904:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop

0800090c <__aeabi_fmul>:
 800090c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000910:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000914:	bf1e      	ittt	ne
 8000916:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800091a:	ea92 0f0c 	teqne	r2, ip
 800091e:	ea93 0f0c 	teqne	r3, ip
 8000922:	d06f      	beq.n	8000a04 <__aeabi_fmul+0xf8>
 8000924:	441a      	add	r2, r3
 8000926:	ea80 0c01 	eor.w	ip, r0, r1
 800092a:	0240      	lsls	r0, r0, #9
 800092c:	bf18      	it	ne
 800092e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000932:	d01e      	beq.n	8000972 <__aeabi_fmul+0x66>
 8000934:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000938:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800093c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000940:	fba0 3101 	umull	r3, r1, r0, r1
 8000944:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000948:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800094c:	bf3e      	ittt	cc
 800094e:	0049      	lslcc	r1, r1, #1
 8000950:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000954:	005b      	lslcc	r3, r3, #1
 8000956:	ea40 0001 	orr.w	r0, r0, r1
 800095a:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 800095e:	2afd      	cmp	r2, #253	; 0xfd
 8000960:	d81d      	bhi.n	800099e <__aeabi_fmul+0x92>
 8000962:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000966:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800096a:	bf08      	it	eq
 800096c:	f020 0001 	biceq.w	r0, r0, #1
 8000970:	4770      	bx	lr
 8000972:	f090 0f00 	teq	r0, #0
 8000976:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800097a:	bf08      	it	eq
 800097c:	0249      	lsleq	r1, r1, #9
 800097e:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000982:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000986:	3a7f      	subs	r2, #127	; 0x7f
 8000988:	bfc2      	ittt	gt
 800098a:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 800098e:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000992:	4770      	bxgt	lr
 8000994:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000998:	f04f 0300 	mov.w	r3, #0
 800099c:	3a01      	subs	r2, #1
 800099e:	dc5d      	bgt.n	8000a5c <__aeabi_fmul+0x150>
 80009a0:	f112 0f19 	cmn.w	r2, #25
 80009a4:	bfdc      	itt	le
 80009a6:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80009aa:	4770      	bxle	lr
 80009ac:	f1c2 0200 	rsb	r2, r2, #0
 80009b0:	0041      	lsls	r1, r0, #1
 80009b2:	fa21 f102 	lsr.w	r1, r1, r2
 80009b6:	f1c2 0220 	rsb	r2, r2, #32
 80009ba:	fa00 fc02 	lsl.w	ip, r0, r2
 80009be:	ea5f 0031 	movs.w	r0, r1, rrx
 80009c2:	f140 0000 	adc.w	r0, r0, #0
 80009c6:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80009ca:	bf08      	it	eq
 80009cc:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80009d0:	4770      	bx	lr
 80009d2:	f092 0f00 	teq	r2, #0
 80009d6:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80009da:	bf02      	ittt	eq
 80009dc:	0040      	lsleq	r0, r0, #1
 80009de:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80009e2:	3a01      	subeq	r2, #1
 80009e4:	d0f9      	beq.n	80009da <__aeabi_fmul+0xce>
 80009e6:	ea40 000c 	orr.w	r0, r0, ip
 80009ea:	f093 0f00 	teq	r3, #0
 80009ee:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80009f2:	bf02      	ittt	eq
 80009f4:	0049      	lsleq	r1, r1, #1
 80009f6:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80009fa:	3b01      	subeq	r3, #1
 80009fc:	d0f9      	beq.n	80009f2 <__aeabi_fmul+0xe6>
 80009fe:	ea41 010c 	orr.w	r1, r1, ip
 8000a02:	e78f      	b.n	8000924 <__aeabi_fmul+0x18>
 8000a04:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a08:	ea92 0f0c 	teq	r2, ip
 8000a0c:	bf18      	it	ne
 8000a0e:	ea93 0f0c 	teqne	r3, ip
 8000a12:	d00a      	beq.n	8000a2a <__aeabi_fmul+0x11e>
 8000a14:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000a18:	bf18      	it	ne
 8000a1a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000a1e:	d1d8      	bne.n	80009d2 <__aeabi_fmul+0xc6>
 8000a20:	ea80 0001 	eor.w	r0, r0, r1
 8000a24:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000a28:	4770      	bx	lr
 8000a2a:	f090 0f00 	teq	r0, #0
 8000a2e:	bf17      	itett	ne
 8000a30:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000a34:	4608      	moveq	r0, r1
 8000a36:	f091 0f00 	teqne	r1, #0
 8000a3a:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000a3e:	d014      	beq.n	8000a6a <__aeabi_fmul+0x15e>
 8000a40:	ea92 0f0c 	teq	r2, ip
 8000a44:	d101      	bne.n	8000a4a <__aeabi_fmul+0x13e>
 8000a46:	0242      	lsls	r2, r0, #9
 8000a48:	d10f      	bne.n	8000a6a <__aeabi_fmul+0x15e>
 8000a4a:	ea93 0f0c 	teq	r3, ip
 8000a4e:	d103      	bne.n	8000a58 <__aeabi_fmul+0x14c>
 8000a50:	024b      	lsls	r3, r1, #9
 8000a52:	bf18      	it	ne
 8000a54:	4608      	movne	r0, r1
 8000a56:	d108      	bne.n	8000a6a <__aeabi_fmul+0x15e>
 8000a58:	ea80 0001 	eor.w	r0, r0, r1
 8000a5c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000a60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a68:	4770      	bx	lr
 8000a6a:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a6e:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000a72:	4770      	bx	lr

08000a74 <__aeabi_fdiv>:
 8000a74:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000a78:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000a7c:	bf1e      	ittt	ne
 8000a7e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000a82:	ea92 0f0c 	teqne	r2, ip
 8000a86:	ea93 0f0c 	teqne	r3, ip
 8000a8a:	d069      	beq.n	8000b60 <__aeabi_fdiv+0xec>
 8000a8c:	eba2 0203 	sub.w	r2, r2, r3
 8000a90:	ea80 0c01 	eor.w	ip, r0, r1
 8000a94:	0249      	lsls	r1, r1, #9
 8000a96:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000a9a:	d037      	beq.n	8000b0c <__aeabi_fdiv+0x98>
 8000a9c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000aa0:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000aa4:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000aa8:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000aac:	428b      	cmp	r3, r1
 8000aae:	bf38      	it	cc
 8000ab0:	005b      	lslcc	r3, r3, #1
 8000ab2:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000ab6:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000aba:	428b      	cmp	r3, r1
 8000abc:	bf24      	itt	cs
 8000abe:	1a5b      	subcs	r3, r3, r1
 8000ac0:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ac4:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ac8:	bf24      	itt	cs
 8000aca:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ace:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ad2:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ad6:	bf24      	itt	cs
 8000ad8:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000adc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ae0:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ae4:	bf24      	itt	cs
 8000ae6:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000aea:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000aee:	011b      	lsls	r3, r3, #4
 8000af0:	bf18      	it	ne
 8000af2:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000af6:	d1e0      	bne.n	8000aba <__aeabi_fdiv+0x46>
 8000af8:	2afd      	cmp	r2, #253	; 0xfd
 8000afa:	f63f af50 	bhi.w	800099e <__aeabi_fmul+0x92>
 8000afe:	428b      	cmp	r3, r1
 8000b00:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b04:	bf08      	it	eq
 8000b06:	f020 0001 	biceq.w	r0, r0, #1
 8000b0a:	4770      	bx	lr
 8000b0c:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000b10:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b14:	327f      	adds	r2, #127	; 0x7f
 8000b16:	bfc2      	ittt	gt
 8000b18:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000b1c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000b20:	4770      	bxgt	lr
 8000b22:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b26:	f04f 0300 	mov.w	r3, #0
 8000b2a:	3a01      	subs	r2, #1
 8000b2c:	e737      	b.n	800099e <__aeabi_fmul+0x92>
 8000b2e:	f092 0f00 	teq	r2, #0
 8000b32:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000b36:	bf02      	ittt	eq
 8000b38:	0040      	lsleq	r0, r0, #1
 8000b3a:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000b3e:	3a01      	subeq	r2, #1
 8000b40:	d0f9      	beq.n	8000b36 <__aeabi_fdiv+0xc2>
 8000b42:	ea40 000c 	orr.w	r0, r0, ip
 8000b46:	f093 0f00 	teq	r3, #0
 8000b4a:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b4e:	bf02      	ittt	eq
 8000b50:	0049      	lsleq	r1, r1, #1
 8000b52:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000b56:	3b01      	subeq	r3, #1
 8000b58:	d0f9      	beq.n	8000b4e <__aeabi_fdiv+0xda>
 8000b5a:	ea41 010c 	orr.w	r1, r1, ip
 8000b5e:	e795      	b.n	8000a8c <__aeabi_fdiv+0x18>
 8000b60:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000b64:	ea92 0f0c 	teq	r2, ip
 8000b68:	d108      	bne.n	8000b7c <__aeabi_fdiv+0x108>
 8000b6a:	0242      	lsls	r2, r0, #9
 8000b6c:	f47f af7d 	bne.w	8000a6a <__aeabi_fmul+0x15e>
 8000b70:	ea93 0f0c 	teq	r3, ip
 8000b74:	f47f af70 	bne.w	8000a58 <__aeabi_fmul+0x14c>
 8000b78:	4608      	mov	r0, r1
 8000b7a:	e776      	b.n	8000a6a <__aeabi_fmul+0x15e>
 8000b7c:	ea93 0f0c 	teq	r3, ip
 8000b80:	d104      	bne.n	8000b8c <__aeabi_fdiv+0x118>
 8000b82:	024b      	lsls	r3, r1, #9
 8000b84:	f43f af4c 	beq.w	8000a20 <__aeabi_fmul+0x114>
 8000b88:	4608      	mov	r0, r1
 8000b8a:	e76e      	b.n	8000a6a <__aeabi_fmul+0x15e>
 8000b8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000b90:	bf18      	it	ne
 8000b92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000b96:	d1ca      	bne.n	8000b2e <__aeabi_fdiv+0xba>
 8000b98:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000b9c:	f47f af5c 	bne.w	8000a58 <__aeabi_fmul+0x14c>
 8000ba0:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000ba4:	f47f af3c 	bne.w	8000a20 <__aeabi_fmul+0x114>
 8000ba8:	e75f      	b.n	8000a6a <__aeabi_fmul+0x15e>
 8000baa:	bf00      	nop

08000bac <__aeabi_uldivmod>:
 8000bac:	b953      	cbnz	r3, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bae:	b94a      	cbnz	r2, 8000bc4 <__aeabi_uldivmod+0x18>
 8000bb0:	2900      	cmp	r1, #0
 8000bb2:	bf08      	it	eq
 8000bb4:	2800      	cmpeq	r0, #0
 8000bb6:	bf1c      	itt	ne
 8000bb8:	f04f 31ff 	movne.w	r1, #4294967295
 8000bbc:	f04f 30ff 	movne.w	r0, #4294967295
 8000bc0:	f000 b976 	b.w	8000eb0 <__aeabi_idiv0>
 8000bc4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bcc:	f000 f806 	bl	8000bdc <__udivmoddi4>
 8000bd0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd8:	b004      	add	sp, #16
 8000bda:	4770      	bx	lr

08000bdc <__udivmoddi4>:
 8000bdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000be0:	9e08      	ldr	r6, [sp, #32]
 8000be2:	460d      	mov	r5, r1
 8000be4:	4604      	mov	r4, r0
 8000be6:	4688      	mov	r8, r1
 8000be8:	2b00      	cmp	r3, #0
 8000bea:	d14d      	bne.n	8000c88 <__udivmoddi4+0xac>
 8000bec:	428a      	cmp	r2, r1
 8000bee:	4694      	mov	ip, r2
 8000bf0:	d968      	bls.n	8000cc4 <__udivmoddi4+0xe8>
 8000bf2:	fab2 f282 	clz	r2, r2
 8000bf6:	b152      	cbz	r2, 8000c0e <__udivmoddi4+0x32>
 8000bf8:	fa01 f302 	lsl.w	r3, r1, r2
 8000bfc:	f1c2 0120 	rsb	r1, r2, #32
 8000c00:	fa20 f101 	lsr.w	r1, r0, r1
 8000c04:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c08:	ea41 0803 	orr.w	r8, r1, r3
 8000c0c:	4094      	lsls	r4, r2
 8000c0e:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000c12:	fbb8 f7f1 	udiv	r7, r8, r1
 8000c16:	fa1f fe8c 	uxth.w	lr, ip
 8000c1a:	fb01 8817 	mls	r8, r1, r7, r8
 8000c1e:	fb07 f00e 	mul.w	r0, r7, lr
 8000c22:	0c23      	lsrs	r3, r4, #16
 8000c24:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c28:	4298      	cmp	r0, r3
 8000c2a:	d90a      	bls.n	8000c42 <__udivmoddi4+0x66>
 8000c2c:	eb1c 0303 	adds.w	r3, ip, r3
 8000c30:	f107 35ff 	add.w	r5, r7, #4294967295
 8000c34:	f080 811e 	bcs.w	8000e74 <__udivmoddi4+0x298>
 8000c38:	4298      	cmp	r0, r3
 8000c3a:	f240 811b 	bls.w	8000e74 <__udivmoddi4+0x298>
 8000c3e:	3f02      	subs	r7, #2
 8000c40:	4463      	add	r3, ip
 8000c42:	1a1b      	subs	r3, r3, r0
 8000c44:	fbb3 f0f1 	udiv	r0, r3, r1
 8000c48:	fb01 3310 	mls	r3, r1, r0, r3
 8000c4c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c50:	b2a4      	uxth	r4, r4
 8000c52:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c56:	45a6      	cmp	lr, r4
 8000c58:	d90a      	bls.n	8000c70 <__udivmoddi4+0x94>
 8000c5a:	eb1c 0404 	adds.w	r4, ip, r4
 8000c5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c62:	f080 8109 	bcs.w	8000e78 <__udivmoddi4+0x29c>
 8000c66:	45a6      	cmp	lr, r4
 8000c68:	f240 8106 	bls.w	8000e78 <__udivmoddi4+0x29c>
 8000c6c:	4464      	add	r4, ip
 8000c6e:	3802      	subs	r0, #2
 8000c70:	2100      	movs	r1, #0
 8000c72:	eba4 040e 	sub.w	r4, r4, lr
 8000c76:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c7a:	b11e      	cbz	r6, 8000c84 <__udivmoddi4+0xa8>
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	40d4      	lsrs	r4, r2
 8000c80:	e9c6 4300 	strd	r4, r3, [r6]
 8000c84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c88:	428b      	cmp	r3, r1
 8000c8a:	d908      	bls.n	8000c9e <__udivmoddi4+0xc2>
 8000c8c:	2e00      	cmp	r6, #0
 8000c8e:	f000 80ee 	beq.w	8000e6e <__udivmoddi4+0x292>
 8000c92:	2100      	movs	r1, #0
 8000c94:	e9c6 0500 	strd	r0, r5, [r6]
 8000c98:	4608      	mov	r0, r1
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	fab3 f183 	clz	r1, r3
 8000ca2:	2900      	cmp	r1, #0
 8000ca4:	d14a      	bne.n	8000d3c <__udivmoddi4+0x160>
 8000ca6:	42ab      	cmp	r3, r5
 8000ca8:	d302      	bcc.n	8000cb0 <__udivmoddi4+0xd4>
 8000caa:	4282      	cmp	r2, r0
 8000cac:	f200 80fc 	bhi.w	8000ea8 <__udivmoddi4+0x2cc>
 8000cb0:	1a84      	subs	r4, r0, r2
 8000cb2:	eb65 0303 	sbc.w	r3, r5, r3
 8000cb6:	2001      	movs	r0, #1
 8000cb8:	4698      	mov	r8, r3
 8000cba:	2e00      	cmp	r6, #0
 8000cbc:	d0e2      	beq.n	8000c84 <__udivmoddi4+0xa8>
 8000cbe:	e9c6 4800 	strd	r4, r8, [r6]
 8000cc2:	e7df      	b.n	8000c84 <__udivmoddi4+0xa8>
 8000cc4:	b902      	cbnz	r2, 8000cc8 <__udivmoddi4+0xec>
 8000cc6:	deff      	udf	#255	; 0xff
 8000cc8:	fab2 f282 	clz	r2, r2
 8000ccc:	2a00      	cmp	r2, #0
 8000cce:	f040 8091 	bne.w	8000df4 <__udivmoddi4+0x218>
 8000cd2:	eba1 000c 	sub.w	r0, r1, ip
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cdc:	fa1f fe8c 	uxth.w	lr, ip
 8000ce0:	fbb0 f3f7 	udiv	r3, r0, r7
 8000ce4:	fb07 0013 	mls	r0, r7, r3, r0
 8000ce8:	0c25      	lsrs	r5, r4, #16
 8000cea:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000cee:	fb0e f003 	mul.w	r0, lr, r3
 8000cf2:	42a8      	cmp	r0, r5
 8000cf4:	d908      	bls.n	8000d08 <__udivmoddi4+0x12c>
 8000cf6:	eb1c 0505 	adds.w	r5, ip, r5
 8000cfa:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfe:	d202      	bcs.n	8000d06 <__udivmoddi4+0x12a>
 8000d00:	42a8      	cmp	r0, r5
 8000d02:	f200 80ce 	bhi.w	8000ea2 <__udivmoddi4+0x2c6>
 8000d06:	4643      	mov	r3, r8
 8000d08:	1a2d      	subs	r5, r5, r0
 8000d0a:	fbb5 f0f7 	udiv	r0, r5, r7
 8000d0e:	fb07 5510 	mls	r5, r7, r0, r5
 8000d12:	fb0e fe00 	mul.w	lr, lr, r0
 8000d16:	b2a4      	uxth	r4, r4
 8000d18:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d1c:	45a6      	cmp	lr, r4
 8000d1e:	d908      	bls.n	8000d32 <__udivmoddi4+0x156>
 8000d20:	eb1c 0404 	adds.w	r4, ip, r4
 8000d24:	f100 35ff 	add.w	r5, r0, #4294967295
 8000d28:	d202      	bcs.n	8000d30 <__udivmoddi4+0x154>
 8000d2a:	45a6      	cmp	lr, r4
 8000d2c:	f200 80b6 	bhi.w	8000e9c <__udivmoddi4+0x2c0>
 8000d30:	4628      	mov	r0, r5
 8000d32:	eba4 040e 	sub.w	r4, r4, lr
 8000d36:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d3a:	e79e      	b.n	8000c7a <__udivmoddi4+0x9e>
 8000d3c:	f1c1 0720 	rsb	r7, r1, #32
 8000d40:	408b      	lsls	r3, r1
 8000d42:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d46:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4a:	fa25 fa07 	lsr.w	sl, r5, r7
 8000d4e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d52:	fbba f8f9 	udiv	r8, sl, r9
 8000d56:	fa20 f307 	lsr.w	r3, r0, r7
 8000d5a:	fb09 aa18 	mls	sl, r9, r8, sl
 8000d5e:	408d      	lsls	r5, r1
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	431d      	orrs	r5, r3
 8000d66:	fa00 f301 	lsl.w	r3, r0, r1
 8000d6a:	fb08 f00e 	mul.w	r0, r8, lr
 8000d6e:	0c2c      	lsrs	r4, r5, #16
 8000d70:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000d74:	42a0      	cmp	r0, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	d90b      	bls.n	8000d94 <__udivmoddi4+0x1b8>
 8000d7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d80:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d84:	f080 8088 	bcs.w	8000e98 <__udivmoddi4+0x2bc>
 8000d88:	42a0      	cmp	r0, r4
 8000d8a:	f240 8085 	bls.w	8000e98 <__udivmoddi4+0x2bc>
 8000d8e:	f1a8 0802 	sub.w	r8, r8, #2
 8000d92:	4464      	add	r4, ip
 8000d94:	1a24      	subs	r4, r4, r0
 8000d96:	fbb4 f0f9 	udiv	r0, r4, r9
 8000d9a:	fb09 4410 	mls	r4, r9, r0, r4
 8000d9e:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da2:	b2ad      	uxth	r5, r5
 8000da4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da8:	45a6      	cmp	lr, r4
 8000daa:	d908      	bls.n	8000dbe <__udivmoddi4+0x1e2>
 8000dac:	eb1c 0404 	adds.w	r4, ip, r4
 8000db0:	f100 35ff 	add.w	r5, r0, #4294967295
 8000db4:	d26c      	bcs.n	8000e90 <__udivmoddi4+0x2b4>
 8000db6:	45a6      	cmp	lr, r4
 8000db8:	d96a      	bls.n	8000e90 <__udivmoddi4+0x2b4>
 8000dba:	3802      	subs	r0, #2
 8000dbc:	4464      	add	r4, ip
 8000dbe:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dc2:	fba0 9502 	umull	r9, r5, r0, r2
 8000dc6:	eba4 040e 	sub.w	r4, r4, lr
 8000dca:	42ac      	cmp	r4, r5
 8000dcc:	46c8      	mov	r8, r9
 8000dce:	46ae      	mov	lr, r5
 8000dd0:	d356      	bcc.n	8000e80 <__udivmoddi4+0x2a4>
 8000dd2:	d053      	beq.n	8000e7c <__udivmoddi4+0x2a0>
 8000dd4:	2e00      	cmp	r6, #0
 8000dd6:	d069      	beq.n	8000eac <__udivmoddi4+0x2d0>
 8000dd8:	ebb3 0208 	subs.w	r2, r3, r8
 8000ddc:	eb64 040e 	sbc.w	r4, r4, lr
 8000de0:	fa22 f301 	lsr.w	r3, r2, r1
 8000de4:	fa04 f707 	lsl.w	r7, r4, r7
 8000de8:	431f      	orrs	r7, r3
 8000dea:	40cc      	lsrs	r4, r1
 8000dec:	e9c6 7400 	strd	r7, r4, [r6]
 8000df0:	2100      	movs	r1, #0
 8000df2:	e747      	b.n	8000c84 <__udivmoddi4+0xa8>
 8000df4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000df8:	f1c2 0120 	rsb	r1, r2, #32
 8000dfc:	fa25 f301 	lsr.w	r3, r5, r1
 8000e00:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e04:	fa20 f101 	lsr.w	r1, r0, r1
 8000e08:	4095      	lsls	r5, r2
 8000e0a:	430d      	orrs	r5, r1
 8000e0c:	fbb3 f1f7 	udiv	r1, r3, r7
 8000e10:	fb07 3311 	mls	r3, r7, r1, r3
 8000e14:	fa1f fe8c 	uxth.w	lr, ip
 8000e18:	0c28      	lsrs	r0, r5, #16
 8000e1a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e1e:	fb01 f30e 	mul.w	r3, r1, lr
 8000e22:	4283      	cmp	r3, r0
 8000e24:	fa04 f402 	lsl.w	r4, r4, r2
 8000e28:	d908      	bls.n	8000e3c <__udivmoddi4+0x260>
 8000e2a:	eb1c 0000 	adds.w	r0, ip, r0
 8000e2e:	f101 38ff 	add.w	r8, r1, #4294967295
 8000e32:	d22f      	bcs.n	8000e94 <__udivmoddi4+0x2b8>
 8000e34:	4283      	cmp	r3, r0
 8000e36:	d92d      	bls.n	8000e94 <__udivmoddi4+0x2b8>
 8000e38:	3902      	subs	r1, #2
 8000e3a:	4460      	add	r0, ip
 8000e3c:	1ac0      	subs	r0, r0, r3
 8000e3e:	fbb0 f3f7 	udiv	r3, r0, r7
 8000e42:	fb07 0013 	mls	r0, r7, r3, r0
 8000e46:	b2ad      	uxth	r5, r5
 8000e48:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000e4c:	fb03 f00e 	mul.w	r0, r3, lr
 8000e50:	42a8      	cmp	r0, r5
 8000e52:	d908      	bls.n	8000e66 <__udivmoddi4+0x28a>
 8000e54:	eb1c 0505 	adds.w	r5, ip, r5
 8000e58:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e5c:	d216      	bcs.n	8000e8c <__udivmoddi4+0x2b0>
 8000e5e:	42a8      	cmp	r0, r5
 8000e60:	d914      	bls.n	8000e8c <__udivmoddi4+0x2b0>
 8000e62:	3b02      	subs	r3, #2
 8000e64:	4465      	add	r5, ip
 8000e66:	1a28      	subs	r0, r5, r0
 8000e68:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e6c:	e738      	b.n	8000ce0 <__udivmoddi4+0x104>
 8000e6e:	4631      	mov	r1, r6
 8000e70:	4630      	mov	r0, r6
 8000e72:	e707      	b.n	8000c84 <__udivmoddi4+0xa8>
 8000e74:	462f      	mov	r7, r5
 8000e76:	e6e4      	b.n	8000c42 <__udivmoddi4+0x66>
 8000e78:	4618      	mov	r0, r3
 8000e7a:	e6f9      	b.n	8000c70 <__udivmoddi4+0x94>
 8000e7c:	454b      	cmp	r3, r9
 8000e7e:	d2a9      	bcs.n	8000dd4 <__udivmoddi4+0x1f8>
 8000e80:	ebb9 0802 	subs.w	r8, r9, r2
 8000e84:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e88:	3801      	subs	r0, #1
 8000e8a:	e7a3      	b.n	8000dd4 <__udivmoddi4+0x1f8>
 8000e8c:	4643      	mov	r3, r8
 8000e8e:	e7ea      	b.n	8000e66 <__udivmoddi4+0x28a>
 8000e90:	4628      	mov	r0, r5
 8000e92:	e794      	b.n	8000dbe <__udivmoddi4+0x1e2>
 8000e94:	4641      	mov	r1, r8
 8000e96:	e7d1      	b.n	8000e3c <__udivmoddi4+0x260>
 8000e98:	46d0      	mov	r8, sl
 8000e9a:	e77b      	b.n	8000d94 <__udivmoddi4+0x1b8>
 8000e9c:	4464      	add	r4, ip
 8000e9e:	3802      	subs	r0, #2
 8000ea0:	e747      	b.n	8000d32 <__udivmoddi4+0x156>
 8000ea2:	3b02      	subs	r3, #2
 8000ea4:	4465      	add	r5, ip
 8000ea6:	e72f      	b.n	8000d08 <__udivmoddi4+0x12c>
 8000ea8:	4608      	mov	r0, r1
 8000eaa:	e706      	b.n	8000cba <__udivmoddi4+0xde>
 8000eac:	4631      	mov	r1, r6
 8000eae:	e6e9      	b.n	8000c84 <__udivmoddi4+0xa8>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000eb4:	b530      	push	{r4, r5, lr}

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000eb6:	2400      	movs	r4, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000eb8:	4815      	ldr	r0, [pc, #84]	; (8000f10 <MX_ADC_Init+0x5c>)
 8000eba:	4b16      	ldr	r3, [pc, #88]	; (8000f14 <MX_ADC_Init+0x60>)
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
  hadc.Init.ContinuousConvMode = DISABLE;
  hadc.Init.NbrOfConversion = 1;
 8000ebc:	2501      	movs	r5, #1
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ebe:	e9c0 3400 	strd	r3, r4, [r0]
  hadc.Init.DiscontinuousConvMode = DISABLE;
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ec2:	2310      	movs	r3, #16
{
 8000ec4:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8000ec6:	e9cd 4401 	strd	r4, r4, [sp, #4]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eca:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000ece:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8000ed2:	e9c0 4406 	strd	r4, r4, [r0, #24]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ed6:	e9c0 340d 	strd	r3, r4, [r0, #52]	; 0x34
  ADC_ChannelConfTypeDef sConfig = {0};
 8000eda:	9403      	str	r4, [sp, #12]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8000edc:	6204      	str	r4, [r0, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000ede:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 8000ee2:	6285      	str	r5, [r0, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000ee4:	f880 402c 	strb.w	r4, [r0, #44]	; 0x2c
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000ee8:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000eec:	f000 fbd6 	bl	800169c <HAL_ADC_Init>
 8000ef0:	b108      	cbz	r0, 8000ef6 <MX_ADC_Init+0x42>
  {
    Error_Handler();
 8000ef2:	f000 f9b3 	bl	800125c <Error_Handler>
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000ef6:	4806      	ldr	r0, [pc, #24]	; (8000f10 <MX_ADC_Init+0x5c>)
 8000ef8:	a901      	add	r1, sp, #4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000efa:	e9cd 4501 	strd	r4, r5, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8000efe:	9403      	str	r4, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f00:	f000 fce8 	bl	80018d4 <HAL_ADC_ConfigChannel>
 8000f04:	b108      	cbz	r0, 8000f0a <MX_ADC_Init+0x56>
  {
    Error_Handler();
 8000f06:	f000 f9a9 	bl	800125c <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000f0a:	b005      	add	sp, #20
 8000f0c:	bd30      	pop	{r4, r5, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000030 	.word	0x20000030
 8000f14:	40012400 	.word	0x40012400

08000f18 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f18:	b510      	push	{r4, lr}
 8000f1a:	4604      	mov	r4, r0
 8000f1c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1e:	2214      	movs	r2, #20
 8000f20:	2100      	movs	r1, #0
 8000f22:	a803      	add	r0, sp, #12
 8000f24:	f003 ff9e 	bl	8004e64 <memset>
  if(adcHandle->Instance==ADC1)
 8000f28:	6822      	ldr	r2, [r4, #0]
 8000f2a:	4b10      	ldr	r3, [pc, #64]	; (8000f6c <HAL_ADC_MspInit+0x54>)
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d11b      	bne.n	8000f68 <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f30:	f503 338a 	add.w	r3, r3, #70656	; 0x11400
 8000f34:	6a1a      	ldr	r2, [r3, #32]
    PA0-WKUP1     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = ADC_VBAT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(ADC_VBAT_GPIO_Port, &GPIO_InitStruct);
 8000f36:	480e      	ldr	r0, [pc, #56]	; (8000f70 <HAL_ADC_MspInit+0x58>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f3c:	621a      	str	r2, [r3, #32]
 8000f3e:	6a1a      	ldr	r2, [r3, #32]
    HAL_GPIO_Init(ADC_VBAT_GPIO_Port, &GPIO_InitStruct);
 8000f40:	a903      	add	r1, sp, #12
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f42:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000f46:	9201      	str	r2, [sp, #4]
 8000f48:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4a:	69da      	ldr	r2, [r3, #28]
 8000f4c:	f042 0201 	orr.w	r2, r2, #1
 8000f50:	61da      	str	r2, [r3, #28]
 8000f52:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f54:	2201      	movs	r2, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f56:	f003 0301 	and.w	r3, r3, #1
 8000f5a:	9302      	str	r3, [sp, #8]
 8000f5c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f5e:	2303      	movs	r3, #3
 8000f60:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(ADC_VBAT_GPIO_Port, &GPIO_InitStruct);
 8000f64:	f000 fea4 	bl	8001cb0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f68:	b008      	add	sp, #32
 8000f6a:	bd10      	pop	{r4, pc}
 8000f6c:	40012400 	.word	0x40012400
 8000f70:	40020000 	.word	0x40020000

08000f74 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f74:	4b0a      	ldr	r3, [pc, #40]	; (8000fa0 <MX_DMA_Init+0x2c>)
{
 8000f76:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f78:	69da      	ldr	r2, [r3, #28]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000f7a:	2010      	movs	r0, #16
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f7c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000f80:	61da      	str	r2, [r3, #28]
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000f82:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f84:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000f86:	4611      	mov	r1, r2
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f8c:	9301      	str	r3, [sp, #4]
 8000f8e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 0, 0);
 8000f90:	f000 fdd2 	bl	8001b38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000f94:	2010      	movs	r0, #16

}
 8000f96:	b003      	add	sp, #12
 8000f98:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000f9c:	f000 bdfe 	b.w	8001b9c <HAL_NVIC_EnableIRQ>
 8000fa0:	40023800 	.word	0x40023800

08000fa4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fa8:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000faa:	2214      	movs	r2, #20
 8000fac:	2100      	movs	r1, #0
 8000fae:	a803      	add	r0, sp, #12
 8000fb0:	f003 ff58 	bl	8004e64 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb4:	4b4f      	ldr	r3, [pc, #316]	; (80010f4 <MX_GPIO_Init+0x150>)
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, COL0_Pin|COL1_Pin|COL2_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 8000fb6:	4d50      	ldr	r5, [pc, #320]	; (80010f8 <MX_GPIO_Init+0x154>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fb8:	69da      	ldr	r2, [r3, #28]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWRKEY_GPIO_Port, PWRKEY_Pin, GPIO_PIN_RESET);
 8000fba:	4f50      	ldr	r7, [pc, #320]	; (80010fc <MX_GPIO_Init+0x158>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fbc:	f042 0201 	orr.w	r2, r2, #1
 8000fc0:	61da      	str	r2, [r3, #28]
 8000fc2:	69da      	ldr	r2, [r3, #28]
  HAL_GPIO_WritePin(GPIOB, COL0_Pin|COL1_Pin|COL2_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 8000fc4:	4628      	mov	r0, r5
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc6:	f002 0201 	and.w	r2, r2, #1
 8000fca:	9201      	str	r2, [sp, #4]
 8000fcc:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fce:	69da      	ldr	r2, [r3, #28]
  HAL_GPIO_WritePin(GPIOB, COL0_Pin|COL1_Pin|COL2_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 8000fd0:	f247 0140 	movw	r1, #28736	; 0x7040
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fd4:	f042 0202 	orr.w	r2, r2, #2
 8000fd8:	61da      	str	r2, [r3, #28]
 8000fda:	69db      	ldr	r3, [r3, #28]
  HAL_GPIO_WritePin(GPIOB, COL0_Pin|COL1_Pin|COL2_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 8000fdc:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fde:	f003 0302 	and.w	r3, r3, #2
 8000fe2:	9302      	str	r3, [sp, #8]
 8000fe4:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, COL0_Pin|COL1_Pin|COL2_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 8000fe6:	f000 ff2f 	bl	8001e48 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PWRKEY_GPIO_Port, PWRKEY_Pin, GPIO_PIN_RESET);
 8000fea:	2200      	movs	r2, #0
 8000fec:	4638      	mov	r0, r7
 8000fee:	f44f 4100 	mov.w	r1, #32768	; 0x8000

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SENS0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff2:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(PWRKEY_GPIO_Port, PWRKEY_Pin, GPIO_PIN_RESET);
 8000ff4:	f000 ff28 	bl	8001e48 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ff8:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(SENS0_GPIO_Port, &GPIO_InitStruct);
 8000ffa:	4638      	mov	r0, r7
 8000ffc:	a903      	add	r1, sp, #12

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SENS1_Pin|SENS2_Pin|SENS3_Pin|SENS4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000ffe:	f44f 1688 	mov.w	r6, #1114112	; 0x110000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001002:	e9cd 3403 	strd	r3, r4, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001006:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(SENS0_GPIO_Port, &GPIO_InitStruct);
 8001008:	f000 fe52 	bl	8001cb0 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800100c:	23f0      	movs	r3, #240	; 0xf0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800100e:	4638      	mov	r0, r7
 8001010:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001012:	e9cd 3603 	strd	r3, r6, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001016:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001018:	f000 fe4a 	bl	8001cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SENS5_Pin|SENS6_Pin|SENS7_Pin|SENS8_Pin
 800101c:	f640 4307 	movw	r3, #3079	; 0xc07
                          |SENS9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001020:	4628      	mov	r0, r5
 8001022:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001024:	e9cd 3603 	strd	r3, r6, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001028:	9405      	str	r4, [sp, #20]

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = COL0_Pin|COL1_Pin|COL2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800102a:	2601      	movs	r6, #1
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800102c:	f000 fe40 	bl	8001cb0 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001030:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001034:	e9cd 3603 	strd	r3, r6, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001038:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ROW0_Pin;
 800103a:	f44f 4800 	mov.w	r8, #32768	; 0x8000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103e:	4628      	mov	r0, r5
 8001040:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001042:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001046:	f000 fe33 	bl	8001cb0 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(ROW0_GPIO_Port, &GPIO_InitStruct);
 800104a:	4628      	mov	r0, r5
 800104c:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800104e:	e9cd 8403 	strd	r8, r4, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001052:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(ROW0_GPIO_Port, &GPIO_InitStruct);
 8001054:	f000 fe2c 	bl	8001cb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ROW1_Pin|ROW2_Pin|ROW3_Pin;
 8001058:	f44f 63e0 	mov.w	r3, #1792	; 0x700
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800105c:	4638      	mov	r0, r7
 800105e:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001060:	e9cd 3403 	strd	r3, r4, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001064:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001066:	f000 fe23 	bl	8001cb0 <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWRKEY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(PWRKEY_GPIO_Port, &GPIO_InitStruct);
 800106a:	4638      	mov	r0, r7
 800106c:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800106e:	e9cd 8603 	strd	r8, r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001072:	e9cd 4405 	strd	r4, r4, [sp, #20]
  HAL_GPIO_Init(PWRKEY_GPIO_Port, &GPIO_InitStruct);
 8001076:	f000 fe1b 	bl	8001cb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800107a:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800107c:	4628      	mov	r0, r5
 800107e:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001080:	e9cd 3603 	strd	r3, r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001084:	e9cd 4405 	strd	r4, r4, [sp, #20]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001088:	f000 fe12 	bl	8001cb0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 800108c:	4622      	mov	r2, r4
 800108e:	4621      	mov	r1, r4
 8001090:	2006      	movs	r0, #6
 8001092:	f000 fd51 	bl	8001b38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001096:	2006      	movs	r0, #6
 8001098:	f000 fd80 	bl	8001b9c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 800109c:	4622      	mov	r2, r4
 800109e:	4621      	mov	r1, r4
 80010a0:	2007      	movs	r0, #7
 80010a2:	f000 fd49 	bl	8001b38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80010a6:	2007      	movs	r0, #7
 80010a8:	f000 fd78 	bl	8001b9c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80010ac:	4622      	mov	r2, r4
 80010ae:	4621      	mov	r1, r4
 80010b0:	2008      	movs	r0, #8
 80010b2:	f000 fd41 	bl	8001b38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80010b6:	2008      	movs	r0, #8
 80010b8:	f000 fd70 	bl	8001b9c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80010bc:	4622      	mov	r2, r4
 80010be:	4621      	mov	r1, r4
 80010c0:	200a      	movs	r0, #10
 80010c2:	f000 fd39 	bl	8001b38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80010c6:	200a      	movs	r0, #10
 80010c8:	f000 fd68 	bl	8001b9c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80010cc:	4622      	mov	r2, r4
 80010ce:	4621      	mov	r1, r4
 80010d0:	2017      	movs	r0, #23
 80010d2:	f000 fd31 	bl	8001b38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80010d6:	2017      	movs	r0, #23
 80010d8:	f000 fd60 	bl	8001b9c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010dc:	4622      	mov	r2, r4
 80010de:	4621      	mov	r1, r4
 80010e0:	2028      	movs	r0, #40	; 0x28
 80010e2:	f000 fd29 	bl	8001b38 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010e6:	2028      	movs	r0, #40	; 0x28
 80010e8:	f000 fd58 	bl	8001b9c <HAL_NVIC_EnableIRQ>

}
 80010ec:	b008      	add	sp, #32
 80010ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80010f2:	bf00      	nop
 80010f4:	40023800 	.word	0x40023800
 80010f8:	40020400 	.word	0x40020400
 80010fc:	40020000 	.word	0x40020000

08001100 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001100:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001102:	480b      	ldr	r0, [pc, #44]	; (8001130 <MX_I2C1_Init+0x30>)
  hi2c1.Init.ClockSpeed = 100000;
 8001104:	4a0b      	ldr	r2, [pc, #44]	; (8001134 <MX_I2C1_Init+0x34>)
 8001106:	4b0c      	ldr	r3, [pc, #48]	; (8001138 <MX_I2C1_Init+0x38>)
 8001108:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800110c:	2300      	movs	r3, #0
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800110e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 8001112:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001116:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800111a:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800111e:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001120:	f000 ffa6 	bl	8002070 <HAL_I2C_Init>
 8001124:	b118      	cbz	r0, 800112e <MX_I2C1_Init+0x2e>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001126:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800112a:	f000 b897 	b.w	800125c <Error_Handler>
}
 800112e:	bd08      	pop	{r3, pc}
 8001130:	20000084 	.word	0x20000084
 8001134:	40005400 	.word	0x40005400
 8001138:	000186a0 	.word	0x000186a0

0800113c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800113c:	b510      	push	{r4, lr}
 800113e:	4604      	mov	r4, r0
 8001140:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001142:	2214      	movs	r2, #20
 8001144:	2100      	movs	r1, #0
 8001146:	a803      	add	r0, sp, #12
 8001148:	f003 fe8c 	bl	8004e64 <memset>
  if(i2cHandle->Instance==I2C1)
 800114c:	6822      	ldr	r2, [r4, #0]
 800114e:	4b12      	ldr	r3, [pc, #72]	; (8001198 <HAL_I2C_MspInit+0x5c>)
 8001150:	429a      	cmp	r2, r3
 8001152:	d11f      	bne.n	8001194 <HAL_I2C_MspInit+0x58>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001154:	4c11      	ldr	r4, [pc, #68]	; (800119c <HAL_I2C_MspInit+0x60>)
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001156:	f44f 7240 	mov.w	r2, #768	; 0x300
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800115a:	69e3      	ldr	r3, [r4, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800115c:	2103      	movs	r1, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800115e:	f043 0302 	orr.w	r3, r3, #2
 8001162:	61e3      	str	r3, [r4, #28]
 8001164:	69e3      	ldr	r3, [r4, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001166:	480e      	ldr	r0, [pc, #56]	; (80011a0 <HAL_I2C_MspInit+0x64>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001168:	f003 0302 	and.w	r3, r3, #2
 800116c:	9301      	str	r3, [sp, #4]
 800116e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001170:	2312      	movs	r3, #18
 8001172:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001176:	2304      	movs	r3, #4
 8001178:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117c:	a903      	add	r1, sp, #12
 800117e:	f000 fd97 	bl	8001cb0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001182:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001184:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001188:	6263      	str	r3, [r4, #36]	; 0x24
 800118a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800118c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001190:	9302      	str	r3, [sp, #8]
 8001192:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001194:	b008      	add	sp, #32
 8001196:	bd10      	pop	{r4, pc}
 8001198:	40005400 	.word	0x40005400
 800119c:	40023800 	.word	0x40023800
 80011a0:	40020400 	.word	0x40020400

080011a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011a4:	b510      	push	{r4, lr}
 80011a6:	b092      	sub	sp, #72	; 0x48
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011a8:	2220      	movs	r2, #32
 80011aa:	2100      	movs	r1, #0
 80011ac:	a806      	add	r0, sp, #24
 80011ae:	f003 fe59 	bl	8004e64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011b2:	2214      	movs	r2, #20
 80011b4:	2100      	movs	r1, #0
 80011b6:	4668      	mov	r0, sp
 80011b8:	f003 fe54 	bl	8004e64 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011bc:	4a15      	ldr	r2, [pc, #84]	; (8001214 <SystemClock_Config+0x70>)
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80011be:	2100      	movs	r1, #0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011c0:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011c2:	2401      	movs	r4, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011c4:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80011c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011cc:	6013      	str	r3, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011ce:	2302      	movs	r3, #2
 80011d0:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011d2:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80011d4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011d8:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80011da:	e9cd 130f 	strd	r1, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 80011de:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011e2:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011e4:	e9cd 4208 	strd	r4, r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 80011e8:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ea:	f001 fa71 	bl	80026d0 <HAL_RCC_OscConfig>
 80011ee:	b108      	cbz	r0, 80011f4 <SystemClock_Config+0x50>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f0:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011f2:	e7fe      	b.n	80011f2 <SystemClock_Config+0x4e>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011f4:	220f      	movs	r2, #15
 80011f6:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80011f8:	e9cd 0002 	strd	r0, r0, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011fc:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80011fe:	4621      	mov	r1, r4
 8001200:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001202:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001206:	f001 fcb5 	bl	8002b74 <HAL_RCC_ClockConfig>
 800120a:	b108      	cbz	r0, 8001210 <SystemClock_Config+0x6c>
 800120c:	b672      	cpsid	i
  while (1)
 800120e:	e7fe      	b.n	800120e <SystemClock_Config+0x6a>
}
 8001210:	b012      	add	sp, #72	; 0x48
 8001212:	bd10      	pop	{r4, pc}
 8001214:	40007000 	.word	0x40007000

08001218 <main>:
{
 8001218:	b508      	push	{r3, lr}
  HAL_Init();
 800121a:	f000 fa1e 	bl	800165a <HAL_Init>
  SystemClock_Config();
 800121e:	f7ff ffc1 	bl	80011a4 <SystemClock_Config>
  MX_GPIO_Init();
 8001222:	f7ff febf 	bl	8000fa4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001226:	f7ff fea5 	bl	8000f74 <MX_DMA_Init>
  MX_ADC_Init();
 800122a:	f7ff fe43 	bl	8000eb4 <MX_ADC_Init>
  MX_TIM4_Init();
 800122e:	f000 f94b 	bl	80014c8 <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8001232:	f000 f983 	bl	800153c <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001236:	f7ff ff63 	bl	8001100 <MX_I2C1_Init>
  MX_SPI1_Init();
 800123a:	f000 f811 	bl	8001260 <MX_SPI1_Init>
  app_main();
 800123e:	f003 f94b 	bl	80044d8 <app_main>
	  __NOP();
 8001242:	bf00      	nop
  while (1)
 8001244:	e7fd      	b.n	8001242 <main+0x2a>
	...

08001248 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM6) {
 8001248:	6802      	ldr	r2, [r0, #0]
 800124a:	4b03      	ldr	r3, [pc, #12]	; (8001258 <HAL_TIM_PeriodElapsedCallback+0x10>)
 800124c:	429a      	cmp	r2, r3
 800124e:	d101      	bne.n	8001254 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8001250:	f000 ba12 	b.w	8001678 <HAL_IncTick>
}
 8001254:	4770      	bx	lr
 8001256:	bf00      	nop
 8001258:	40001000 	.word	0x40001000

0800125c <Error_Handler>:
 800125c:	b672      	cpsid	i
  while (1)
 800125e:	e7fe      	b.n	800125e <Error_Handler+0x2>

08001260 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001260:	b508      	push	{r3, lr}

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001262:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi1.Instance = SPI1;
 8001266:	480d      	ldr	r0, [pc, #52]	; (800129c <MX_SPI1_Init+0x3c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001268:	4a0d      	ldr	r2, [pc, #52]	; (80012a0 <MX_SPI1_Init+0x40>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800126a:	f44f 7100 	mov.w	r1, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800126e:	e9c0 2300 	strd	r2, r3, [r0]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001272:	2300      	movs	r3, #0
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001274:	2220      	movs	r2, #32
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001276:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800127a:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800127e:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001282:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001284:	230a      	movs	r3, #10
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001286:	e9c0 1206 	strd	r1, r2, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 800128a:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800128c:	f001 fd72 	bl	8002d74 <HAL_SPI_Init>
 8001290:	b118      	cbz	r0, 800129a <MX_SPI1_Init+0x3a>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001292:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001296:	f7ff bfe1 	b.w	800125c <Error_Handler>
}
 800129a:	bd08      	pop	{r3, pc}
 800129c:	200000d8 	.word	0x200000d8
 80012a0:	40013000 	.word	0x40013000

080012a4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80012a4:	b510      	push	{r4, lr}
 80012a6:	4604      	mov	r4, r0
 80012a8:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012aa:	2214      	movs	r2, #20
 80012ac:	2100      	movs	r1, #0
 80012ae:	a803      	add	r0, sp, #12
 80012b0:	f003 fdd8 	bl	8004e64 <memset>
  if(spiHandle->Instance==SPI1)
 80012b4:	6822      	ldr	r2, [r4, #0]
 80012b6:	4b12      	ldr	r3, [pc, #72]	; (8001300 <HAL_SPI_MspInit+0x5c>)
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d11f      	bne.n	80012fc <HAL_SPI_MspInit+0x58>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012bc:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 80012c0:	6a1a      	ldr	r2, [r3, #32]
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012c2:	2103      	movs	r1, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012c4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80012c8:	621a      	str	r2, [r3, #32]
 80012ca:	6a1a      	ldr	r2, [r3, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012cc:	480d      	ldr	r0, [pc, #52]	; (8001304 <HAL_SPI_MspInit+0x60>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012ce:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80012d2:	9201      	str	r2, [sp, #4]
 80012d4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d6:	69da      	ldr	r2, [r3, #28]
 80012d8:	f042 0202 	orr.w	r2, r2, #2
 80012dc:	61da      	str	r2, [r3, #28]
 80012de:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e0:	2238      	movs	r2, #56	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e2:	f003 0302 	and.w	r3, r3, #2
 80012e6:	9302      	str	r3, [sp, #8]
 80012e8:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ea:	2302      	movs	r3, #2
 80012ec:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012f0:	2305      	movs	r3, #5
 80012f2:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012f6:	a903      	add	r1, sp, #12
 80012f8:	f000 fcda 	bl	8001cb0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80012fc:	b008      	add	sp, #32
 80012fe:	bd10      	pop	{r4, pc}
 8001300:	40013000 	.word	0x40013000
 8001304:	40020400 	.word	0x40020400

08001308 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001308:	4b0f      	ldr	r3, [pc, #60]	; (8001348 <HAL_MspInit+0x40>)
{
 800130a:	b084      	sub	sp, #16
  __HAL_RCC_COMP_CLK_ENABLE();
 800130c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800130e:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001312:	625a      	str	r2, [r3, #36]	; 0x24
 8001314:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001316:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800131a:	9201      	str	r2, [sp, #4]
 800131c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800131e:	6a1a      	ldr	r2, [r3, #32]
 8001320:	f042 0201 	orr.w	r2, r2, #1
 8001324:	621a      	str	r2, [r3, #32]
 8001326:	6a1a      	ldr	r2, [r3, #32]
 8001328:	f002 0201 	and.w	r2, r2, #1
 800132c:	9202      	str	r2, [sp, #8]
 800132e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001330:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001332:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001336:	625a      	str	r2, [r3, #36]	; 0x24
 8001338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800133e:	9303      	str	r3, [sp, #12]
 8001340:	9b03      	ldr	r3, [sp, #12]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001342:	b004      	add	sp, #16
 8001344:	4770      	bx	lr
 8001346:	bf00      	nop
 8001348:	40023800 	.word	0x40023800

0800134c <HAL_InitTick>:
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800134c:	4b20      	ldr	r3, [pc, #128]	; (80013d0 <HAL_InitTick+0x84>)
{
 800134e:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001350:	6a5a      	ldr	r2, [r3, #36]	; 0x24
{
 8001352:	b088      	sub	sp, #32
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001354:	f042 0210 	orr.w	r2, r2, #16
 8001358:	625a      	str	r2, [r3, #36]	; 0x24
 800135a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
{
 800135c:	4605      	mov	r5, r0
  __HAL_RCC_TIM6_CLK_ENABLE();
 800135e:	f003 0310 	and.w	r3, r3, #16
 8001362:	9302      	str	r3, [sp, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001364:	a901      	add	r1, sp, #4
 8001366:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001368:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800136a:	f001 fce5 	bl	8002d38 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800136e:	9b06      	ldr	r3, [sp, #24]
 8001370:	bb43      	cbnz	r3, 80013c4 <HAL_InitTick+0x78>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001372:	f001 fcc1 	bl	8002cf8 <HAL_RCC_GetPCLK1Freq>

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001376:	4e17      	ldr	r6, [pc, #92]	; (80013d4 <HAL_InitTick+0x88>)
 8001378:	4b17      	ldr	r3, [pc, #92]	; (80013d8 <HAL_InitTick+0x8c>)
 800137a:	6033      	str	r3, [r6, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800137c:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001380:	60f3      	str	r3, [r6, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001382:	4b16      	ldr	r3, [pc, #88]	; (80013dc <HAL_InitTick+0x90>)
 8001384:	fbb0 f3f3 	udiv	r3, r0, r3
 8001388:	3b01      	subs	r3, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 800138a:	6073      	str	r3, [r6, #4]
  htim6.Init.ClockDivision = 0;
 800138c:	2300      	movs	r3, #0
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;

  status = HAL_TIM_Base_Init(&htim6);
 800138e:	4630      	mov	r0, r6
  htim6.Init.ClockDivision = 0;
 8001390:	6133      	str	r3, [r6, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001392:	60b3      	str	r3, [r6, #8]
  status = HAL_TIM_Base_Init(&htim6);
 8001394:	f001 fdb9 	bl	8002f0a <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 8001398:	4604      	mov	r4, r0
 800139a:	b980      	cbnz	r0, 80013be <HAL_InitTick+0x72>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 800139c:	4630      	mov	r0, r6
 800139e:	f001 fdd9 	bl	8002f54 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 80013a2:	4604      	mov	r4, r0
 80013a4:	b958      	cbnz	r0, 80013be <HAL_InitTick+0x72>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80013a6:	202b      	movs	r0, #43	; 0x2b
 80013a8:	f000 fbf8 	bl	8001b9c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013ac:	2d0f      	cmp	r5, #15
 80013ae:	d80d      	bhi.n	80013cc <HAL_InitTick+0x80>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 80013b0:	4622      	mov	r2, r4
 80013b2:	4629      	mov	r1, r5
 80013b4:	202b      	movs	r0, #43	; 0x2b
 80013b6:	f000 fbbf 	bl	8001b38 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013ba:	4b09      	ldr	r3, [pc, #36]	; (80013e0 <HAL_InitTick+0x94>)
 80013bc:	601d      	str	r5, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 80013be:	4620      	mov	r0, r4
 80013c0:	b008      	add	sp, #32
 80013c2:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80013c4:	f001 fc98 	bl	8002cf8 <HAL_RCC_GetPCLK1Freq>
 80013c8:	0040      	lsls	r0, r0, #1
 80013ca:	e7d4      	b.n	8001376 <HAL_InitTick+0x2a>
        status = HAL_ERROR;
 80013cc:	2401      	movs	r4, #1
 80013ce:	e7f6      	b.n	80013be <HAL_InitTick+0x72>
 80013d0:	40023800 	.word	0x40023800
 80013d4:	20000130 	.word	0x20000130
 80013d8:	40001000 	.word	0x40001000
 80013dc:	000f4240 	.word	0x000f4240
 80013e0:	20000008 	.word	0x20000008

080013e4 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013e4:	e7fe      	b.n	80013e4 <NMI_Handler>

080013e6 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013e6:	e7fe      	b.n	80013e6 <HardFault_Handler>

080013e8 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013e8:	e7fe      	b.n	80013e8 <MemManage_Handler>

080013ea <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013ea:	e7fe      	b.n	80013ea <BusFault_Handler>

080013ec <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013ec:	e7fe      	b.n	80013ec <UsageFault_Handler>

080013ee <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013ee:	4770      	bx	lr

080013f0 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SENS5_Pin);
 80013f0:	2001      	movs	r0, #1
 80013f2:	f000 bd2f 	b.w	8001e54 <HAL_GPIO_EXTI_IRQHandler>

080013f6 <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SENS6_Pin);
 80013f6:	2002      	movs	r0, #2
 80013f8:	f000 bd2c 	b.w	8001e54 <HAL_GPIO_EXTI_IRQHandler>

080013fc <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SENS7_Pin);
 80013fc:	2004      	movs	r0, #4
 80013fe:	f000 bd29 	b.w	8001e54 <HAL_GPIO_EXTI_IRQHandler>

08001402 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SENS1_Pin);
 8001402:	2010      	movs	r0, #16
 8001404:	f000 bd26 	b.w	8001e54 <HAL_GPIO_EXTI_IRQHandler>

08001408 <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001408:	4801      	ldr	r0, [pc, #4]	; (8001410 <DMA1_Channel6_IRQHandler+0x8>)
 800140a:	f000 bc07 	b.w	8001c1c <HAL_DMA_IRQHandler>
 800140e:	bf00      	nop
 8001410:	200001b0 	.word	0x200001b0

08001414 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001414:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SENS2_Pin);
 8001416:	2020      	movs	r0, #32
 8001418:	f000 fd1c 	bl	8001e54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SENS3_Pin);
 800141c:	2040      	movs	r0, #64	; 0x40
 800141e:	f000 fd19 	bl	8001e54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SENS4_Pin);
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001422:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(SENS4_Pin);
 8001426:	2080      	movs	r0, #128	; 0x80
 8001428:	f000 bd14 	b.w	8001e54 <HAL_GPIO_EXTI_IRQHandler>

0800142c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800142c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SENS8_Pin);
 800142e:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001432:	f000 fd0f 	bl	8001e54 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SENS9_Pin);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001436:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(SENS9_Pin);
 800143a:	f44f 6000 	mov.w	r0, #2048	; 0x800
 800143e:	f000 bd09 	b.w	8001e54 <HAL_GPIO_EXTI_IRQHandler>
	...

08001444 <TIM6_IRQHandler>:
void TIM6_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001444:	4801      	ldr	r0, [pc, #4]	; (800144c <TIM6_IRQHandler+0x8>)
 8001446:	f001 bec7 	b.w	80031d8 <HAL_TIM_IRQHandler>
 800144a:	bf00      	nop
 800144c:	20000130 	.word	0x20000130

08001450 <SystemInit>:
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001450:	4770      	bx	lr
	...

08001454 <HAL_TIM_PWM_MspInit>:
}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM4)
 8001454:	6802      	ldr	r2, [r0, #0]
 8001456:	4b08      	ldr	r3, [pc, #32]	; (8001478 <HAL_TIM_PWM_MspInit+0x24>)
{
 8001458:	b082      	sub	sp, #8
  if(tim_pwmHandle->Instance==TIM4)
 800145a:	429a      	cmp	r2, r3
 800145c:	d10a      	bne.n	8001474 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800145e:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8001462:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001464:	f042 0204 	orr.w	r2, r2, #4
 8001468:	625a      	str	r2, [r3, #36]	; 0x24
 800146a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800146c:	f003 0304 	and.w	r3, r3, #4
 8001470:	9301      	str	r3, [sp, #4]
 8001472:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001474:	b002      	add	sp, #8
 8001476:	4770      	bx	lr
 8001478:	40000800 	.word	0x40000800

0800147c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800147c:	b510      	push	{r4, lr}
 800147e:	4604      	mov	r4, r0
 8001480:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001482:	2214      	movs	r2, #20
 8001484:	2100      	movs	r1, #0
 8001486:	a801      	add	r0, sp, #4
 8001488:	f003 fcec 	bl	8004e64 <memset>
  if(timHandle->Instance==TIM4)
 800148c:	6822      	ldr	r2, [r4, #0]
 800148e:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <HAL_TIM_MspPostInit+0x44>)
 8001490:	429a      	cmp	r2, r3
 8001492:	d113      	bne.n	80014bc <HAL_TIM_MspPostInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001494:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 8001498:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800149a:	480a      	ldr	r0, [pc, #40]	; (80014c4 <HAL_TIM_MspPostInit+0x48>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800149c:	f042 0202 	orr.w	r2, r2, #2
 80014a0:	61da      	str	r2, [r3, #28]
 80014a2:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014a4:	2280      	movs	r2, #128	; 0x80
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a6:	f003 0302 	and.w	r3, r3, #2
 80014aa:	9300      	str	r3, [sp, #0]
 80014ac:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ae:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b0:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014b2:	e9cd 2301 	strd	r2, r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80014b6:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b8:	f000 fbfa 	bl	8001cb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80014bc:	b006      	add	sp, #24
 80014be:	bd10      	pop	{r4, pc}
 80014c0:	40000800 	.word	0x40000800
 80014c4:	40020400 	.word	0x40020400

080014c8 <MX_TIM4_Init>:
{
 80014c8:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ca:	2400      	movs	r4, #0
{
 80014cc:	b086      	sub	sp, #24
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014ce:	4621      	mov	r1, r4
 80014d0:	2210      	movs	r2, #16
 80014d2:	a802      	add	r0, sp, #8
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d4:	e9cd 4400 	strd	r4, r4, [sp]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014d8:	f003 fcc4 	bl	8004e64 <memset>
  htim4.Init.Prescaler = 32;
 80014dc:	2320      	movs	r3, #32
  htim4.Instance = TIM4;
 80014de:	4815      	ldr	r0, [pc, #84]	; (8001534 <MX_TIM4_Init+0x6c>)
  htim4.Init.Prescaler = 32;
 80014e0:	4915      	ldr	r1, [pc, #84]	; (8001538 <MX_TIM4_Init+0x70>)
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014e2:	6084      	str	r4, [r0, #8]
  htim4.Init.Prescaler = 32;
 80014e4:	e9c0 1300 	strd	r1, r3, [r0]
  htim4.Init.Period = 137;
 80014e8:	2389      	movs	r3, #137	; 0x89
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ea:	e9c0 3403 	strd	r3, r4, [r0, #12]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80014ee:	2380      	movs	r3, #128	; 0x80
 80014f0:	6143      	str	r3, [r0, #20]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80014f2:	f001 fdc4 	bl	800307e <HAL_TIM_PWM_Init>
 80014f6:	b108      	cbz	r0, 80014fc <MX_TIM4_Init+0x34>
    Error_Handler();
 80014f8:	f7ff feb0 	bl	800125c <Error_Handler>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014fc:	4669      	mov	r1, sp
 80014fe:	480d      	ldr	r0, [pc, #52]	; (8001534 <MX_TIM4_Init+0x6c>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001500:	e9cd 4400 	strd	r4, r4, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001504:	f001 feee 	bl	80032e4 <HAL_TIMEx_MasterConfigSynchronization>
 8001508:	b108      	cbz	r0, 800150e <MX_TIM4_Init+0x46>
    Error_Handler();
 800150a:	f7ff fea7 	bl	800125c <Error_Handler>
  sConfigOC.Pulse = 0;
 800150e:	2260      	movs	r2, #96	; 0x60
 8001510:	2300      	movs	r3, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001512:	4808      	ldr	r0, [pc, #32]	; (8001534 <MX_TIM4_Init+0x6c>)
  sConfigOC.Pulse = 0;
 8001514:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001518:	a902      	add	r1, sp, #8
 800151a:	2204      	movs	r2, #4
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800151c:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001520:	f001 fdd5 	bl	80030ce <HAL_TIM_PWM_ConfigChannel>
 8001524:	b108      	cbz	r0, 800152a <MX_TIM4_Init+0x62>
    Error_Handler();
 8001526:	f7ff fe99 	bl	800125c <Error_Handler>
  HAL_TIM_MspPostInit(&htim4);
 800152a:	4802      	ldr	r0, [pc, #8]	; (8001534 <MX_TIM4_Init+0x6c>)
 800152c:	f7ff ffa6 	bl	800147c <HAL_TIM_MspPostInit>
}
 8001530:	b006      	add	sp, #24
 8001532:	bd10      	pop	{r4, pc}
 8001534:	20000170 	.word	0x20000170
 8001538:	40000800 	.word	0x40000800

0800153c <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800153c:	b508      	push	{r3, lr}

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
 800153e:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart2.Instance = USART2;
 8001542:	480a      	ldr	r0, [pc, #40]	; (800156c <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 8001544:	4a0a      	ldr	r2, [pc, #40]	; (8001570 <MX_USART2_UART_Init+0x34>)
 8001546:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800154a:	2300      	movs	r3, #0
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 800154c:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 800154e:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001552:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001556:	6103      	str	r3, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001558:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800155a:	f001 ff45 	bl	80033e8 <HAL_UART_Init>
 800155e:	b118      	cbz	r0, 8001568 <MX_USART2_UART_Init+0x2c>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001560:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8001564:	f7ff be7a 	b.w	800125c <Error_Handler>
}
 8001568:	bd08      	pop	{r3, pc}
 800156a:	bf00      	nop
 800156c:	200001f4 	.word	0x200001f4
 8001570:	40004400 	.word	0x40004400

08001574 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001574:	b530      	push	{r4, r5, lr}
 8001576:	4605      	mov	r5, r0
 8001578:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800157a:	2214      	movs	r2, #20
 800157c:	2100      	movs	r1, #0
 800157e:	a803      	add	r0, sp, #12
 8001580:	f003 fc70 	bl	8004e64 <memset>
  if(uartHandle->Instance==USART2)
 8001584:	682a      	ldr	r2, [r5, #0]
 8001586:	4b1e      	ldr	r3, [pc, #120]	; (8001600 <HAL_UART_MspInit+0x8c>)
 8001588:	429a      	cmp	r2, r3
 800158a:	d136      	bne.n	80015fa <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800158c:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8001590:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001592:	2103      	movs	r1, #3
    __HAL_RCC_USART2_CLK_ENABLE();
 8001594:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001598:	625a      	str	r2, [r3, #36]	; 0x24
 800159a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800159c:	4819      	ldr	r0, [pc, #100]	; (8001604 <HAL_UART_MspInit+0x90>)
    __HAL_RCC_USART2_CLK_ENABLE();
 800159e:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80015a2:	9201      	str	r2, [sp, #4]
 80015a4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015a6:	69da      	ldr	r2, [r3, #28]

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80015a8:	4c17      	ldr	r4, [pc, #92]	; (8001608 <HAL_UART_MspInit+0x94>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015aa:	f042 0201 	orr.w	r2, r2, #1
 80015ae:	61da      	str	r2, [r3, #28]
 80015b0:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015b2:	220c      	movs	r2, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b4:	f003 0301 	and.w	r3, r3, #1
 80015b8:	9302      	str	r3, [sp, #8]
 80015ba:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015bc:	2302      	movs	r3, #2
 80015be:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015c2:	2307      	movs	r3, #7
 80015c4:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015c8:	a903      	add	r1, sp, #12
 80015ca:	f000 fb71 	bl	8001cb0 <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015ce:	2300      	movs	r3, #0
 80015d0:	480e      	ldr	r0, [pc, #56]	; (800160c <HAL_UART_MspInit+0x98>)
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_rx.Init.MemInc = DMA_MINC_DISABLE;
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80015d2:	f04f 0c20 	mov.w	ip, #32
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80015d6:	e9c4 0300 	strd	r0, r3, [r4]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_DISABLE;
 80015da:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80015de:	e9c4 3304 	strd	r3, r3, [r4, #16]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80015e2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80015e6:	4620      	mov	r0, r4
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80015e8:	e9c4 c306 	strd	ip, r3, [r4, #24]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80015ec:	f000 fae4 	bl	8001bb8 <HAL_DMA_Init>
 80015f0:	b108      	cbz	r0, 80015f6 <HAL_UART_MspInit+0x82>
    {
      Error_Handler();
 80015f2:	f7ff fe33 	bl	800125c <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 80015f6:	63ac      	str	r4, [r5, #56]	; 0x38
 80015f8:	6265      	str	r5, [r4, #36]	; 0x24

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80015fa:	b009      	add	sp, #36	; 0x24
 80015fc:	bd30      	pop	{r4, r5, pc}
 80015fe:	bf00      	nop
 8001600:	40004400 	.word	0x40004400
 8001604:	40020000 	.word	0x40020000
 8001608:	200001b0 	.word	0x200001b0
 800160c:	4002606c 	.word	0x4002606c

08001610 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001610:	480c      	ldr	r0, [pc, #48]	; (8001644 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001612:	490d      	ldr	r1, [pc, #52]	; (8001648 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001614:	4a0d      	ldr	r2, [pc, #52]	; (800164c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001616:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001618:	e002      	b.n	8001620 <LoopCopyDataInit>

0800161a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800161a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800161c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800161e:	3304      	adds	r3, #4

08001620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001624:	d3f9      	bcc.n	800161a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001626:	4a0a      	ldr	r2, [pc, #40]	; (8001650 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001628:	4c0a      	ldr	r4, [pc, #40]	; (8001654 <LoopFillZerobss+0x22>)
  movs r3, #0
 800162a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800162c:	e001      	b.n	8001632 <LoopFillZerobss>

0800162e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800162e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001630:	3204      	adds	r2, #4

08001632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001634:	d3fb      	bcc.n	800162e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001636:	f7ff ff0b 	bl	8001450 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800163a:	f003 fbe1 	bl	8004e00 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800163e:	f7ff fdeb 	bl	8001218 <main>
  bx lr
 8001642:	4770      	bx	lr
  ldr r0, =_sdata
 8001644:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001648:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800164c:	08004f98 	.word	0x08004f98
  ldr r2, =_sbss
 8001650:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8001654:	20002c34 	.word	0x20002c34

08001658 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001658:	e7fe      	b.n	8001658 <ADC1_IRQHandler>

0800165a <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800165a:	b510      	push	{r4, lr}
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800165c:	2003      	movs	r0, #3
 800165e:	f000 fa59 	bl	8001b14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001662:	200f      	movs	r0, #15
 8001664:	f7ff fe72 	bl	800134c <HAL_InitTick>
 8001668:	4604      	mov	r4, r0
 800166a:	b918      	cbnz	r0, 8001674 <HAL_Init+0x1a>
    status = HAL_ERROR;
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800166c:	f7ff fe4c 	bl	8001308 <HAL_MspInit>
  }

  /* Return function status */
  return status;
}
 8001670:	4620      	mov	r0, r4
 8001672:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8001674:	2401      	movs	r4, #1
 8001676:	e7fb      	b.n	8001670 <HAL_Init+0x16>

08001678 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8001678:	4a03      	ldr	r2, [pc, #12]	; (8001688 <HAL_IncTick+0x10>)
 800167a:	4904      	ldr	r1, [pc, #16]	; (800168c <HAL_IncTick+0x14>)
 800167c:	6813      	ldr	r3, [r2, #0]
 800167e:	6809      	ldr	r1, [r1, #0]
 8001680:	440b      	add	r3, r1
 8001682:	6013      	str	r3, [r2, #0]
}
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	20000238 	.word	0x20000238
 800168c:	20000004 	.word	0x20000004

08001690 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001690:	4b01      	ldr	r3, [pc, #4]	; (8001698 <HAL_GetTick+0x8>)
 8001692:	6818      	ldr	r0, [r3, #0]
}
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	20000238 	.word	0x20000238

0800169c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800169c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cr1 = 0;
  uint32_t tmp_cr2 = 0;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800169e:	4604      	mov	r4, r0
 80016a0:	b908      	cbnz	r0, 80016a6 <HAL_ADC_Init+0xa>
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
      
      tmp_hal_status = HAL_ERROR;
 80016a2:	2001      	movs	r0, #1
 80016a4:	e095      	b.n	80017d2 <HAL_ADC_Init+0x136>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016a6:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80016a8:	b973      	cbnz	r3, 80016c8 <HAL_ADC_Init+0x2c>
    ADC_CLEAR_ERRORCODE(hadc);
 80016aa:	6503      	str	r3, [r0, #80]	; 0x50
    hadc->Lock = HAL_UNLOCKED;
 80016ac:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016b0:	4b56      	ldr	r3, [pc, #344]	; (800180c <HAL_ADC_Init+0x170>)
 80016b2:	6a1a      	ldr	r2, [r3, #32]
 80016b4:	f042 0201 	orr.w	r2, r2, #1
 80016b8:	621a      	str	r2, [r3, #32]
 80016ba:	6a1b      	ldr	r3, [r3, #32]
 80016bc:	f003 0301 	and.w	r3, r3, #1
 80016c0:	9301      	str	r3, [sp, #4]
 80016c2:	9b01      	ldr	r3, [sp, #4]
    HAL_ADC_MspInit(hadc);
 80016c4:	f7ff fc28 	bl	8000f18 <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80016c8:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80016ca:	06db      	lsls	r3, r3, #27
 80016cc:	d4e9      	bmi.n	80016a2 <HAL_ADC_Init+0x6>
    ADC_STATE_CLR_SET(hadc->State,
 80016ce:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    MODIFY_REG(ADC->CCR                 ,
 80016d0:	4a4f      	ldr	r2, [pc, #316]	; (8001810 <HAL_ADC_Init+0x174>)
    ADC_STATE_CLR_SET(hadc->State,
 80016d2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80016d6:	f023 0302 	bic.w	r3, r3, #2
 80016da:	f043 0302 	orr.w	r3, r3, #2
 80016de:	64e3      	str	r3, [r4, #76]	; 0x4c
    MODIFY_REG(ADC->CCR                 ,
 80016e0:	6853      	ldr	r3, [r2, #4]
 80016e2:	6861      	ldr	r1, [r4, #4]
 80016e4:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80016e8:	430b      	orrs	r3, r1
 80016ea:	6053      	str	r3, [r2, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80016f0:	fa91 f1a1 	rbit	r1, r1
 80016f4:	2302      	movs	r3, #2
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80016f6:	fab1 f181 	clz	r1, r1
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 80016fa:	f894 5024 	ldrb.w	r5, [r4, #36]	; 0x24
 80016fe:	fa93 f3a3 	rbit	r3, r3
 8001702:	fab3 f383 	clz	r3, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001706:	6960      	ldr	r0, [r4, #20]
 8001708:	68e2      	ldr	r2, [r4, #12]
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 800170a:	fa05 f303 	lsl.w	r3, r5, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800170e:	4302      	orrs	r2, r0
 8001710:	6a20      	ldr	r0, [r4, #32]
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8001712:	6926      	ldr	r6, [r4, #16]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001714:	4302      	orrs	r2, r0
 8001716:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
 800171a:	fa00 f101 	lsl.w	r1, r0, r1
 800171e:	430a      	orrs	r2, r1
                hadc->Init.ChannelsBank                                        |
 8001720:	4313      	orrs	r3, r2
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001722:	6b62      	ldr	r2, [r4, #52]	; 0x34
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8001724:	6820      	ldr	r0, [r4, #0]
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001726:	2a10      	cmp	r2, #16
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001728:	bf1c      	itt	ne
 800172a:	6ba1      	ldrne	r1, [r4, #56]	; 0x38
 800172c:	430a      	orrne	r2, r1
    if ((ADC_IS_ENABLE(hadc) == RESET))
 800172e:	6801      	ldr	r1, [r0, #0]
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001730:	bf18      	it	ne
 8001732:	4313      	orrne	r3, r2
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8001734:	f011 0140 	ands.w	r1, r1, #64	; 0x40
 8001738:	d124      	bne.n	8001784 <HAL_ADC_Init+0xe8>
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 800173a:	69a2      	ldr	r2, [r4, #24]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800173c:	69e7      	ldr	r7, [r4, #28]
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 800173e:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001740:	68a2      	ldr	r2, [r4, #8]
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8001742:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001746:	ea42 0207 	orr.w	r2, r2, r7
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 800174a:	d044      	beq.n	80017d6 <HAL_ADC_Init+0x13a>
 800174c:	2e01      	cmp	r6, #1
 800174e:	bf08      	it	eq
 8001750:	f44f 7180 	moveq.w	r1, #256	; 0x100
                  hadc->Init.LowPowerAutoPowerOff           |
 8001754:	430a      	orrs	r2, r1
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001756:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 800175a:	2901      	cmp	r1, #1
 800175c:	d10d      	bne.n	800177a <HAL_ADC_Init+0xde>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800175e:	2d00      	cmp	r5, #0
 8001760:	d13b      	bne.n	80017da <HAL_ADC_Init+0x13e>
 8001762:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 8001766:	fa91 f1a1 	rbit	r1, r1
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 800176a:	fab1 f581 	clz	r5, r1
 800176e:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001770:	3901      	subs	r1, #1
 8001772:	40a9      	lsls	r1, r5
 8001774:	430a      	orrs	r2, r1
 8001776:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
        MODIFY_REG(hadc->Instance->CR1,
 800177a:	6845      	ldr	r5, [r0, #4]
 800177c:	4925      	ldr	r1, [pc, #148]	; (8001814 <HAL_ADC_Init+0x178>)
 800177e:	4029      	ands	r1, r5
 8001780:	430a      	orrs	r2, r1
 8001782:	6042      	str	r2, [r0, #4]
    MODIFY_REG(hadc->Instance->CR2    ,
 8001784:	6881      	ldr	r1, [r0, #8]
 8001786:	4a24      	ldr	r2, [pc, #144]	; (8001818 <HAL_ADC_Init+0x17c>)
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001788:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
    MODIFY_REG(hadc->Instance->CR2    ,
 800178c:	ea02 0201 	and.w	r2, r2, r1
 8001790:	ea42 0203 	orr.w	r2, r2, r3
 8001794:	6082      	str	r2, [r0, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8001796:	d001      	beq.n	800179c <HAL_ADC_Init+0x100>
 8001798:	2e01      	cmp	r6, #1
 800179a:	d127      	bne.n	80017ec <HAL_ADC_Init+0x150>
      MODIFY_REG(hadc->Instance->SQR1                         ,
 800179c:	6b05      	ldr	r5, [r0, #48]	; 0x30
 800179e:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 80017a2:	fa92 f2a2 	rbit	r2, r2
 80017a6:	fab2 f182 	clz	r1, r2
 80017aa:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80017ac:	3a01      	subs	r2, #1
 80017ae:	408a      	lsls	r2, r1
 80017b0:	f025 71f8 	bic.w	r1, r5, #32505856	; 0x1f00000
 80017b4:	430a      	orrs	r2, r1
      MODIFY_REG(hadc->Instance->SQR1,
 80017b6:	6302      	str	r2, [r0, #48]	; 0x30
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 80017b8:	6881      	ldr	r1, [r0, #8]
 80017ba:	4a18      	ldr	r2, [pc, #96]	; (800181c <HAL_ADC_Init+0x180>)
 80017bc:	400a      	ands	r2, r1
 80017be:	429a      	cmp	r2, r3
 80017c0:	d118      	bne.n	80017f4 <HAL_ADC_Init+0x158>
      ADC_CLEAR_ERRORCODE(hadc);
 80017c2:	2000      	movs	r0, #0
 80017c4:	6520      	str	r0, [r4, #80]	; 0x50
      ADC_STATE_CLR_SET(hadc->State,
 80017c6:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80017c8:	f023 0303 	bic.w	r3, r3, #3
 80017cc:	f043 0301 	orr.w	r3, r3, #1
 80017d0:	64e3      	str	r3, [r4, #76]	; 0x4c
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 80017d2:	b003      	add	sp, #12
 80017d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 80017d6:	4631      	mov	r1, r6
 80017d8:	e7bc      	b.n	8001754 <HAL_ADC_Init+0xb8>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017da:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 80017dc:	f041 0120 	orr.w	r1, r1, #32
 80017e0:	64e1      	str	r1, [r4, #76]	; 0x4c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017e2:	6d21      	ldr	r1, [r4, #80]	; 0x50
 80017e4:	f041 0101 	orr.w	r1, r1, #1
 80017e8:	6521      	str	r1, [r4, #80]	; 0x50
 80017ea:	e7c6      	b.n	800177a <HAL_ADC_Init+0xde>
      MODIFY_REG(hadc->Instance->SQR1,
 80017ec:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80017ee:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 80017f2:	e7e0      	b.n	80017b6 <HAL_ADC_Init+0x11a>
      ADC_STATE_CLR_SET(hadc->State,
 80017f4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80017f6:	f023 0312 	bic.w	r3, r3, #18
 80017fa:	f043 0310 	orr.w	r3, r3, #16
 80017fe:	64e3      	str	r3, [r4, #76]	; 0x4c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001800:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001802:	f043 0301 	orr.w	r3, r3, #1
 8001806:	6523      	str	r3, [r4, #80]	; 0x50
 8001808:	e74b      	b.n	80016a2 <HAL_ADC_Init+0x6>
 800180a:	bf00      	nop
 800180c:	40023800 	.word	0x40023800
 8001810:	40012700 	.word	0x40012700
 8001814:	fcfc16ff 	.word	0xfcfc16ff
 8001818:	c0fff18d 	.word	0xc0fff18d
 800181c:	bf80fffe 	.word	0xbf80fffe

08001820 <HAL_ADC_PollForConversion>:
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001820:	6803      	ldr	r3, [r0, #0]
{
 8001822:	b570      	push	{r4, r5, r6, lr}
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001824:	689a      	ldr	r2, [r3, #8]
{
 8001826:	4604      	mov	r4, r0
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001828:	0552      	lsls	r2, r2, #21
{
 800182a:	460d      	mov	r5, r1
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800182c:	d50b      	bpl.n	8001846 <HAL_ADC_PollForConversion+0x26>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 800182e:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001830:	05de      	lsls	r6, r3, #23
 8001832:	d508      	bpl.n	8001846 <HAL_ADC_PollForConversion+0x26>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001834:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8001836:	f043 0320 	orr.w	r3, r3, #32
 800183a:	64c3      	str	r3, [r0, #76]	; 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800183c:	2300      	movs	r3, #0
 800183e:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
    
    return HAL_ERROR;
 8001842:	2001      	movs	r0, #1
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
}
 8001844:	bd70      	pop	{r4, r5, r6, pc}
  tickstart = HAL_GetTick();
 8001846:	f7ff ff23 	bl	8001690 <HAL_GetTick>
 800184a:	4606      	mov	r6, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800184c:	6823      	ldr	r3, [r4, #0]
 800184e:	681a      	ldr	r2, [r3, #0]
 8001850:	0791      	lsls	r1, r2, #30
 8001852:	d50e      	bpl.n	8001872 <HAL_ADC_PollForConversion+0x52>
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001854:	69a2      	ldr	r2, [r4, #24]
 8001856:	b912      	cbnz	r2, 800185e <HAL_ADC_PollForConversion+0x3e>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001858:	f06f 0212 	mvn.w	r2, #18
 800185c:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800185e:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8001860:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001864:	64e2      	str	r2, [r4, #76]	; 0x4c
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001866:	689a      	ldr	r2, [r3, #8]
 8001868:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 800186c:	d017      	beq.n	800189e <HAL_ADC_PollForConversion+0x7e>
  return HAL_OK;
 800186e:	2000      	movs	r0, #0
 8001870:	e7e8      	b.n	8001844 <HAL_ADC_PollForConversion+0x24>
    if(Timeout != HAL_MAX_DELAY)
 8001872:	1c68      	adds	r0, r5, #1
 8001874:	d0eb      	beq.n	800184e <HAL_ADC_PollForConversion+0x2e>
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001876:	b965      	cbnz	r5, 8001892 <HAL_ADC_PollForConversion+0x72>
        if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8001878:	6823      	ldr	r3, [r4, #0]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	f013 0302 	ands.w	r3, r3, #2
 8001880:	d1e4      	bne.n	800184c <HAL_ADC_PollForConversion+0x2c>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001882:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
          return HAL_TIMEOUT;
 8001884:	2003      	movs	r0, #3
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001886:	f042 0204 	orr.w	r2, r2, #4
 800188a:	64e2      	str	r2, [r4, #76]	; 0x4c
          __HAL_UNLOCK(hadc);
 800188c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
          return HAL_TIMEOUT;
 8001890:	e7d8      	b.n	8001844 <HAL_ADC_PollForConversion+0x24>
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001892:	f7ff fefd 	bl	8001690 <HAL_GetTick>
 8001896:	1b80      	subs	r0, r0, r6
 8001898:	42a8      	cmp	r0, r5
 800189a:	d8ed      	bhi.n	8001878 <HAL_ADC_PollForConversion+0x58>
 800189c:	e7d6      	b.n	800184c <HAL_ADC_PollForConversion+0x2c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800189e:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018a2:	2800      	cmp	r0, #0
 80018a4:	d1e3      	bne.n	800186e <HAL_ADC_PollForConversion+0x4e>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80018a6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018a8:	f012 7ff8 	tst.w	r2, #32505856	; 0x1f00000
 80018ac:	d002      	beq.n	80018b4 <HAL_ADC_PollForConversion+0x94>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 80018ae:	689b      	ldr	r3, [r3, #8]
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80018b0:	055a      	lsls	r2, r3, #21
 80018b2:	d4dc      	bmi.n	800186e <HAL_ADC_PollForConversion+0x4e>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80018b4:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80018b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80018ba:	64e3      	str	r3, [r4, #76]	; 0x4c
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80018bc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80018be:	04db      	lsls	r3, r3, #19
 80018c0:	d4d5      	bmi.n	800186e <HAL_ADC_PollForConversion+0x4e>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80018c2:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 80018c4:	f043 0301 	orr.w	r3, r3, #1
 80018c8:	64e3      	str	r3, [r4, #76]	; 0x4c
 80018ca:	e7bb      	b.n	8001844 <HAL_ADC_PollForConversion+0x24>

080018cc <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 80018cc:	6803      	ldr	r3, [r0, #0]
 80018ce:	6d98      	ldr	r0, [r3, #88]	; 0x58
}
 80018d0:	4770      	bx	lr
	...

080018d4 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0;
 80018d4:	2300      	movs	r3, #0
{
 80018d6:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0;
 80018d8:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80018da:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 80018de:	2b01      	cmp	r3, #1
 80018e0:	f000 8099 	beq.w	8001a16 <HAL_ADC_ConfigChannel+0x142>
 80018e4:	2301      	movs	r3, #1
 80018e6:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 80018ea:	684d      	ldr	r5, [r1, #4]
  {
    MODIFY_REG(hadc->Instance->SQR5,
 80018ec:	6804      	ldr	r4, [r0, #0]
  if (sConfig->Rank < 7)
 80018ee:	2d06      	cmp	r5, #6
    MODIFY_REG(hadc->Instance->SQR5,
 80018f0:	680a      	ldr	r2, [r1, #0]
 80018f2:	eb05 0385 	add.w	r3, r5, r5, lsl #2
  if (sConfig->Rank < 7)
 80018f6:	d822      	bhi.n	800193e <HAL_ADC_ConfigChannel+0x6a>
    MODIFY_REG(hadc->Instance->SQR5,
 80018f8:	261f      	movs	r6, #31
 80018fa:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80018fc:	3b05      	subs	r3, #5
 80018fe:	409e      	lsls	r6, r3
 8001900:	ea25 0506 	bic.w	r5, r5, r6
 8001904:	fa02 f303 	lsl.w	r3, r2, r3
 8001908:	432b      	orrs	r3, r5
 800190a:	6423      	str	r3, [r4, #64]	; 0x40
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 800190c:	2a09      	cmp	r2, #9
 800190e:	d848      	bhi.n	80019a2 <HAL_ADC_ConfigChannel+0xce>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8001910:	2607      	movs	r6, #7
 8001912:	6963      	ldr	r3, [r4, #20]
 8001914:	688d      	ldr	r5, [r1, #8]
 8001916:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800191a:	4096      	lsls	r6, r2
 800191c:	ea23 0306 	bic.w	r3, r3, r6
 8001920:	fa05 f202 	lsl.w	r2, r5, r2
 8001924:	431a      	orrs	r2, r3
 8001926:	6162      	str	r2, [r4, #20]
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8001928:	6809      	ldr	r1, [r1, #0]
 800192a:	f1a1 0310 	sub.w	r3, r1, #16
 800192e:	2b01      	cmp	r3, #1
 8001930:	d959      	bls.n	80019e6 <HAL_ADC_ConfigChannel+0x112>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001932:	2300      	movs	r3, #0
 8001934:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8001938:	4618      	mov	r0, r3
}
 800193a:	b002      	add	sp, #8
 800193c:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13)
 800193e:	2d0c      	cmp	r5, #12
 8001940:	d80a      	bhi.n	8001958 <HAL_ADC_ConfigChannel+0x84>
    MODIFY_REG(hadc->Instance->SQR4,
 8001942:	261f      	movs	r6, #31
 8001944:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 8001946:	3b23      	subs	r3, #35	; 0x23
 8001948:	409e      	lsls	r6, r3
 800194a:	ea25 0506 	bic.w	r5, r5, r6
 800194e:	fa02 f303 	lsl.w	r3, r2, r3
 8001952:	432b      	orrs	r3, r5
 8001954:	63e3      	str	r3, [r4, #60]	; 0x3c
 8001956:	e7d9      	b.n	800190c <HAL_ADC_ConfigChannel+0x38>
  else if (sConfig->Rank < 19)
 8001958:	2d12      	cmp	r5, #18
 800195a:	d80a      	bhi.n	8001972 <HAL_ADC_ConfigChannel+0x9e>
    MODIFY_REG(hadc->Instance->SQR3,
 800195c:	261f      	movs	r6, #31
 800195e:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 8001960:	3b41      	subs	r3, #65	; 0x41
 8001962:	409e      	lsls	r6, r3
 8001964:	ea25 0506 	bic.w	r5, r5, r6
 8001968:	fa02 f303 	lsl.w	r3, r2, r3
 800196c:	432b      	orrs	r3, r5
 800196e:	63a3      	str	r3, [r4, #56]	; 0x38
 8001970:	e7cc      	b.n	800190c <HAL_ADC_ConfigChannel+0x38>
  else if (sConfig->Rank < 25)
 8001972:	2d18      	cmp	r5, #24
 8001974:	f04f 051f 	mov.w	r5, #31
 8001978:	d809      	bhi.n	800198e <HAL_ADC_ConfigChannel+0xba>
    MODIFY_REG(hadc->Instance->SQR2,
 800197a:	6b66      	ldr	r6, [r4, #52]	; 0x34
 800197c:	3b5f      	subs	r3, #95	; 0x5f
 800197e:	409d      	lsls	r5, r3
 8001980:	ea26 0505 	bic.w	r5, r6, r5
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	432b      	orrs	r3, r5
 800198a:	6363      	str	r3, [r4, #52]	; 0x34
 800198c:	e7be      	b.n	800190c <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1,
 800198e:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8001990:	3b7d      	subs	r3, #125	; 0x7d
 8001992:	409d      	lsls	r5, r3
 8001994:	ea26 0505 	bic.w	r5, r6, r5
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	432b      	orrs	r3, r5
 800199e:	6323      	str	r3, [r4, #48]	; 0x30
 80019a0:	e7b4      	b.n	800190c <HAL_ADC_ConfigChannel+0x38>
  else if (sConfig->Channel < ADC_CHANNEL_20)
 80019a2:	2a13      	cmp	r2, #19
 80019a4:	d80d      	bhi.n	80019c2 <HAL_ADC_ConfigChannel+0xee>
    MODIFY_REG(hadc->Instance->SMPR2,
 80019a6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80019aa:	f1a2 051e 	sub.w	r5, r2, #30
 80019ae:	2207      	movs	r2, #7
 80019b0:	6923      	ldr	r3, [r4, #16]
 80019b2:	40aa      	lsls	r2, r5
 80019b4:	ea23 0202 	bic.w	r2, r3, r2
 80019b8:	688b      	ldr	r3, [r1, #8]
 80019ba:	40ab      	lsls	r3, r5
 80019bc:	431a      	orrs	r2, r3
 80019be:	6122      	str	r2, [r4, #16]
 80019c0:	e7b2      	b.n	8001928 <HAL_ADC_ConfigChannel+0x54>
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 80019c2:	2a1a      	cmp	r2, #26
 80019c4:	d80d      	bhi.n	80019e2 <HAL_ADC_ConfigChannel+0x10e>
    MODIFY_REG(hadc->Instance->SMPR1,
 80019c6:	2507      	movs	r5, #7
 80019c8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80019cc:	68e3      	ldr	r3, [r4, #12]
 80019ce:	3a3c      	subs	r2, #60	; 0x3c
 80019d0:	4095      	lsls	r5, r2
 80019d2:	ea23 0305 	bic.w	r3, r3, r5
 80019d6:	688d      	ldr	r5, [r1, #8]
 80019d8:	fa05 f202 	lsl.w	r2, r5, r2
 80019dc:	431a      	orrs	r2, r3
 80019de:	60e2      	str	r2, [r4, #12]
 80019e0:	e7a2      	b.n	8001928 <HAL_ADC_ConfigChannel+0x54>
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 80019e2:	bf00      	nop
 80019e4:	e7a0      	b.n	8001928 <HAL_ADC_ConfigChannel+0x54>
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 80019e6:	4b0d      	ldr	r3, [pc, #52]	; (8001a1c <HAL_ADC_ConfigChannel+0x148>)
 80019e8:	685a      	ldr	r2, [r3, #4]
 80019ea:	0212      	lsls	r2, r2, #8
 80019ec:	d4a1      	bmi.n	8001932 <HAL_ADC_ConfigChannel+0x5e>
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 80019ee:	685a      	ldr	r2, [r3, #4]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019f0:	2910      	cmp	r1, #16
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 80019f2:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80019f6:	605a      	str	r2, [r3, #4]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80019f8:	d19b      	bne.n	8001932 <HAL_ADC_ConfigChannel+0x5e>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80019fa:	4b09      	ldr	r3, [pc, #36]	; (8001a20 <HAL_ADC_ConfigChannel+0x14c>)
 80019fc:	4a09      	ldr	r2, [pc, #36]	; (8001a24 <HAL_ADC_ConfigChannel+0x150>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a04:	220a      	movs	r2, #10
 8001a06:	4353      	muls	r3, r2
            wait_loop_index--;
 8001a08:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 8001a0a:	9b01      	ldr	r3, [sp, #4]
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d090      	beq.n	8001932 <HAL_ADC_ConfigChannel+0x5e>
            wait_loop_index--;
 8001a10:	9b01      	ldr	r3, [sp, #4]
 8001a12:	3b01      	subs	r3, #1
 8001a14:	e7f8      	b.n	8001a08 <HAL_ADC_ConfigChannel+0x134>
  __HAL_LOCK(hadc);
 8001a16:	2002      	movs	r0, #2
 8001a18:	e78f      	b.n	800193a <HAL_ADC_ConfigChannel+0x66>
 8001a1a:	bf00      	nop
 8001a1c:	40012700 	.word	0x40012700
 8001a20:	20000000 	.word	0x20000000
 8001a24:	000f4240 	.word	0x000f4240

08001a28 <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0;
  __IO uint32_t wait_loop_index = 0;
 8001a28:	2300      	movs	r3, #0
{
 8001a2a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0;
 8001a2c:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a2e:	6803      	ldr	r3, [r0, #0]
{
 8001a30:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	0652      	lsls	r2, r2, #25
 8001a36:	d502      	bpl.n	8001a3e <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001a38:	2000      	movs	r0, #0
}
 8001a3a:	b003      	add	sp, #12
 8001a3c:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 8001a3e:	689a      	ldr	r2, [r3, #8]
 8001a40:	f042 0201 	orr.w	r2, r2, #1
 8001a44:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001a46:	4b15      	ldr	r3, [pc, #84]	; (8001a9c <ADC_Enable+0x74>)
 8001a48:	4a15      	ldr	r2, [pc, #84]	; (8001aa0 <ADC_Enable+0x78>)
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a50:	eb03 0343 	add.w	r3, r3, r3, lsl #1
      wait_loop_index--;
 8001a54:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 8001a56:	9b01      	ldr	r3, [sp, #4]
 8001a58:	b9e3      	cbnz	r3, 8001a94 <ADC_Enable+0x6c>
    tickstart = HAL_GetTick();    
 8001a5a:	f7ff fe19 	bl	8001690 <HAL_GetTick>
 8001a5e:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001a60:	6823      	ldr	r3, [r4, #0]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	065b      	lsls	r3, r3, #25
 8001a66:	d4e7      	bmi.n	8001a38 <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8001a68:	f7ff fe12 	bl	8001690 <HAL_GetTick>
 8001a6c:	1b40      	subs	r0, r0, r5
 8001a6e:	2802      	cmp	r0, #2
 8001a70:	d9f6      	bls.n	8001a60 <ADC_Enable+0x38>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001a72:	6823      	ldr	r3, [r4, #0]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8001a7a:	d1f1      	bne.n	8001a60 <ADC_Enable+0x38>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a7c:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
          return HAL_ERROR;
 8001a7e:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a80:	f042 0210 	orr.w	r2, r2, #16
 8001a84:	64e2      	str	r2, [r4, #76]	; 0x4c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a86:	6d22      	ldr	r2, [r4, #80]	; 0x50
          __HAL_UNLOCK(hadc);
 8001a88:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a8c:	f042 0201 	orr.w	r2, r2, #1
 8001a90:	6522      	str	r2, [r4, #80]	; 0x50
          return HAL_ERROR;
 8001a92:	e7d2      	b.n	8001a3a <ADC_Enable+0x12>
      wait_loop_index--;
 8001a94:	9b01      	ldr	r3, [sp, #4]
 8001a96:	3b01      	subs	r3, #1
 8001a98:	e7dc      	b.n	8001a54 <ADC_Enable+0x2c>
 8001a9a:	bf00      	nop
 8001a9c:	20000000 	.word	0x20000000
 8001aa0:	000f4240 	.word	0x000f4240

08001aa4 <HAL_ADC_Start>:
{
 8001aa4:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8001aa6:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
{
 8001aaa:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d02e      	beq.n	8001b0e <HAL_ADC_Start+0x6a>
 8001ab0:	2301      	movs	r3, #1
 8001ab2:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  tmp_hal_status = ADC_Enable(hadc);
 8001ab6:	f7ff ffb7 	bl	8001a28 <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8001aba:	bb38      	cbnz	r0, 8001b0c <HAL_ADC_Start+0x68>
    ADC_STATE_CLR_SET(hadc->State,
 8001abc:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001abe:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ac2:	f023 0301 	bic.w	r3, r3, #1
 8001ac6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aca:	64e3      	str	r3, [r4, #76]	; 0x4c
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001acc:	6823      	ldr	r3, [r4, #0]
 8001ace:	685a      	ldr	r2, [r3, #4]
 8001ad0:	0552      	lsls	r2, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ad2:	bf41      	itttt	mi
 8001ad4:	6ce2      	ldrmi	r2, [r4, #76]	; 0x4c
 8001ad6:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8001ada:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8001ade:	64e2      	strmi	r2, [r4, #76]	; 0x4c
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001ae0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8001ae2:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001ae6:	bf1c      	itt	ne
 8001ae8:	6d22      	ldrne	r2, [r4, #80]	; 0x50
 8001aea:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8001aee:	6522      	str	r2, [r4, #80]	; 0x50
    __HAL_UNLOCK(hadc);
 8001af0:	2200      	movs	r2, #0
 8001af2:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001af6:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001afa:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001afc:	689a      	ldr	r2, [r3, #8]
 8001afe:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8001b02:	d103      	bne.n	8001b0c <HAL_ADC_Start+0x68>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8001b04:	689a      	ldr	r2, [r3, #8]
 8001b06:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b0a:	609a      	str	r2, [r3, #8]
}
 8001b0c:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8001b0e:	2002      	movs	r0, #2
 8001b10:	e7fc      	b.n	8001b0c <HAL_ADC_Start+0x68>
	...

08001b14 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b14:	4907      	ldr	r1, [pc, #28]	; (8001b34 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b16:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b18:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b1a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b1e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001b22:	0412      	lsls	r2, r2, #16
 8001b24:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b26:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b28:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b2c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001b30:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001b32:	4770      	bx	lr
 8001b34:	e000ed00 	.word	0xe000ed00

08001b38 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b38:	4b16      	ldr	r3, [pc, #88]	; (8001b94 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b3a:	b530      	push	{r4, r5, lr}
 8001b3c:	68dc      	ldr	r4, [r3, #12]
 8001b3e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b42:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b46:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b48:	2b04      	cmp	r3, #4
 8001b4a:	bf28      	it	cs
 8001b4c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b4e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b50:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b54:	bf98      	it	ls
 8001b56:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b58:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b5c:	bf88      	it	hi
 8001b5e:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b60:	ea21 0303 	bic.w	r3, r1, r3
 8001b64:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b66:	fa05 f404 	lsl.w	r4, r5, r4
 8001b6a:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8001b6e:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b70:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b74:	bfac      	ite	ge
 8001b76:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b7a:	4a07      	ldrlt	r2, [pc, #28]	; (8001b98 <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b7c:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	bfab      	itete	ge
 8001b84:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b88:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b8c:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b90:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001b92:	bd30      	pop	{r4, r5, pc}
 8001b94:	e000ed00 	.word	0xe000ed00
 8001b98:	e000ed14 	.word	0xe000ed14

08001b9c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001b9c:	2800      	cmp	r0, #0
 8001b9e:	db08      	blt.n	8001bb2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	0942      	lsrs	r2, r0, #5
 8001ba4:	f000 001f 	and.w	r0, r0, #31
 8001ba8:	fa03 f000 	lsl.w	r0, r3, r0
 8001bac:	4b01      	ldr	r3, [pc, #4]	; (8001bb4 <HAL_NVIC_EnableIRQ+0x18>)
 8001bae:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001bb2:	4770      	bx	lr
 8001bb4:	e000e100 	.word	0xe000e100

08001bb8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001bb8:	b510      	push	{r4, lr}
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001bba:	b348      	cbz	r0, 8001c10 <HAL_DMA_Init+0x58>
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001bbc:	2214      	movs	r2, #20
 8001bbe:	6801      	ldr	r1, [r0, #0]
 8001bc0:	4b14      	ldr	r3, [pc, #80]	; (8001c14 <HAL_DMA_Init+0x5c>)
 8001bc2:	440b      	add	r3, r1
 8001bc4:	fbb3 f3f2 	udiv	r3, r3, r2
 8001bc8:	009b      	lsls	r3, r3, #2
 8001bca:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001bcc:	4b12      	ldr	r3, [pc, #72]	; (8001c18 <HAL_DMA_Init+0x60>)
 8001bce:	63c3      	str	r3, [r0, #60]	; 0x3c
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001bd0:	2302      	movs	r3, #2
 8001bd2:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001bd6:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8001bda:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bdc:	68c4      	ldr	r4, [r0, #12]
  tmp = hdma->Instance->CCR;
 8001bde:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001be0:	4323      	orrs	r3, r4
 8001be2:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8001be4:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001be8:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bea:	6944      	ldr	r4, [r0, #20]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8001bec:	f022 0270 	bic.w	r2, r2, #112	; 0x70
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bf0:	4323      	orrs	r3, r4
 8001bf2:	6984      	ldr	r4, [r0, #24]
 8001bf4:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bf6:	69c4      	ldr	r4, [r0, #28]
 8001bf8:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8001bfa:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001bfc:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001bfe:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c00:	2300      	movs	r3, #0
 8001c02:	6383      	str	r3, [r0, #56]	; 0x38

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001c04:	f880 3020 	strb.w	r3, [r0, #32]
  hdma->State = HAL_DMA_STATE_READY;
 8001c08:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21

  return HAL_OK;
 8001c0c:	4618      	mov	r0, r3
}
 8001c0e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001c10:	2001      	movs	r0, #1
 8001c12:	e7fc      	b.n	8001c0e <HAL_DMA_Init+0x56>
 8001c14:	bffd9ff8 	.word	0xbffd9ff8
 8001c18:	40026000 	.word	0x40026000

08001c1c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001c1c:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
  uint32_t source_it = hdma->Instance->CCR;

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001c1e:	2404      	movs	r4, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c20:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001c22:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c24:	680e      	ldr	r6, [r1, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001c26:	f002 021c 	and.w	r2, r2, #28
  uint32_t source_it = hdma->Instance->CCR;
 8001c2a:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001c2c:	4094      	lsls	r4, r2
 8001c2e:	4234      	tst	r4, r6
  uint32_t source_it = hdma->Instance->CCR;
 8001c30:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001c32:	d00e      	beq.n	8001c52 <HAL_DMA_IRQHandler+0x36>
 8001c34:	f015 0f04 	tst.w	r5, #4
 8001c38:	d00b      	beq.n	8001c52 <HAL_DMA_IRQHandler+0x36>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c3a:	681a      	ldr	r2, [r3, #0]
 8001c3c:	0692      	lsls	r2, r2, #26
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c3e:	bf5e      	ittt	pl
 8001c40:	681a      	ldrpl	r2, [r3, #0]
 8001c42:	f022 0204 	bicpl.w	r2, r2, #4
 8001c46:	601a      	strpl	r2, [r3, #0]
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001c48:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001c4a:	604c      	str	r4, [r1, #4]
    hdma->State = HAL_DMA_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);

    if (hdma->XferErrorCallback != NULL)
 8001c4c:	b373      	cbz	r3, 8001cac <HAL_DMA_IRQHandler+0x90>
  else
  {
    /* Nothing To Do */
  }
  return;
}
 8001c4e:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8001c50:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001c52:	2402      	movs	r4, #2
 8001c54:	4094      	lsls	r4, r2
 8001c56:	4234      	tst	r4, r6
 8001c58:	d012      	beq.n	8001c80 <HAL_DMA_IRQHandler+0x64>
 8001c5a:	f015 0f02 	tst.w	r5, #2
 8001c5e:	d00f      	beq.n	8001c80 <HAL_DMA_IRQHandler+0x64>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c60:	681a      	ldr	r2, [r3, #0]
 8001c62:	0695      	lsls	r5, r2, #26
 8001c64:	d406      	bmi.n	8001c74 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001c66:	681a      	ldr	r2, [r3, #0]
 8001c68:	f022 020a 	bic.w	r2, r2, #10
 8001c6c:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001c74:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c76:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8001c78:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8001c7c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001c7e:	e7e5      	b.n	8001c4c <HAL_DMA_IRQHandler+0x30>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001c80:	2408      	movs	r4, #8
 8001c82:	4094      	lsls	r4, r2
 8001c84:	4234      	tst	r4, r6
 8001c86:	d011      	beq.n	8001cac <HAL_DMA_IRQHandler+0x90>
 8001c88:	072c      	lsls	r4, r5, #28
 8001c8a:	d50f      	bpl.n	8001cac <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c8c:	681c      	ldr	r4, [r3, #0]
 8001c8e:	f024 040e 	bic.w	r4, r4, #14
 8001c92:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c94:	2301      	movs	r3, #1
 8001c96:	fa03 f202 	lsl.w	r2, r3, r2
 8001c9a:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001c9c:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8001c9e:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8001ca8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001caa:	e7cf      	b.n	8001c4c <HAL_DMA_IRQHandler+0x30>
}
 8001cac:	bc70      	pop	{r4, r5, r6}
 8001cae:	4770      	bx	lr

08001cb0 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00;
 8001cb0:	2300      	movs	r3, #0
{
 8001cb2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cb6:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8001e30 <HAL_GPIO_Init+0x180>
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cba:	4c5e      	ldr	r4, [pc, #376]	; (8001e34 <HAL_GPIO_Init+0x184>)
  while (((GPIO_Init->Pin) >> position) != 0)
 8001cbc:	680a      	ldr	r2, [r1, #0]
 8001cbe:	fa32 f503 	lsrs.w	r5, r2, r3
 8001cc2:	d102      	bne.n	8001cca <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 8001cc4:	b003      	add	sp, #12
 8001cc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001cca:	2501      	movs	r5, #1
 8001ccc:	fa05 fe03 	lsl.w	lr, r5, r3
    if (iocurrent)
 8001cd0:	ea1e 0202 	ands.w	r2, lr, r2
 8001cd4:	f000 80a2 	beq.w	8001e1c <HAL_GPIO_Init+0x16c>
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001cd8:	f04f 0c03 	mov.w	ip, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001cdc:	684e      	ldr	r6, [r1, #4]
 8001cde:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8001ce2:	f006 0503 	and.w	r5, r6, #3
 8001ce6:	1e6f      	subs	r7, r5, #1
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001ce8:	fa0c fc08 	lsl.w	ip, ip, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001cec:	2f01      	cmp	r7, #1
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001cee:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001cf2:	d834      	bhi.n	8001d5e <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 8001cf4:	6887      	ldr	r7, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001cf6:	ea07 0a0c 	and.w	sl, r7, ip
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001cfa:	68cf      	ldr	r7, [r1, #12]
 8001cfc:	fa07 f708 	lsl.w	r7, r7, r8
 8001d00:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8001d04:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001d06:	6847      	ldr	r7, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001d08:	ea27 0e0e 	bic.w	lr, r7, lr
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d0c:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8001d10:	409f      	lsls	r7, r3
 8001d12:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001d16:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001d18:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d1a:	2d02      	cmp	r5, #2
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001d1c:	ea07 0e0c 	and.w	lr, r7, ip
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001d20:	688f      	ldr	r7, [r1, #8]
 8001d22:	fa07 f708 	lsl.w	r7, r7, r8
 8001d26:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8001d2a:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d2c:	d119      	bne.n	8001d62 <HAL_GPIO_Init+0xb2>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001d2e:	f04f 0e0f 	mov.w	lr, #15
        temp = GPIOx->AFR[position >> 3];
 8001d32:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001d36:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001d3a:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8001d3e:	f8da 7020 	ldr.w	r7, [sl, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001d42:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001d46:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001d4a:	ea27 0e0e 	bic.w	lr, r7, lr
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001d4e:	690f      	ldr	r7, [r1, #16]
 8001d50:	fa07 f70b 	lsl.w	r7, r7, fp
 8001d54:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3] = temp;
 8001d58:	f8ca 7020 	str.w	r7, [sl, #32]
 8001d5c:	e001      	b.n	8001d62 <HAL_GPIO_Init+0xb2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d5e:	2d03      	cmp	r5, #3
 8001d60:	d1da      	bne.n	8001d18 <HAL_GPIO_Init+0x68>
      temp = GPIOx->MODER;
 8001d62:	6807      	ldr	r7, [r0, #0]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001d64:	fa05 f508 	lsl.w	r5, r5, r8
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001d68:	ea07 070c 	and.w	r7, r7, ip
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001d6c:	432f      	orrs	r7, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d6e:	f416 3f40 	tst.w	r6, #196608	; 0x30000
      GPIOx->MODER = temp;
 8001d72:	6007      	str	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d74:	d052      	beq.n	8001e1c <HAL_GPIO_Init+0x16c>
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001d76:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d7a:	f8d9 5020 	ldr.w	r5, [r9, #32]
 8001d7e:	f023 0703 	bic.w	r7, r3, #3
 8001d82:	f045 0501 	orr.w	r5, r5, #1
 8001d86:	f8c9 5020 	str.w	r5, [r9, #32]
 8001d8a:	f8d9 5020 	ldr.w	r5, [r9, #32]
 8001d8e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001d92:	f005 0501 	and.w	r5, r5, #1
 8001d96:	9501      	str	r5, [sp, #4]
 8001d98:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001d9c:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001da0:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001da2:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp = SYSCFG->EXTICR[position >> 2];
 8001da6:	68bd      	ldr	r5, [r7, #8]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001da8:	fa0c fc0e 	lsl.w	ip, ip, lr
 8001dac:	ea25 0c0c 	bic.w	ip, r5, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001db0:	4d21      	ldr	r5, [pc, #132]	; (8001e38 <HAL_GPIO_Init+0x188>)
 8001db2:	42a8      	cmp	r0, r5
 8001db4:	d034      	beq.n	8001e20 <HAL_GPIO_Init+0x170>
 8001db6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001dba:	42a8      	cmp	r0, r5
 8001dbc:	d032      	beq.n	8001e24 <HAL_GPIO_Init+0x174>
 8001dbe:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001dc2:	42a8      	cmp	r0, r5
 8001dc4:	d030      	beq.n	8001e28 <HAL_GPIO_Init+0x178>
 8001dc6:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001dca:	42a8      	cmp	r0, r5
 8001dcc:	d02e      	beq.n	8001e2c <HAL_GPIO_Init+0x17c>
 8001dce:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001dd2:	42a8      	cmp	r0, r5
 8001dd4:	bf0c      	ite	eq
 8001dd6:	2504      	moveq	r5, #4
 8001dd8:	2505      	movne	r5, #5
 8001dda:	fa05 f50e 	lsl.w	r5, r5, lr
 8001dde:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8001de2:	60bd      	str	r5, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001de4:	43d7      	mvns	r7, r2
        temp = EXTI->IMR;
 8001de6:	6825      	ldr	r5, [r4, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001de8:	f416 3f80 	tst.w	r6, #65536	; 0x10000
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001dec:	bf0c      	ite	eq
 8001dee:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent);
 8001df0:	4315      	orrne	r5, r2
        EXTI->IMR = temp;
 8001df2:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR;
 8001df4:	6865      	ldr	r5, [r4, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001df6:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001dfa:	bf0c      	ite	eq
 8001dfc:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent);
 8001dfe:	4315      	orrne	r5, r2
        EXTI->EMR = temp;
 8001e00:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR;
 8001e02:	68a5      	ldr	r5, [r4, #8]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e04:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001e08:	bf0c      	ite	eq
 8001e0a:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent);
 8001e0c:	4315      	orrne	r5, r2
        EXTI->RTSR = temp;
 8001e0e:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR;
 8001e10:	68e5      	ldr	r5, [r4, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e12:	02b6      	lsls	r6, r6, #10
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001e14:	bf54      	ite	pl
 8001e16:	403d      	andpl	r5, r7
          SET_BIT(temp, iocurrent);
 8001e18:	4315      	orrmi	r5, r2
        EXTI->FTSR = temp;
 8001e1a:	60e5      	str	r5, [r4, #12]
    position++;
 8001e1c:	3301      	adds	r3, #1
 8001e1e:	e74d      	b.n	8001cbc <HAL_GPIO_Init+0xc>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001e20:	2500      	movs	r5, #0
 8001e22:	e7da      	b.n	8001dda <HAL_GPIO_Init+0x12a>
 8001e24:	2501      	movs	r5, #1
 8001e26:	e7d8      	b.n	8001dda <HAL_GPIO_Init+0x12a>
 8001e28:	2502      	movs	r5, #2
 8001e2a:	e7d6      	b.n	8001dda <HAL_GPIO_Init+0x12a>
 8001e2c:	2503      	movs	r5, #3
 8001e2e:	e7d4      	b.n	8001dda <HAL_GPIO_Init+0x12a>
 8001e30:	40023800 	.word	0x40023800
 8001e34:	40010400 	.word	0x40010400
 8001e38:	40020000 	.word	0x40020000

08001e3c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e3c:	6903      	ldr	r3, [r0, #16]
 8001e3e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001e40:	bf14      	ite	ne
 8001e42:	2001      	movne	r0, #1
 8001e44:	2000      	moveq	r0, #0
 8001e46:	4770      	bx	lr

08001e48 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e48:	b10a      	cbz	r2, 8001e4e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001e4a:	6181      	str	r1, [r0, #24]
  }
}
 8001e4c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001e4e:	0409      	lsls	r1, r1, #16
 8001e50:	e7fb      	b.n	8001e4a <HAL_GPIO_WritePin+0x2>
	...

08001e54 <HAL_GPIO_EXTI_IRQHandler>:
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001e54:	4a04      	ldr	r2, [pc, #16]	; (8001e68 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8001e56:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001e58:	6951      	ldr	r1, [r2, #20]
 8001e5a:	4201      	tst	r1, r0
 8001e5c:	d002      	beq.n	8001e64 <HAL_GPIO_EXTI_IRQHandler+0x10>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001e5e:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001e60:	f002 fe88 	bl	8004b74 <HAL_GPIO_EXTI_Callback>
  }
}
 8001e64:	bd08      	pop	{r3, pc}
 8001e66:	bf00      	nop
 8001e68:	40010400 	.word	0x40010400

08001e6c <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001e6c:	6801      	ldr	r1, [r0, #0]
 8001e6e:	2200      	movs	r2, #0
 8001e70:	694b      	ldr	r3, [r1, #20]
 8001e72:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8001e76:	d010      	beq.n	8001e9a <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e78:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001e7c:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8001e7e:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8001e80:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001e82:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001e86:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e8a:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e8c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001e90:	f043 0304 	orr.w	r3, r3, #4
 8001e94:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8001e96:	2001      	movs	r0, #1
 8001e98:	4770      	bx	lr
  }
  return HAL_OK;
 8001e9a:	4618      	mov	r0, r3
}
 8001e9c:	4770      	bx	lr

08001e9e <I2C_WaitOnFlagUntilTimeout>:
{
 8001e9e:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 8001ea2:	4606      	mov	r6, r0
 8001ea4:	460f      	mov	r7, r1
 8001ea6:	4691      	mov	r9, r2
 8001ea8:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001eaa:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8001eae:	6833      	ldr	r3, [r6, #0]
 8001eb0:	f1ba 0f01 	cmp.w	sl, #1
 8001eb4:	bf0c      	ite	eq
 8001eb6:	695c      	ldreq	r4, [r3, #20]
 8001eb8:	699c      	ldrne	r4, [r3, #24]
 8001eba:	ea27 0404 	bic.w	r4, r7, r4
 8001ebe:	b2a4      	uxth	r4, r4
 8001ec0:	fab4 f484 	clz	r4, r4
 8001ec4:	0964      	lsrs	r4, r4, #5
 8001ec6:	45a1      	cmp	r9, r4
 8001ec8:	d001      	beq.n	8001ece <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8001eca:	2000      	movs	r0, #0
 8001ecc:	e017      	b.n	8001efe <I2C_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 8001ece:	1c6a      	adds	r2, r5, #1
 8001ed0:	d0ee      	beq.n	8001eb0 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ed2:	f7ff fbdd 	bl	8001690 <HAL_GetTick>
 8001ed6:	9b08      	ldr	r3, [sp, #32]
 8001ed8:	1ac0      	subs	r0, r0, r3
 8001eda:	42a8      	cmp	r0, r5
 8001edc:	d801      	bhi.n	8001ee2 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001ede:	2d00      	cmp	r5, #0
 8001ee0:	d1e5      	bne.n	8001eae <I2C_WaitOnFlagUntilTimeout+0x10>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001ee2:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8001ee4:	2220      	movs	r2, #32
        return HAL_ERROR;
 8001ee6:	2001      	movs	r0, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001ee8:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001eea:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001eee:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001ef2:	6c32      	ldr	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001ef4:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001ef8:	f042 0220 	orr.w	r2, r2, #32
 8001efc:	6432      	str	r2, [r6, #64]	; 0x40
}
 8001efe:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

08001f02 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001f02:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001f06:	4604      	mov	r4, r0
 8001f08:	460f      	mov	r7, r1
 8001f0a:	4616      	mov	r6, r2
 8001f0c:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001f0e:	6825      	ldr	r5, [r4, #0]
 8001f10:	6968      	ldr	r0, [r5, #20]
 8001f12:	ea27 0000 	bic.w	r0, r7, r0
 8001f16:	b280      	uxth	r0, r0
 8001f18:	b1b8      	cbz	r0, 8001f4a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x48>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f1a:	696b      	ldr	r3, [r5, #20]
 8001f1c:	055a      	lsls	r2, r3, #21
 8001f1e:	d516      	bpl.n	8001f4e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f20:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f22:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001f24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f28:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f2a:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001f2e:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f30:	2300      	movs	r3, #0
 8001f32:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f34:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f38:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f3c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001f3e:	f042 0204 	orr.w	r2, r2, #4
        return HAL_ERROR;
 8001f42:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f44:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001f46:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8001f4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 8001f4e:	1c73      	adds	r3, r6, #1
 8001f50:	d0de      	beq.n	8001f10 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f52:	f7ff fb9d 	bl	8001690 <HAL_GetTick>
 8001f56:	eba0 0008 	sub.w	r0, r0, r8
 8001f5a:	42b0      	cmp	r0, r6
 8001f5c:	d801      	bhi.n	8001f62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
 8001f5e:	2e00      	cmp	r6, #0
 8001f60:	d1d5      	bne.n	8001f0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001f62:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f64:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001f66:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001f68:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f6c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001f70:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001f72:	f042 0220 	orr.w	r2, r2, #32
 8001f76:	e7e4      	b.n	8001f42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

08001f78 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8001f78:	b570      	push	{r4, r5, r6, lr}
 8001f7a:	4604      	mov	r4, r0
 8001f7c:	460d      	mov	r5, r1
 8001f7e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8001f80:	6821      	ldr	r1, [r4, #0]
 8001f82:	694b      	ldr	r3, [r1, #20]
 8001f84:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8001f88:	d001      	beq.n	8001f8e <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8001f8a:	2000      	movs	r0, #0
 8001f8c:	e010      	b.n	8001fb0 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8001f8e:	694a      	ldr	r2, [r1, #20]
 8001f90:	06d2      	lsls	r2, r2, #27
 8001f92:	d50e      	bpl.n	8001fb2 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001f94:	f06f 0210 	mvn.w	r2, #16
 8001f98:	614a      	str	r2, [r1, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f9a:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001f9c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001f9e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fa2:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8001fa6:	6c22      	ldr	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8001fa8:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001faa:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8001fac:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8001fb0:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fb2:	f7ff fb6d 	bl	8001690 <HAL_GetTick>
 8001fb6:	1b80      	subs	r0, r0, r6
 8001fb8:	42a8      	cmp	r0, r5
 8001fba:	d801      	bhi.n	8001fc0 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 8001fbc:	2d00      	cmp	r5, #0
 8001fbe:	d1df      	bne.n	8001f80 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001fc0:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8001fc2:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8001fc4:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001fc6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fca:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001fce:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8001fd0:	f042 0220 	orr.w	r2, r2, #32
 8001fd4:	e7e8      	b.n	8001fa8 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

08001fd6 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8001fd6:	b570      	push	{r4, r5, r6, lr}
 8001fd8:	4604      	mov	r4, r0
 8001fda:	460d      	mov	r5, r1
 8001fdc:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001fde:	6823      	ldr	r3, [r4, #0]
 8001fe0:	695b      	ldr	r3, [r3, #20]
 8001fe2:	075b      	lsls	r3, r3, #29
 8001fe4:	d501      	bpl.n	8001fea <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8001fe6:	2000      	movs	r0, #0
}
 8001fe8:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001fea:	4620      	mov	r0, r4
 8001fec:	f7ff ff3e 	bl	8001e6c <I2C_IsAcknowledgeFailed>
 8001ff0:	b9a8      	cbnz	r0, 800201e <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8001ff2:	1c6a      	adds	r2, r5, #1
 8001ff4:	d0f3      	beq.n	8001fde <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001ff6:	f7ff fb4b 	bl	8001690 <HAL_GetTick>
 8001ffa:	1b80      	subs	r0, r0, r6
 8001ffc:	42a8      	cmp	r0, r5
 8001ffe:	d801      	bhi.n	8002004 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8002000:	2d00      	cmp	r5, #0
 8002002:	d1ec      	bne.n	8001fde <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002004:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8002006:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002008:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800200a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800200e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002012:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002014:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002018:	f042 0220 	orr.w	r2, r2, #32
 800201c:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 800201e:	2001      	movs	r0, #1
 8002020:	e7e2      	b.n	8001fe8 <I2C_WaitOnBTFFlagUntilTimeout+0x12>

08002022 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8002022:	b570      	push	{r4, r5, r6, lr}
 8002024:	4604      	mov	r4, r0
 8002026:	460d      	mov	r5, r1
 8002028:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800202a:	6823      	ldr	r3, [r4, #0]
 800202c:	695b      	ldr	r3, [r3, #20]
 800202e:	061b      	lsls	r3, r3, #24
 8002030:	d501      	bpl.n	8002036 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8002032:	2000      	movs	r0, #0
}
 8002034:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002036:	4620      	mov	r0, r4
 8002038:	f7ff ff18 	bl	8001e6c <I2C_IsAcknowledgeFailed>
 800203c:	b9a8      	cbnz	r0, 800206a <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 800203e:	1c6a      	adds	r2, r5, #1
 8002040:	d0f3      	beq.n	800202a <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002042:	f7ff fb25 	bl	8001690 <HAL_GetTick>
 8002046:	1b80      	subs	r0, r0, r6
 8002048:	42a8      	cmp	r0, r5
 800204a:	d801      	bhi.n	8002050 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 800204c:	2d00      	cmp	r5, #0
 800204e:	d1ec      	bne.n	800202a <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002050:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8002052:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002054:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002056:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800205a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800205e:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002060:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002064:	f042 0220 	orr.w	r2, r2, #32
 8002068:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 800206a:	2001      	movs	r0, #1
 800206c:	e7e2      	b.n	8002034 <I2C_WaitOnTXEFlagUntilTimeout+0x12>
	...

08002070 <HAL_I2C_Init>:
{
 8002070:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8002072:	4604      	mov	r4, r0
 8002074:	b908      	cbnz	r0, 800207a <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8002076:	2001      	movs	r0, #1
}
 8002078:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800207a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800207e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002082:	b91b      	cbnz	r3, 800208c <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8002084:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8002088:	f7ff f858 	bl	800113c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800208c:	2324      	movs	r3, #36	; 0x24
 800208e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002092:	6823      	ldr	r3, [r4, #0]
 8002094:	681a      	ldr	r2, [r3, #0]
 8002096:	f022 0201 	bic.w	r2, r2, #1
 800209a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80020a2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80020a4:	681a      	ldr	r2, [r3, #0]
 80020a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80020aa:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80020ac:	f000 fe24 	bl	8002cf8 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80020b0:	4a3f      	ldr	r2, [pc, #252]	; (80021b0 <HAL_I2C_Init+0x140>)
 80020b2:	6863      	ldr	r3, [r4, #4]
 80020b4:	4293      	cmp	r3, r2
 80020b6:	bf94      	ite	ls
 80020b8:	4a3e      	ldrls	r2, [pc, #248]	; (80021b4 <HAL_I2C_Init+0x144>)
 80020ba:	4a3f      	ldrhi	r2, [pc, #252]	; (80021b8 <HAL_I2C_Init+0x148>)
 80020bc:	4290      	cmp	r0, r2
 80020be:	bf8c      	ite	hi
 80020c0:	2200      	movhi	r2, #0
 80020c2:	2201      	movls	r2, #1
 80020c4:	2a00      	cmp	r2, #0
 80020c6:	d1d6      	bne.n	8002076 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020c8:	4e39      	ldr	r6, [pc, #228]	; (80021b0 <HAL_I2C_Init+0x140>)
  freqrange = I2C_FREQRANGE(pclk1);
 80020ca:	493c      	ldr	r1, [pc, #240]	; (80021bc <HAL_I2C_Init+0x14c>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020cc:	42b3      	cmp	r3, r6
  freqrange = I2C_FREQRANGE(pclk1);
 80020ce:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020d2:	bf88      	it	hi
 80020d4:	f44f 7696 	movhi.w	r6, #300	; 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020d8:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80020da:	f100 30ff 	add.w	r0, r0, #4294967295
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020de:	6855      	ldr	r5, [r2, #4]
 80020e0:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80020e4:	ea45 0501 	orr.w	r5, r5, r1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020e8:	bf82      	ittt	hi
 80020ea:	4371      	mulhi	r1, r6
 80020ec:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 80020f0:	fbb1 f1f6 	udivhi	r1, r1, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80020f4:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80020f6:	6a15      	ldr	r5, [r2, #32]
 80020f8:	3101      	adds	r1, #1
 80020fa:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80020fe:	4329      	orrs	r1, r5
 8002100:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002102:	69d1      	ldr	r1, [r2, #28]
 8002104:	4d2a      	ldr	r5, [pc, #168]	; (80021b0 <HAL_I2C_Init+0x140>)
 8002106:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 800210a:	42ab      	cmp	r3, r5
 800210c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002110:	d832      	bhi.n	8002178 <HAL_I2C_Init+0x108>
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	fbb0 f0f3 	udiv	r0, r0, r3
 8002118:	1c43      	adds	r3, r0, #1
 800211a:	f640 70fc 	movw	r0, #4092	; 0xffc
 800211e:	4203      	tst	r3, r0
 8002120:	d042      	beq.n	80021a8 <HAL_I2C_Init+0x138>
 8002122:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002126:	430b      	orrs	r3, r1
 8002128:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800212a:	6811      	ldr	r1, [r2, #0]
 800212c:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8002130:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8002134:	4303      	orrs	r3, r0
 8002136:	430b      	orrs	r3, r1
 8002138:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800213a:	6891      	ldr	r1, [r2, #8]
 800213c:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8002140:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8002144:	4303      	orrs	r3, r0
 8002146:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800214a:	430b      	orrs	r3, r1
 800214c:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800214e:	68d1      	ldr	r1, [r2, #12]
 8002150:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8002154:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002158:	4303      	orrs	r3, r0
 800215a:	430b      	orrs	r3, r1
 800215c:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 800215e:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002160:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8002162:	f043 0301 	orr.w	r3, r3, #1
 8002166:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8002168:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800216a:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800216c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002170:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002172:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8002176:	e77f      	b.n	8002078 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002178:	68a5      	ldr	r5, [r4, #8]
 800217a:	b955      	cbnz	r5, 8002192 <HAL_I2C_Init+0x122>
 800217c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002180:	fbb0 f3f3 	udiv	r3, r0, r3
 8002184:	3301      	adds	r3, #1
 8002186:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800218a:	b17b      	cbz	r3, 80021ac <HAL_I2C_Init+0x13c>
 800218c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002190:	e7c9      	b.n	8002126 <HAL_I2C_Init+0xb6>
 8002192:	2519      	movs	r5, #25
 8002194:	436b      	muls	r3, r5
 8002196:	fbb0 f3f3 	udiv	r3, r0, r3
 800219a:	3301      	adds	r3, #1
 800219c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021a0:	b123      	cbz	r3, 80021ac <HAL_I2C_Init+0x13c>
 80021a2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80021a6:	e7be      	b.n	8002126 <HAL_I2C_Init+0xb6>
 80021a8:	2304      	movs	r3, #4
 80021aa:	e7bc      	b.n	8002126 <HAL_I2C_Init+0xb6>
 80021ac:	2301      	movs	r3, #1
 80021ae:	e7ba      	b.n	8002126 <HAL_I2C_Init+0xb6>
 80021b0:	000186a0 	.word	0x000186a0
 80021b4:	001e847f 	.word	0x001e847f
 80021b8:	003d08ff 	.word	0x003d08ff
 80021bc:	000f4240 	.word	0x000f4240

080021c0 <HAL_I2C_Master_Transmit>:
{
 80021c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80021c4:	4604      	mov	r4, r0
 80021c6:	b085      	sub	sp, #20
 80021c8:	4698      	mov	r8, r3
 80021ca:	460d      	mov	r5, r1
 80021cc:	4691      	mov	r9, r2
 80021ce:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 80021d0:	f7ff fa5e 	bl	8001690 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80021d4:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 80021d8:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80021da:	2b20      	cmp	r3, #32
 80021dc:	d004      	beq.n	80021e8 <HAL_I2C_Master_Transmit+0x28>
    return HAL_BUSY;
 80021de:	2502      	movs	r5, #2
}
 80021e0:	4628      	mov	r0, r5
 80021e2:	b005      	add	sp, #20
 80021e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021e8:	9000      	str	r0, [sp, #0]
 80021ea:	2319      	movs	r3, #25
 80021ec:	2201      	movs	r2, #1
 80021ee:	4620      	mov	r0, r4
 80021f0:	495b      	ldr	r1, [pc, #364]	; (8002360 <HAL_I2C_Master_Transmit+0x1a0>)
 80021f2:	f7ff fe54 	bl	8001e9e <I2C_WaitOnFlagUntilTimeout>
 80021f6:	2800      	cmp	r0, #0
 80021f8:	d1f1      	bne.n	80021de <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 80021fa:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80021fe:	2b01      	cmp	r3, #1
 8002200:	d0ed      	beq.n	80021de <HAL_I2C_Master_Transmit+0x1e>
 8002202:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002204:	6821      	ldr	r1, [r4, #0]
    __HAL_LOCK(hi2c);
 8002206:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800220a:	680b      	ldr	r3, [r1, #0]
 800220c:	07da      	lsls	r2, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 800220e:	bf5e      	ittt	pl
 8002210:	680b      	ldrpl	r3, [r1, #0]
 8002212:	f043 0301 	orrpl.w	r3, r3, #1
 8002216:	600b      	strpl	r3, [r1, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002218:	680b      	ldr	r3, [r1, #0]
 800221a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800221e:	600b      	str	r3, [r1, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002220:	2321      	movs	r3, #33	; 0x21
 8002222:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002226:	2310      	movs	r3, #16
 8002228:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800222c:	2300      	movs	r3, #0
 800222e:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8002230:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002234:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8002236:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 800223a:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800223c:	4b49      	ldr	r3, [pc, #292]	; (8002364 <HAL_I2C_Master_Transmit+0x1a4>)
 800223e:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002240:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002242:	2b08      	cmp	r3, #8
 8002244:	d004      	beq.n	8002250 <HAL_I2C_Master_Transmit+0x90>
 8002246:	2b01      	cmp	r3, #1
 8002248:	d002      	beq.n	8002250 <HAL_I2C_Master_Transmit+0x90>
 800224a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800224e:	d104      	bne.n	800225a <HAL_I2C_Master_Transmit+0x9a>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002250:	680b      	ldr	r3, [r1, #0]
 8002252:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002256:	600b      	str	r3, [r1, #0]
 8002258:	e002      	b.n	8002260 <HAL_I2C_Master_Transmit+0xa0>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800225a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800225c:	2b12      	cmp	r3, #18
 800225e:	d0f7      	beq.n	8002250 <HAL_I2C_Master_Transmit+0x90>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002260:	2200      	movs	r2, #0
 8002262:	463b      	mov	r3, r7
 8002264:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002268:	4620      	mov	r0, r4
 800226a:	9600      	str	r6, [sp, #0]
 800226c:	f7ff fe17 	bl	8001e9e <I2C_WaitOnFlagUntilTimeout>
 8002270:	6822      	ldr	r2, [r4, #0]
 8002272:	b138      	cbz	r0, 8002284 <HAL_I2C_Master_Transmit+0xc4>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002274:	6813      	ldr	r3, [r2, #0]
 8002276:	05db      	lsls	r3, r3, #23
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002278:	bf44      	itt	mi
 800227a:	f44f 7300 	movmi.w	r3, #512	; 0x200
 800227e:	6423      	strmi	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002280:	2501      	movs	r5, #1
 8002282:	e7ad      	b.n	80021e0 <HAL_I2C_Master_Transmit+0x20>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002284:	6923      	ldr	r3, [r4, #16]
 8002286:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800228a:	d121      	bne.n	80022d0 <HAL_I2C_Master_Transmit+0x110>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800228c:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8002290:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002292:	4633      	mov	r3, r6
 8002294:	463a      	mov	r2, r7
 8002296:	4620      	mov	r0, r4
 8002298:	4933      	ldr	r1, [pc, #204]	; (8002368 <HAL_I2C_Master_Transmit+0x1a8>)
 800229a:	f7ff fe32 	bl	8001f02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800229e:	4605      	mov	r5, r0
 80022a0:	2800      	cmp	r0, #0
 80022a2:	d1ed      	bne.n	8002280 <HAL_I2C_Master_Transmit+0xc0>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022a4:	6823      	ldr	r3, [r4, #0]
 80022a6:	9003      	str	r0, [sp, #12]
 80022a8:	695a      	ldr	r2, [r3, #20]
 80022aa:	9203      	str	r2, [sp, #12]
 80022ac:	699b      	ldr	r3, [r3, #24]
 80022ae:	9303      	str	r3, [sp, #12]
 80022b0:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 80022b2:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80022b4:	b9f3      	cbnz	r3, 80022f4 <HAL_I2C_Master_Transmit+0x134>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022b6:	6821      	ldr	r1, [r4, #0]
 80022b8:	680a      	ldr	r2, [r1, #0]
 80022ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022be:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80022c0:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 80022c2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 80022c6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80022ca:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 80022ce:	e787      	b.n	80021e0 <HAL_I2C_Master_Transmit+0x20>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80022d0:	11eb      	asrs	r3, r5, #7
 80022d2:	f003 0306 	and.w	r3, r3, #6
 80022d6:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80022da:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80022dc:	4620      	mov	r0, r4
 80022de:	4633      	mov	r3, r6
 80022e0:	463a      	mov	r2, r7
 80022e2:	4922      	ldr	r1, [pc, #136]	; (800236c <HAL_I2C_Master_Transmit+0x1ac>)
 80022e4:	f7ff fe0d 	bl	8001f02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80022e8:	2800      	cmp	r0, #0
 80022ea:	d1c9      	bne.n	8002280 <HAL_I2C_Master_Transmit+0xc0>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80022ec:	6823      	ldr	r3, [r4, #0]
 80022ee:	b2ed      	uxtb	r5, r5
 80022f0:	611d      	str	r5, [r3, #16]
 80022f2:	e7ce      	b.n	8002292 <HAL_I2C_Master_Transmit+0xd2>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022f4:	4632      	mov	r2, r6
 80022f6:	4639      	mov	r1, r7
 80022f8:	4620      	mov	r0, r4
 80022fa:	f7ff fe92 	bl	8002022 <I2C_WaitOnTXEFlagUntilTimeout>
 80022fe:	b140      	cbz	r0, 8002312 <HAL_I2C_Master_Transmit+0x152>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002300:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002302:	2b04      	cmp	r3, #4
 8002304:	d1bc      	bne.n	8002280 <HAL_I2C_Master_Transmit+0xc0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002306:	6822      	ldr	r2, [r4, #0]
 8002308:	6813      	ldr	r3, [r2, #0]
 800230a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800230e:	6013      	str	r3, [r2, #0]
 8002310:	e7b6      	b.n	8002280 <HAL_I2C_Master_Transmit+0xc0>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002312:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002314:	6820      	ldr	r0, [r4, #0]
 8002316:	461a      	mov	r2, r3
 8002318:	f812 1b01 	ldrb.w	r1, [r2], #1
 800231c:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 800231e:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8002320:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 8002322:	3a01      	subs	r2, #1
 8002324:	b292      	uxth	r2, r2
 8002326:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8002328:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800232a:	f8d0 c014 	ldr.w	ip, [r0, #20]
      hi2c->XferSize--;
 800232e:	1e51      	subs	r1, r2, #1
 8002330:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002332:	f01c 0f04 	tst.w	ip, #4
      hi2c->XferSize--;
 8002336:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002338:	d00a      	beq.n	8002350 <HAL_I2C_Master_Transmit+0x190>
 800233a:	b149      	cbz	r1, 8002350 <HAL_I2C_Master_Transmit+0x190>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800233c:	7859      	ldrb	r1, [r3, #1]
        hi2c->pBuffPtr++;
 800233e:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002340:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 8002342:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8002344:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8002346:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 8002348:	3b01      	subs	r3, #1
 800234a:	b29b      	uxth	r3, r3
 800234c:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 800234e:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002350:	4632      	mov	r2, r6
 8002352:	4639      	mov	r1, r7
 8002354:	4620      	mov	r0, r4
 8002356:	f7ff fe3e 	bl	8001fd6 <I2C_WaitOnBTFFlagUntilTimeout>
 800235a:	2800      	cmp	r0, #0
 800235c:	d0a9      	beq.n	80022b2 <HAL_I2C_Master_Transmit+0xf2>
 800235e:	e7cf      	b.n	8002300 <HAL_I2C_Master_Transmit+0x140>
 8002360:	00100002 	.word	0x00100002
 8002364:	ffff0000 	.word	0xffff0000
 8002368:	00010002 	.word	0x00010002
 800236c:	00010008 	.word	0x00010008

08002370 <HAL_I2C_Master_Receive>:
{
 8002370:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002374:	4604      	mov	r4, r0
 8002376:	b089      	sub	sp, #36	; 0x24
 8002378:	4698      	mov	r8, r3
 800237a:	460e      	mov	r6, r1
 800237c:	4691      	mov	r9, r2
 800237e:	9f10      	ldr	r7, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8002380:	f7ff f986 	bl	8001690 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002384:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8002388:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800238a:	2b20      	cmp	r3, #32
 800238c:	d004      	beq.n	8002398 <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY;
 800238e:	2602      	movs	r6, #2
}
 8002390:	4630      	mov	r0, r6
 8002392:	b009      	add	sp, #36	; 0x24
 8002394:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002398:	9000      	str	r0, [sp, #0]
 800239a:	2319      	movs	r3, #25
 800239c:	2201      	movs	r2, #1
 800239e:	4620      	mov	r0, r4
 80023a0:	4998      	ldr	r1, [pc, #608]	; (8002604 <HAL_I2C_Master_Receive+0x294>)
 80023a2:	f7ff fd7c 	bl	8001e9e <I2C_WaitOnFlagUntilTimeout>
 80023a6:	2800      	cmp	r0, #0
 80023a8:	d1f1      	bne.n	800238e <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 80023aa:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d0ed      	beq.n	800238e <HAL_I2C_Master_Receive+0x1e>
 80023b2:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023b4:	6821      	ldr	r1, [r4, #0]
    __HAL_LOCK(hi2c);
 80023b6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80023ba:	680b      	ldr	r3, [r1, #0]
 80023bc:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 80023be:	bf5e      	ittt	pl
 80023c0:	680b      	ldrpl	r3, [r1, #0]
 80023c2:	f043 0301 	orrpl.w	r3, r3, #1
 80023c6:	600b      	strpl	r3, [r1, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80023c8:	680b      	ldr	r3, [r1, #0]
 80023ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80023ce:	600b      	str	r3, [r1, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80023d0:	2322      	movs	r3, #34	; 0x22
 80023d2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80023d6:	2310      	movs	r3, #16
 80023d8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80023dc:	2300      	movs	r3, #0
 80023de:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80023e0:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80023e4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 80023e6:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 80023ea:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80023ec:	4b86      	ldr	r3, [pc, #536]	; (8002608 <HAL_I2C_Master_Receive+0x298>)
 80023ee:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80023f0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023f2:	680a      	ldr	r2, [r1, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80023f4:	2b08      	cmp	r3, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80023f6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80023fa:	600a      	str	r2, [r1, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80023fc:	d004      	beq.n	8002408 <HAL_I2C_Master_Receive+0x98>
 80023fe:	2b01      	cmp	r3, #1
 8002400:	d002      	beq.n	8002408 <HAL_I2C_Master_Receive+0x98>
 8002402:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002406:	d104      	bne.n	8002412 <HAL_I2C_Master_Receive+0xa2>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002408:	680b      	ldr	r3, [r1, #0]
 800240a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800240e:	600b      	str	r3, [r1, #0]
 8002410:	e002      	b.n	8002418 <HAL_I2C_Master_Receive+0xa8>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002412:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002414:	2b11      	cmp	r3, #17
 8002416:	d0f7      	beq.n	8002408 <HAL_I2C_Master_Receive+0x98>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002418:	463b      	mov	r3, r7
 800241a:	2200      	movs	r2, #0
 800241c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002420:	4620      	mov	r0, r4
 8002422:	9500      	str	r5, [sp, #0]
 8002424:	f7ff fd3b 	bl	8001e9e <I2C_WaitOnFlagUntilTimeout>
 8002428:	6823      	ldr	r3, [r4, #0]
 800242a:	b138      	cbz	r0, 800243c <HAL_I2C_Master_Receive+0xcc>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800242c:	681b      	ldr	r3, [r3, #0]
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800242e:	05d8      	lsls	r0, r3, #23
 8002430:	d502      	bpl.n	8002438 <HAL_I2C_Master_Receive+0xc8>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002432:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002436:	6423      	str	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002438:	2601      	movs	r6, #1
 800243a:	e7a9      	b.n	8002390 <HAL_I2C_Master_Receive+0x20>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800243c:	6922      	ldr	r2, [r4, #16]
 800243e:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8002442:	d127      	bne.n	8002494 <HAL_I2C_Master_Receive+0x124>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002444:	f046 0601 	orr.w	r6, r6, #1
 8002448:	b2f6      	uxtb	r6, r6
 800244a:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800244c:	462b      	mov	r3, r5
 800244e:	463a      	mov	r2, r7
 8002450:	4620      	mov	r0, r4
 8002452:	496e      	ldr	r1, [pc, #440]	; (800260c <HAL_I2C_Master_Receive+0x29c>)
 8002454:	f7ff fd55 	bl	8001f02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002458:	4606      	mov	r6, r0
 800245a:	2800      	cmp	r0, #0
 800245c:	d1ec      	bne.n	8002438 <HAL_I2C_Master_Receive+0xc8>
    if (hi2c->XferSize == 0U)
 800245e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002460:	6821      	ldr	r1, [r4, #0]
    if (hi2c->XferSize == 0U)
 8002462:	2b00      	cmp	r3, #0
 8002464:	d14b      	bne.n	80024fe <HAL_I2C_Master_Receive+0x18e>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002466:	9003      	str	r0, [sp, #12]
 8002468:	694b      	ldr	r3, [r1, #20]
 800246a:	9303      	str	r3, [sp, #12]
 800246c:	698b      	ldr	r3, [r1, #24]
 800246e:	9303      	str	r3, [sp, #12]
 8002470:	9b03      	ldr	r3, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002472:	680b      	ldr	r3, [r1, #0]
 8002474:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002478:	600b      	str	r3, [r1, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800247a:	f8df 8194 	ldr.w	r8, [pc, #404]	; 8002610 <HAL_I2C_Master_Receive+0x2a0>
    while (hi2c->XferSize > 0U)
 800247e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002480:	2b00      	cmp	r3, #0
 8002482:	d164      	bne.n	800254e <HAL_I2C_Master_Receive+0x1de>
    hi2c->State = HAL_I2C_STATE_READY;
 8002484:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8002486:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 800248a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800248e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8002492:	e77d      	b.n	8002390 <HAL_I2C_Master_Receive+0x20>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002494:	ea4f 18e6 	mov.w	r8, r6, asr #7
 8002498:	f008 0806 	and.w	r8, r8, #6
 800249c:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 80024a0:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80024a2:	4620      	mov	r0, r4
 80024a4:	462b      	mov	r3, r5
 80024a6:	463a      	mov	r2, r7
 80024a8:	495a      	ldr	r1, [pc, #360]	; (8002614 <HAL_I2C_Master_Receive+0x2a4>)
 80024aa:	f7ff fd2a 	bl	8001f02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024ae:	2800      	cmp	r0, #0
 80024b0:	d1c2      	bne.n	8002438 <HAL_I2C_Master_Receive+0xc8>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80024b2:	6823      	ldr	r3, [r4, #0]
 80024b4:	b2f6      	uxtb	r6, r6
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024b6:	463a      	mov	r2, r7
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80024b8:	611e      	str	r6, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024ba:	4620      	mov	r0, r4
 80024bc:	462b      	mov	r3, r5
 80024be:	4953      	ldr	r1, [pc, #332]	; (800260c <HAL_I2C_Master_Receive+0x29c>)
 80024c0:	f7ff fd1f 	bl	8001f02 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024c4:	4602      	mov	r2, r0
 80024c6:	2800      	cmp	r0, #0
 80024c8:	d1b6      	bne.n	8002438 <HAL_I2C_Master_Receive+0xc8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024ca:	6823      	ldr	r3, [r4, #0]
 80024cc:	9007      	str	r0, [sp, #28]
 80024ce:	6959      	ldr	r1, [r3, #20]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024d0:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80024d2:	9107      	str	r1, [sp, #28]
 80024d4:	6999      	ldr	r1, [r3, #24]
 80024d6:	9107      	str	r1, [sp, #28]
 80024d8:	9907      	ldr	r1, [sp, #28]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024da:	6819      	ldr	r1, [r3, #0]
 80024dc:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80024e0:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024e2:	463b      	mov	r3, r7
 80024e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024e8:	9500      	str	r5, [sp, #0]
 80024ea:	f7ff fcd8 	bl	8001e9e <I2C_WaitOnFlagUntilTimeout>
 80024ee:	6822      	ldr	r2, [r4, #0]
 80024f0:	b108      	cbz	r0, 80024f6 <HAL_I2C_Master_Receive+0x186>
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024f2:	6813      	ldr	r3, [r2, #0]
 80024f4:	e79b      	b.n	800242e <HAL_I2C_Master_Receive+0xbe>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80024f6:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 80024fa:	6113      	str	r3, [r2, #16]
 80024fc:	e7a6      	b.n	800244c <HAL_I2C_Master_Receive+0xdc>
    else if (hi2c->XferSize == 1U)
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d10a      	bne.n	8002518 <HAL_I2C_Master_Receive+0x1a8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002502:	680b      	ldr	r3, [r1, #0]
 8002504:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002508:	600b      	str	r3, [r1, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800250a:	9004      	str	r0, [sp, #16]
 800250c:	694b      	ldr	r3, [r1, #20]
 800250e:	9304      	str	r3, [sp, #16]
 8002510:	698b      	ldr	r3, [r1, #24]
 8002512:	9304      	str	r3, [sp, #16]
 8002514:	9b04      	ldr	r3, [sp, #16]
 8002516:	e7ac      	b.n	8002472 <HAL_I2C_Master_Receive+0x102>
    else if (hi2c->XferSize == 2U)
 8002518:	2b02      	cmp	r3, #2
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800251a:	680b      	ldr	r3, [r1, #0]
    else if (hi2c->XferSize == 2U)
 800251c:	d10d      	bne.n	800253a <HAL_I2C_Master_Receive+0x1ca>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800251e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002522:	600b      	str	r3, [r1, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002524:	680b      	ldr	r3, [r1, #0]
 8002526:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800252a:	600b      	str	r3, [r1, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800252c:	9005      	str	r0, [sp, #20]
 800252e:	694b      	ldr	r3, [r1, #20]
 8002530:	9305      	str	r3, [sp, #20]
 8002532:	698b      	ldr	r3, [r1, #24]
 8002534:	9305      	str	r3, [sp, #20]
 8002536:	9b05      	ldr	r3, [sp, #20]
 8002538:	e79f      	b.n	800247a <HAL_I2C_Master_Receive+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800253a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800253e:	600b      	str	r3, [r1, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002540:	9006      	str	r0, [sp, #24]
 8002542:	694b      	ldr	r3, [r1, #20]
 8002544:	9306      	str	r3, [sp, #24]
 8002546:	698b      	ldr	r3, [r1, #24]
 8002548:	9306      	str	r3, [sp, #24]
 800254a:	9b06      	ldr	r3, [sp, #24]
 800254c:	e795      	b.n	800247a <HAL_I2C_Master_Receive+0x10a>
      if (hi2c->XferSize <= 3U)
 800254e:	2b03      	cmp	r3, #3
 8002550:	d862      	bhi.n	8002618 <HAL_I2C_Master_Receive+0x2a8>
        if (hi2c->XferSize == 1U)
 8002552:	2b01      	cmp	r3, #1
 8002554:	d116      	bne.n	8002584 <HAL_I2C_Master_Receive+0x214>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002556:	462a      	mov	r2, r5
 8002558:	4639      	mov	r1, r7
 800255a:	4620      	mov	r0, r4
 800255c:	f7ff fd0c 	bl	8001f78 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002560:	2800      	cmp	r0, #0
 8002562:	f47f af69 	bne.w	8002438 <HAL_I2C_Master_Receive+0xc8>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002566:	6823      	ldr	r3, [r4, #0]
 8002568:	691a      	ldr	r2, [r3, #16]
 800256a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800256c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800256e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002570:	3301      	adds	r3, #1
 8002572:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002574:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002576:	3b01      	subs	r3, #1
 8002578:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800257a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800257c:	3b01      	subs	r3, #1
 800257e:	b29b      	uxth	r3, r3
 8002580:	8563      	strh	r3, [r4, #42]	; 0x2a
 8002582:	e77c      	b.n	800247e <HAL_I2C_Master_Receive+0x10e>
        else if (hi2c->XferSize == 2U)
 8002584:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002586:	f04f 0200 	mov.w	r2, #0
 800258a:	463b      	mov	r3, r7
 800258c:	4641      	mov	r1, r8
 800258e:	4620      	mov	r0, r4
 8002590:	9500      	str	r5, [sp, #0]
        else if (hi2c->XferSize == 2U)
 8002592:	d11a      	bne.n	80025ca <HAL_I2C_Master_Receive+0x25a>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002594:	f7ff fc83 	bl	8001e9e <I2C_WaitOnFlagUntilTimeout>
 8002598:	2800      	cmp	r0, #0
 800259a:	f47f af4d 	bne.w	8002438 <HAL_I2C_Master_Receive+0xc8>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800259e:	6823      	ldr	r3, [r4, #0]
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025a6:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025a8:	691a      	ldr	r2, [r3, #16]
 80025aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80025ac:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80025ae:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80025b0:	1c53      	adds	r3, r2, #1
 80025b2:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80025b4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80025b6:	3b01      	subs	r3, #1
 80025b8:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80025ba:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80025bc:	3b01      	subs	r3, #1
 80025be:	b29b      	uxth	r3, r3
 80025c0:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025c2:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025c4:	691b      	ldr	r3, [r3, #16]
 80025c6:	7053      	strb	r3, [r2, #1]
 80025c8:	e7d1      	b.n	800256e <HAL_I2C_Master_Receive+0x1fe>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025ca:	f7ff fc68 	bl	8001e9e <I2C_WaitOnFlagUntilTimeout>
 80025ce:	4602      	mov	r2, r0
 80025d0:	2800      	cmp	r0, #0
 80025d2:	f47f af31 	bne.w	8002438 <HAL_I2C_Master_Receive+0xc8>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025d6:	6823      	ldr	r3, [r4, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025d8:	4620      	mov	r0, r4
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025da:	6819      	ldr	r1, [r3, #0]
 80025dc:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80025e0:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80025e2:	6919      	ldr	r1, [r3, #16]
 80025e4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80025e6:	7019      	strb	r1, [r3, #0]
          hi2c->pBuffPtr++;
 80025e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025ea:	4641      	mov	r1, r8
          hi2c->pBuffPtr++;
 80025ec:	3301      	adds	r3, #1
 80025ee:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80025f0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80025f2:	9500      	str	r5, [sp, #0]
          hi2c->XferSize--;
 80025f4:	3b01      	subs	r3, #1
 80025f6:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80025f8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80025fa:	3b01      	subs	r3, #1
 80025fc:	b29b      	uxth	r3, r3
 80025fe:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002600:	463b      	mov	r3, r7
 8002602:	e7c7      	b.n	8002594 <HAL_I2C_Master_Receive+0x224>
 8002604:	00100002 	.word	0x00100002
 8002608:	ffff0000 	.word	0xffff0000
 800260c:	00010002 	.word	0x00010002
 8002610:	00010004 	.word	0x00010004
 8002614:	00010008 	.word	0x00010008
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002618:	462a      	mov	r2, r5
 800261a:	4639      	mov	r1, r7
 800261c:	4620      	mov	r0, r4
 800261e:	f7ff fcab 	bl	8001f78 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002622:	2800      	cmp	r0, #0
 8002624:	f47f af08 	bne.w	8002438 <HAL_I2C_Master_Receive+0xc8>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002628:	6823      	ldr	r3, [r4, #0]
 800262a:	691a      	ldr	r2, [r3, #16]
 800262c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800262e:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002630:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002632:	1c53      	adds	r3, r2, #1
 8002634:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8002636:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002638:	3b01      	subs	r3, #1
 800263a:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800263c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800263e:	3b01      	subs	r3, #1
 8002640:	b29b      	uxth	r3, r3
 8002642:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002644:	6823      	ldr	r3, [r4, #0]
 8002646:	6959      	ldr	r1, [r3, #20]
 8002648:	0749      	lsls	r1, r1, #29
 800264a:	f57f af18 	bpl.w	800247e <HAL_I2C_Master_Receive+0x10e>
 800264e:	e7b9      	b.n	80025c4 <HAL_I2C_Master_Receive+0x254>

08002650 <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002650:	4b1c      	ldr	r3, [pc, #112]	; (80026c4 <RCC_SetFlashLatencyFromMSIRange+0x74>)
{
 8002652:	b082      	sub	sp, #8
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002654:	689a      	ldr	r2, [r3, #8]
 8002656:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 800265a:	d00c      	beq.n	8002676 <RCC_SetFlashLatencyFromMSIRange+0x26>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800265c:	2200      	movs	r2, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800265e:	491a      	ldr	r1, [pc, #104]	; (80026c8 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8002660:	680b      	ldr	r3, [r1, #0]
 8002662:	f023 0301 	bic.w	r3, r3, #1
 8002666:	4313      	orrs	r3, r2
 8002668:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800266a:	6808      	ldr	r0, [r1, #0]
 800266c:	f000 0001 	and.w	r0, r0, #1
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8002670:	4050      	eors	r0, r2
 8002672:	b002      	add	sp, #8
 8002674:	4770      	bx	lr
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002676:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002678:	4914      	ldr	r1, [pc, #80]	; (80026cc <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 800267a:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 800267e:	d00f      	beq.n	80026a0 <RCC_SetFlashLatencyFromMSIRange+0x50>
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002680:	680a      	ldr	r2, [r1, #0]
 8002682:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8002686:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 800268a:	d1e7      	bne.n	800265c <RCC_SetFlashLatencyFromMSIRange+0xc>
 800268c:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 8002690:	d1e4      	bne.n	800265c <RCC_SetFlashLatencyFromMSIRange+0xc>
  __HAL_FLASH_SET_LATENCY(latency);
 8002692:	4a0d      	ldr	r2, [pc, #52]	; (80026c8 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8002694:	6813      	ldr	r3, [r2, #0]
 8002696:	f043 0304 	orr.w	r3, r3, #4
 800269a:	6013      	str	r3, [r2, #0]
      latency = FLASH_LATENCY_1; /* 1WS */
 800269c:	2201      	movs	r2, #1
 800269e:	e7de      	b.n	800265e <RCC_SetFlashLatencyFromMSIRange+0xe>
      __HAL_RCC_PWR_CLK_ENABLE();
 80026a0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026a2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80026a6:	625a      	str	r2, [r3, #36]	; 0x24
 80026a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026aa:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80026ae:	9201      	str	r2, [sp, #4]
 80026b0:	9a01      	ldr	r2, [sp, #4]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80026b2:	680a      	ldr	r2, [r1, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 80026b4:	6a59      	ldr	r1, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80026b6:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 80026ba:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
 80026be:	6259      	str	r1, [r3, #36]	; 0x24
 80026c0:	e7e1      	b.n	8002686 <RCC_SetFlashLatencyFromMSIRange+0x36>
 80026c2:	bf00      	nop
 80026c4:	40023800 	.word	0x40023800
 80026c8:	40023c00 	.word	0x40023c00
 80026cc:	40007000 	.word	0x40007000

080026d0 <HAL_RCC_OscConfig>:
{
 80026d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 80026d4:	4604      	mov	r4, r0
 80026d6:	2800      	cmp	r0, #0
 80026d8:	d060      	beq.n	800279c <HAL_RCC_OscConfig+0xcc>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026da:	4b91      	ldr	r3, [pc, #580]	; (8002920 <HAL_RCC_OscConfig+0x250>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026dc:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026de:	689e      	ldr	r6, [r3, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026e0:	689f      	ldr	r7, [r3, #8]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026e2:	07d0      	lsls	r0, r2, #31
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80026e4:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80026e8:	f407 3780 	and.w	r7, r7, #65536	; 0x10000
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026ec:	d44b      	bmi.n	8002786 <HAL_RCC_OscConfig+0xb6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026ee:	6823      	ldr	r3, [r4, #0]
 80026f0:	0799      	lsls	r1, r3, #30
 80026f2:	f100 8097 	bmi.w	8002824 <HAL_RCC_OscConfig+0x154>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80026f6:	6823      	ldr	r3, [r4, #0]
 80026f8:	06d8      	lsls	r0, r3, #27
 80026fa:	d536      	bpl.n	800276a <HAL_RCC_OscConfig+0x9a>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80026fc:	2e00      	cmp	r6, #0
 80026fe:	f040 80e0 	bne.w	80028c2 <HAL_RCC_OscConfig+0x1f2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002702:	4d87      	ldr	r5, [pc, #540]	; (8002920 <HAL_RCC_OscConfig+0x250>)
 8002704:	682b      	ldr	r3, [r5, #0]
 8002706:	0599      	lsls	r1, r3, #22
 8002708:	d502      	bpl.n	8002710 <HAL_RCC_OscConfig+0x40>
 800270a:	69a3      	ldr	r3, [r4, #24]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d045      	beq.n	800279c <HAL_RCC_OscConfig+0xcc>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002710:	686b      	ldr	r3, [r5, #4]
 8002712:	6a20      	ldr	r0, [r4, #32]
 8002714:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002718:	4298      	cmp	r0, r3
 800271a:	f240 80c0 	bls.w	800289e <HAL_RCC_OscConfig+0x1ce>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800271e:	f7ff ff97 	bl	8002650 <RCC_SetFlashLatencyFromMSIRange>
 8002722:	2800      	cmp	r0, #0
 8002724:	d13a      	bne.n	800279c <HAL_RCC_OscConfig+0xcc>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002726:	686b      	ldr	r3, [r5, #4]
 8002728:	6a22      	ldr	r2, [r4, #32]
 800272a:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800272e:	4313      	orrs	r3, r2
 8002730:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002732:	686b      	ldr	r3, [r5, #4]
 8002734:	69e2      	ldr	r2, [r4, #28]
 8002736:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800273a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800273e:	606b      	str	r3, [r5, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002740:	4b77      	ldr	r3, [pc, #476]	; (8002920 <HAL_RCC_OscConfig+0x250>)
 8002742:	6899      	ldr	r1, [r3, #8]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002744:	6a23      	ldr	r3, [r4, #32]
 8002746:	0b5b      	lsrs	r3, r3, #13
 8002748:	1c5a      	adds	r2, r3, #1
 800274a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800274e:	4093      	lsls	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002750:	f3c1 1203 	ubfx	r2, r1, #4, #4
 8002754:	4973      	ldr	r1, [pc, #460]	; (8002924 <HAL_RCC_OscConfig+0x254>)
 8002756:	5c8a      	ldrb	r2, [r1, r2]
 8002758:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800275a:	4a73      	ldr	r2, [pc, #460]	; (8002928 <HAL_RCC_OscConfig+0x258>)
 800275c:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 800275e:	4b73      	ldr	r3, [pc, #460]	; (800292c <HAL_RCC_OscConfig+0x25c>)
 8002760:	6818      	ldr	r0, [r3, #0]
 8002762:	f7fe fdf3 	bl	800134c <HAL_InitTick>
        if(status != HAL_OK)
 8002766:	2800      	cmp	r0, #0
 8002768:	d130      	bne.n	80027cc <HAL_RCC_OscConfig+0xfc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800276a:	6823      	ldr	r3, [r4, #0]
 800276c:	0718      	lsls	r0, r3, #28
 800276e:	f100 80e1 	bmi.w	8002934 <HAL_RCC_OscConfig+0x264>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002772:	6823      	ldr	r3, [r4, #0]
 8002774:	0759      	lsls	r1, r3, #29
 8002776:	f100 8101 	bmi.w	800297c <HAL_RCC_OscConfig+0x2ac>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800277a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800277c:	2800      	cmp	r0, #0
 800277e:	f040 8169 	bne.w	8002a54 <HAL_RCC_OscConfig+0x384>
  return HAL_OK;
 8002782:	2000      	movs	r0, #0
 8002784:	e022      	b.n	80027cc <HAL_RCC_OscConfig+0xfc>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002786:	2e08      	cmp	r6, #8
 8002788:	d002      	beq.n	8002790 <HAL_RCC_OscConfig+0xc0>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800278a:	2e0c      	cmp	r6, #12
 800278c:	d108      	bne.n	80027a0 <HAL_RCC_OscConfig+0xd0>
 800278e:	b13f      	cbz	r7, 80027a0 <HAL_RCC_OscConfig+0xd0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	039a      	lsls	r2, r3, #14
 8002794:	d5ab      	bpl.n	80026ee <HAL_RCC_OscConfig+0x1e>
 8002796:	6863      	ldr	r3, [r4, #4]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d1a8      	bne.n	80026ee <HAL_RCC_OscConfig+0x1e>
          return HAL_ERROR;
 800279c:	2001      	movs	r0, #1
 800279e:	e015      	b.n	80027cc <HAL_RCC_OscConfig+0xfc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027a0:	6862      	ldr	r2, [r4, #4]
 80027a2:	2a01      	cmp	r2, #1
 80027a4:	d115      	bne.n	80027d2 <HAL_RCC_OscConfig+0x102>
 80027a6:	681a      	ldr	r2, [r3, #0]
 80027a8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80027ac:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 80027ae:	f7fe ff6f 	bl	8001690 <HAL_GetTick>
 80027b2:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80027b4:	f8df 8168 	ldr.w	r8, [pc, #360]	; 8002920 <HAL_RCC_OscConfig+0x250>
 80027b8:	f8d8 3000 	ldr.w	r3, [r8]
 80027bc:	039b      	lsls	r3, r3, #14
 80027be:	d496      	bmi.n	80026ee <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027c0:	f7fe ff66 	bl	8001690 <HAL_GetTick>
 80027c4:	1b40      	subs	r0, r0, r5
 80027c6:	2864      	cmp	r0, #100	; 0x64
 80027c8:	d9f6      	bls.n	80027b8 <HAL_RCC_OscConfig+0xe8>
            return HAL_TIMEOUT;
 80027ca:	2003      	movs	r0, #3
}
 80027cc:	b003      	add	sp, #12
 80027ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027d2:	4d53      	ldr	r5, [pc, #332]	; (8002920 <HAL_RCC_OscConfig+0x250>)
 80027d4:	682b      	ldr	r3, [r5, #0]
 80027d6:	b9a2      	cbnz	r2, 8002802 <HAL_RCC_OscConfig+0x132>
 80027d8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027dc:	602b      	str	r3, [r5, #0]
 80027de:	682b      	ldr	r3, [r5, #0]
 80027e0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027e4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80027e6:	f7fe ff53 	bl	8001690 <HAL_GetTick>
 80027ea:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80027ec:	682b      	ldr	r3, [r5, #0]
 80027ee:	0398      	lsls	r0, r3, #14
 80027f0:	f57f af7d 	bpl.w	80026ee <HAL_RCC_OscConfig+0x1e>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80027f4:	f7fe ff4c 	bl	8001690 <HAL_GetTick>
 80027f8:	eba0 0008 	sub.w	r0, r0, r8
 80027fc:	2864      	cmp	r0, #100	; 0x64
 80027fe:	d9f5      	bls.n	80027ec <HAL_RCC_OscConfig+0x11c>
 8002800:	e7e3      	b.n	80027ca <HAL_RCC_OscConfig+0xfa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002802:	2a05      	cmp	r2, #5
 8002804:	bf0b      	itete	eq
 8002806:	f443 2380 	orreq.w	r3, r3, #262144	; 0x40000
 800280a:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
 800280e:	602b      	streq	r3, [r5, #0]
 8002810:	602b      	strne	r3, [r5, #0]
 8002812:	bf0b      	itete	eq
 8002814:	682b      	ldreq	r3, [r5, #0]
 8002816:	682b      	ldrne	r3, [r5, #0]
 8002818:	f443 3380 	orreq.w	r3, r3, #65536	; 0x10000
 800281c:	f423 2380 	bicne.w	r3, r3, #262144	; 0x40000
 8002820:	602b      	str	r3, [r5, #0]
 8002822:	e7c4      	b.n	80027ae <HAL_RCC_OscConfig+0xde>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002824:	2e04      	cmp	r6, #4
 8002826:	d002      	beq.n	800282e <HAL_RCC_OscConfig+0x15e>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002828:	2e0c      	cmp	r6, #12
 800282a:	d10f      	bne.n	800284c <HAL_RCC_OscConfig+0x17c>
 800282c:	b977      	cbnz	r7, 800284c <HAL_RCC_OscConfig+0x17c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800282e:	4a3c      	ldr	r2, [pc, #240]	; (8002920 <HAL_RCC_OscConfig+0x250>)
 8002830:	6813      	ldr	r3, [r2, #0]
 8002832:	0799      	lsls	r1, r3, #30
 8002834:	d502      	bpl.n	800283c <HAL_RCC_OscConfig+0x16c>
 8002836:	68e3      	ldr	r3, [r4, #12]
 8002838:	2b01      	cmp	r3, #1
 800283a:	d1af      	bne.n	800279c <HAL_RCC_OscConfig+0xcc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800283c:	6853      	ldr	r3, [r2, #4]
 800283e:	6921      	ldr	r1, [r4, #16]
 8002840:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8002844:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002848:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800284a:	e754      	b.n	80026f6 <HAL_RCC_OscConfig+0x26>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800284c:	68e2      	ldr	r2, [r4, #12]
 800284e:	4b38      	ldr	r3, [pc, #224]	; (8002930 <HAL_RCC_OscConfig+0x260>)
 8002850:	b1b2      	cbz	r2, 8002880 <HAL_RCC_OscConfig+0x1b0>
        __HAL_RCC_HSI_ENABLE();
 8002852:	2201      	movs	r2, #1
 8002854:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002856:	f7fe ff1b 	bl	8001690 <HAL_GetTick>
 800285a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800285c:	4d30      	ldr	r5, [pc, #192]	; (8002920 <HAL_RCC_OscConfig+0x250>)
 800285e:	682b      	ldr	r3, [r5, #0]
 8002860:	079a      	lsls	r2, r3, #30
 8002862:	d507      	bpl.n	8002874 <HAL_RCC_OscConfig+0x1a4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002864:	686b      	ldr	r3, [r5, #4]
 8002866:	6922      	ldr	r2, [r4, #16]
 8002868:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800286c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002870:	606b      	str	r3, [r5, #4]
 8002872:	e740      	b.n	80026f6 <HAL_RCC_OscConfig+0x26>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002874:	f7fe ff0c 	bl	8001690 <HAL_GetTick>
 8002878:	1bc0      	subs	r0, r0, r7
 800287a:	2802      	cmp	r0, #2
 800287c:	d9ef      	bls.n	800285e <HAL_RCC_OscConfig+0x18e>
 800287e:	e7a4      	b.n	80027ca <HAL_RCC_OscConfig+0xfa>
        __HAL_RCC_HSI_DISABLE();
 8002880:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002882:	f7fe ff05 	bl	8001690 <HAL_GetTick>
 8002886:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002888:	4f25      	ldr	r7, [pc, #148]	; (8002920 <HAL_RCC_OscConfig+0x250>)
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	079b      	lsls	r3, r3, #30
 800288e:	f57f af32 	bpl.w	80026f6 <HAL_RCC_OscConfig+0x26>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002892:	f7fe fefd 	bl	8001690 <HAL_GetTick>
 8002896:	1b40      	subs	r0, r0, r5
 8002898:	2802      	cmp	r0, #2
 800289a:	d9f6      	bls.n	800288a <HAL_RCC_OscConfig+0x1ba>
 800289c:	e795      	b.n	80027ca <HAL_RCC_OscConfig+0xfa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800289e:	686b      	ldr	r3, [r5, #4]
 80028a0:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80028a4:	4303      	orrs	r3, r0
 80028a6:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028a8:	686b      	ldr	r3, [r5, #4]
 80028aa:	69e2      	ldr	r2, [r4, #28]
 80028ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80028b0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80028b4:	606b      	str	r3, [r5, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80028b6:	f7ff fecb 	bl	8002650 <RCC_SetFlashLatencyFromMSIRange>
 80028ba:	2800      	cmp	r0, #0
 80028bc:	f43f af40 	beq.w	8002740 <HAL_RCC_OscConfig+0x70>
 80028c0:	e76c      	b.n	800279c <HAL_RCC_OscConfig+0xcc>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80028c2:	69a2      	ldr	r2, [r4, #24]
 80028c4:	4b1a      	ldr	r3, [pc, #104]	; (8002930 <HAL_RCC_OscConfig+0x260>)
 80028c6:	b1e2      	cbz	r2, 8002902 <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_MSI_ENABLE();
 80028c8:	2201      	movs	r2, #1
 80028ca:	621a      	str	r2, [r3, #32]
        tickstart = HAL_GetTick();
 80028cc:	f7fe fee0 	bl	8001690 <HAL_GetTick>
 80028d0:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80028d2:	4d13      	ldr	r5, [pc, #76]	; (8002920 <HAL_RCC_OscConfig+0x250>)
 80028d4:	682b      	ldr	r3, [r5, #0]
 80028d6:	059a      	lsls	r2, r3, #22
 80028d8:	d50d      	bpl.n	80028f6 <HAL_RCC_OscConfig+0x226>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80028da:	686b      	ldr	r3, [r5, #4]
 80028dc:	6a22      	ldr	r2, [r4, #32]
 80028de:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80028e2:	4313      	orrs	r3, r2
 80028e4:	606b      	str	r3, [r5, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80028e6:	686b      	ldr	r3, [r5, #4]
 80028e8:	69e2      	ldr	r2, [r4, #28]
 80028ea:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80028ee:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80028f2:	606b      	str	r3, [r5, #4]
 80028f4:	e739      	b.n	800276a <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80028f6:	f7fe fecb 	bl	8001690 <HAL_GetTick>
 80028fa:	1bc0      	subs	r0, r0, r7
 80028fc:	2802      	cmp	r0, #2
 80028fe:	d9e9      	bls.n	80028d4 <HAL_RCC_OscConfig+0x204>
 8002900:	e763      	b.n	80027ca <HAL_RCC_OscConfig+0xfa>
        __HAL_RCC_MSI_DISABLE();
 8002902:	621a      	str	r2, [r3, #32]
        tickstart = HAL_GetTick();
 8002904:	f7fe fec4 	bl	8001690 <HAL_GetTick>
 8002908:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800290a:	4f05      	ldr	r7, [pc, #20]	; (8002920 <HAL_RCC_OscConfig+0x250>)
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	059b      	lsls	r3, r3, #22
 8002910:	f57f af2b 	bpl.w	800276a <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002914:	f7fe febc 	bl	8001690 <HAL_GetTick>
 8002918:	1b40      	subs	r0, r0, r5
 800291a:	2802      	cmp	r0, #2
 800291c:	d9f6      	bls.n	800290c <HAL_RCC_OscConfig+0x23c>
 800291e:	e754      	b.n	80027ca <HAL_RCC_OscConfig+0xfa>
 8002920:	40023800 	.word	0x40023800
 8002924:	08004eec 	.word	0x08004eec
 8002928:	20000000 	.word	0x20000000
 800292c:	20000008 	.word	0x20000008
 8002930:	42470000 	.word	0x42470000
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002934:	6962      	ldr	r2, [r4, #20]
 8002936:	4b72      	ldr	r3, [pc, #456]	; (8002b00 <HAL_RCC_OscConfig+0x430>)
 8002938:	b182      	cbz	r2, 800295c <HAL_RCC_OscConfig+0x28c>
      __HAL_RCC_LSI_ENABLE();
 800293a:	2201      	movs	r2, #1
 800293c:	f8c3 2680 	str.w	r2, [r3, #1664]	; 0x680
      tickstart = HAL_GetTick();
 8002940:	f7fe fea6 	bl	8001690 <HAL_GetTick>
 8002944:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002946:	4f6f      	ldr	r7, [pc, #444]	; (8002b04 <HAL_RCC_OscConfig+0x434>)
 8002948:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800294a:	079a      	lsls	r2, r3, #30
 800294c:	f53f af11 	bmi.w	8002772 <HAL_RCC_OscConfig+0xa2>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002950:	f7fe fe9e 	bl	8001690 <HAL_GetTick>
 8002954:	1b40      	subs	r0, r0, r5
 8002956:	2802      	cmp	r0, #2
 8002958:	d9f6      	bls.n	8002948 <HAL_RCC_OscConfig+0x278>
 800295a:	e736      	b.n	80027ca <HAL_RCC_OscConfig+0xfa>
      __HAL_RCC_LSI_DISABLE();
 800295c:	f8c3 2680 	str.w	r2, [r3, #1664]	; 0x680
      tickstart = HAL_GetTick();
 8002960:	f7fe fe96 	bl	8001690 <HAL_GetTick>
 8002964:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002966:	4f67      	ldr	r7, [pc, #412]	; (8002b04 <HAL_RCC_OscConfig+0x434>)
 8002968:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800296a:	079b      	lsls	r3, r3, #30
 800296c:	f57f af01 	bpl.w	8002772 <HAL_RCC_OscConfig+0xa2>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002970:	f7fe fe8e 	bl	8001690 <HAL_GetTick>
 8002974:	1b40      	subs	r0, r0, r5
 8002976:	2802      	cmp	r0, #2
 8002978:	d9f6      	bls.n	8002968 <HAL_RCC_OscConfig+0x298>
 800297a:	e726      	b.n	80027ca <HAL_RCC_OscConfig+0xfa>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800297c:	4b61      	ldr	r3, [pc, #388]	; (8002b04 <HAL_RCC_OscConfig+0x434>)
 800297e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002980:	00d0      	lsls	r0, r2, #3
 8002982:	d429      	bmi.n	80029d8 <HAL_RCC_OscConfig+0x308>
      pwrclkchanged = SET;
 8002984:	f04f 0801 	mov.w	r8, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002988:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800298a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800298e:	625a      	str	r2, [r3, #36]	; 0x24
 8002990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002992:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002996:	9301      	str	r3, [sp, #4]
 8002998:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800299a:	4d5b      	ldr	r5, [pc, #364]	; (8002b08 <HAL_RCC_OscConfig+0x438>)
 800299c:	682b      	ldr	r3, [r5, #0]
 800299e:	05d9      	lsls	r1, r3, #23
 80029a0:	d51d      	bpl.n	80029de <HAL_RCC_OscConfig+0x30e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029a2:	68a3      	ldr	r3, [r4, #8]
 80029a4:	4d57      	ldr	r5, [pc, #348]	; (8002b04 <HAL_RCC_OscConfig+0x434>)
 80029a6:	2b01      	cmp	r3, #1
 80029a8:	d129      	bne.n	80029fe <HAL_RCC_OscConfig+0x32e>
 80029aa:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80029ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029b0:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 80029b2:	f7fe fe6d 	bl	8001690 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80029b6:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80029ba:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80029bc:	4f51      	ldr	r7, [pc, #324]	; (8002b04 <HAL_RCC_OscConfig+0x434>)
 80029be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80029c0:	059b      	lsls	r3, r3, #22
 80029c2:	d541      	bpl.n	8002a48 <HAL_RCC_OscConfig+0x378>
    if(pwrclkchanged == SET)
 80029c4:	f1b8 0f00 	cmp.w	r8, #0
 80029c8:	f43f aed7 	beq.w	800277a <HAL_RCC_OscConfig+0xaa>
      __HAL_RCC_PWR_CLK_DISABLE();
 80029cc:	4a4d      	ldr	r2, [pc, #308]	; (8002b04 <HAL_RCC_OscConfig+0x434>)
 80029ce:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80029d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80029d4:	6253      	str	r3, [r2, #36]	; 0x24
 80029d6:	e6d0      	b.n	800277a <HAL_RCC_OscConfig+0xaa>
    FlagStatus       pwrclkchanged = RESET;
 80029d8:	f04f 0800 	mov.w	r8, #0
 80029dc:	e7dd      	b.n	800299a <HAL_RCC_OscConfig+0x2ca>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80029de:	682b      	ldr	r3, [r5, #0]
 80029e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029e4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80029e6:	f7fe fe53 	bl	8001690 <HAL_GetTick>
 80029ea:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029ec:	682b      	ldr	r3, [r5, #0]
 80029ee:	05da      	lsls	r2, r3, #23
 80029f0:	d4d7      	bmi.n	80029a2 <HAL_RCC_OscConfig+0x2d2>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029f2:	f7fe fe4d 	bl	8001690 <HAL_GetTick>
 80029f6:	1bc0      	subs	r0, r0, r7
 80029f8:	2864      	cmp	r0, #100	; 0x64
 80029fa:	d9f7      	bls.n	80029ec <HAL_RCC_OscConfig+0x31c>
 80029fc:	e6e5      	b.n	80027ca <HAL_RCC_OscConfig+0xfa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029fe:	b9ab      	cbnz	r3, 8002a2c <HAL_RCC_OscConfig+0x35c>
 8002a00:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a02:	f241 3988 	movw	r9, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a06:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a0a:	636b      	str	r3, [r5, #52]	; 0x34
 8002a0c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002a0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a12:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8002a14:	f7fe fe3c 	bl	8001690 <HAL_GetTick>
 8002a18:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002a1a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002a1c:	0598      	lsls	r0, r3, #22
 8002a1e:	d5d1      	bpl.n	80029c4 <HAL_RCC_OscConfig+0x2f4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a20:	f7fe fe36 	bl	8001690 <HAL_GetTick>
 8002a24:	1bc0      	subs	r0, r0, r7
 8002a26:	4548      	cmp	r0, r9
 8002a28:	d9f7      	bls.n	8002a1a <HAL_RCC_OscConfig+0x34a>
 8002a2a:	e6ce      	b.n	80027ca <HAL_RCC_OscConfig+0xfa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a2c:	2b05      	cmp	r3, #5
 8002a2e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002a30:	d103      	bne.n	8002a3a <HAL_RCC_OscConfig+0x36a>
 8002a32:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002a36:	636b      	str	r3, [r5, #52]	; 0x34
 8002a38:	e7b7      	b.n	80029aa <HAL_RCC_OscConfig+0x2da>
 8002a3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a3e:	636b      	str	r3, [r5, #52]	; 0x34
 8002a40:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002a42:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002a46:	e7b3      	b.n	80029b0 <HAL_RCC_OscConfig+0x2e0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a48:	f7fe fe22 	bl	8001690 <HAL_GetTick>
 8002a4c:	1b40      	subs	r0, r0, r5
 8002a4e:	4548      	cmp	r0, r9
 8002a50:	d9b5      	bls.n	80029be <HAL_RCC_OscConfig+0x2ee>
 8002a52:	e6ba      	b.n	80027ca <HAL_RCC_OscConfig+0xfa>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002a54:	2e0c      	cmp	r6, #12
 8002a56:	d03a      	beq.n	8002ace <HAL_RCC_OscConfig+0x3fe>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	4b29      	ldr	r3, [pc, #164]	; (8002b00 <HAL_RCC_OscConfig+0x430>)
 8002a5c:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8002a5e:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002a60:	d127      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x3e2>
        tickstart = HAL_GetTick();
 8002a62:	f7fe fe15 	bl	8001690 <HAL_GetTick>
 8002a66:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002a68:	4d26      	ldr	r5, [pc, #152]	; (8002b04 <HAL_RCC_OscConfig+0x434>)
 8002a6a:	682b      	ldr	r3, [r5, #0]
 8002a6c:	0199      	lsls	r1, r3, #6
 8002a6e:	d41a      	bmi.n	8002aa6 <HAL_RCC_OscConfig+0x3d6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a70:	68aa      	ldr	r2, [r5, #8]
 8002a72:	e9d4 310a 	ldrd	r3, r1, [r4, #40]	; 0x28
 8002a76:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 8002a7a:	430b      	orrs	r3, r1
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002a80:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8002a82:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a84:	60ab      	str	r3, [r5, #8]
        __HAL_RCC_PLL_ENABLE();
 8002a86:	4b1e      	ldr	r3, [pc, #120]	; (8002b00 <HAL_RCC_OscConfig+0x430>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a88:	4d1e      	ldr	r5, [pc, #120]	; (8002b04 <HAL_RCC_OscConfig+0x434>)
        __HAL_RCC_PLL_ENABLE();
 8002a8a:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002a8c:	f7fe fe00 	bl	8001690 <HAL_GetTick>
 8002a90:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002a92:	682b      	ldr	r3, [r5, #0]
 8002a94:	019a      	lsls	r2, r3, #6
 8002a96:	f53f ae74 	bmi.w	8002782 <HAL_RCC_OscConfig+0xb2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002a9a:	f7fe fdf9 	bl	8001690 <HAL_GetTick>
 8002a9e:	1b00      	subs	r0, r0, r4
 8002aa0:	2802      	cmp	r0, #2
 8002aa2:	d9f6      	bls.n	8002a92 <HAL_RCC_OscConfig+0x3c2>
 8002aa4:	e691      	b.n	80027ca <HAL_RCC_OscConfig+0xfa>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002aa6:	f7fe fdf3 	bl	8001690 <HAL_GetTick>
 8002aaa:	1b80      	subs	r0, r0, r6
 8002aac:	2802      	cmp	r0, #2
 8002aae:	d9dc      	bls.n	8002a6a <HAL_RCC_OscConfig+0x39a>
 8002ab0:	e68b      	b.n	80027ca <HAL_RCC_OscConfig+0xfa>
        tickstart = HAL_GetTick();
 8002ab2:	f7fe fded 	bl	8001690 <HAL_GetTick>
 8002ab6:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ab8:	4d12      	ldr	r5, [pc, #72]	; (8002b04 <HAL_RCC_OscConfig+0x434>)
 8002aba:	682b      	ldr	r3, [r5, #0]
 8002abc:	019b      	lsls	r3, r3, #6
 8002abe:	f57f ae60 	bpl.w	8002782 <HAL_RCC_OscConfig+0xb2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002ac2:	f7fe fde5 	bl	8001690 <HAL_GetTick>
 8002ac6:	1b00      	subs	r0, r0, r4
 8002ac8:	2802      	cmp	r0, #2
 8002aca:	d9f6      	bls.n	8002aba <HAL_RCC_OscConfig+0x3ea>
 8002acc:	e67d      	b.n	80027ca <HAL_RCC_OscConfig+0xfa>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002ace:	2801      	cmp	r0, #1
 8002ad0:	f43f ae7c 	beq.w	80027cc <HAL_RCC_OscConfig+0xfc>
        pll_config = RCC->CFGR;
 8002ad4:	4b0b      	ldr	r3, [pc, #44]	; (8002b04 <HAL_RCC_OscConfig+0x434>)
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ad6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        pll_config = RCC->CFGR;
 8002ad8:	689b      	ldr	r3, [r3, #8]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ada:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8002ade:	4291      	cmp	r1, r2
 8002ae0:	f47f ae5c 	bne.w	800279c <HAL_RCC_OscConfig+0xcc>
 8002ae4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002ae6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002aea:	428a      	cmp	r2, r1
 8002aec:	f47f ae56 	bne.w	800279c <HAL_RCC_OscConfig+0xcc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002af0:	6b22      	ldr	r2, [r4, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002af2:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002af6:	4293      	cmp	r3, r2
 8002af8:	f43f ae43 	beq.w	8002782 <HAL_RCC_OscConfig+0xb2>
 8002afc:	e64e      	b.n	800279c <HAL_RCC_OscConfig+0xcc>
 8002afe:	bf00      	nop
 8002b00:	42470000 	.word	0x42470000
 8002b04:	40023800 	.word	0x40023800
 8002b08:	40007000 	.word	0x40007000

08002b0c <HAL_RCC_GetSysClockFreq>:
{
 8002b0c:	b508      	push	{r3, lr}
  tmpreg = RCC->CFGR;
 8002b0e:	4b15      	ldr	r3, [pc, #84]	; (8002b64 <HAL_RCC_GetSysClockFreq+0x58>)
 8002b10:	689a      	ldr	r2, [r3, #8]
  switch (tmpreg & RCC_CFGR_SWS)
 8002b12:	f002 010c 	and.w	r1, r2, #12
 8002b16:	2908      	cmp	r1, #8
 8002b18:	d021      	beq.n	8002b5e <HAL_RCC_GetSysClockFreq+0x52>
 8002b1a:	290c      	cmp	r1, #12
 8002b1c:	d003      	beq.n	8002b26 <HAL_RCC_GetSysClockFreq+0x1a>
 8002b1e:	2904      	cmp	r1, #4
 8002b20:	d115      	bne.n	8002b4e <HAL_RCC_GetSysClockFreq+0x42>
      sysclockfreq = HSI_VALUE;
 8002b22:	4811      	ldr	r0, [pc, #68]	; (8002b68 <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 8002b24:	e012      	b.n	8002b4c <HAL_RCC_GetSysClockFreq+0x40>
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b26:	689b      	ldr	r3, [r3, #8]
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002b28:	4810      	ldr	r0, [pc, #64]	; (8002b6c <HAL_RCC_GetSysClockFreq+0x60>)
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b2a:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002b2e:	f3c2 4183 	ubfx	r1, r2, #18, #4
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002b32:	5c41      	ldrb	r1, [r0, r1]
 8002b34:	bf14      	ite	ne
 8002b36:	480e      	ldrne	r0, [pc, #56]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x64>)
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002b38:	480b      	ldreq	r0, [pc, #44]	; (8002b68 <HAL_RCC_GetSysClockFreq+0x5c>)
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002b3a:	f3c2 5281 	ubfx	r2, r2, #22, #2
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002b3e:	bf18      	it	ne
 8002b40:	2300      	movne	r3, #0
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002b42:	fba1 0100 	umull	r0, r1, r1, r0
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002b46:	3201      	adds	r2, #1
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002b48:	f7fe f830 	bl	8000bac <__aeabi_uldivmod>
}
 8002b4c:	bd08      	pop	{r3, pc}
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002b4e:	6858      	ldr	r0, [r3, #4]
 8002b50:	f3c0 3042 	ubfx	r0, r0, #13, #3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002b54:	1c43      	adds	r3, r0, #1
 8002b56:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002b5a:	4098      	lsls	r0, r3
      break;
 8002b5c:	e7f6      	b.n	8002b4c <HAL_RCC_GetSysClockFreq+0x40>
  switch (tmpreg & RCC_CFGR_SWS)
 8002b5e:	4804      	ldr	r0, [pc, #16]	; (8002b70 <HAL_RCC_GetSysClockFreq+0x64>)
 8002b60:	e7f4      	b.n	8002b4c <HAL_RCC_GetSysClockFreq+0x40>
 8002b62:	bf00      	nop
 8002b64:	40023800 	.word	0x40023800
 8002b68:	00f42400 	.word	0x00f42400
 8002b6c:	08004f04 	.word	0x08004f04
 8002b70:	016e3600 	.word	0x016e3600

08002b74 <HAL_RCC_ClockConfig>:
{
 8002b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b78:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8002b7a:	4604      	mov	r4, r0
 8002b7c:	b910      	cbnz	r0, 8002b84 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002b7e:	2001      	movs	r0, #1
}
 8002b80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002b84:	4b57      	ldr	r3, [pc, #348]	; (8002ce4 <HAL_RCC_ClockConfig+0x170>)
 8002b86:	681a      	ldr	r2, [r3, #0]
 8002b88:	f002 0201 	and.w	r2, r2, #1
 8002b8c:	428a      	cmp	r2, r1
 8002b8e:	d32a      	bcc.n	8002be6 <HAL_RCC_ClockConfig+0x72>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002b90:	6822      	ldr	r2, [r4, #0]
 8002b92:	0796      	lsls	r6, r2, #30
 8002b94:	d438      	bmi.n	8002c08 <HAL_RCC_ClockConfig+0x94>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002b96:	07d0      	lsls	r0, r2, #31
 8002b98:	d43e      	bmi.n	8002c18 <HAL_RCC_ClockConfig+0xa4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002b9a:	4b52      	ldr	r3, [pc, #328]	; (8002ce4 <HAL_RCC_ClockConfig+0x170>)
 8002b9c:	681a      	ldr	r2, [r3, #0]
 8002b9e:	f002 0201 	and.w	r2, r2, #1
 8002ba2:	42aa      	cmp	r2, r5
 8002ba4:	f200 808c 	bhi.w	8002cc0 <HAL_RCC_ClockConfig+0x14c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002ba8:	6822      	ldr	r2, [r4, #0]
 8002baa:	0751      	lsls	r1, r2, #29
 8002bac:	f100 8091 	bmi.w	8002cd2 <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002bb0:	0713      	lsls	r3, r2, #28
 8002bb2:	d507      	bpl.n	8002bc4 <HAL_RCC_ClockConfig+0x50>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002bb4:	4a4c      	ldr	r2, [pc, #304]	; (8002ce8 <HAL_RCC_ClockConfig+0x174>)
 8002bb6:	6921      	ldr	r1, [r4, #16]
 8002bb8:	6893      	ldr	r3, [r2, #8]
 8002bba:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002bbe:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002bc2:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bc4:	f7ff ffa2 	bl	8002b0c <HAL_RCC_GetSysClockFreq>
}
 8002bc8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002bcc:	4b46      	ldr	r3, [pc, #280]	; (8002ce8 <HAL_RCC_ClockConfig+0x174>)
 8002bce:	4a47      	ldr	r2, [pc, #284]	; (8002cec <HAL_RCC_ClockConfig+0x178>)
 8002bd0:	689b      	ldr	r3, [r3, #8]
 8002bd2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002bd6:	5cd3      	ldrb	r3, [r2, r3]
 8002bd8:	40d8      	lsrs	r0, r3
 8002bda:	4b45      	ldr	r3, [pc, #276]	; (8002cf0 <HAL_RCC_ClockConfig+0x17c>)
 8002bdc:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8002bde:	4b45      	ldr	r3, [pc, #276]	; (8002cf4 <HAL_RCC_ClockConfig+0x180>)
 8002be0:	6818      	ldr	r0, [r3, #0]
 8002be2:	f7fe bbb3 	b.w	800134c <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002be6:	2901      	cmp	r1, #1
 8002be8:	bf02      	ittt	eq
 8002bea:	681a      	ldreq	r2, [r3, #0]
 8002bec:	f042 0204 	orreq.w	r2, r2, #4
 8002bf0:	601a      	streq	r2, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	f022 0201 	bic.w	r2, r2, #1
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	601a      	str	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	428b      	cmp	r3, r1
 8002c04:	d1bb      	bne.n	8002b7e <HAL_RCC_ClockConfig+0xa>
 8002c06:	e7c3      	b.n	8002b90 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c08:	4937      	ldr	r1, [pc, #220]	; (8002ce8 <HAL_RCC_ClockConfig+0x174>)
 8002c0a:	68a0      	ldr	r0, [r4, #8]
 8002c0c:	688b      	ldr	r3, [r1, #8]
 8002c0e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c12:	4303      	orrs	r3, r0
 8002c14:	608b      	str	r3, [r1, #8]
 8002c16:	e7be      	b.n	8002b96 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c18:	6862      	ldr	r2, [r4, #4]
 8002c1a:	4b33      	ldr	r3, [pc, #204]	; (8002ce8 <HAL_RCC_ClockConfig+0x174>)
 8002c1c:	2a02      	cmp	r2, #2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c1e:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c20:	d11c      	bne.n	8002c5c <HAL_RCC_ClockConfig+0xe8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002c22:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002c26:	d0aa      	beq.n	8002b7e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c28:	4e2f      	ldr	r6, [pc, #188]	; (8002ce8 <HAL_RCC_ClockConfig+0x174>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c2a:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002c2e:	68b3      	ldr	r3, [r6, #8]
 8002c30:	f023 0303 	bic.w	r3, r3, #3
 8002c34:	4313      	orrs	r3, r2
 8002c36:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002c38:	f7fe fd2a 	bl	8001690 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c3c:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8002c3e:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c40:	2b02      	cmp	r3, #2
 8002c42:	d118      	bne.n	8002c76 <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002c44:	68b3      	ldr	r3, [r6, #8]
 8002c46:	f003 030c 	and.w	r3, r3, #12
 8002c4a:	2b08      	cmp	r3, #8
 8002c4c:	d0a5      	beq.n	8002b9a <HAL_RCC_ClockConfig+0x26>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c4e:	f7fe fd1f 	bl	8001690 <HAL_GetTick>
 8002c52:	1bc0      	subs	r0, r0, r7
 8002c54:	4540      	cmp	r0, r8
 8002c56:	d9f5      	bls.n	8002c44 <HAL_RCC_ClockConfig+0xd0>
          return HAL_TIMEOUT;
 8002c58:	2003      	movs	r0, #3
 8002c5a:	e791      	b.n	8002b80 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c5c:	2a03      	cmp	r2, #3
 8002c5e:	d102      	bne.n	8002c66 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002c60:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002c64:	e7df      	b.n	8002c26 <HAL_RCC_ClockConfig+0xb2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002c66:	2a01      	cmp	r2, #1
 8002c68:	d102      	bne.n	8002c70 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002c6a:	f013 0f02 	tst.w	r3, #2
 8002c6e:	e7da      	b.n	8002c26 <HAL_RCC_ClockConfig+0xb2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002c70:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002c74:	e7d7      	b.n	8002c26 <HAL_RCC_ClockConfig+0xb2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c76:	2b03      	cmp	r3, #3
 8002c78:	d10a      	bne.n	8002c90 <HAL_RCC_ClockConfig+0x11c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c7a:	68b3      	ldr	r3, [r6, #8]
 8002c7c:	f003 030c 	and.w	r3, r3, #12
 8002c80:	2b0c      	cmp	r3, #12
 8002c82:	d08a      	beq.n	8002b9a <HAL_RCC_ClockConfig+0x26>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002c84:	f7fe fd04 	bl	8001690 <HAL_GetTick>
 8002c88:	1bc0      	subs	r0, r0, r7
 8002c8a:	4540      	cmp	r0, r8
 8002c8c:	d9f5      	bls.n	8002c7a <HAL_RCC_ClockConfig+0x106>
 8002c8e:	e7e3      	b.n	8002c58 <HAL_RCC_ClockConfig+0xe4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d110      	bne.n	8002cb6 <HAL_RCC_ClockConfig+0x142>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002c94:	68b3      	ldr	r3, [r6, #8]
 8002c96:	f003 030c 	and.w	r3, r3, #12
 8002c9a:	2b04      	cmp	r3, #4
 8002c9c:	f43f af7d 	beq.w	8002b9a <HAL_RCC_ClockConfig+0x26>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ca0:	f7fe fcf6 	bl	8001690 <HAL_GetTick>
 8002ca4:	1bc0      	subs	r0, r0, r7
 8002ca6:	4540      	cmp	r0, r8
 8002ca8:	d9f4      	bls.n	8002c94 <HAL_RCC_ClockConfig+0x120>
 8002caa:	e7d5      	b.n	8002c58 <HAL_RCC_ClockConfig+0xe4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cac:	f7fe fcf0 	bl	8001690 <HAL_GetTick>
 8002cb0:	1bc0      	subs	r0, r0, r7
 8002cb2:	4540      	cmp	r0, r8
 8002cb4:	d8d0      	bhi.n	8002c58 <HAL_RCC_ClockConfig+0xe4>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002cb6:	68b3      	ldr	r3, [r6, #8]
 8002cb8:	f013 0f0c 	tst.w	r3, #12
 8002cbc:	d1f6      	bne.n	8002cac <HAL_RCC_ClockConfig+0x138>
 8002cbe:	e76c      	b.n	8002b9a <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cc0:	681a      	ldr	r2, [r3, #0]
 8002cc2:	f022 0201 	bic.w	r2, r2, #1
 8002cc6:	601a      	str	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	07da      	lsls	r2, r3, #31
 8002ccc:	f57f af6c 	bpl.w	8002ba8 <HAL_RCC_ClockConfig+0x34>
 8002cd0:	e755      	b.n	8002b7e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002cd2:	4905      	ldr	r1, [pc, #20]	; (8002ce8 <HAL_RCC_ClockConfig+0x174>)
 8002cd4:	68e0      	ldr	r0, [r4, #12]
 8002cd6:	688b      	ldr	r3, [r1, #8]
 8002cd8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002cdc:	4303      	orrs	r3, r0
 8002cde:	608b      	str	r3, [r1, #8]
 8002ce0:	e766      	b.n	8002bb0 <HAL_RCC_ClockConfig+0x3c>
 8002ce2:	bf00      	nop
 8002ce4:	40023c00 	.word	0x40023c00
 8002ce8:	40023800 	.word	0x40023800
 8002cec:	08004eec 	.word	0x08004eec
 8002cf0:	20000000 	.word	0x20000000
 8002cf4:	20000008 	.word	0x20000008

08002cf8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002cf8:	4b04      	ldr	r3, [pc, #16]	; (8002d0c <HAL_RCC_GetPCLK1Freq+0x14>)
 8002cfa:	4a05      	ldr	r2, [pc, #20]	; (8002d10 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002cfc:	689b      	ldr	r3, [r3, #8]
 8002cfe:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002d02:	5cd3      	ldrb	r3, [r2, r3]
 8002d04:	4a03      	ldr	r2, [pc, #12]	; (8002d14 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002d06:	6810      	ldr	r0, [r2, #0]
}
 8002d08:	40d8      	lsrs	r0, r3
 8002d0a:	4770      	bx	lr
 8002d0c:	40023800 	.word	0x40023800
 8002d10:	08004efc 	.word	0x08004efc
 8002d14:	20000000 	.word	0x20000000

08002d18 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002d18:	4b04      	ldr	r3, [pc, #16]	; (8002d2c <HAL_RCC_GetPCLK2Freq+0x14>)
 8002d1a:	4a05      	ldr	r2, [pc, #20]	; (8002d30 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002d22:	5cd3      	ldrb	r3, [r2, r3]
 8002d24:	4a03      	ldr	r2, [pc, #12]	; (8002d34 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002d26:	6810      	ldr	r0, [r2, #0]
}
 8002d28:	40d8      	lsrs	r0, r3
 8002d2a:	4770      	bx	lr
 8002d2c:	40023800 	.word	0x40023800
 8002d30:	08004efc 	.word	0x08004efc
 8002d34:	20000000 	.word	0x20000000

08002d38 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002d38:	230f      	movs	r3, #15
 8002d3a:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002d3c:	4b0b      	ldr	r3, [pc, #44]	; (8002d6c <HAL_RCC_GetClockConfig+0x34>)
 8002d3e:	689a      	ldr	r2, [r3, #8]
 8002d40:	f002 0203 	and.w	r2, r2, #3
 8002d44:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002d46:	689a      	ldr	r2, [r3, #8]
 8002d48:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8002d4c:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002d4e:	689a      	ldr	r2, [r3, #8]
 8002d50:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002d54:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	08db      	lsrs	r3, r3, #3
 8002d5a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002d5e:	6103      	str	r3, [r0, #16]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002d60:	4b03      	ldr	r3, [pc, #12]	; (8002d70 <HAL_RCC_GetClockConfig+0x38>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0301 	and.w	r3, r3, #1
 8002d68:	600b      	str	r3, [r1, #0]
}
 8002d6a:	4770      	bx	lr
 8002d6c:	40023800 	.word	0x40023800
 8002d70:	40023c00 	.word	0x40023c00

08002d74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d74:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d76:	4604      	mov	r4, r0
 8002d78:	2800      	cmp	r0, #0
 8002d7a:	d04d      	beq.n	8002e18 <HAL_SPI_Init+0xa4>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d7c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d146      	bne.n	8002e10 <HAL_SPI_Init+0x9c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d82:	6842      	ldr	r2, [r0, #4]
 8002d84:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002d88:	d000      	beq.n	8002d8c <HAL_SPI_Init+0x18>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d8a:	61c3      	str	r3, [r0, #28]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d90:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8002d94:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002d98:	b923      	cbnz	r3, 8002da4 <HAL_SPI_Init+0x30>

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d9a:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8002d9c:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8002da0:	f7fe fa80 	bl	80012a4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002da4:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002da6:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002da8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8002dac:	680b      	ldr	r3, [r1, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002dae:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8002db0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002db4:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002db6:	6863      	ldr	r3, [r4, #4]
 8002db8:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 8002dbc:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8002dc0:	4303      	orrs	r3, r0
 8002dc2:	68e0      	ldr	r0, [r4, #12]
 8002dc4:	69a2      	ldr	r2, [r4, #24]
 8002dc6:	f400 6000 	and.w	r0, r0, #2048	; 0x800
 8002dca:	4303      	orrs	r3, r0
 8002dcc:	6920      	ldr	r0, [r4, #16]
 8002dce:	f000 0002 	and.w	r0, r0, #2
 8002dd2:	4303      	orrs	r3, r0
 8002dd4:	6960      	ldr	r0, [r4, #20]
 8002dd6:	f000 0001 	and.w	r0, r0, #1
 8002dda:	4303      	orrs	r3, r0
 8002ddc:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8002de0:	4303      	orrs	r3, r0
 8002de2:	69e0      	ldr	r0, [r4, #28]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002de4:	0c12      	lsrs	r2, r2, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002de6:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8002dea:	4303      	orrs	r3, r0
 8002dec:	6a20      	ldr	r0, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002dee:	f002 0204 	and.w	r2, r2, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002df2:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8002df6:	4303      	orrs	r3, r0
 8002df8:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8002dfa:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 8002dfe:	4303      	orrs	r3, r0
 8002e00:	600b      	str	r3, [r1, #0]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e02:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8002e04:	2301      	movs	r3, #1
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002e06:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e08:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e0a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
}
 8002e0e:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002e10:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002e12:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002e16:	e7b9      	b.n	8002d8c <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8002e18:	2001      	movs	r0, #1
 8002e1a:	e7f8      	b.n	8002e0e <HAL_SPI_Init+0x9a>

08002e1c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e1c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  tmpcr1 = TIMx->CR1;
 8002e20:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e22:	d006      	beq.n	8002e32 <TIM_Base_SetConfig+0x16>
 8002e24:	4a18      	ldr	r2, [pc, #96]	; (8002e88 <TIM_Base_SetConfig+0x6c>)
 8002e26:	4290      	cmp	r0, r2
 8002e28:	d003      	beq.n	8002e32 <TIM_Base_SetConfig+0x16>
 8002e2a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e2e:	4290      	cmp	r0, r2
 8002e30:	d10e      	bne.n	8002e50 <TIM_Base_SetConfig+0x34>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002e32:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e34:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e38:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
    tmpcr1 |= Structure->CounterMode;
 8002e3c:	ea43 0302 	orr.w	r3, r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e40:	d011      	beq.n	8002e66 <TIM_Base_SetConfig+0x4a>
 8002e42:	4a11      	ldr	r2, [pc, #68]	; (8002e88 <TIM_Base_SetConfig+0x6c>)
 8002e44:	4290      	cmp	r0, r2
 8002e46:	d00e      	beq.n	8002e66 <TIM_Base_SetConfig+0x4a>
 8002e48:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e4c:	4290      	cmp	r0, r2
 8002e4e:	d00a      	beq.n	8002e66 <TIM_Base_SetConfig+0x4a>
 8002e50:	4a0e      	ldr	r2, [pc, #56]	; (8002e8c <TIM_Base_SetConfig+0x70>)
 8002e52:	4290      	cmp	r0, r2
 8002e54:	d007      	beq.n	8002e66 <TIM_Base_SetConfig+0x4a>
 8002e56:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e5a:	4290      	cmp	r0, r2
 8002e5c:	d003      	beq.n	8002e66 <TIM_Base_SetConfig+0x4a>
 8002e5e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002e62:	4290      	cmp	r0, r2
 8002e64:	d103      	bne.n	8002e6e <TIM_Base_SetConfig+0x52>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e66:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e68:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e6c:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e6e:	690a      	ldr	r2, [r1, #16]
 8002e70:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e74:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 8002e76:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e78:	688b      	ldr	r3, [r1, #8]
 8002e7a:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e7c:	680b      	ldr	r3, [r1, #0]
 8002e7e:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e80:	2301      	movs	r3, #1
 8002e82:	6143      	str	r3, [r0, #20]
}
 8002e84:	4770      	bx	lr
 8002e86:	bf00      	nop
 8002e88:	40000400 	.word	0x40000400
 8002e8c:	40010800 	.word	0x40010800

08002e90 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e90:	6a03      	ldr	r3, [r0, #32]
{
 8002e92:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e94:	f023 0301 	bic.w	r3, r3, #1
 8002e98:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e9a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e9c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e9e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ea0:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002ea2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8002ea6:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002ea8:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 8002eaa:	f023 0302 	bic.w	r3, r3, #2

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002eae:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002eb0:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002eb2:	684a      	ldr	r2, [r1, #4]
  tmpccer |= OC_Config->OCPolarity;
 8002eb4:	432b      	orrs	r3, r5
  TIMx->CCR1 = OC_Config->Pulse;
 8002eb6:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002eb8:	6203      	str	r3, [r0, #32]
}
 8002eba:	bd30      	pop	{r4, r5, pc}

08002ebc <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ebc:	6a03      	ldr	r3, [r0, #32]
{
 8002ebe:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ec0:	f023 0310 	bic.w	r3, r3, #16
 8002ec4:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002ec6:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002ec8:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002eca:	6982      	ldr	r2, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ecc:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002ece:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ed2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ed6:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8002ed8:	f023 0320 	bic.w	r3, r3, #32

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002edc:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ede:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002ee0:	684a      	ldr	r2, [r1, #4]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ee2:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCR2 = OC_Config->Pulse;
 8002ee6:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ee8:	6203      	str	r3, [r0, #32]
}
 8002eea:	bd30      	pop	{r4, r5, pc}

08002eec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002eec:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002eee:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002ef0:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002ef2:	f001 011f 	and.w	r1, r1, #31
 8002ef6:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8002ef8:	ea23 0304 	bic.w	r3, r3, r4
 8002efc:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002efe:	6a03      	ldr	r3, [r0, #32]
 8002f00:	408a      	lsls	r2, r1
 8002f02:	431a      	orrs	r2, r3
 8002f04:	6202      	str	r2, [r0, #32]
}
 8002f06:	bd10      	pop	{r4, pc}

08002f08 <HAL_TIM_Base_MspInit>:
}
 8002f08:	4770      	bx	lr

08002f0a <HAL_TIM_Base_Init>:
{
 8002f0a:	b510      	push	{r4, lr}
  if (htim == NULL)
 8002f0c:	4604      	mov	r4, r0
 8002f0e:	b1f0      	cbz	r0, 8002f4e <HAL_TIM_Base_Init+0x44>
  if (htim->State == HAL_TIM_STATE_RESET)
 8002f10:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002f14:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002f18:	b91b      	cbnz	r3, 8002f22 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8002f1a:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 8002f1e:	f7ff fff3 	bl	8002f08 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8002f22:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f24:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8002f26:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f2a:	1d21      	adds	r1, r4, #4
 8002f2c:	f7ff ff76 	bl	8002e1c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f30:	2301      	movs	r3, #1
  return HAL_OK;
 8002f32:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f34:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f38:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
 8002f3c:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
 8002f40:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8002f44:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  htim->State = HAL_TIM_STATE_READY;
 8002f48:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8002f4c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8002f4e:	2001      	movs	r0, #1
 8002f50:	e7fc      	b.n	8002f4c <HAL_TIM_Base_Init+0x42>
	...

08002f54 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8002f54:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	d120      	bne.n	8002f9e <HAL_TIM_Base_Start_IT+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8002f5c:	2302      	movs	r3, #2
 8002f5e:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f62:	6803      	ldr	r3, [r0, #0]
 8002f64:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002f6a:	f042 0201 	orr.w	r2, r2, #1
 8002f6e:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002f70:	d00a      	beq.n	8002f88 <HAL_TIM_Base_Start_IT+0x34>
 8002f72:	4a0c      	ldr	r2, [pc, #48]	; (8002fa4 <HAL_TIM_Base_Start_IT+0x50>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d007      	beq.n	8002f88 <HAL_TIM_Base_Start_IT+0x34>
 8002f78:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d003      	beq.n	8002f88 <HAL_TIM_Base_Start_IT+0x34>
 8002f80:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d104      	bne.n	8002f92 <HAL_TIM_Base_Start_IT+0x3e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002f88:	689a      	ldr	r2, [r3, #8]
 8002f8a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f8e:	2a06      	cmp	r2, #6
 8002f90:	d003      	beq.n	8002f9a <HAL_TIM_Base_Start_IT+0x46>
    __HAL_TIM_ENABLE(htim);
 8002f92:	681a      	ldr	r2, [r3, #0]
 8002f94:	f042 0201 	orr.w	r2, r2, #1
 8002f98:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8002f9a:	2000      	movs	r0, #0
}
 8002f9c:	4770      	bx	lr
    return HAL_ERROR;
 8002f9e:	2001      	movs	r0, #1
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	40000400 	.word	0x40000400

08002fa8 <HAL_TIM_OC_Start>:
{
 8002fa8:	b510      	push	{r4, lr}
 8002faa:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002fac:	b929      	cbnz	r1, 8002fba <HAL_TIM_OC_Start+0x12>
 8002fae:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8002fb2:	2b01      	cmp	r3, #1
 8002fb4:	d01d      	beq.n	8002ff2 <HAL_TIM_OC_Start+0x4a>
    return HAL_ERROR;
 8002fb6:	2001      	movs	r0, #1
}
 8002fb8:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002fba:	2904      	cmp	r1, #4
 8002fbc:	d107      	bne.n	8002fce <HAL_TIM_OC_Start+0x26>
 8002fbe:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
 8002fc2:	2b01      	cmp	r3, #1
 8002fc4:	d1f7      	bne.n	8002fb6 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fc6:	2302      	movs	r3, #2
 8002fc8:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
 8002fcc:	e014      	b.n	8002ff8 <HAL_TIM_OC_Start+0x50>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002fce:	2908      	cmp	r1, #8
 8002fd0:	d107      	bne.n	8002fe2 <HAL_TIM_OC_Start+0x3a>
 8002fd2:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8002fd6:	2b01      	cmp	r3, #1
 8002fd8:	d1ed      	bne.n	8002fb6 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fda:	2302      	movs	r3, #2
 8002fdc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8002fe0:	e00a      	b.n	8002ff8 <HAL_TIM_OC_Start+0x50>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002fe2:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002fe6:	2b01      	cmp	r3, #1
 8002fe8:	d1e5      	bne.n	8002fb6 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002fea:	2302      	movs	r3, #2
 8002fec:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8002ff0:	e002      	b.n	8002ff8 <HAL_TIM_OC_Start+0x50>
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	6820      	ldr	r0, [r4, #0]
 8002ffc:	f7ff ff76 	bl	8002eec <TIM_CCxChannelCmd>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003000:	6823      	ldr	r3, [r4, #0]
 8003002:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003006:	d00a      	beq.n	800301e <HAL_TIM_OC_Start+0x76>
 8003008:	4a0a      	ldr	r2, [pc, #40]	; (8003034 <HAL_TIM_OC_Start+0x8c>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d007      	beq.n	800301e <HAL_TIM_OC_Start+0x76>
 800300e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003012:	4293      	cmp	r3, r2
 8003014:	d003      	beq.n	800301e <HAL_TIM_OC_Start+0x76>
 8003016:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800301a:	4293      	cmp	r3, r2
 800301c:	d104      	bne.n	8003028 <HAL_TIM_OC_Start+0x80>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800301e:	689a      	ldr	r2, [r3, #8]
 8003020:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003024:	2a06      	cmp	r2, #6
 8003026:	d003      	beq.n	8003030 <HAL_TIM_OC_Start+0x88>
    __HAL_TIM_ENABLE(htim);
 8003028:	681a      	ldr	r2, [r3, #0]
 800302a:	f042 0201 	orr.w	r2, r2, #1
 800302e:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 8003030:	2000      	movs	r0, #0
 8003032:	e7c1      	b.n	8002fb8 <HAL_TIM_OC_Start+0x10>
 8003034:	40000400 	.word	0x40000400

08003038 <HAL_TIM_OC_Stop>:
{
 8003038:	b538      	push	{r3, r4, r5, lr}
 800303a:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800303c:	2200      	movs	r2, #0
 800303e:	6800      	ldr	r0, [r0, #0]
{
 8003040:	460d      	mov	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8003042:	f7ff ff53 	bl	8002eec <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE(htim);
 8003046:	f241 1211 	movw	r2, #4369	; 0x1111
 800304a:	6823      	ldr	r3, [r4, #0]
 800304c:	6a19      	ldr	r1, [r3, #32]
 800304e:	4211      	tst	r1, r2
 8003050:	bf02      	ittt	eq
 8003052:	681a      	ldreq	r2, [r3, #0]
 8003054:	f022 0201 	biceq.w	r2, r2, #1
 8003058:	601a      	streq	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800305a:	2301      	movs	r3, #1
 800305c:	b91d      	cbnz	r5, 8003066 <HAL_TIM_OC_Stop+0x2e>
 800305e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8003062:	2000      	movs	r0, #0
 8003064:	bd38      	pop	{r3, r4, r5, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8003066:	2d04      	cmp	r5, #4
 8003068:	d102      	bne.n	8003070 <HAL_TIM_OC_Stop+0x38>
 800306a:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
 800306e:	e7f8      	b.n	8003062 <HAL_TIM_OC_Stop+0x2a>
 8003070:	2d08      	cmp	r5, #8
 8003072:	bf0c      	ite	eq
 8003074:	f884 303c 	strbeq.w	r3, [r4, #60]	; 0x3c
 8003078:	f884 303d 	strbne.w	r3, [r4, #61]	; 0x3d
 800307c:	e7f1      	b.n	8003062 <HAL_TIM_OC_Stop+0x2a>

0800307e <HAL_TIM_PWM_Init>:
{
 800307e:	b510      	push	{r4, lr}
  if (htim == NULL)
 8003080:	4604      	mov	r4, r0
 8003082:	b1f0      	cbz	r0, 80030c2 <HAL_TIM_PWM_Init+0x44>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003084:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003088:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800308c:	b91b      	cbnz	r3, 8003096 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800308e:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 8003092:	f7fe f9df 	bl	8001454 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003096:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003098:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800309a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800309e:	1d21      	adds	r1, r4, #4
 80030a0:	f7ff febc 	bl	8002e1c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030a4:	2301      	movs	r3, #1
  return HAL_OK;
 80030a6:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030a8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030ac:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
 80030b0:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
 80030b4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80030b8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  htim->State = HAL_TIM_STATE_READY;
 80030bc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 80030c0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80030c2:	2001      	movs	r0, #1
 80030c4:	e7fc      	b.n	80030c0 <HAL_TIM_PWM_Init+0x42>

080030c6 <HAL_TIM_PWM_Start>:
 80030c6:	f7ff bf6f 	b.w	8002fa8 <HAL_TIM_OC_Start>

080030ca <HAL_TIM_PWM_Stop>:
 80030ca:	f7ff bfb5 	b.w	8003038 <HAL_TIM_OC_Stop>

080030ce <HAL_TIM_PWM_ConfigChannel>:
{
 80030ce:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 80030d0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
{
 80030d4:	4605      	mov	r5, r0
  __HAL_LOCK(htim);
 80030d6:	2b01      	cmp	r3, #1
{
 80030d8:	460c      	mov	r4, r1
  __HAL_LOCK(htim);
 80030da:	d077      	beq.n	80031cc <HAL_TIM_PWM_ConfigChannel+0xfe>
 80030dc:	2301      	movs	r3, #1
  switch (Channel)
 80030de:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 80030e0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  switch (Channel)
 80030e4:	d04f      	beq.n	8003186 <HAL_TIM_PWM_ConfigChannel+0xb8>
 80030e6:	d806      	bhi.n	80030f6 <HAL_TIM_PWM_ConfigChannel+0x28>
 80030e8:	b35a      	cbz	r2, 8003142 <HAL_TIM_PWM_ConfigChannel+0x74>
 80030ea:	2a04      	cmp	r2, #4
 80030ec:	d03a      	beq.n	8003164 <HAL_TIM_PWM_ConfigChannel+0x96>
  __HAL_UNLOCK(htim);
 80030ee:	2000      	movs	r0, #0
 80030f0:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
}
 80030f4:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 80030f6:	2a0c      	cmp	r2, #12
 80030f8:	d1f9      	bne.n	80030ee <HAL_TIM_PWM_ConfigChannel+0x20>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80030fa:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030fc:	6826      	ldr	r6, [r4, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80030fe:	6a1a      	ldr	r2, [r3, #32]
 8003100:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003104:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8003106:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003108:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800310a:	69d9      	ldr	r1, [r3, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 800310c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003110:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003114:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003118:	68a6      	ldr	r6, [r4, #8]
  TIMx->CR2 = tmpcr2;
 800311a:	6058      	str	r0, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 800311c:	61d9      	str	r1, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800311e:	6861      	ldr	r1, [r4, #4]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003120:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCR4 = OC_Config->Pulse;
 8003124:	6419      	str	r1, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 8003126:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003128:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800312a:	68e1      	ldr	r1, [r4, #12]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800312c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003130:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003132:	69da      	ldr	r2, [r3, #28]
 8003134:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003138:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800313a:	69da      	ldr	r2, [r3, #28]
 800313c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003140:	e042      	b.n	80031c8 <HAL_TIM_PWM_ConfigChannel+0xfa>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003142:	6800      	ldr	r0, [r0, #0]
 8003144:	f7ff fea4 	bl	8002e90 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003148:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800314a:	68c9      	ldr	r1, [r1, #12]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800314c:	699a      	ldr	r2, [r3, #24]
 800314e:	f042 0208 	orr.w	r2, r2, #8
 8003152:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003154:	699a      	ldr	r2, [r3, #24]
 8003156:	f022 0204 	bic.w	r2, r2, #4
 800315a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800315c:	699a      	ldr	r2, [r3, #24]
 800315e:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003160:	619a      	str	r2, [r3, #24]
      break;
 8003162:	e7c4      	b.n	80030ee <HAL_TIM_PWM_ConfigChannel+0x20>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003164:	6800      	ldr	r0, [r0, #0]
 8003166:	f7ff fea9 	bl	8002ebc <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800316a:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800316c:	68c9      	ldr	r1, [r1, #12]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800316e:	699a      	ldr	r2, [r3, #24]
 8003170:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003174:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003176:	699a      	ldr	r2, [r3, #24]
 8003178:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800317c:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800317e:	699a      	ldr	r2, [r3, #24]
 8003180:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003184:	e7ec      	b.n	8003160 <HAL_TIM_PWM_ConfigChannel+0x92>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003186:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8003188:	6826      	ldr	r6, [r4, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800318a:	6a1a      	ldr	r2, [r3, #32]
 800318c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003190:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8003192:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003194:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8003196:	69d9      	ldr	r1, [r3, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8003198:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800319c:	f021 0173 	bic.w	r1, r1, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80031a0:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80031a2:	68a6      	ldr	r6, [r4, #8]
  TIMx->CR2 = tmpcr2;
 80031a4:	6058      	str	r0, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 80031a6:	61d9      	str	r1, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80031a8:	6861      	ldr	r1, [r4, #4]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80031aa:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  TIMx->CCR3 = OC_Config->Pulse;
 80031ae:	63d9      	str	r1, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 80031b0:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031b2:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80031b4:	68e1      	ldr	r1, [r4, #12]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80031b6:	f042 0208 	orr.w	r2, r2, #8
 80031ba:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80031bc:	69da      	ldr	r2, [r3, #28]
 80031be:	f022 0204 	bic.w	r2, r2, #4
 80031c2:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80031c4:	69da      	ldr	r2, [r3, #28]
 80031c6:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80031c8:	61da      	str	r2, [r3, #28]
      break;
 80031ca:	e790      	b.n	80030ee <HAL_TIM_PWM_ConfigChannel+0x20>
  __HAL_LOCK(htim);
 80031cc:	2002      	movs	r0, #2
 80031ce:	e791      	b.n	80030f4 <HAL_TIM_PWM_ConfigChannel+0x26>

080031d0 <HAL_TIM_OC_DelayElapsedCallback>:
 80031d0:	4770      	bx	lr

080031d2 <HAL_TIM_IC_CaptureCallback>:
 80031d2:	4770      	bx	lr

080031d4 <HAL_TIM_PWM_PulseFinishedCallback>:
 80031d4:	4770      	bx	lr

080031d6 <HAL_TIM_TriggerCallback>:
 80031d6:	4770      	bx	lr

080031d8 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031d8:	6803      	ldr	r3, [r0, #0]
{
 80031da:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031dc:	691a      	ldr	r2, [r3, #16]
{
 80031de:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80031e0:	0791      	lsls	r1, r2, #30
 80031e2:	d50e      	bpl.n	8003202 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80031e4:	68da      	ldr	r2, [r3, #12]
 80031e6:	0792      	lsls	r2, r2, #30
 80031e8:	d50b      	bpl.n	8003202 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80031ea:	f06f 0202 	mvn.w	r2, #2
 80031ee:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80031f0:	2201      	movs	r2, #1
 80031f2:	7602      	strb	r2, [r0, #24]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80031f4:	699b      	ldr	r3, [r3, #24]
 80031f6:	0799      	lsls	r1, r3, #30
 80031f8:	d05c      	beq.n	80032b4 <HAL_TIM_IRQHandler+0xdc>
          HAL_TIM_IC_CaptureCallback(htim);
 80031fa:	f7ff ffea 	bl	80031d2 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80031fe:	2300      	movs	r3, #0
 8003200:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003202:	6823      	ldr	r3, [r4, #0]
 8003204:	691a      	ldr	r2, [r3, #16]
 8003206:	0752      	lsls	r2, r2, #29
 8003208:	d510      	bpl.n	800322c <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800320a:	68da      	ldr	r2, [r3, #12]
 800320c:	0750      	lsls	r0, r2, #29
 800320e:	d50d      	bpl.n	800322c <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003210:	f06f 0204 	mvn.w	r2, #4
 8003214:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003216:	2202      	movs	r2, #2
 8003218:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800321a:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 800321c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800321e:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003222:	d04d      	beq.n	80032c0 <HAL_TIM_IRQHandler+0xe8>
        HAL_TIM_IC_CaptureCallback(htim);
 8003224:	f7ff ffd5 	bl	80031d2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003228:	2300      	movs	r3, #0
 800322a:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800322c:	6823      	ldr	r3, [r4, #0]
 800322e:	691a      	ldr	r2, [r3, #16]
 8003230:	0711      	lsls	r1, r2, #28
 8003232:	d50f      	bpl.n	8003254 <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003234:	68da      	ldr	r2, [r3, #12]
 8003236:	0712      	lsls	r2, r2, #28
 8003238:	d50c      	bpl.n	8003254 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800323a:	f06f 0208 	mvn.w	r2, #8
 800323e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003240:	2204      	movs	r2, #4
 8003242:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003244:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8003246:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003248:	079b      	lsls	r3, r3, #30
 800324a:	d03f      	beq.n	80032cc <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 800324c:	f7ff ffc1 	bl	80031d2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003250:	2300      	movs	r3, #0
 8003252:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003254:	6823      	ldr	r3, [r4, #0]
 8003256:	691a      	ldr	r2, [r3, #16]
 8003258:	06d0      	lsls	r0, r2, #27
 800325a:	d510      	bpl.n	800327e <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800325c:	68da      	ldr	r2, [r3, #12]
 800325e:	06d1      	lsls	r1, r2, #27
 8003260:	d50d      	bpl.n	800327e <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003262:	f06f 0210 	mvn.w	r2, #16
 8003266:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003268:	2208      	movs	r2, #8
 800326a:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800326c:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 800326e:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003270:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003274:	d030      	beq.n	80032d8 <HAL_TIM_IRQHandler+0x100>
        HAL_TIM_IC_CaptureCallback(htim);
 8003276:	f7ff ffac 	bl	80031d2 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800327a:	2300      	movs	r3, #0
 800327c:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800327e:	6823      	ldr	r3, [r4, #0]
 8003280:	691a      	ldr	r2, [r3, #16]
 8003282:	07d2      	lsls	r2, r2, #31
 8003284:	d508      	bpl.n	8003298 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003286:	68da      	ldr	r2, [r3, #12]
 8003288:	07d0      	lsls	r0, r2, #31
 800328a:	d505      	bpl.n	8003298 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800328c:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8003290:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003292:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003294:	f7fd ffd8 	bl	8001248 <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003298:	6823      	ldr	r3, [r4, #0]
 800329a:	691a      	ldr	r2, [r3, #16]
 800329c:	0651      	lsls	r1, r2, #25
 800329e:	d508      	bpl.n	80032b2 <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80032a0:	68da      	ldr	r2, [r3, #12]
 80032a2:	0652      	lsls	r2, r2, #25
 80032a4:	d505      	bpl.n	80032b2 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032a6:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 80032aa:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80032ac:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 80032ae:	f7ff ff92 	bl	80031d6 <HAL_TIM_TriggerCallback>
}
 80032b2:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032b4:	f7ff ff8c 	bl	80031d0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032b8:	4620      	mov	r0, r4
 80032ba:	f7ff ff8b 	bl	80031d4 <HAL_TIM_PWM_PulseFinishedCallback>
 80032be:	e79e      	b.n	80031fe <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032c0:	f7ff ff86 	bl	80031d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032c4:	4620      	mov	r0, r4
 80032c6:	f7ff ff85 	bl	80031d4 <HAL_TIM_PWM_PulseFinishedCallback>
 80032ca:	e7ad      	b.n	8003228 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032cc:	f7ff ff80 	bl	80031d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032d0:	4620      	mov	r0, r4
 80032d2:	f7ff ff7f 	bl	80031d4 <HAL_TIM_PWM_PulseFinishedCallback>
 80032d6:	e7bb      	b.n	8003250 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80032d8:	f7ff ff7a 	bl	80031d0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032dc:	4620      	mov	r0, r4
 80032de:	f7ff ff79 	bl	80031d4 <HAL_TIM_PWM_PulseFinishedCallback>
 80032e2:	e7ca      	b.n	800327a <HAL_TIM_IRQHandler+0xa2>

080032e4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032e4:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032e6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
{
 80032ea:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 80032ec:	2b01      	cmp	r3, #1
 80032ee:	f04f 0002 	mov.w	r0, #2
 80032f2:	d022      	beq.n	800333a <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032f4:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80032f6:	f882 0039 	strb.w	r0, [r2, #57]	; 0x39
  tmpcr2 = htim->Instance->CR2;
 80032fa:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032fc:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80032fe:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003302:	432c      	orrs	r4, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003304:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  tmpsmcr = htim->Instance->SMCR;
 8003308:	6898      	ldr	r0, [r3, #8]
  htim->Instance->CR2 = tmpcr2;
 800330a:	605c      	str	r4, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800330c:	d00a      	beq.n	8003324 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 800330e:	4c0b      	ldr	r4, [pc, #44]	; (800333c <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8003310:	42a3      	cmp	r3, r4
 8003312:	d007      	beq.n	8003324 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8003314:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003318:	42a3      	cmp	r3, r4
 800331a:	d003      	beq.n	8003324 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 800331c:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 8003320:	42a3      	cmp	r3, r4
 8003322:	d104      	bne.n	800332e <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003324:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003326:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800332a:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800332c:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800332e:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 8003330:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 8003332:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
  __HAL_UNLOCK(htim);
 8003336:	f882 0038 	strb.w	r0, [r2, #56]	; 0x38

  return HAL_OK;
}
 800333a:	bd30      	pop	{r4, r5, pc}
 800333c:	40000400 	.word	0x40000400

08003340 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003340:	b510      	push	{r4, lr}
 8003342:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003344:	6802      	ldr	r2, [r0, #0]
 8003346:	68c1      	ldr	r1, [r0, #12]
 8003348:	6913      	ldr	r3, [r2, #16]
 800334a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800334e:	430b      	orrs	r3, r1
 8003350:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003352:	6883      	ldr	r3, [r0, #8]
 8003354:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8003356:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003358:	4303      	orrs	r3, r0
 800335a:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 800335c:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003360:	4303      	orrs	r3, r0
 8003362:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 8003364:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003368:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 800336a:	430b      	orrs	r3, r1
 800336c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800336e:	6953      	ldr	r3, [r2, #20]
 8003370:	69a1      	ldr	r1, [r4, #24]
 8003372:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003376:	430b      	orrs	r3, r1
 8003378:	6153      	str	r3, [r2, #20]


  if((huart->Instance == USART1))
 800337a:	4b1a      	ldr	r3, [pc, #104]	; (80033e4 <UART_SetConfig+0xa4>)
 800337c:	429a      	cmp	r2, r3
 800337e:	d120      	bne.n	80033c2 <UART_SetConfig+0x82>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003380:	f7ff fcca 	bl	8002d18 <HAL_RCC_GetPCLK2Freq>
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003384:	2319      	movs	r3, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003386:	69e1      	ldr	r1, [r4, #28]
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003388:	4343      	muls	r3, r0
 800338a:	e9d4 2000 	ldrd	r2, r0, [r4]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800338e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003392:	f04f 0164 	mov.w	r1, #100	; 0x64
 8003396:	d117      	bne.n	80033c8 <UART_SetConfig+0x88>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003398:	0040      	lsls	r0, r0, #1
 800339a:	fbb3 f0f0 	udiv	r0, r3, r0
 800339e:	fbb0 f4f1 	udiv	r4, r0, r1
 80033a2:	fb01 0314 	mls	r3, r1, r4, r0
 80033a6:	00db      	lsls	r3, r3, #3
 80033a8:	3332      	adds	r3, #50	; 0x32
 80033aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80033ae:	f003 0107 	and.w	r1, r3, #7
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 80033b8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80033bc:	440b      	add	r3, r1
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033be:	6093      	str	r3, [r2, #8]
  }
}
 80033c0:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 80033c2:	f7ff fc99 	bl	8002cf8 <HAL_RCC_GetPCLK1Freq>
 80033c6:	e7dd      	b.n	8003384 <UART_SetConfig+0x44>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80033c8:	0080      	lsls	r0, r0, #2
 80033ca:	fbb3 f0f0 	udiv	r0, r3, r0
 80033ce:	fbb0 f4f1 	udiv	r4, r0, r1
 80033d2:	fb01 0314 	mls	r3, r1, r4, r0
 80033d6:	011b      	lsls	r3, r3, #4
 80033d8:	3332      	adds	r3, #50	; 0x32
 80033da:	fbb3 f3f1 	udiv	r3, r3, r1
 80033de:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 80033e2:	e7ec      	b.n	80033be <UART_SetConfig+0x7e>
 80033e4:	40013800 	.word	0x40013800

080033e8 <HAL_UART_Init>:
{
 80033e8:	b510      	push	{r4, lr}
  if (huart == NULL)
 80033ea:	4604      	mov	r4, r0
 80033ec:	b340      	cbz	r0, 8003440 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80033ee:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80033f2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80033f6:	b91b      	cbnz	r3, 8003400 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80033f8:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 80033fc:	f7fe f8ba 	bl	8001574 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8003400:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8003402:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003404:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8003408:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 800340a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 800340c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003410:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003412:	f7ff ff95 	bl	8003340 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003416:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003418:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800341a:	691a      	ldr	r2, [r3, #16]
 800341c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003420:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003422:	695a      	ldr	r2, [r3, #20]
 8003424:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003428:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 800342a:	68da      	ldr	r2, [r3, #12]
 800342c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003430:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003432:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003434:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003436:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800343a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 800343e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003440:	2001      	movs	r0, #1
 8003442:	e7fc      	b.n	800343e <HAL_UART_Init+0x56>

08003444 <vListInitialise>:
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003444:	f04f 32ff 	mov.w	r2, #4294967295
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003448:	f100 0308 	add.w	r3, r0, #8

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800344c:	e9c0 2302 	strd	r2, r3, [r0, #8]
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003450:	6043      	str	r3, [r0, #4]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003452:	6103      	str	r3, [r0, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003454:	2300      	movs	r3, #0
 8003456:	6003      	str	r3, [r0, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003458:	4770      	bx	lr

0800345a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800345a:	2300      	movs	r3, #0
 800345c:	6103      	str	r3, [r0, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800345e:	4770      	bx	lr

08003460 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
    ListItem_t * const pxIndex = pxList->pxIndex;
 8003460:	6843      	ldr	r3, [r0, #4]

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003462:	689a      	ldr	r2, [r3, #8]
    pxNewListItem->pxNext = pxIndex;
 8003464:	604b      	str	r3, [r1, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003466:	608a      	str	r2, [r1, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003468:	689a      	ldr	r2, [r3, #8]
 800346a:	6051      	str	r1, [r2, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800346c:	6099      	str	r1, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
 800346e:	6803      	ldr	r3, [r0, #0]
    pxNewListItem->pxContainer = pxList;
 8003470:	6108      	str	r0, [r1, #16]
    ( pxList->uxNumberOfItems )++;
 8003472:	3301      	adds	r3, #1
 8003474:	6003      	str	r3, [r0, #0]
}
 8003476:	4770      	bx	lr

08003478 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003478:	b530      	push	{r4, r5, lr}
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800347a:	680c      	ldr	r4, [r1, #0]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800347c:	1c63      	adds	r3, r4, #1
 800347e:	d10a      	bne.n	8003496 <vListInsert+0x1e>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003480:	6903      	ldr	r3, [r0, #16]
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003482:	685a      	ldr	r2, [r3, #4]
 8003484:	604a      	str	r2, [r1, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003486:	6091      	str	r1, [r2, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003488:	608b      	str	r3, [r1, #8]
    pxIterator->pxNext = pxNewListItem;
 800348a:	6059      	str	r1, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
 800348c:	6803      	ldr	r3, [r0, #0]
    pxNewListItem->pxContainer = pxList;
 800348e:	6108      	str	r0, [r1, #16]
    ( pxList->uxNumberOfItems )++;
 8003490:	3301      	adds	r3, #1
 8003492:	6003      	str	r3, [r0, #0]
}
 8003494:	bd30      	pop	{r4, r5, pc}
        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003496:	f100 0208 	add.w	r2, r0, #8
 800349a:	4613      	mov	r3, r2
 800349c:	6852      	ldr	r2, [r2, #4]
 800349e:	6815      	ldr	r5, [r2, #0]
 80034a0:	42a5      	cmp	r5, r4
 80034a2:	d9fa      	bls.n	800349a <vListInsert+0x22>
 80034a4:	e7ed      	b.n	8003482 <vListInsert+0xa>

080034a6 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80034a6:	6903      	ldr	r3, [r0, #16]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80034a8:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 80034ac:	608a      	str	r2, [r1, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80034ae:	6051      	str	r1, [r2, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80034b0:	6859      	ldr	r1, [r3, #4]
 80034b2:	4281      	cmp	r1, r0
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80034b4:	bf08      	it	eq
 80034b6:	605a      	streq	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80034b8:	2200      	movs	r2, #0
 80034ba:	6102      	str	r2, [r0, #16]
    ( pxList->uxNumberOfItems )--;
 80034bc:	681a      	ldr	r2, [r3, #0]
 80034be:	3a01      	subs	r2, #1
 80034c0:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80034c2:	6818      	ldr	r0, [r3, #0]
}
 80034c4:	4770      	bx	lr

080034c6 <prvIsQueueEmpty>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80034c6:	b510      	push	{r4, lr}
 80034c8:	4604      	mov	r4, r0
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80034ca:	f000 feab 	bl	8004224 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80034ce:	6ba4      	ldr	r4, [r4, #56]	; 0x38
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
 80034d0:	f000 feb8 	bl	8004244 <vPortExitCritical>

    return xReturn;
}
 80034d4:	fab4 f084 	clz	r0, r4
 80034d8:	0940      	lsrs	r0, r0, #5
 80034da:	bd10      	pop	{r4, pc}

080034dc <prvCopyDataToQueue>:
{
 80034dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80034de:	4615      	mov	r5, r2
    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80034e0:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 80034e2:	4604      	mov	r4, r0
    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80034e4:	6b86      	ldr	r6, [r0, #56]	; 0x38
    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80034e6:	b952      	cbnz	r2, 80034fe <prvCopyDataToQueue+0x22>
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80034e8:	6807      	ldr	r7, [r0, #0]
 80034ea:	bb47      	cbnz	r7, 800353e <prvCopyDataToQueue+0x62>
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80034ec:	6880      	ldr	r0, [r0, #8]
 80034ee:	f000 fe1b 	bl	8004128 <xTaskPriorityDisinherit>
 80034f2:	4605      	mov	r5, r0
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80034f4:	60a7      	str	r7, [r4, #8]
    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80034f6:	3601      	adds	r6, #1
}
 80034f8:	4628      	mov	r0, r5
    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80034fa:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80034fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if( xPosition == queueSEND_TO_BACK )
 80034fe:	b965      	cbnz	r5, 800351a <prvCopyDataToQueue+0x3e>
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003500:	6840      	ldr	r0, [r0, #4]
 8003502:	f001 fca1 	bl	8004e48 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003506:	6863      	ldr	r3, [r4, #4]
 8003508:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800350a:	4413      	add	r3, r2
        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800350c:	68a2      	ldr	r2, [r4, #8]
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800350e:	6063      	str	r3, [r4, #4]
        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003510:	4293      	cmp	r3, r2
 8003512:	d3f0      	bcc.n	80034f6 <prvCopyDataToQueue+0x1a>
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003514:	6823      	ldr	r3, [r4, #0]
 8003516:	6063      	str	r3, [r4, #4]
 8003518:	e7ed      	b.n	80034f6 <prvCopyDataToQueue+0x1a>
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800351a:	68c0      	ldr	r0, [r0, #12]
 800351c:	f001 fc94 	bl	8004e48 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003520:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003522:	68e3      	ldr	r3, [r4, #12]
 8003524:	4251      	negs	r1, r2
 8003526:	1a9b      	subs	r3, r3, r2
        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003528:	6822      	ldr	r2, [r4, #0]
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800352a:	60e3      	str	r3, [r4, #12]
        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800352c:	4293      	cmp	r3, r2
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800352e:	bf3e      	ittt	cc
 8003530:	68a3      	ldrcc	r3, [r4, #8]
 8003532:	185b      	addcc	r3, r3, r1
 8003534:	60e3      	strcc	r3, [r4, #12]
        if( xPosition == queueOVERWRITE )
 8003536:	2d02      	cmp	r5, #2
 8003538:	d101      	bne.n	800353e <prvCopyDataToQueue+0x62>
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800353a:	b116      	cbz	r6, 8003542 <prvCopyDataToQueue+0x66>
                --uxMessagesWaiting;
 800353c:	3e01      	subs	r6, #1
    BaseType_t xReturn = pdFALSE;
 800353e:	2500      	movs	r5, #0
 8003540:	e7d9      	b.n	80034f6 <prvCopyDataToQueue+0x1a>
 8003542:	4635      	mov	r5, r6
 8003544:	e7d7      	b.n	80034f6 <prvCopyDataToQueue+0x1a>

08003546 <prvCopyDataFromQueue>:
{
 8003546:	4603      	mov	r3, r0
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003548:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 800354a:	4608      	mov	r0, r1
 800354c:	b410      	push	{r4}
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800354e:	b162      	cbz	r2, 800356a <prvCopyDataFromQueue+0x24>
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003550:	68dc      	ldr	r4, [r3, #12]
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003552:	6899      	ldr	r1, [r3, #8]
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003554:	4414      	add	r4, r2
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003556:	428c      	cmp	r4, r1
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003558:	bf28      	it	cs
 800355a:	6819      	ldrcs	r1, [r3, #0]
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800355c:	60dc      	str	r4, [r3, #12]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800355e:	bf28      	it	cs
 8003560:	60d9      	strcs	r1, [r3, #12]
        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003562:	68d9      	ldr	r1, [r3, #12]
}
 8003564:	bc10      	pop	{r4}
        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003566:	f001 bc6f 	b.w	8004e48 <memcpy>
}
 800356a:	bc10      	pop	{r4}
 800356c:	4770      	bx	lr

0800356e <prvUnlockQueue>:
{
 800356e:	b570      	push	{r4, r5, r6, lr}
 8003570:	4604      	mov	r4, r0
    taskENTER_CRITICAL();
 8003572:	f000 fe57 	bl	8004224 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 8003576:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800357a:	f104 0624 	add.w	r6, r4, #36	; 0x24
        int8_t cTxLock = pxQueue->cTxLock;
 800357e:	b26d      	sxtb	r5, r5
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003580:	2d00      	cmp	r5, #0
 8003582:	dc14      	bgt.n	80035ae <prvUnlockQueue+0x40>
        pxQueue->cTxLock = queueUNLOCKED;
 8003584:	23ff      	movs	r3, #255	; 0xff
 8003586:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    taskEXIT_CRITICAL();
 800358a:	f000 fe5b 	bl	8004244 <vPortExitCritical>
    taskENTER_CRITICAL();
 800358e:	f000 fe49 	bl	8004224 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 8003592:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003596:	f104 0610 	add.w	r6, r4, #16
        int8_t cRxLock = pxQueue->cRxLock;
 800359a:	b26d      	sxtb	r5, r5
        while( cRxLock > queueLOCKED_UNMODIFIED )
 800359c:	2d00      	cmp	r5, #0
 800359e:	dc12      	bgt.n	80035c6 <prvUnlockQueue+0x58>
        pxQueue->cRxLock = queueUNLOCKED;
 80035a0:	23ff      	movs	r3, #255	; 0xff
 80035a2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 80035a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    taskEXIT_CRITICAL();
 80035aa:	f000 be4b 	b.w	8004244 <vPortExitCritical>
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80035ae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d0e7      	beq.n	8003584 <prvUnlockQueue+0x16>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80035b4:	4630      	mov	r0, r6
 80035b6:	f000 fd1f 	bl	8003ff8 <xTaskRemoveFromEventList>
 80035ba:	b108      	cbz	r0, 80035c0 <prvUnlockQueue+0x52>
                            vTaskMissedYield();
 80035bc:	f000 fdae 	bl	800411c <vTaskMissedYield>
            --cTxLock;
 80035c0:	3d01      	subs	r5, #1
 80035c2:	b26d      	sxtb	r5, r5
 80035c4:	e7dc      	b.n	8003580 <prvUnlockQueue+0x12>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80035c6:	6923      	ldr	r3, [r4, #16]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0e9      	beq.n	80035a0 <prvUnlockQueue+0x32>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80035cc:	4630      	mov	r0, r6
 80035ce:	f000 fd13 	bl	8003ff8 <xTaskRemoveFromEventList>
 80035d2:	b108      	cbz	r0, 80035d8 <prvUnlockQueue+0x6a>
                    vTaskMissedYield();
 80035d4:	f000 fda2 	bl	800411c <vTaskMissedYield>
                --cRxLock;
 80035d8:	3d01      	subs	r5, #1
 80035da:	b26d      	sxtb	r5, r5
 80035dc:	e7de      	b.n	800359c <prvUnlockQueue+0x2e>

080035de <xQueueGenericReset>:
{
 80035de:	b570      	push	{r4, r5, r6, lr}
 80035e0:	460e      	mov	r6, r1
    if( ( pxQueue != NULL ) &&
 80035e2:	4604      	mov	r4, r0
 80035e4:	b310      	cbz	r0, 800362c <xQueueGenericReset+0x4e>
        ( pxQueue->uxLength >= 1U ) &&
 80035e6:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 80035e8:	b300      	cbz	r0, 800362c <xQueueGenericReset+0x4e>
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 80035ea:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80035ec:	fba5 3500 	umull	r3, r5, r5, r0
 80035f0:	b9dd      	cbnz	r5, 800362a <xQueueGenericReset+0x4c>
        taskENTER_CRITICAL();
 80035f2:	f000 fe17 	bl	8004224 <vPortEnterCritical>
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80035f6:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
 80035fa:	434b      	muls	r3, r1
 80035fc:	6822      	ldr	r2, [r4, #0]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80035fe:	63a5      	str	r5, [r4, #56]	; 0x38
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003600:	18d0      	adds	r0, r2, r3
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003602:	1a5b      	subs	r3, r3, r1
 8003604:	4413      	add	r3, r2
 8003606:	60e3      	str	r3, [r4, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8003608:	23ff      	movs	r3, #255	; 0xff
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800360a:	60a0      	str	r0, [r4, #8]
            pxQueue->cRxLock = queueUNLOCKED;
 800360c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003610:	6062      	str	r2, [r4, #4]
            pxQueue->cTxLock = queueUNLOCKED;
 8003612:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
            if( xNewQueue == pdFALSE )
 8003616:	b156      	cbz	r6, 800362e <xQueueGenericReset+0x50>
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003618:	f104 0010 	add.w	r0, r4, #16
 800361c:	f7ff ff12 	bl	8003444 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003620:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003624:	f7ff ff0e 	bl	8003444 <vListInitialise>
 8003628:	e012      	b.n	8003650 <xQueueGenericReset+0x72>
        xReturn = pdFAIL;
 800362a:	2000      	movs	r0, #0
}
 800362c:	bd70      	pop	{r4, r5, r6, pc}
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800362e:	6923      	ldr	r3, [r4, #16]
 8003630:	b173      	cbz	r3, 8003650 <xQueueGenericReset+0x72>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003632:	f104 0010 	add.w	r0, r4, #16
 8003636:	f000 fcdf 	bl	8003ff8 <xTaskRemoveFromEventList>
 800363a:	b148      	cbz	r0, 8003650 <xQueueGenericReset+0x72>
                        queueYIELD_IF_USING_PREEMPTION();
 800363c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003640:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003644:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003648:	f3bf 8f4f 	dsb	sy
 800364c:	f3bf 8f6f 	isb	sy
        taskEXIT_CRITICAL();
 8003650:	f000 fdf8 	bl	8004244 <vPortExitCritical>
 8003654:	2001      	movs	r0, #1
 8003656:	e7e9      	b.n	800362c <xQueueGenericReset+0x4e>

08003658 <xQueueGenericCreate>:
    {
 8003658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800365a:	460d      	mov	r5, r1
 800365c:	4617      	mov	r7, r2
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 800365e:	4606      	mov	r6, r0
 8003660:	b910      	cbnz	r0, 8003668 <xQueueGenericCreate+0x10>
        Queue_t * pxNewQueue = NULL;
 8003662:	2400      	movs	r4, #0
    }
 8003664:	4620      	mov	r0, r4
 8003666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003668:	fba0 2301 	umull	r2, r3, r0, r1
 800366c:	2b00      	cmp	r3, #0
 800366e:	d1f8      	bne.n	8003662 <xQueueGenericCreate+0xa>
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8003670:	4348      	muls	r0, r1
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003672:	f110 0f51 	cmn.w	r0, #81	; 0x51
 8003676:	d8f4      	bhi.n	8003662 <xQueueGenericCreate+0xa>
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003678:	3050      	adds	r0, #80	; 0x50
 800367a:	f000 fe7d 	bl	8004378 <pvPortMalloc>
            if( pxNewQueue != NULL )
 800367e:	4604      	mov	r4, r0
 8003680:	2800      	cmp	r0, #0
 8003682:	d0ee      	beq.n	8003662 <xQueueGenericCreate+0xa>
    if( uxItemSize == ( UBaseType_t ) 0 )
 8003684:	b15d      	cbz	r5, 800369e <xQueueGenericCreate+0x46>
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003686:	f100 0350 	add.w	r3, r0, #80	; 0x50
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800368a:	2101      	movs	r1, #1
 800368c:	4620      	mov	r0, r4
    pxNewQueue->uxItemSize = uxItemSize;
 800368e:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
 8003692:	6023      	str	r3, [r4, #0]
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003694:	f7ff ffa3 	bl	80035de <xQueueGenericReset>
            pxNewQueue->ucQueueType = ucQueueType;
 8003698:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
        return pxNewQueue;
 800369c:	e7e2      	b.n	8003664 <xQueueGenericCreate+0xc>
 800369e:	4603      	mov	r3, r0
 80036a0:	e7f3      	b.n	800368a <xQueueGenericCreate+0x32>

080036a2 <xQueueGenericSend>:
{
 80036a2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80036a6:	f04f 0800 	mov.w	r8, #0
{
 80036aa:	4604      	mov	r4, r0
 80036ac:	460f      	mov	r7, r1
 80036ae:	461e      	mov	r6, r3
        prvLockQueue( pxQueue );
 80036b0:	46c1      	mov	r9, r8
{
 80036b2:	b085      	sub	sp, #20
 80036b4:	9201      	str	r2, [sp, #4]
        taskENTER_CRITICAL();
 80036b6:	f000 fdb5 	bl	8004224 <vPortEnterCritical>
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80036ba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 80036bc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80036be:	429a      	cmp	r2, r3
 80036c0:	d301      	bcc.n	80036c6 <xQueueGenericSend+0x24>
 80036c2:	2e02      	cmp	r6, #2
 80036c4:	d11b      	bne.n	80036fe <xQueueGenericSend+0x5c>
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80036c6:	4632      	mov	r2, r6
 80036c8:	4639      	mov	r1, r7
 80036ca:	4620      	mov	r0, r4
 80036cc:	f7ff ff06 	bl	80034dc <prvCopyDataToQueue>
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80036d0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80036d2:	b11b      	cbz	r3, 80036dc <xQueueGenericSend+0x3a>
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80036d4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80036d8:	f000 fc8e 	bl	8003ff8 <xTaskRemoveFromEventList>
                        else if( xYieldRequired != pdFALSE )
 80036dc:	b148      	cbz	r0, 80036f2 <xQueueGenericSend+0x50>
                            queueYIELD_IF_USING_PREEMPTION();
 80036de:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80036e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80036e6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80036ea:	f3bf 8f4f 	dsb	sy
 80036ee:	f3bf 8f6f 	isb	sy
                taskEXIT_CRITICAL();
 80036f2:	f000 fda7 	bl	8004244 <vPortExitCritical>
                return pdPASS;
 80036f6:	2001      	movs	r0, #1
}
 80036f8:	b005      	add	sp, #20
 80036fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                if( xTicksToWait == ( TickType_t ) 0 )
 80036fe:	9d01      	ldr	r5, [sp, #4]
 8003700:	b91d      	cbnz	r5, 800370a <xQueueGenericSend+0x68>
                    taskEXIT_CRITICAL();
 8003702:	f000 fd9f 	bl	8004244 <vPortExitCritical>
            return errQUEUE_FULL;
 8003706:	2000      	movs	r0, #0
 8003708:	e7f6      	b.n	80036f8 <xQueueGenericSend+0x56>
                else if( xEntryTimeSet == pdFALSE )
 800370a:	f1b8 0f00 	cmp.w	r8, #0
 800370e:	d102      	bne.n	8003716 <xQueueGenericSend+0x74>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003710:	a802      	add	r0, sp, #8
 8003712:	f000 fccf 	bl	80040b4 <vTaskInternalSetTimeOutState>
        taskEXIT_CRITICAL();
 8003716:	f000 fd95 	bl	8004244 <vPortExitCritical>
        vTaskSuspendAll();
 800371a:	f000 fac9 	bl	8003cb0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800371e:	f000 fd81 	bl	8004224 <vPortEnterCritical>
 8003722:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003726:	2bff      	cmp	r3, #255	; 0xff
 8003728:	bf08      	it	eq
 800372a:	f884 9044 	strbeq.w	r9, [r4, #68]	; 0x44
 800372e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003732:	2bff      	cmp	r3, #255	; 0xff
 8003734:	bf08      	it	eq
 8003736:	f884 9045 	strbeq.w	r9, [r4, #69]	; 0x45
 800373a:	f000 fd83 	bl	8004244 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800373e:	a901      	add	r1, sp, #4
 8003740:	a802      	add	r0, sp, #8
 8003742:	f000 fcc3 	bl	80040cc <xTaskCheckForTimeOut>
 8003746:	bb40      	cbnz	r0, 800379a <xQueueGenericSend+0xf8>

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003748:	f000 fd6c 	bl	8004224 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800374c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 800374e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003750:	429a      	cmp	r2, r3
 8003752:	d10f      	bne.n	8003774 <xQueueGenericSend+0xd2>
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
 8003754:	f000 fd76 	bl	8004244 <vPortExitCritical>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003758:	9901      	ldr	r1, [sp, #4]
 800375a:	f104 0010 	add.w	r0, r4, #16
 800375e:	f000 fc3b 	bl	8003fd8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003762:	4620      	mov	r0, r4
 8003764:	f7ff ff03 	bl	800356e <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 8003768:	f000 fb5a 	bl	8003e20 <xTaskResumeAll>
 800376c:	b150      	cbz	r0, 8003784 <xQueueGenericSend+0xe2>
{
 800376e:	f04f 0801 	mov.w	r8, #1
 8003772:	e7a0      	b.n	80036b6 <xQueueGenericSend+0x14>
    taskEXIT_CRITICAL();
 8003774:	f000 fd66 	bl	8004244 <vPortExitCritical>
                prvUnlockQueue( pxQueue );
 8003778:	4620      	mov	r0, r4
 800377a:	f7ff fef8 	bl	800356e <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 800377e:	f000 fb4f 	bl	8003e20 <xTaskResumeAll>
 8003782:	e7f4      	b.n	800376e <xQueueGenericSend+0xcc>
                    portYIELD_WITHIN_API();
 8003784:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003788:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800378c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003790:	f3bf 8f4f 	dsb	sy
 8003794:	f3bf 8f6f 	isb	sy
 8003798:	e7e9      	b.n	800376e <xQueueGenericSend+0xcc>
            prvUnlockQueue( pxQueue );
 800379a:	4620      	mov	r0, r4
 800379c:	f7ff fee7 	bl	800356e <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80037a0:	f000 fb3e 	bl	8003e20 <xTaskResumeAll>
 80037a4:	e7af      	b.n	8003706 <xQueueGenericSend+0x64>

080037a6 <xQueueReceive>:
{
 80037a6:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    BaseType_t xEntryTimeSet = pdFALSE;
 80037aa:	2700      	movs	r7, #0
{
 80037ac:	4604      	mov	r4, r0
 80037ae:	460e      	mov	r6, r1
        prvLockQueue( pxQueue );
 80037b0:	46b8      	mov	r8, r7
{
 80037b2:	9201      	str	r2, [sp, #4]
        taskENTER_CRITICAL();
 80037b4:	f000 fd36 	bl	8004224 <vPortEnterCritical>
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80037b8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80037ba:	b1e5      	cbz	r5, 80037f6 <xQueueReceive+0x50>
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80037bc:	4631      	mov	r1, r6
 80037be:	4620      	mov	r0, r4
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80037c0:	3d01      	subs	r5, #1
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 80037c2:	f7ff fec0 	bl	8003546 <prvCopyDataFromQueue>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80037c6:	63a5      	str	r5, [r4, #56]	; 0x38
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80037c8:	6923      	ldr	r3, [r4, #16]
 80037ca:	b173      	cbz	r3, 80037ea <xQueueReceive+0x44>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80037cc:	f104 0010 	add.w	r0, r4, #16
 80037d0:	f000 fc12 	bl	8003ff8 <xTaskRemoveFromEventList>
 80037d4:	b148      	cbz	r0, 80037ea <xQueueReceive+0x44>
                        queueYIELD_IF_USING_PREEMPTION();
 80037d6:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80037da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037de:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80037e2:	f3bf 8f4f 	dsb	sy
 80037e6:	f3bf 8f6f 	isb	sy
                taskEXIT_CRITICAL();
 80037ea:	f000 fd2b 	bl	8004244 <vPortExitCritical>
                return pdPASS;
 80037ee:	2001      	movs	r0, #1
}
 80037f0:	b004      	add	sp, #16
 80037f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if( xTicksToWait == ( TickType_t ) 0 )
 80037f6:	9d01      	ldr	r5, [sp, #4]
 80037f8:	b91d      	cbnz	r5, 8003802 <xQueueReceive+0x5c>
                    taskEXIT_CRITICAL();
 80037fa:	f000 fd23 	bl	8004244 <vPortExitCritical>
                return errQUEUE_EMPTY;
 80037fe:	2000      	movs	r0, #0
 8003800:	e7f6      	b.n	80037f0 <xQueueReceive+0x4a>
                else if( xEntryTimeSet == pdFALSE )
 8003802:	b917      	cbnz	r7, 800380a <xQueueReceive+0x64>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003804:	a802      	add	r0, sp, #8
 8003806:	f000 fc55 	bl	80040b4 <vTaskInternalSetTimeOutState>
        taskEXIT_CRITICAL();
 800380a:	f000 fd1b 	bl	8004244 <vPortExitCritical>
        vTaskSuspendAll();
 800380e:	f000 fa4f 	bl	8003cb0 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003812:	f000 fd07 	bl	8004224 <vPortEnterCritical>
 8003816:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800381a:	2bff      	cmp	r3, #255	; 0xff
 800381c:	bf08      	it	eq
 800381e:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8003822:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003826:	2bff      	cmp	r3, #255	; 0xff
 8003828:	bf08      	it	eq
 800382a:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 800382e:	f000 fd09 	bl	8004244 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003832:	a901      	add	r1, sp, #4
 8003834:	a802      	add	r0, sp, #8
 8003836:	f000 fc49 	bl	80040cc <xTaskCheckForTimeOut>
 800383a:	bb00      	cbnz	r0, 800387e <xQueueReceive+0xd8>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800383c:	4620      	mov	r0, r4
 800383e:	f7ff fe42 	bl	80034c6 <prvIsQueueEmpty>
 8003842:	b1b0      	cbz	r0, 8003872 <xQueueReceive+0xcc>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003844:	9901      	ldr	r1, [sp, #4]
 8003846:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800384a:	f000 fbc5 	bl	8003fd8 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 800384e:	4620      	mov	r0, r4
 8003850:	f7ff fe8d 	bl	800356e <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 8003854:	f000 fae4 	bl	8003e20 <xTaskResumeAll>
 8003858:	b948      	cbnz	r0, 800386e <xQueueReceive+0xc8>
                    portYIELD_WITHIN_API();
 800385a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800385e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003862:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003866:	f3bf 8f4f 	dsb	sy
 800386a:	f3bf 8f6f 	isb	sy
{
 800386e:	2701      	movs	r7, #1
 8003870:	e7a0      	b.n	80037b4 <xQueueReceive+0xe>
                prvUnlockQueue( pxQueue );
 8003872:	4620      	mov	r0, r4
 8003874:	f7ff fe7b 	bl	800356e <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003878:	f000 fad2 	bl	8003e20 <xTaskResumeAll>
 800387c:	e7f7      	b.n	800386e <xQueueReceive+0xc8>
            prvUnlockQueue( pxQueue );
 800387e:	4620      	mov	r0, r4
 8003880:	f7ff fe75 	bl	800356e <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003884:	f000 facc 	bl	8003e20 <xTaskResumeAll>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003888:	4620      	mov	r0, r4
 800388a:	f7ff fe1c 	bl	80034c6 <prvIsQueueEmpty>
 800388e:	2800      	cmp	r0, #0
 8003890:	d0ed      	beq.n	800386e <xQueueReceive+0xc8>
 8003892:	e7b4      	b.n	80037fe <xQueueReceive+0x58>

08003894 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003894:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003896:	4b21      	ldr	r3, [pc, #132]	; (800391c <prvAddCurrentTaskToDelayedList+0x88>)
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003898:	4c21      	ldr	r4, [pc, #132]	; (8003920 <prvAddCurrentTaskToDelayedList+0x8c>)
{
 800389a:	4606      	mov	r6, r0
    const TickType_t xConstTickCount = xTickCount;
 800389c:	681d      	ldr	r5, [r3, #0]
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800389e:	6820      	ldr	r0, [r4, #0]
{
 80038a0:	460f      	mov	r7, r1
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80038a2:	3004      	adds	r0, #4
 80038a4:	f7ff fdff 	bl	80034a6 <uxListRemove>
 80038a8:	b940      	cbnz	r0, 80038bc <prvAddCurrentTaskToDelayedList+0x28>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80038aa:	6822      	ldr	r2, [r4, #0]
 80038ac:	491d      	ldr	r1, [pc, #116]	; (8003924 <prvAddCurrentTaskToDelayedList+0x90>)
 80038ae:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 80038b0:	2201      	movs	r2, #1
 80038b2:	680b      	ldr	r3, [r1, #0]
 80038b4:	4082      	lsls	r2, r0
 80038b6:	ea23 0302 	bic.w	r3, r3, r2
 80038ba:	600b      	str	r3, [r1, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80038bc:	1c73      	adds	r3, r6, #1
 80038be:	d114      	bne.n	80038ea <prvAddCurrentTaskToDelayedList+0x56>
 80038c0:	b19f      	cbz	r7, 80038ea <prvAddCurrentTaskToDelayedList+0x56>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038c2:	4b19      	ldr	r3, [pc, #100]	; (8003928 <prvAddCurrentTaskToDelayedList+0x94>)
 80038c4:	6821      	ldr	r1, [r4, #0]
 80038c6:	685a      	ldr	r2, [r3, #4]
 80038c8:	6890      	ldr	r0, [r2, #8]
 80038ca:	608a      	str	r2, [r1, #8]
 80038cc:	6821      	ldr	r1, [r4, #0]
 80038ce:	60c8      	str	r0, [r1, #12]
 80038d0:	6821      	ldr	r1, [r4, #0]
 80038d2:	6890      	ldr	r0, [r2, #8]
 80038d4:	3104      	adds	r1, #4
 80038d6:	6041      	str	r1, [r0, #4]
 80038d8:	6821      	ldr	r1, [r4, #0]
 80038da:	3104      	adds	r1, #4
 80038dc:	6091      	str	r1, [r2, #8]
 80038de:	6822      	ldr	r2, [r4, #0]
 80038e0:	6153      	str	r3, [r2, #20]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	3201      	adds	r2, #1
 80038e6:	601a      	str	r2, [r3, #0]

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 80038e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80038ea:	6823      	ldr	r3, [r4, #0]
 80038ec:	19ad      	adds	r5, r5, r6
 80038ee:	605d      	str	r5, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 80038f0:	d307      	bcc.n	8003902 <prvAddCurrentTaskToDelayedList+0x6e>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038f2:	4b0e      	ldr	r3, [pc, #56]	; (800392c <prvAddCurrentTaskToDelayedList+0x98>)
 80038f4:	6818      	ldr	r0, [r3, #0]
 80038f6:	6821      	ldr	r1, [r4, #0]
}
 80038f8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80038fc:	3104      	adds	r1, #4
 80038fe:	f7ff bdbb 	b.w	8003478 <vListInsert>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003902:	4b0b      	ldr	r3, [pc, #44]	; (8003930 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003904:	6818      	ldr	r0, [r3, #0]
 8003906:	6821      	ldr	r1, [r4, #0]
 8003908:	3104      	adds	r1, #4
 800390a:	f7ff fdb5 	bl	8003478 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800390e:	4b09      	ldr	r3, [pc, #36]	; (8003934 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	42aa      	cmp	r2, r5
                        xNextTaskUnblockTime = xTimeToWake;
 8003914:	bf88      	it	hi
 8003916:	601d      	strhi	r5, [r3, #0]
}
 8003918:	e7e6      	b.n	80038e8 <prvAddCurrentTaskToDelayedList+0x54>
 800391a:	bf00      	nop
 800391c:	20000338 	.word	0x20000338
 8003920:	2000023c 	.word	0x2000023c
 8003924:	200002bc 	.word	0x200002bc
 8003928:	20000310 	.word	0x20000310
 800392c:	20000244 	.word	0x20000244
 8003930:	20000240 	.word	0x20000240
 8003934:	200002ec 	.word	0x200002ec

08003938 <prvResetNextTaskUnblockTime>:
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003938:	4a06      	ldr	r2, [pc, #24]	; (8003954 <prvResetNextTaskUnblockTime+0x1c>)
 800393a:	6813      	ldr	r3, [r2, #0]
 800393c:	6819      	ldr	r1, [r3, #0]
 800393e:	4b06      	ldr	r3, [pc, #24]	; (8003958 <prvResetNextTaskUnblockTime+0x20>)
 8003940:	b919      	cbnz	r1, 800394a <prvResetNextTaskUnblockTime+0x12>
        xNextTaskUnblockTime = portMAX_DELAY;
 8003942:	f04f 32ff 	mov.w	r2, #4294967295
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003946:	601a      	str	r2, [r3, #0]
}
 8003948:	4770      	bx	lr
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 800394a:	6812      	ldr	r2, [r2, #0]
 800394c:	68d2      	ldr	r2, [r2, #12]
 800394e:	6812      	ldr	r2, [r2, #0]
 8003950:	e7f9      	b.n	8003946 <prvResetNextTaskUnblockTime+0xe>
 8003952:	bf00      	nop
 8003954:	20000240 	.word	0x20000240
 8003958:	200002ec 	.word	0x200002ec

0800395c <prvIdleTask>:
{
 800395c:	b580      	push	{r7, lr}
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800395e:	4c15      	ldr	r4, [pc, #84]	; (80039b4 <prvIdleTask+0x58>)
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003960:	4f15      	ldr	r7, [pc, #84]	; (80039b8 <prvIdleTask+0x5c>)
                    --uxCurrentNumberOfTasks;
 8003962:	4e16      	ldr	r6, [pc, #88]	; (80039bc <prvIdleTask+0x60>)
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003964:	6823      	ldr	r3, [r4, #0]
 8003966:	b973      	cbnz	r3, 8003986 <prvIdleTask+0x2a>
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003968:	4b15      	ldr	r3, [pc, #84]	; (80039c0 <prvIdleTask+0x64>)
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	2b01      	cmp	r3, #1
 800396e:	d9f8      	bls.n	8003962 <prvIdleTask+0x6>
                    taskYIELD();
 8003970:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003974:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003978:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800397c:	f3bf 8f4f 	dsb	sy
 8003980:	f3bf 8f6f 	isb	sy
 8003984:	e7ed      	b.n	8003962 <prvIdleTask+0x6>
                taskENTER_CRITICAL();
 8003986:	f000 fc4d 	bl	8004224 <vPortEnterCritical>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	68dd      	ldr	r5, [r3, #12]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800398e:	1d28      	adds	r0, r5, #4
 8003990:	f7ff fd89 	bl	80034a6 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003994:	6833      	ldr	r3, [r6, #0]
 8003996:	3b01      	subs	r3, #1
 8003998:	6033      	str	r3, [r6, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800399a:	6823      	ldr	r3, [r4, #0]
 800399c:	3b01      	subs	r3, #1
 800399e:	6023      	str	r3, [r4, #0]
                taskEXIT_CRITICAL();
 80039a0:	f000 fc50 	bl	8004244 <vPortExitCritical>
                vPortFreeStack( pxTCB->pxStack );
 80039a4:	6b28      	ldr	r0, [r5, #48]	; 0x30
 80039a6:	f000 fd6b 	bl	8004480 <vPortFree>
                vPortFree( pxTCB );
 80039aa:	4628      	mov	r0, r5
 80039ac:	f000 fd68 	bl	8004480 <vPortFree>
    }
 80039b0:	e7d8      	b.n	8003964 <prvIdleTask+0x8>
 80039b2:	bf00      	nop
 80039b4:	200002b0 	.word	0x200002b0
 80039b8:	20000324 	.word	0x20000324
 80039bc:	200002ac 	.word	0x200002ac
 80039c0:	20000248 	.word	0x20000248

080039c4 <xTaskCreate>:
    {
 80039c4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80039c8:	0096      	lsls	r6, r2, #2
    {
 80039ca:	4607      	mov	r7, r0
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80039cc:	4630      	mov	r0, r6
    {
 80039ce:	460d      	mov	r5, r1
 80039d0:	4698      	mov	r8, r3
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80039d2:	f000 fcd1 	bl	8004378 <pvPortMalloc>
                if( pxStack != NULL )
 80039d6:	4682      	mov	sl, r0
 80039d8:	b1a0      	cbz	r0, 8003a04 <xTaskCreate+0x40>
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80039da:	205c      	movs	r0, #92	; 0x5c
 80039dc:	f000 fccc 	bl	8004378 <pvPortMalloc>
                    if( pxNewTCB != NULL )
 80039e0:	4604      	mov	r4, r0
 80039e2:	b160      	cbz	r0, 80039fe <xTaskCreate+0x3a>
                        pxNewTCB->pxStack = pxStack;
 80039e4:	f8c0 a030 	str.w	sl, [r0, #48]	; 0x30
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80039e8:	4632      	mov	r2, r6
 80039ea:	21a5      	movs	r1, #165	; 0xa5
 80039ec:	4650      	mov	r0, sl
 80039ee:	f001 fa39 	bl	8004e64 <memset>
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80039f2:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
    if( pcName != NULL )
 80039f6:	b945      	cbnz	r5, 8003a0a <xTaskCreate+0x46>
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80039f8:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 80039fc:	e013      	b.n	8003a26 <xTaskCreate+0x62>
                        vPortFreeStack( pxStack );
 80039fe:	4650      	mov	r0, sl
 8003a00:	f000 fd3e 	bl	8004480 <vPortFree>
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003a04:	f04f 35ff 	mov.w	r5, #4294967295
 8003a08:	e095      	b.n	8003b36 <xTaskCreate+0x172>
 8003a0a:	1e6b      	subs	r3, r5, #1
 8003a0c:	f104 0234 	add.w	r2, r4, #52	; 0x34
 8003a10:	350f      	adds	r5, #15
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003a12:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8003a16:	f802 0b01 	strb.w	r0, [r2], #1
            if( pcName[ x ] == ( char ) 0x00 )
 8003a1a:	b108      	cbz	r0, 8003a20 <xTaskCreate+0x5c>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003a1c:	42ab      	cmp	r3, r5
 8003a1e:	d1f8      	bne.n	8003a12 <xTaskCreate+0x4e>
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003a20:	2300      	movs	r3, #0
 8003a22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003a26:	9d0a      	ldr	r5, [sp, #40]	; 0x28
            pxNewTCB->uxMutexesHeld = 0;
 8003a28:	f04f 0900 	mov.w	r9, #0
 8003a2c:	2d04      	cmp	r5, #4
 8003a2e:	bf28      	it	cs
 8003a30:	2504      	movcs	r5, #4
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003a32:	f104 0a04 	add.w	sl, r4, #4
 8003a36:	4650      	mov	r0, sl
    pxNewTCB->uxPriority = uxPriority;
 8003a38:	62e5      	str	r5, [r4, #44]	; 0x2c
            pxNewTCB->uxBasePriority = uxPriority;
 8003a3a:	64e5      	str	r5, [r4, #76]	; 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 8003a3c:	f8c4 9050 	str.w	r9, [r4, #80]	; 0x50
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003a40:	3e04      	subs	r6, #4
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003a42:	f7ff fd0a 	bl	800345a <vListInitialiseItem>
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a46:	f1c5 0505 	rsb	r5, r5, #5
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003a4a:	f104 0018 	add.w	r0, r4, #24
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003a4e:	445e      	add	r6, fp
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003a50:	f7ff fd03 	bl	800345a <vListInitialiseItem>
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003a54:	4642      	mov	r2, r8
 8003a56:	4639      	mov	r1, r7
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003a58:	6124      	str	r4, [r4, #16]
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003a5a:	61a5      	str	r5, [r4, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003a5c:	6264      	str	r4, [r4, #36]	; 0x24
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 8003a5e:	f8c4 9054 	str.w	r9, [r4, #84]	; 0x54
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 8003a62:	f884 9058 	strb.w	r9, [r4, #88]	; 0x58
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003a66:	f026 0007 	bic.w	r0, r6, #7
 8003a6a:	f000 fbb7 	bl	80041dc <pxPortInitialiseStack>
    if( pxCreatedTask != NULL )
 8003a6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003a70:	6020      	str	r0, [r4, #0]
    if( pxCreatedTask != NULL )
 8003a72:	b103      	cbz	r3, 8003a76 <xTaskCreate+0xb2>
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003a74:	601c      	str	r4, [r3, #0]
    taskENTER_CRITICAL();
 8003a76:	f000 fbd5 	bl	8004224 <vPortEnterCritical>
        uxCurrentNumberOfTasks++;
 8003a7a:	4b36      	ldr	r3, [pc, #216]	; (8003b54 <xTaskCreate+0x190>)
        if( pxCurrentTCB == NULL )
 8003a7c:	4e36      	ldr	r6, [pc, #216]	; (8003b58 <xTaskCreate+0x194>)
        uxCurrentNumberOfTasks++;
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	4f36      	ldr	r7, [pc, #216]	; (8003b5c <xTaskCreate+0x198>)
 8003a82:	3201      	adds	r2, #1
 8003a84:	601a      	str	r2, [r3, #0]
        if( pxCurrentTCB == NULL )
 8003a86:	6835      	ldr	r5, [r6, #0]
 8003a88:	2d00      	cmp	r5, #0
 8003a8a:	d157      	bne.n	8003b3c <xTaskCreate+0x178>
            pxCurrentTCB = pxNewTCB;
 8003a8c:	6034      	str	r4, [r6, #0]
            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	2b01      	cmp	r3, #1
 8003a92:	d11f      	bne.n	8003ad4 <xTaskCreate+0x110>
 8003a94:	46b8      	mov	r8, r7
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003a96:	4640      	mov	r0, r8
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a98:	3501      	adds	r5, #1
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003a9a:	f7ff fcd3 	bl	8003444 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003a9e:	2d05      	cmp	r5, #5
 8003aa0:	f108 0814 	add.w	r8, r8, #20
 8003aa4:	d1f7      	bne.n	8003a96 <xTaskCreate+0xd2>
    vListInitialise( &xDelayedTaskList1 );
 8003aa6:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 8003b60 <xTaskCreate+0x19c>
    vListInitialise( &xDelayedTaskList2 );
 8003aaa:	4d2e      	ldr	r5, [pc, #184]	; (8003b64 <xTaskCreate+0x1a0>)
    vListInitialise( &xDelayedTaskList1 );
 8003aac:	4640      	mov	r0, r8
 8003aae:	f7ff fcc9 	bl	8003444 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8003ab2:	4628      	mov	r0, r5
 8003ab4:	f7ff fcc6 	bl	8003444 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8003ab8:	482b      	ldr	r0, [pc, #172]	; (8003b68 <xTaskCreate+0x1a4>)
 8003aba:	f7ff fcc3 	bl	8003444 <vListInitialise>
            vListInitialise( &xTasksWaitingTermination );
 8003abe:	482b      	ldr	r0, [pc, #172]	; (8003b6c <xTaskCreate+0x1a8>)
 8003ac0:	f7ff fcc0 	bl	8003444 <vListInitialise>
            vListInitialise( &xSuspendedTaskList );
 8003ac4:	482a      	ldr	r0, [pc, #168]	; (8003b70 <xTaskCreate+0x1ac>)
 8003ac6:	f7ff fcbd 	bl	8003444 <vListInitialise>
    pxDelayedTaskList = &xDelayedTaskList1;
 8003aca:	4b2a      	ldr	r3, [pc, #168]	; (8003b74 <xTaskCreate+0x1b0>)
 8003acc:	f8c3 8000 	str.w	r8, [r3]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003ad0:	4b29      	ldr	r3, [pc, #164]	; (8003b78 <xTaskCreate+0x1b4>)
 8003ad2:	601d      	str	r5, [r3, #0]
        prvAddTaskToReadyList( pxNewTCB );
 8003ad4:	2501      	movs	r5, #1
        uxTaskNumber++;
 8003ad6:	4a29      	ldr	r2, [pc, #164]	; (8003b7c <xTaskCreate+0x1b8>)
        prvAddTaskToReadyList( pxNewTCB );
 8003ad8:	4929      	ldr	r1, [pc, #164]	; (8003b80 <xTaskCreate+0x1bc>)
        uxTaskNumber++;
 8003ada:	6813      	ldr	r3, [r2, #0]
        prvAddTaskToReadyList( pxNewTCB );
 8003adc:	6808      	ldr	r0, [r1, #0]
        uxTaskNumber++;
 8003ade:	3301      	adds	r3, #1
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003ae0:	6463      	str	r3, [r4, #68]	; 0x44
        uxTaskNumber++;
 8003ae2:	6013      	str	r3, [r2, #0]
        prvAddTaskToReadyList( pxNewTCB );
 8003ae4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003ae6:	fa05 f203 	lsl.w	r2, r5, r3
 8003aea:	4302      	orrs	r2, r0
 8003aec:	600a      	str	r2, [r1, #0]
 8003aee:	2214      	movs	r2, #20
 8003af0:	4353      	muls	r3, r2
 8003af2:	18f8      	adds	r0, r7, r3
 8003af4:	6842      	ldr	r2, [r0, #4]
 8003af6:	6891      	ldr	r1, [r2, #8]
 8003af8:	60a2      	str	r2, [r4, #8]
 8003afa:	60e1      	str	r1, [r4, #12]
 8003afc:	6891      	ldr	r1, [r2, #8]
 8003afe:	f8c1 a004 	str.w	sl, [r1, #4]
 8003b02:	f8c2 a008 	str.w	sl, [r2, #8]
 8003b06:	58fa      	ldr	r2, [r7, r3]
 8003b08:	6160      	str	r0, [r4, #20]
 8003b0a:	442a      	add	r2, r5
 8003b0c:	50fa      	str	r2, [r7, r3]
    taskEXIT_CRITICAL();
 8003b0e:	f000 fb99 	bl	8004244 <vPortExitCritical>
    if( xSchedulerRunning != pdFALSE )
 8003b12:	4b1c      	ldr	r3, [pc, #112]	; (8003b84 <xTaskCreate+0x1c0>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	b173      	cbz	r3, 8003b36 <xTaskCreate+0x172>
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003b18:	6833      	ldr	r3, [r6, #0]
 8003b1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b1c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8003b1e:	429a      	cmp	r2, r3
 8003b20:	d209      	bcs.n	8003b36 <xTaskCreate+0x172>
            taskYIELD_IF_USING_PREEMPTION();
 8003b22:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003b26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b2a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003b2e:	f3bf 8f4f 	dsb	sy
 8003b32:	f3bf 8f6f 	isb	sy
    }
 8003b36:	4628      	mov	r0, r5
 8003b38:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if( xSchedulerRunning == pdFALSE )
 8003b3c:	4b11      	ldr	r3, [pc, #68]	; (8003b84 <xTaskCreate+0x1c0>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d1c7      	bne.n	8003ad4 <xTaskCreate+0x110>
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003b44:	6833      	ldr	r3, [r6, #0]
 8003b46:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8003b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4a:	429a      	cmp	r2, r3
                    pxCurrentTCB = pxNewTCB;
 8003b4c:	bf28      	it	cs
 8003b4e:	6034      	strcs	r4, [r6, #0]
 8003b50:	e7c0      	b.n	8003ad4 <xTaskCreate+0x110>
 8003b52:	bf00      	nop
 8003b54:	200002ac 	.word	0x200002ac
 8003b58:	2000023c 	.word	0x2000023c
 8003b5c:	20000248 	.word	0x20000248
 8003b60:	200002c0 	.word	0x200002c0
 8003b64:	200002d4 	.word	0x200002d4
 8003b68:	200002f8 	.word	0x200002f8
 8003b6c:	20000324 	.word	0x20000324
 8003b70:	20000310 	.word	0x20000310
 8003b74:	20000240 	.word	0x20000240
 8003b78:	20000244 	.word	0x20000244
 8003b7c:	200002b8 	.word	0x200002b8
 8003b80:	200002bc 	.word	0x200002bc
 8003b84:	2000030c 	.word	0x2000030c

08003b88 <vTaskDelete>:
    {
 8003b88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b8a:	4604      	mov	r4, r0
 8003b8c:	4d27      	ldr	r5, [pc, #156]	; (8003c2c <vTaskDelete+0xa4>)
        taskENTER_CRITICAL();
 8003b8e:	f000 fb49 	bl	8004224 <vPortEnterCritical>
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8003b92:	b904      	cbnz	r4, 8003b96 <vTaskDelete+0xe>
 8003b94:	682c      	ldr	r4, [r5, #0]
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003b96:	1d26      	adds	r6, r4, #4
 8003b98:	4630      	mov	r0, r6
 8003b9a:	f7ff fc84 	bl	80034a6 <uxListRemove>
 8003b9e:	b960      	cbnz	r0, 8003bba <vTaskDelete+0x32>
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8003ba0:	2014      	movs	r0, #20
 8003ba2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8003ba4:	4b22      	ldr	r3, [pc, #136]	; (8003c30 <vTaskDelete+0xa8>)
 8003ba6:	4378      	muls	r0, r7
 8003ba8:	581b      	ldr	r3, [r3, r0]
 8003baa:	b933      	cbnz	r3, 8003bba <vTaskDelete+0x32>
 8003bac:	2201      	movs	r2, #1
 8003bae:	4921      	ldr	r1, [pc, #132]	; (8003c34 <vTaskDelete+0xac>)
 8003bb0:	40ba      	lsls	r2, r7
 8003bb2:	680b      	ldr	r3, [r1, #0]
 8003bb4:	ea23 0302 	bic.w	r3, r3, r2
 8003bb8:	600b      	str	r3, [r1, #0]
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003bba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8003bbc:	b11b      	cbz	r3, 8003bc6 <vTaskDelete+0x3e>
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003bbe:	f104 0018 	add.w	r0, r4, #24
 8003bc2:	f7ff fc70 	bl	80034a6 <uxListRemove>
            uxTaskNumber++;
 8003bc6:	4a1c      	ldr	r2, [pc, #112]	; (8003c38 <vTaskDelete+0xb0>)
 8003bc8:	6813      	ldr	r3, [r2, #0]
 8003bca:	3301      	adds	r3, #1
 8003bcc:	6013      	str	r3, [r2, #0]
            if( pxTCB == pxCurrentTCB )
 8003bce:	682b      	ldr	r3, [r5, #0]
 8003bd0:	42a3      	cmp	r3, r4
 8003bd2:	d123      	bne.n	8003c1c <vTaskDelete+0x94>
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8003bd4:	4631      	mov	r1, r6
 8003bd6:	4819      	ldr	r0, [pc, #100]	; (8003c3c <vTaskDelete+0xb4>)
 8003bd8:	f7ff fc42 	bl	8003460 <vListInsertEnd>
                ++uxDeletedTasksWaitingCleanUp;
 8003bdc:	4a18      	ldr	r2, [pc, #96]	; (8003c40 <vTaskDelete+0xb8>)
 8003bde:	6813      	ldr	r3, [r2, #0]
 8003be0:	3301      	adds	r3, #1
 8003be2:	6013      	str	r3, [r2, #0]
        taskEXIT_CRITICAL();
 8003be4:	f000 fb2e 	bl	8004244 <vPortExitCritical>
        if( pxTCB != pxCurrentTCB )
 8003be8:	682b      	ldr	r3, [r5, #0]
 8003bea:	42a3      	cmp	r3, r4
 8003bec:	d005      	beq.n	8003bfa <vTaskDelete+0x72>
                vPortFreeStack( pxTCB->pxStack );
 8003bee:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8003bf0:	f000 fc46 	bl	8004480 <vPortFree>
                vPortFree( pxTCB );
 8003bf4:	4620      	mov	r0, r4
 8003bf6:	f000 fc43 	bl	8004480 <vPortFree>
        if( xSchedulerRunning != pdFALSE )
 8003bfa:	4b12      	ldr	r3, [pc, #72]	; (8003c44 <vTaskDelete+0xbc>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	b163      	cbz	r3, 8003c1a <vTaskDelete+0x92>
            if( pxTCB == pxCurrentTCB )
 8003c00:	682b      	ldr	r3, [r5, #0]
 8003c02:	42a3      	cmp	r3, r4
 8003c04:	d109      	bne.n	8003c1a <vTaskDelete+0x92>
                portYIELD_WITHIN_API();
 8003c06:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003c0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c0e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003c12:	f3bf 8f4f 	dsb	sy
 8003c16:	f3bf 8f6f 	isb	sy
    }
 8003c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                --uxCurrentNumberOfTasks;
 8003c1c:	4a0a      	ldr	r2, [pc, #40]	; (8003c48 <vTaskDelete+0xc0>)
 8003c1e:	6813      	ldr	r3, [r2, #0]
 8003c20:	3b01      	subs	r3, #1
 8003c22:	6013      	str	r3, [r2, #0]
                prvResetNextTaskUnblockTime();
 8003c24:	f7ff fe88 	bl	8003938 <prvResetNextTaskUnblockTime>
 8003c28:	e7dc      	b.n	8003be4 <vTaskDelete+0x5c>
 8003c2a:	bf00      	nop
 8003c2c:	2000023c 	.word	0x2000023c
 8003c30:	20000248 	.word	0x20000248
 8003c34:	200002bc 	.word	0x200002bc
 8003c38:	200002b8 	.word	0x200002b8
 8003c3c:	20000324 	.word	0x20000324
 8003c40:	200002b0 	.word	0x200002b0
 8003c44:	2000030c 	.word	0x2000030c
 8003c48:	200002ac 	.word	0x200002ac

08003c4c <vTaskStartScheduler>:
{
 8003c4c:	b513      	push	{r0, r1, r4, lr}
            xReturn = xTaskCreate( prvIdleTask,
 8003c4e:	2400      	movs	r4, #0
 8003c50:	4b10      	ldr	r3, [pc, #64]	; (8003c94 <vTaskStartScheduler+0x48>)
 8003c52:	2246      	movs	r2, #70	; 0x46
 8003c54:	9301      	str	r3, [sp, #4]
 8003c56:	4910      	ldr	r1, [pc, #64]	; (8003c98 <vTaskStartScheduler+0x4c>)
 8003c58:	4623      	mov	r3, r4
 8003c5a:	4810      	ldr	r0, [pc, #64]	; (8003c9c <vTaskStartScheduler+0x50>)
 8003c5c:	9400      	str	r4, [sp, #0]
 8003c5e:	f7ff feb1 	bl	80039c4 <xTaskCreate>
    if( xReturn == pdPASS )
 8003c62:	2801      	cmp	r0, #1
 8003c64:	d111      	bne.n	8003c8a <vTaskStartScheduler+0x3e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 8003c66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c6a:	f383 8811 	msr	BASEPRI, r3
 8003c6e:	f3bf 8f6f 	isb	sy
 8003c72:	f3bf 8f4f 	dsb	sy
        xNextTaskUnblockTime = portMAX_DELAY;
 8003c76:	f04f 32ff 	mov.w	r2, #4294967295
 8003c7a:	4b09      	ldr	r3, [pc, #36]	; (8003ca0 <vTaskStartScheduler+0x54>)
 8003c7c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 8003c7e:	4b09      	ldr	r3, [pc, #36]	; (8003ca4 <vTaskStartScheduler+0x58>)
 8003c80:	6018      	str	r0, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003c82:	4b09      	ldr	r3, [pc, #36]	; (8003ca8 <vTaskStartScheduler+0x5c>)
 8003c84:	601c      	str	r4, [r3, #0]
        if( xPortStartScheduler() != pdFALSE )
 8003c86:	f000 fb35 	bl	80042f4 <xPortStartScheduler>
    ( void ) uxTopUsedPriority;
 8003c8a:	4b08      	ldr	r3, [pc, #32]	; (8003cac <vTaskStartScheduler+0x60>)
 8003c8c:	681b      	ldr	r3, [r3, #0]
}
 8003c8e:	b002      	add	sp, #8
 8003c90:	bd10      	pop	{r4, pc}
 8003c92:	bf00      	nop
 8003c94:	200002e8 	.word	0x200002e8
 8003c98:	08004f0d 	.word	0x08004f0d
 8003c9c:	0800395d 	.word	0x0800395d
 8003ca0:	200002ec 	.word	0x200002ec
 8003ca4:	2000030c 	.word	0x2000030c
 8003ca8:	20000338 	.word	0x20000338
 8003cac:	2000000c 	.word	0x2000000c

08003cb0 <vTaskSuspendAll>:
    ++uxSchedulerSuspended;
 8003cb0:	4a02      	ldr	r2, [pc, #8]	; (8003cbc <vTaskSuspendAll+0xc>)
 8003cb2:	6813      	ldr	r3, [r2, #0]
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	6013      	str	r3, [r2, #0]
}
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	200002b4 	.word	0x200002b4

08003cc0 <xTaskIncrementTick>:
{
 8003cc0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003cc4:	4b4b      	ldr	r3, [pc, #300]	; (8003df4 <xTaskIncrementTick+0x134>)
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	f040 808c 	bne.w	8003de6 <xTaskIncrementTick+0x126>
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003cce:	4b4a      	ldr	r3, [pc, #296]	; (8003df8 <xTaskIncrementTick+0x138>)
 8003cd0:	681c      	ldr	r4, [r3, #0]
 8003cd2:	3401      	adds	r4, #1
        xTickCount = xConstTickCount;
 8003cd4:	601c      	str	r4, [r3, #0]
        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003cd6:	b95c      	cbnz	r4, 8003cf0 <xTaskIncrementTick+0x30>
            taskSWITCH_DELAYED_LISTS();
 8003cd8:	4a48      	ldr	r2, [pc, #288]	; (8003dfc <xTaskIncrementTick+0x13c>)
 8003cda:	4b49      	ldr	r3, [pc, #292]	; (8003e00 <xTaskIncrementTick+0x140>)
 8003cdc:	6811      	ldr	r1, [r2, #0]
 8003cde:	6818      	ldr	r0, [r3, #0]
 8003ce0:	6010      	str	r0, [r2, #0]
 8003ce2:	4a48      	ldr	r2, [pc, #288]	; (8003e04 <xTaskIncrementTick+0x144>)
 8003ce4:	6019      	str	r1, [r3, #0]
 8003ce6:	6813      	ldr	r3, [r2, #0]
 8003ce8:	3301      	adds	r3, #1
 8003cea:	6013      	str	r3, [r2, #0]
 8003cec:	f7ff fe24 	bl	8003938 <prvResetNextTaskUnblockTime>
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003cf0:	f8df c114 	ldr.w	ip, [pc, #276]	; 8003e08 <xTaskIncrementTick+0x148>
    BaseType_t xSwitchRequired = pdFALSE;
 8003cf4:	2000      	movs	r0, #0
        if( xConstTickCount >= xNextTaskUnblockTime )
 8003cf6:	f8dc 3000 	ldr.w	r3, [ip]
 8003cfa:	4a44      	ldr	r2, [pc, #272]	; (8003e0c <xTaskIncrementTick+0x14c>)
 8003cfc:	429c      	cmp	r4, r3
 8003cfe:	f8df 9110 	ldr.w	r9, [pc, #272]	; 8003e10 <xTaskIncrementTick+0x150>
 8003d02:	d20f      	bcs.n	8003d24 <xTaskIncrementTick+0x64>
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003d04:	2114      	movs	r1, #20
 8003d06:	f8d9 3000 	ldr.w	r3, [r9]
 8003d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d0c:	434b      	muls	r3, r1
 8003d0e:	58d3      	ldr	r3, [r2, r3]
                    xSwitchRequired = pdTRUE;
 8003d10:	2b02      	cmp	r3, #2
                if( xYieldPending != pdFALSE )
 8003d12:	4b40      	ldr	r3, [pc, #256]	; (8003e14 <xTaskIncrementTick+0x154>)
                    xSwitchRequired = pdTRUE;
 8003d14:	bf28      	it	cs
 8003d16:	2001      	movcs	r0, #1
                if( xYieldPending != pdFALSE )
 8003d18:	681b      	ldr	r3, [r3, #0]
                    xSwitchRequired = pdTRUE;
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	bf18      	it	ne
 8003d1e:	2001      	movne	r0, #1
}
 8003d20:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003d24:	4683      	mov	fp, r0
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003d26:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8003dfc <xTaskIncrementTick+0x13c>
 8003d2a:	f8d8 3000 	ldr.w	r3, [r8]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	b923      	cbnz	r3, 8003d3c <xTaskIncrementTick+0x7c>
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003d32:	f04f 33ff 	mov.w	r3, #4294967295
 8003d36:	f8cc 3000 	str.w	r3, [ip]
                    break;
 8003d3a:	e7e3      	b.n	8003d04 <xTaskIncrementTick+0x44>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d3c:	f8d8 3000 	ldr.w	r3, [r8]
 8003d40:	68db      	ldr	r3, [r3, #12]
 8003d42:	68db      	ldr	r3, [r3, #12]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003d44:	6859      	ldr	r1, [r3, #4]
                    if( xConstTickCount < xItemValue )
 8003d46:	428c      	cmp	r4, r1
 8003d48:	d202      	bcs.n	8003d50 <xTaskIncrementTick+0x90>
                        xNextTaskUnblockTime = xItemValue;
 8003d4a:	f8cc 1000 	str.w	r1, [ip]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 8003d4e:	e7d9      	b.n	8003d04 <xTaskIncrementTick+0x44>
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003d50:	695d      	ldr	r5, [r3, #20]
 8003d52:	e9d3 1702 	ldrd	r1, r7, [r3, #8]
 8003d56:	608f      	str	r7, [r1, #8]
 8003d58:	6079      	str	r1, [r7, #4]
 8003d5a:	6869      	ldr	r1, [r5, #4]
 8003d5c:	1d1e      	adds	r6, r3, #4
 8003d5e:	42b1      	cmp	r1, r6
 8003d60:	6829      	ldr	r1, [r5, #0]
 8003d62:	bf08      	it	eq
 8003d64:	606f      	streq	r7, [r5, #4]
 8003d66:	3901      	subs	r1, #1
 8003d68:	f8c3 b014 	str.w	fp, [r3, #20]
 8003d6c:	6029      	str	r1, [r5, #0]
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003d6e:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8003d70:	b195      	cbz	r5, 8003d98 <xTaskIncrementTick+0xd8>
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003d72:	e9d3 1707 	ldrd	r1, r7, [r3, #28]
 8003d76:	608f      	str	r7, [r1, #8]
 8003d78:	f8d3 a020 	ldr.w	sl, [r3, #32]
 8003d7c:	f103 0718 	add.w	r7, r3, #24
 8003d80:	f8ca 1004 	str.w	r1, [sl, #4]
 8003d84:	6869      	ldr	r1, [r5, #4]
 8003d86:	42b9      	cmp	r1, r7
 8003d88:	6829      	ldr	r1, [r5, #0]
 8003d8a:	bf08      	it	eq
 8003d8c:	f8c5 a004 	streq.w	sl, [r5, #4]
 8003d90:	3901      	subs	r1, #1
 8003d92:	f8c3 b028 	str.w	fp, [r3, #40]	; 0x28
 8003d96:	6029      	str	r1, [r5, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003d98:	2101      	movs	r1, #1
 8003d9a:	f8df e07c 	ldr.w	lr, [pc, #124]	; 8003e18 <xTaskIncrementTick+0x158>
 8003d9e:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8003da0:	f8de 7000 	ldr.w	r7, [lr]
 8003da4:	40a9      	lsls	r1, r5
 8003da6:	4339      	orrs	r1, r7
 8003da8:	f8ce 1000 	str.w	r1, [lr]
 8003dac:	2114      	movs	r1, #20
 8003dae:	fb01 fa05 	mul.w	sl, r1, r5
 8003db2:	eb02 070a 	add.w	r7, r2, sl
 8003db6:	6879      	ldr	r1, [r7, #4]
 8003db8:	f8d1 e008 	ldr.w	lr, [r1, #8]
 8003dbc:	6099      	str	r1, [r3, #8]
 8003dbe:	f8c3 e00c 	str.w	lr, [r3, #12]
 8003dc2:	f8d1 e008 	ldr.w	lr, [r1, #8]
 8003dc6:	f8ce 6004 	str.w	r6, [lr, #4]
 8003dca:	608e      	str	r6, [r1, #8]
 8003dcc:	615f      	str	r7, [r3, #20]
 8003dce:	f852 300a 	ldr.w	r3, [r2, sl]
 8003dd2:	3301      	adds	r3, #1
 8003dd4:	f842 300a 	str.w	r3, [r2, sl]
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003dd8:	f8d9 3000 	ldr.w	r3, [r9]
 8003ddc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                                xSwitchRequired = pdTRUE;
 8003dde:	429d      	cmp	r5, r3
 8003de0:	bf28      	it	cs
 8003de2:	2001      	movcs	r0, #1
 8003de4:	e7a1      	b.n	8003d2a <xTaskIncrementTick+0x6a>
        ++xPendedTicks;
 8003de6:	4a0d      	ldr	r2, [pc, #52]	; (8003e1c <xTaskIncrementTick+0x15c>)
    BaseType_t xSwitchRequired = pdFALSE;
 8003de8:	2000      	movs	r0, #0
        ++xPendedTicks;
 8003dea:	6813      	ldr	r3, [r2, #0]
 8003dec:	3301      	adds	r3, #1
 8003dee:	6013      	str	r3, [r2, #0]
    return xSwitchRequired;
 8003df0:	e796      	b.n	8003d20 <xTaskIncrementTick+0x60>
 8003df2:	bf00      	nop
 8003df4:	200002b4 	.word	0x200002b4
 8003df8:	20000338 	.word	0x20000338
 8003dfc:	20000240 	.word	0x20000240
 8003e00:	20000244 	.word	0x20000244
 8003e04:	200002f0 	.word	0x200002f0
 8003e08:	200002ec 	.word	0x200002ec
 8003e0c:	20000248 	.word	0x20000248
 8003e10:	2000023c 	.word	0x2000023c
 8003e14:	2000033c 	.word	0x2000033c
 8003e18:	200002bc 	.word	0x200002bc
 8003e1c:	200002f4 	.word	0x200002f4

08003e20 <xTaskResumeAll>:
{
 8003e20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    taskENTER_CRITICAL();
 8003e24:	f000 f9fe 	bl	8004224 <vPortEnterCritical>
        --uxSchedulerSuspended;
 8003e28:	4b3f      	ldr	r3, [pc, #252]	; (8003f28 <xTaskResumeAll+0x108>)
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	3a01      	subs	r2, #1
 8003e2e:	601a      	str	r2, [r3, #0]
        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	b12b      	cbz	r3, 8003e40 <xTaskResumeAll+0x20>
    BaseType_t xAlreadyYielded = pdFALSE;
 8003e34:	2400      	movs	r4, #0
    taskEXIT_CRITICAL();
 8003e36:	f000 fa05 	bl	8004244 <vPortExitCritical>
}
 8003e3a:	4620      	mov	r0, r4
 8003e3c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003e40:	4a3a      	ldr	r2, [pc, #232]	; (8003f2c <xTaskResumeAll+0x10c>)
 8003e42:	6812      	ldr	r2, [r2, #0]
 8003e44:	2a00      	cmp	r2, #0
 8003e46:	d0f5      	beq.n	8003e34 <xTaskResumeAll+0x14>
                    prvAddTaskToReadyList( pxTCB );
 8003e48:	f04f 0c01 	mov.w	ip, #1
 8003e4c:	f04f 0e14 	mov.w	lr, #20
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003e50:	4d37      	ldr	r5, [pc, #220]	; (8003f30 <xTaskResumeAll+0x110>)
                    prvAddTaskToReadyList( pxTCB );
 8003e52:	4e38      	ldr	r6, [pc, #224]	; (8003f34 <xTaskResumeAll+0x114>)
 8003e54:	4938      	ldr	r1, [pc, #224]	; (8003f38 <xTaskResumeAll+0x118>)
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003e56:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8003f3c <xTaskResumeAll+0x11c>
                        xYieldPending = pdTRUE;
 8003e5a:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 8003f40 <xTaskResumeAll+0x120>
 8003e5e:	e040      	b.n	8003ee2 <xTaskResumeAll+0xc2>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003e60:	68eb      	ldr	r3, [r5, #12]
 8003e62:	68db      	ldr	r3, [r3, #12]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8003e64:	6a98      	ldr	r0, [r3, #40]	; 0x28
 8003e66:	e9d3 2407 	ldrd	r2, r4, [r3, #28]
 8003e6a:	6094      	str	r4, [r2, #8]
 8003e6c:	6062      	str	r2, [r4, #4]
 8003e6e:	6842      	ldr	r2, [r0, #4]
 8003e70:	f103 0718 	add.w	r7, r3, #24
 8003e74:	42ba      	cmp	r2, r7
 8003e76:	f04f 0200 	mov.w	r2, #0
 8003e7a:	bf08      	it	eq
 8003e7c:	6044      	streq	r4, [r0, #4]
 8003e7e:	629a      	str	r2, [r3, #40]	; 0x28
 8003e80:	6802      	ldr	r2, [r0, #0]
 8003e82:	3a01      	subs	r2, #1
 8003e84:	6002      	str	r2, [r0, #0]
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8003e86:	6958      	ldr	r0, [r3, #20]
 8003e88:	e9d3 2402 	ldrd	r2, r4, [r3, #8]
 8003e8c:	6094      	str	r4, [r2, #8]
 8003e8e:	6062      	str	r2, [r4, #4]
 8003e90:	6842      	ldr	r2, [r0, #4]
 8003e92:	f103 0a04 	add.w	sl, r3, #4
 8003e96:	4552      	cmp	r2, sl
 8003e98:	6802      	ldr	r2, [r0, #0]
 8003e9a:	bf08      	it	eq
 8003e9c:	6044      	streq	r4, [r0, #4]
 8003e9e:	3a01      	subs	r2, #1
 8003ea0:	6002      	str	r2, [r0, #0]
                    prvAddTaskToReadyList( pxTCB );
 8003ea2:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8003ea4:	6834      	ldr	r4, [r6, #0]
 8003ea6:	fa0c f200 	lsl.w	r2, ip, r0
 8003eaa:	4322      	orrs	r2, r4
 8003eac:	fb0e f400 	mul.w	r4, lr, r0
 8003eb0:	190f      	adds	r7, r1, r4
 8003eb2:	6032      	str	r2, [r6, #0]
 8003eb4:	687a      	ldr	r2, [r7, #4]
 8003eb6:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8003eba:	609a      	str	r2, [r3, #8]
 8003ebc:	f8c3 b00c 	str.w	fp, [r3, #12]
 8003ec0:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8003ec4:	f8cb a004 	str.w	sl, [fp, #4]
 8003ec8:	f8c2 a008 	str.w	sl, [r2, #8]
 8003ecc:	590a      	ldr	r2, [r1, r4]
 8003ece:	615f      	str	r7, [r3, #20]
 8003ed0:	3201      	adds	r2, #1
 8003ed2:	510a      	str	r2, [r1, r4]
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003ed4:	f8d8 2000 	ldr.w	r2, [r8]
 8003ed8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003eda:	4290      	cmp	r0, r2
 8003edc:	d301      	bcc.n	8003ee2 <xTaskResumeAll+0xc2>
                        xYieldPending = pdTRUE;
 8003ede:	f8c9 c000 	str.w	ip, [r9]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003ee2:	682a      	ldr	r2, [r5, #0]
 8003ee4:	2a00      	cmp	r2, #0
 8003ee6:	d1bb      	bne.n	8003e60 <xTaskResumeAll+0x40>
                if( pxTCB != NULL )
 8003ee8:	b10b      	cbz	r3, 8003eee <xTaskResumeAll+0xce>
                    prvResetNextTaskUnblockTime();
 8003eea:	f7ff fd25 	bl	8003938 <prvResetNextTaskUnblockTime>
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003eee:	4d15      	ldr	r5, [pc, #84]	; (8003f44 <xTaskResumeAll+0x124>)
 8003ef0:	682c      	ldr	r4, [r5, #0]
                    if( xPendedCounts > ( TickType_t ) 0U )
 8003ef2:	b144      	cbz	r4, 8003f06 <xTaskResumeAll+0xe6>
                                xYieldPending = pdTRUE;
 8003ef4:	2701      	movs	r7, #1
 8003ef6:	4e12      	ldr	r6, [pc, #72]	; (8003f40 <xTaskResumeAll+0x120>)
                            if( xTaskIncrementTick() != pdFALSE )
 8003ef8:	f7ff fee2 	bl	8003cc0 <xTaskIncrementTick>
 8003efc:	b100      	cbz	r0, 8003f00 <xTaskResumeAll+0xe0>
                                xYieldPending = pdTRUE;
 8003efe:	6037      	str	r7, [r6, #0]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8003f00:	3c01      	subs	r4, #1
 8003f02:	d1f9      	bne.n	8003ef8 <xTaskResumeAll+0xd8>
                        xPendedTicks = 0;
 8003f04:	602c      	str	r4, [r5, #0]
                if( xYieldPending != pdFALSE )
 8003f06:	4b0e      	ldr	r3, [pc, #56]	; (8003f40 <xTaskResumeAll+0x120>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d092      	beq.n	8003e34 <xTaskResumeAll+0x14>
                    taskYIELD_IF_USING_PREEMPTION();
 8003f0e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003f12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f16:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003f1a:	f3bf 8f4f 	dsb	sy
 8003f1e:	f3bf 8f6f 	isb	sy
                            xAlreadyYielded = pdTRUE;
 8003f22:	2401      	movs	r4, #1
 8003f24:	e787      	b.n	8003e36 <xTaskResumeAll+0x16>
 8003f26:	bf00      	nop
 8003f28:	200002b4 	.word	0x200002b4
 8003f2c:	200002ac 	.word	0x200002ac
 8003f30:	200002f8 	.word	0x200002f8
 8003f34:	200002bc 	.word	0x200002bc
 8003f38:	20000248 	.word	0x20000248
 8003f3c:	2000023c 	.word	0x2000023c
 8003f40:	2000033c 	.word	0x2000033c
 8003f44:	200002f4 	.word	0x200002f4

08003f48 <vTaskDelay>:
    {
 8003f48:	b508      	push	{r3, lr}
        if( xTicksToDelay > ( TickType_t ) 0U )
 8003f4a:	b950      	cbnz	r0, 8003f62 <vTaskDelay+0x1a>
            portYIELD_WITHIN_API();
 8003f4c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003f50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f54:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003f58:	f3bf 8f4f 	dsb	sy
 8003f5c:	f3bf 8f6f 	isb	sy
    }
 8003f60:	bd08      	pop	{r3, pc}
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003f62:	2100      	movs	r1, #0
            vTaskSuspendAll();
 8003f64:	f7ff fea4 	bl	8003cb0 <vTaskSuspendAll>
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003f68:	f7ff fc94 	bl	8003894 <prvAddCurrentTaskToDelayedList>
            xAlreadyYielded = xTaskResumeAll();
 8003f6c:	f7ff ff58 	bl	8003e20 <xTaskResumeAll>
        if( xAlreadyYielded == pdFALSE )
 8003f70:	2800      	cmp	r0, #0
 8003f72:	d0eb      	beq.n	8003f4c <vTaskDelay+0x4>
 8003f74:	e7f4      	b.n	8003f60 <vTaskDelay+0x18>
	...

08003f78 <vTaskSwitchContext>:
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003f78:	4b12      	ldr	r3, [pc, #72]	; (8003fc4 <vTaskSwitchContext+0x4c>)
{
 8003f7a:	b530      	push	{r4, r5, lr}
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	4b12      	ldr	r3, [pc, #72]	; (8003fc8 <vTaskSwitchContext+0x50>)
 8003f80:	b112      	cbz	r2, 8003f88 <vTaskSwitchContext+0x10>
        xYieldPending = pdTRUE;
 8003f82:	2201      	movs	r2, #1
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f84:	601a      	str	r2, [r3, #0]
}
 8003f86:	bd30      	pop	{r4, r5, pc}
        xYieldPending = pdFALSE;
 8003f88:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f8a:	4b10      	ldr	r3, [pc, #64]	; (8003fcc <vTaskSwitchContext+0x54>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8003f8e:	fab3 f383 	clz	r3, r3
 8003f92:	2514      	movs	r5, #20
 8003f94:	b2db      	uxtb	r3, r3
 8003f96:	f1c3 031f 	rsb	r3, r3, #31
 8003f9a:	fb05 f203 	mul.w	r2, r5, r3
 8003f9e:	490c      	ldr	r1, [pc, #48]	; (8003fd0 <vTaskSwitchContext+0x58>)
 8003fa0:	1888      	adds	r0, r1, r2
 8003fa2:	6844      	ldr	r4, [r0, #4]
 8003fa4:	3208      	adds	r2, #8
 8003fa6:	6864      	ldr	r4, [r4, #4]
 8003fa8:	440a      	add	r2, r1
 8003faa:	4294      	cmp	r4, r2
 8003fac:	fb05 1303 	mla	r3, r5, r3, r1
 8003fb0:	bf08      	it	eq
 8003fb2:	6862      	ldreq	r2, [r4, #4]
 8003fb4:	6044      	str	r4, [r0, #4]
 8003fb6:	bf08      	it	eq
 8003fb8:	6042      	streq	r2, [r0, #4]
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	68da      	ldr	r2, [r3, #12]
 8003fbe:	4b05      	ldr	r3, [pc, #20]	; (8003fd4 <vTaskSwitchContext+0x5c>)
 8003fc0:	e7e0      	b.n	8003f84 <vTaskSwitchContext+0xc>
 8003fc2:	bf00      	nop
 8003fc4:	200002b4 	.word	0x200002b4
 8003fc8:	2000033c 	.word	0x2000033c
 8003fcc:	200002bc 	.word	0x200002bc
 8003fd0:	20000248 	.word	0x20000248
 8003fd4:	2000023c 	.word	0x2000023c

08003fd8 <vTaskPlaceOnEventList>:
{
 8003fd8:	b510      	push	{r4, lr}
 8003fda:	460c      	mov	r4, r1
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003fdc:	4b05      	ldr	r3, [pc, #20]	; (8003ff4 <vTaskPlaceOnEventList+0x1c>)
 8003fde:	6819      	ldr	r1, [r3, #0]
 8003fe0:	3118      	adds	r1, #24
 8003fe2:	f7ff fa49 	bl	8003478 <vListInsert>
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003fe6:	4620      	mov	r0, r4
}
 8003fe8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003fec:	2101      	movs	r1, #1
 8003fee:	f7ff bc51 	b.w	8003894 <prvAddCurrentTaskToDelayedList>
 8003ff2:	bf00      	nop
 8003ff4:	2000023c 	.word	0x2000023c

08003ff8 <xTaskRemoveFromEventList>:
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ff8:	68c3      	ldr	r3, [r0, #12]
{
 8003ffa:	b5f0      	push	{r4, r5, r6, r7, lr}
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ffc:	68db      	ldr	r3, [r3, #12]
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8003ffe:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004000:	e9d3 0107 	ldrd	r0, r1, [r3, #28]
 8004004:	6081      	str	r1, [r0, #8]
 8004006:	6048      	str	r0, [r1, #4]
 8004008:	6850      	ldr	r0, [r2, #4]
 800400a:	f103 0418 	add.w	r4, r3, #24
 800400e:	42a0      	cmp	r0, r4
 8004010:	bf08      	it	eq
 8004012:	6051      	streq	r1, [r2, #4]
 8004014:	2100      	movs	r1, #0
 8004016:	6299      	str	r1, [r3, #40]	; 0x28
 8004018:	6811      	ldr	r1, [r2, #0]
 800401a:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 800401c:	3901      	subs	r1, #1
 800401e:	6011      	str	r1, [r2, #0]
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004020:	4a1e      	ldr	r2, [pc, #120]	; (800409c <xTaskRemoveFromEventList+0xa4>)
 8004022:	6812      	ldr	r2, [r2, #0]
 8004024:	2a00      	cmp	r2, #0
 8004026:	d12c      	bne.n	8004082 <xTaskRemoveFromEventList+0x8a>
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8004028:	e9d3 4102 	ldrd	r4, r1, [r3, #8]
 800402c:	695a      	ldr	r2, [r3, #20]
 800402e:	60a1      	str	r1, [r4, #8]
 8004030:	68d9      	ldr	r1, [r3, #12]
 8004032:	1d1d      	adds	r5, r3, #4
 8004034:	604c      	str	r4, [r1, #4]
 8004036:	6854      	ldr	r4, [r2, #4]
 8004038:	42ac      	cmp	r4, r5
 800403a:	bf08      	it	eq
 800403c:	6051      	streq	r1, [r2, #4]
 800403e:	6811      	ldr	r1, [r2, #0]
 8004040:	3901      	subs	r1, #1
 8004042:	6011      	str	r1, [r2, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004044:	2201      	movs	r2, #1
 8004046:	4916      	ldr	r1, [pc, #88]	; (80040a0 <xTaskRemoveFromEventList+0xa8>)
 8004048:	4082      	lsls	r2, r0
 800404a:	680c      	ldr	r4, [r1, #0]
 800404c:	4322      	orrs	r2, r4
 800404e:	600a      	str	r2, [r1, #0]
 8004050:	2214      	movs	r2, #20
 8004052:	4342      	muls	r2, r0
 8004054:	4c13      	ldr	r4, [pc, #76]	; (80040a4 <xTaskRemoveFromEventList+0xac>)
 8004056:	18a6      	adds	r6, r4, r2
 8004058:	6871      	ldr	r1, [r6, #4]
 800405a:	688f      	ldr	r7, [r1, #8]
 800405c:	6099      	str	r1, [r3, #8]
 800405e:	60df      	str	r7, [r3, #12]
 8004060:	688f      	ldr	r7, [r1, #8]
 8004062:	607d      	str	r5, [r7, #4]
 8004064:	608d      	str	r5, [r1, #8]
 8004066:	615e      	str	r6, [r3, #20]
 8004068:	58a3      	ldr	r3, [r4, r2]
 800406a:	3301      	adds	r3, #1
 800406c:	50a3      	str	r3, [r4, r2]
    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800406e:	4b0e      	ldr	r3, [pc, #56]	; (80040a8 <xTaskRemoveFromEventList+0xb0>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004074:	4298      	cmp	r0, r3
        xYieldPending = pdTRUE;
 8004076:	bf85      	ittet	hi
 8004078:	2001      	movhi	r0, #1
 800407a:	4b0c      	ldrhi	r3, [pc, #48]	; (80040ac <xTaskRemoveFromEventList+0xb4>)
        xReturn = pdFALSE;
 800407c:	2000      	movls	r0, #0
        xYieldPending = pdTRUE;
 800407e:	6018      	strhi	r0, [r3, #0]
}
 8004080:	bdf0      	pop	{r4, r5, r6, r7, pc}
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004082:	4a0b      	ldr	r2, [pc, #44]	; (80040b0 <xTaskRemoveFromEventList+0xb8>)
 8004084:	6851      	ldr	r1, [r2, #4]
 8004086:	688d      	ldr	r5, [r1, #8]
 8004088:	61d9      	str	r1, [r3, #28]
 800408a:	621d      	str	r5, [r3, #32]
 800408c:	688d      	ldr	r5, [r1, #8]
 800408e:	606c      	str	r4, [r5, #4]
 8004090:	608c      	str	r4, [r1, #8]
 8004092:	629a      	str	r2, [r3, #40]	; 0x28
 8004094:	6813      	ldr	r3, [r2, #0]
 8004096:	3301      	adds	r3, #1
 8004098:	6013      	str	r3, [r2, #0]
 800409a:	e7e8      	b.n	800406e <xTaskRemoveFromEventList+0x76>
 800409c:	200002b4 	.word	0x200002b4
 80040a0:	200002bc 	.word	0x200002bc
 80040a4:	20000248 	.word	0x20000248
 80040a8:	2000023c 	.word	0x2000023c
 80040ac:	2000033c 	.word	0x2000033c
 80040b0:	200002f8 	.word	0x200002f8

080040b4 <vTaskInternalSetTimeOutState>:
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 80040b4:	4b03      	ldr	r3, [pc, #12]	; (80040c4 <vTaskInternalSetTimeOutState+0x10>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	6003      	str	r3, [r0, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 80040ba:	4b03      	ldr	r3, [pc, #12]	; (80040c8 <vTaskInternalSetTimeOutState+0x14>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	6043      	str	r3, [r0, #4]
}
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	200002f0 	.word	0x200002f0
 80040c8:	20000338 	.word	0x20000338

080040cc <xTaskCheckForTimeOut>:
{
 80040cc:	b570      	push	{r4, r5, r6, lr}
 80040ce:	460d      	mov	r5, r1
 80040d0:	4604      	mov	r4, r0
    taskENTER_CRITICAL();
 80040d2:	f000 f8a7 	bl	8004224 <vPortEnterCritical>
        const TickType_t xConstTickCount = xTickCount;
 80040d6:	4b0f      	ldr	r3, [pc, #60]	; (8004114 <xTaskCheckForTimeOut+0x48>)
 80040d8:	6819      	ldr	r1, [r3, #0]
            if( *pxTicksToWait == portMAX_DELAY )
 80040da:	682b      	ldr	r3, [r5, #0]
 80040dc:	1c5a      	adds	r2, r3, #1
 80040de:	d017      	beq.n	8004110 <xTaskCheckForTimeOut+0x44>
        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80040e0:	480d      	ldr	r0, [pc, #52]	; (8004118 <xTaskCheckForTimeOut+0x4c>)
 80040e2:	6826      	ldr	r6, [r4, #0]
 80040e4:	6800      	ldr	r0, [r0, #0]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80040e6:	6862      	ldr	r2, [r4, #4]
        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80040e8:	4286      	cmp	r6, r0
 80040ea:	d008      	beq.n	80040fe <xTaskCheckForTimeOut+0x32>
 80040ec:	428a      	cmp	r2, r1
 80040ee:	d806      	bhi.n	80040fe <xTaskCheckForTimeOut+0x32>
            *pxTicksToWait = ( TickType_t ) 0;
 80040f0:	2300      	movs	r3, #0
            xReturn = pdTRUE;
 80040f2:	2401      	movs	r4, #1
            *pxTicksToWait = ( TickType_t ) 0;
 80040f4:	602b      	str	r3, [r5, #0]
    taskEXIT_CRITICAL();
 80040f6:	f000 f8a5 	bl	8004244 <vPortExitCritical>
}
 80040fa:	4620      	mov	r0, r4
 80040fc:	bd70      	pop	{r4, r5, r6, pc}
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80040fe:	1a88      	subs	r0, r1, r2
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004100:	4283      	cmp	r3, r0
 8004102:	d9f5      	bls.n	80040f0 <xTaskCheckForTimeOut+0x24>
            *pxTicksToWait -= xElapsedTime;
 8004104:	1a5b      	subs	r3, r3, r1
 8004106:	4413      	add	r3, r2
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004108:	4620      	mov	r0, r4
            *pxTicksToWait -= xElapsedTime;
 800410a:	602b      	str	r3, [r5, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 800410c:	f7ff ffd2 	bl	80040b4 <vTaskInternalSetTimeOutState>
                xReturn = pdFALSE;
 8004110:	2400      	movs	r4, #0
 8004112:	e7f0      	b.n	80040f6 <xTaskCheckForTimeOut+0x2a>
 8004114:	20000338 	.word	0x20000338
 8004118:	200002f0 	.word	0x200002f0

0800411c <vTaskMissedYield>:
    xYieldPending = pdTRUE;
 800411c:	2201      	movs	r2, #1
 800411e:	4b01      	ldr	r3, [pc, #4]	; (8004124 <vTaskMissedYield+0x8>)
 8004120:	601a      	str	r2, [r3, #0]
}
 8004122:	4770      	bx	lr
 8004124:	2000033c 	.word	0x2000033c

08004128 <xTaskPriorityDisinherit>:
    {
 8004128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if( pxMutexHolder != NULL )
 800412a:	4604      	mov	r4, r0
 800412c:	b908      	cbnz	r0, 8004132 <xTaskPriorityDisinherit+0xa>
        BaseType_t xReturn = pdFALSE;
 800412e:	2000      	movs	r0, #0
    }
 8004130:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            ( pxTCB->uxMutexesHeld )--;
 8004132:	6d03      	ldr	r3, [r0, #80]	; 0x50
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004134:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004136:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
            ( pxTCB->uxMutexesHeld )--;
 8004138:	3b01      	subs	r3, #1
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800413a:	4291      	cmp	r1, r2
            ( pxTCB->uxMutexesHeld )--;
 800413c:	6503      	str	r3, [r0, #80]	; 0x50
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800413e:	d0f6      	beq.n	800412e <xTaskPriorityDisinherit+0x6>
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004140:	2b00      	cmp	r3, #0
 8004142:	d1f4      	bne.n	800412e <xTaskPriorityDisinherit+0x6>
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004144:	1d05      	adds	r5, r0, #4
 8004146:	4628      	mov	r0, r5
 8004148:	f7ff f9ad 	bl	80034a6 <uxListRemove>
 800414c:	4a11      	ldr	r2, [pc, #68]	; (8004194 <xTaskPriorityDisinherit+0x6c>)
 800414e:	b930      	cbnz	r0, 800415e <xTaskPriorityDisinherit+0x36>
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004150:	2101      	movs	r1, #1
 8004152:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004154:	6813      	ldr	r3, [r2, #0]
 8004156:	4081      	lsls	r1, r0
 8004158:	ea23 0301 	bic.w	r3, r3, r1
 800415c:	6013      	str	r3, [r2, #0]
                    prvAddTaskToReadyList( pxTCB );
 800415e:	2001      	movs	r0, #1
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004160:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
                    prvAddTaskToReadyList( pxTCB );
 8004162:	6816      	ldr	r6, [r2, #0]
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004164:	f1c3 0105 	rsb	r1, r3, #5
 8004168:	61a1      	str	r1, [r4, #24]
                    prvAddTaskToReadyList( pxTCB );
 800416a:	fa00 f103 	lsl.w	r1, r0, r3
 800416e:	4331      	orrs	r1, r6
 8004170:	6011      	str	r1, [r2, #0]
 8004172:	2214      	movs	r2, #20
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004174:	62e3      	str	r3, [r4, #44]	; 0x2c
                    prvAddTaskToReadyList( pxTCB );
 8004176:	4353      	muls	r3, r2
 8004178:	4907      	ldr	r1, [pc, #28]	; (8004198 <xTaskPriorityDisinherit+0x70>)
 800417a:	18ce      	adds	r6, r1, r3
 800417c:	6872      	ldr	r2, [r6, #4]
 800417e:	6897      	ldr	r7, [r2, #8]
 8004180:	60a2      	str	r2, [r4, #8]
 8004182:	60e7      	str	r7, [r4, #12]
 8004184:	6897      	ldr	r7, [r2, #8]
 8004186:	607d      	str	r5, [r7, #4]
 8004188:	6095      	str	r5, [r2, #8]
 800418a:	58ca      	ldr	r2, [r1, r3]
 800418c:	6166      	str	r6, [r4, #20]
 800418e:	4402      	add	r2, r0
 8004190:	50ca      	str	r2, [r1, r3]
        return xReturn;
 8004192:	e7cd      	b.n	8004130 <xTaskPriorityDisinherit+0x8>
 8004194:	200002bc 	.word	0x200002bc
 8004198:	20000248 	.word	0x20000248

0800419c <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
    volatile uint32_t ulDummy = 0UL;
 800419c:	2300      	movs	r3, #0
{
 800419e:	b082      	sub	sp, #8
    volatile uint32_t ulDummy = 0UL;
 80041a0:	9301      	str	r3, [sp, #4]
        __asm volatile
 80041a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a6:	f383 8811 	msr	BASEPRI, r3
 80041aa:	f3bf 8f6f 	isb	sy
 80041ae:	f3bf 8f4f 	dsb	sy
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 80041b2:	9b01      	ldr	r3, [sp, #4]
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d0fc      	beq.n	80041b2 <prvTaskExitError+0x16>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 80041b8:	b002      	add	sp, #8
 80041ba:	4770      	bx	lr

080041bc <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 80041bc:	4806      	ldr	r0, [pc, #24]	; (80041d8 <prvPortStartFirstTask+0x1c>)
 80041be:	6800      	ldr	r0, [r0, #0]
 80041c0:	6800      	ldr	r0, [r0, #0]
 80041c2:	f380 8808 	msr	MSP, r0
 80041c6:	b662      	cpsie	i
 80041c8:	b661      	cpsie	f
 80041ca:	f3bf 8f4f 	dsb	sy
 80041ce:	f3bf 8f6f 	isb	sy
 80041d2:	df00      	svc	0
 80041d4:	bf00      	nop
 80041d6:	0000      	.short	0x0000
 80041d8:	e000ed08 	.word	0xe000ed08

080041dc <pxPortInitialiseStack>:
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 80041dc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80041e0:	f840 3c04 	str.w	r3, [r0, #-4]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80041e4:	4b05      	ldr	r3, [pc, #20]	; (80041fc <pxPortInitialiseStack+0x20>)
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 80041e6:	f021 0101 	bic.w	r1, r1, #1
 80041ea:	f840 1c08 	str.w	r1, [r0, #-8]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 80041ee:	f840 3c0c 	str.w	r3, [r0, #-12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 80041f2:	f840 2c20 	str.w	r2, [r0, #-32]
}
 80041f6:	3840      	subs	r0, #64	; 0x40
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	0800419d 	.word	0x0800419d

08004200 <SVC_Handler>:
    __asm volatile (
 8004200:	4b07      	ldr	r3, [pc, #28]	; (8004220 <pxCurrentTCBConst2>)
 8004202:	6819      	ldr	r1, [r3, #0]
 8004204:	6808      	ldr	r0, [r1, #0]
 8004206:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800420a:	f380 8809 	msr	PSP, r0
 800420e:	f3bf 8f6f 	isb	sy
 8004212:	f04f 0000 	mov.w	r0, #0
 8004216:	f380 8811 	msr	BASEPRI, r0
 800421a:	f04e 0e0d 	orr.w	lr, lr, #13
 800421e:	4770      	bx	lr

08004220 <pxCurrentTCBConst2>:
 8004220:	2000023c 	.word	0x2000023c

08004224 <vPortEnterCritical>:
 8004224:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004228:	f383 8811 	msr	BASEPRI, r3
 800422c:	f3bf 8f6f 	isb	sy
 8004230:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004234:	4a02      	ldr	r2, [pc, #8]	; (8004240 <vPortEnterCritical+0x1c>)
 8004236:	6813      	ldr	r3, [r2, #0]
 8004238:	3301      	adds	r3, #1
 800423a:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 800423c:	4770      	bx	lr
 800423e:	bf00      	nop
 8004240:	20000010 	.word	0x20000010

08004244 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 8004244:	4a03      	ldr	r2, [pc, #12]	; (8004254 <vPortExitCritical+0x10>)
 8004246:	6813      	ldr	r3, [r2, #0]
 8004248:	3b01      	subs	r3, #1
 800424a:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 800424c:	b90b      	cbnz	r3, 8004252 <vPortExitCritical+0xe>
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 800424e:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 8004252:	4770      	bx	lr
 8004254:	20000010 	.word	0x20000010
	...

08004260 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004260:	f3ef 8009 	mrs	r0, PSP
 8004264:	f3bf 8f6f 	isb	sy
 8004268:	4b0d      	ldr	r3, [pc, #52]	; (80042a0 <pxCurrentTCBConst>)
 800426a:	681a      	ldr	r2, [r3, #0]
 800426c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004270:	6010      	str	r0, [r2, #0]
 8004272:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004276:	f04f 0050 	mov.w	r0, #80	; 0x50
 800427a:	f380 8811 	msr	BASEPRI, r0
 800427e:	f7ff fe7b 	bl	8003f78 <vTaskSwitchContext>
 8004282:	f04f 0000 	mov.w	r0, #0
 8004286:	f380 8811 	msr	BASEPRI, r0
 800428a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800428e:	6819      	ldr	r1, [r3, #0]
 8004290:	6808      	ldr	r0, [r1, #0]
 8004292:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004296:	f380 8809 	msr	PSP, r0
 800429a:	f3bf 8f6f 	isb	sy
 800429e:	4770      	bx	lr

080042a0 <pxCurrentTCBConst>:
 80042a0:	2000023c 	.word	0x2000023c

080042a4 <SysTick_Handler>:
    );
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80042a4:	b508      	push	{r3, lr}
        __asm volatile
 80042a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042aa:	f383 8811 	msr	BASEPRI, r3
 80042ae:	f3bf 8f6f 	isb	sy
 80042b2:	f3bf 8f4f 	dsb	sy
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 80042b6:	f7ff fd03 	bl	8003cc0 <xTaskIncrementTick>
 80042ba:	b128      	cbz	r0, 80042c8 <SysTick_Handler+0x24>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80042bc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80042c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042c4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
        __asm volatile
 80042c8:	2300      	movs	r3, #0
 80042ca:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 80042ce:	bd08      	pop	{r3, pc}

080042d0 <vPortSetupTimerInterrupt>:
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80042d0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 80042d4:	2300      	movs	r3, #0
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80042d6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 80042da:	6113      	str	r3, [r2, #16]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80042dc:	6193      	str	r3, [r2, #24]
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80042de:	4b04      	ldr	r3, [pc, #16]	; (80042f0 <vPortSetupTimerInterrupt+0x20>)
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80042e6:	3b01      	subs	r3, #1
 80042e8:	6153      	str	r3, [r2, #20]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80042ea:	2307      	movs	r3, #7
 80042ec:	6113      	str	r3, [r2, #16]
}
 80042ee:	4770      	bx	lr
 80042f0:	20000000 	.word	0x20000000

080042f4 <xPortStartScheduler>:
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80042f4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
{
 80042f8:	b510      	push	{r4, lr}
    uxCriticalNesting = 0;
 80042fa:	2400      	movs	r4, #0
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 80042fc:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8004300:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8004304:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004308:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 800430c:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8004310:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
    vPortSetupTimerInterrupt();
 8004314:	f7ff ffdc 	bl	80042d0 <vPortSetupTimerInterrupt>
    uxCriticalNesting = 0;
 8004318:	4b04      	ldr	r3, [pc, #16]	; (800432c <xPortStartScheduler+0x38>)
 800431a:	601c      	str	r4, [r3, #0]
    prvPortStartFirstTask();
 800431c:	f7ff ff4e 	bl	80041bc <prvPortStartFirstTask>
    vTaskSwitchContext();
 8004320:	f7ff fe2a 	bl	8003f78 <vTaskSwitchContext>
    prvTaskExitError();
 8004324:	f7ff ff3a 	bl	800419c <prvTaskExitError>
}
 8004328:	4620      	mov	r0, r4
 800432a:	bd10      	pop	{r4, pc}
 800432c:	20000010 	.word	0x20000010

08004330 <prvInsertBlockIntoFreeList>:
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004330:	b510      	push	{r4, lr}
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004332:	4b0f      	ldr	r3, [pc, #60]	; (8004370 <prvInsertBlockIntoFreeList+0x40>)
 8004334:	461a      	mov	r2, r3
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	4283      	cmp	r3, r0
 800433a:	d3fb      	bcc.n	8004334 <prvInsertBlockIntoFreeList+0x4>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800433c:	6854      	ldr	r4, [r2, #4]
 800433e:	1911      	adds	r1, r2, r4
 8004340:	4288      	cmp	r0, r1
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004342:	bf01      	itttt	eq
 8004344:	6841      	ldreq	r1, [r0, #4]
 8004346:	4610      	moveq	r0, r2
 8004348:	1909      	addeq	r1, r1, r4
 800434a:	6051      	streq	r1, [r2, #4]

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800434c:	6844      	ldr	r4, [r0, #4]
 800434e:	1901      	adds	r1, r0, r4
 8004350:	428b      	cmp	r3, r1
 8004352:	d107      	bne.n	8004364 <prvInsertBlockIntoFreeList+0x34>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004354:	4907      	ldr	r1, [pc, #28]	; (8004374 <prvInsertBlockIntoFreeList+0x44>)
 8004356:	6809      	ldr	r1, [r1, #0]
 8004358:	428b      	cmp	r3, r1
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800435a:	bf1f      	itttt	ne
 800435c:	6859      	ldrne	r1, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800435e:	681b      	ldrne	r3, [r3, #0]
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004360:	1909      	addne	r1, r1, r4
 8004362:	6041      	strne	r1, [r0, #4]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004364:	4290      	cmp	r0, r2
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004366:	6003      	str	r3, [r0, #0]
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004368:	bf18      	it	ne
 800436a:	6010      	strne	r0, [r2, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 800436c:	bd10      	pop	{r4, pc}
 800436e:	bf00      	nop
 8004370:	20002b58 	.word	0x20002b58
 8004374:	20000340 	.word	0x20000340

08004378 <pvPortMalloc>:
{
 8004378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800437c:	4605      	mov	r5, r0
    vTaskSuspendAll();
 800437e:	f7ff fc97 	bl	8003cb0 <vTaskSuspendAll>
        if( pxEnd == NULL )
 8004382:	4938      	ldr	r1, [pc, #224]	; (8004464 <pvPortMalloc+0xec>)
 8004384:	4c38      	ldr	r4, [pc, #224]	; (8004468 <pvPortMalloc+0xf0>)
 8004386:	680b      	ldr	r3, [r1, #0]
 8004388:	bb0b      	cbnz	r3, 80043ce <pvPortMalloc+0x56>
    uxAddress = ( size_t ) ucHeap;
 800438a:	4a38      	ldr	r2, [pc, #224]	; (800446c <pvPortMalloc+0xf4>)
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800438c:	4e38      	ldr	r6, [pc, #224]	; (8004470 <pvPortMalloc+0xf8>)
    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800438e:	0750      	lsls	r0, r2, #29
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004390:	bf1d      	ittte	ne
 8004392:	1dd0      	addne	r0, r2, #7
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004394:	f020 0007 	bicne.w	r0, r0, #7
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004398:	f502 5320 	addne.w	r3, r2, #10240	; 0x2800
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800439c:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80043a0:	bf1c      	itt	ne
 80043a2:	4602      	movne	r2, r0
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80043a4:	1a1b      	subne	r3, r3, r0
    xStart.xBlockSize = ( size_t ) 0;
 80043a6:	2000      	movs	r0, #0
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80043a8:	4413      	add	r3, r2
    uxAddress -= xHeapStructSize;
 80043aa:	3b08      	subs	r3, #8
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80043ac:	f023 0307 	bic.w	r3, r3, #7
    xStart.xBlockSize = ( size_t ) 0;
 80043b0:	6070      	str	r0, [r6, #4]
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80043b2:	6032      	str	r2, [r6, #0]
    pxEnd->pxNextFreeBlock = NULL;
 80043b4:	e9c3 0000 	strd	r0, r0, [r3]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80043b8:	1a98      	subs	r0, r3, r2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80043ba:	e9c2 3000 	strd	r3, r0, [r2]
    pxEnd = ( void * ) uxAddress;
 80043be:	600b      	str	r3, [r1, #0]
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80043c0:	4b2c      	ldr	r3, [pc, #176]	; (8004474 <pvPortMalloc+0xfc>)
 80043c2:	6018      	str	r0, [r3, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80043c4:	4b2c      	ldr	r3, [pc, #176]	; (8004478 <pvPortMalloc+0x100>)
 80043c6:	6018      	str	r0, [r3, #0]
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80043c8:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 80043cc:	6023      	str	r3, [r4, #0]
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80043ce:	6827      	ldr	r7, [r4, #0]
 80043d0:	ea17 0405 	ands.w	r4, r7, r5
 80043d4:	d143      	bne.n	800445e <pvPortMalloc+0xe6>
            if( ( xWantedSize > 0 ) &&
 80043d6:	1e6b      	subs	r3, r5, #1
 80043d8:	330a      	adds	r3, #10
 80043da:	d808      	bhi.n	80043ee <pvPortMalloc+0x76>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80043dc:	076a      	lsls	r2, r5, #29
                xWantedSize += xHeapStructSize;
 80043de:	f105 0308 	add.w	r3, r5, #8
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80043e2:	d036      	beq.n	8004452 <pvPortMalloc+0xda>
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 80043e4:	f023 0207 	bic.w	r2, r3, #7
 80043e8:	3208      	adds	r2, #8
 80043ea:	429a      	cmp	r2, r3
 80043ec:	d830      	bhi.n	8004450 <pvPortMalloc+0xd8>
    ( void ) xTaskResumeAll();
 80043ee:	f7ff fd17 	bl	8003e20 <xTaskResumeAll>
}
 80043f2:	4620      	mov	r0, r4
 80043f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                pxBlock = xStart.pxNextFreeBlock;
 80043f8:	4a1d      	ldr	r2, [pc, #116]	; (8004470 <pvPortMalloc+0xf8>)
 80043fa:	6815      	ldr	r5, [r2, #0]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80043fc:	6868      	ldr	r0, [r5, #4]
 80043fe:	4298      	cmp	r0, r3
 8004400:	d201      	bcs.n	8004406 <pvPortMalloc+0x8e>
 8004402:	682c      	ldr	r4, [r5, #0]
 8004404:	bb0c      	cbnz	r4, 800444a <pvPortMalloc+0xd2>
                if( pxBlock != pxEnd )
 8004406:	6809      	ldr	r1, [r1, #0]
 8004408:	42a9      	cmp	r1, r5
 800440a:	d028      	beq.n	800445e <pvPortMalloc+0xe6>
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800440c:	6829      	ldr	r1, [r5, #0]
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800440e:	6814      	ldr	r4, [r2, #0]
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004410:	6011      	str	r1, [r2, #0]
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004412:	1ac2      	subs	r2, r0, r3
 8004414:	2a10      	cmp	r2, #16
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004416:	f104 0408 	add.w	r4, r4, #8
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800441a:	d904      	bls.n	8004426 <pvPortMalloc+0xae>
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800441c:	18e8      	adds	r0, r5, r3
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800441e:	6042      	str	r2, [r0, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004420:	606b      	str	r3, [r5, #4]
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004422:	f7ff ff85 	bl	8004330 <prvInsertBlockIntoFreeList>
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004426:	686b      	ldr	r3, [r5, #4]
                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004428:	4a12      	ldr	r2, [pc, #72]	; (8004474 <pvPortMalloc+0xfc>)
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800442a:	1af6      	subs	r6, r6, r3
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 800442c:	433b      	orrs	r3, r7
 800442e:	606b      	str	r3, [r5, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004430:	2300      	movs	r3, #0
                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004432:	6811      	ldr	r1, [r2, #0]
                    pxBlock->pxNextFreeBlock = NULL;
 8004434:	602b      	str	r3, [r5, #0]
                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004436:	428e      	cmp	r6, r1
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004438:	bf38      	it	cc
 800443a:	6016      	strcc	r6, [r2, #0]
                    xNumberOfSuccessfulAllocations++;
 800443c:	4a0f      	ldr	r2, [pc, #60]	; (800447c <pvPortMalloc+0x104>)
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800443e:	f8c8 6000 	str.w	r6, [r8]
                    xNumberOfSuccessfulAllocations++;
 8004442:	6813      	ldr	r3, [r2, #0]
 8004444:	3301      	adds	r3, #1
 8004446:	6013      	str	r3, [r2, #0]
 8004448:	e7d1      	b.n	80043ee <pvPortMalloc+0x76>
 800444a:	462a      	mov	r2, r5
 800444c:	4625      	mov	r5, r4
 800444e:	e7d5      	b.n	80043fc <pvPortMalloc+0x84>
 8004450:	4613      	mov	r3, r2
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004452:	f8df 8024 	ldr.w	r8, [pc, #36]	; 8004478 <pvPortMalloc+0x100>
 8004456:	f8d8 6000 	ldr.w	r6, [r8]
 800445a:	429e      	cmp	r6, r3
 800445c:	d2cc      	bcs.n	80043f8 <pvPortMalloc+0x80>
    void * pvReturn = NULL;
 800445e:	2400      	movs	r4, #0
 8004460:	e7c5      	b.n	80043ee <pvPortMalloc+0x76>
 8004462:	bf00      	nop
 8004464:	20000340 	.word	0x20000340
 8004468:	20002b44 	.word	0x20002b44
 800446c:	20000344 	.word	0x20000344
 8004470:	20002b58 	.word	0x20002b58
 8004474:	20002b4c 	.word	0x20002b4c
 8004478:	20002b48 	.word	0x20002b48
 800447c:	20002b50 	.word	0x20002b50

08004480 <vPortFree>:
{
 8004480:	b510      	push	{r4, lr}
    if( pv != NULL )
 8004482:	4604      	mov	r4, r0
 8004484:	b300      	cbz	r0, 80044c8 <vPortFree+0x48>
        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004486:	4a11      	ldr	r2, [pc, #68]	; (80044cc <vPortFree+0x4c>)
 8004488:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800448c:	6812      	ldr	r2, [r2, #0]
 800448e:	4213      	tst	r3, r2
 8004490:	d01a      	beq.n	80044c8 <vPortFree+0x48>
            if( pxLink->pxNextFreeBlock == NULL )
 8004492:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8004496:	b9b9      	cbnz	r1, 80044c8 <vPortFree+0x48>
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004498:	ea23 0302 	bic.w	r3, r3, r2
 800449c:	f840 3c04 	str.w	r3, [r0, #-4]
                vTaskSuspendAll();
 80044a0:	f7ff fc06 	bl	8003cb0 <vTaskSuspendAll>
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80044a4:	4a0a      	ldr	r2, [pc, #40]	; (80044d0 <vPortFree+0x50>)
 80044a6:	f854 3c04 	ldr.w	r3, [r4, #-4]
 80044aa:	6811      	ldr	r1, [r2, #0]
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80044ac:	f1a4 0008 	sub.w	r0, r4, #8
                    xFreeBytesRemaining += pxLink->xBlockSize;
 80044b0:	440b      	add	r3, r1
 80044b2:	6013      	str	r3, [r2, #0]
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80044b4:	f7ff ff3c 	bl	8004330 <prvInsertBlockIntoFreeList>
}
 80044b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                    xNumberOfSuccessfulFrees++;
 80044bc:	4a05      	ldr	r2, [pc, #20]	; (80044d4 <vPortFree+0x54>)
 80044be:	6813      	ldr	r3, [r2, #0]
 80044c0:	3301      	adds	r3, #1
 80044c2:	6013      	str	r3, [r2, #0]
                ( void ) xTaskResumeAll();
 80044c4:	f7ff bcac 	b.w	8003e20 <xTaskResumeAll>
}
 80044c8:	bd10      	pop	{r4, pc}
 80044ca:	bf00      	nop
 80044cc:	20002b44 	.word	0x20002b44
 80044d0:	20002b48 	.word	0x20002b48
 80044d4:	20002b54 	.word	0x20002b54

080044d8 <app_main>:
#include "FreeRTOS.h"
#include "task.h"
#include "init_task.h"

void app_main()
{
 80044d8:	b508      	push	{r3, lr}

	init_task_create();
 80044da:	f000 f9cf 	bl	800487c <init_task_create>

	vTaskStartScheduler();
 80044de:	f7ff fbb5 	bl	8003c4c <vTaskStartScheduler>

	/*Should not reach here*/
	while(1)
 80044e2:	e7fe      	b.n	80044e2 <app_main+0xa>

080044e4 <interface_init>:

QueueHandle_t	lcd_queue;
QueueHandle_t	io_queue;

void interface_init()
{
 80044e4:	b508      	push	{r3, lr}
	lcd_queue = xQueueCreate(3, sizeof(lcd_data));
 80044e6:	2200      	movs	r2, #0
 80044e8:	2120      	movs	r1, #32
 80044ea:	2003      	movs	r0, #3
 80044ec:	f7ff f8b4 	bl	8003658 <xQueueGenericCreate>
 80044f0:	4b04      	ldr	r3, [pc, #16]	; (8004504 <interface_init+0x20>)
	io_queue = xQueueCreate(3, sizeof(io_state_data));
 80044f2:	2200      	movs	r2, #0
	lcd_queue = xQueueCreate(3, sizeof(lcd_data));
 80044f4:	6018      	str	r0, [r3, #0]
	io_queue = xQueueCreate(3, sizeof(io_state_data));
 80044f6:	2108      	movs	r1, #8
 80044f8:	2003      	movs	r0, #3
 80044fa:	f7ff f8ad 	bl	8003658 <xQueueGenericCreate>
 80044fe:	4b02      	ldr	r3, [pc, #8]	; (8004508 <interface_init+0x24>)
 8004500:	6018      	str	r0, [r3, #0]
}
 8004502:	bd08      	pop	{r3, pc}
 8004504:	20002b64 	.word	0x20002b64
 8004508:	20002b60 	.word	0x20002b60

0800450c <LCD_send>:
}

static bool LCD_send(uint8_t cmd, LCD_data_mode mode)
{
	bool res = true;
	LCD_data send_cmd = {0};
 800450c:	2308      	movs	r3, #8
{
 800450e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8004510:	4606      	mov	r6, r0
	LCD_data send_cmd = {0};
 8004512:	f88d 3004 	strb.w	r3, [sp, #4]
	send_cmd.data_bits.LED 	= 1;


	if(mode == LCD_CMD)
 8004516:	b111      	cbz	r1, 800451e <LCD_send+0x12>
	{
		send_cmd.data_bits.RS = 0;
	}
	else
	{
		send_cmd.data_bits.RS = 1;
 8004518:	2309      	movs	r3, #9
 800451a:	f88d 3004 	strb.w	r3, [sp, #4]
	}


	/*Set the first nibble*/
	send_cmd.data_byte |= (cmd & 0xF0);
 800451e:	f89d 3004 	ldrb.w	r3, [sp, #4]
	res &= LCD_local_dev->i2c_write(I2C_ADDR, &send_cmd.data_byte, 1);
 8004522:	4c33      	ldr	r4, [pc, #204]	; (80045f0 <LCD_send+0xe4>)
	send_cmd.data_byte |= (cmd & 0xF0);
 8004524:	f026 020f 	bic.w	r2, r6, #15
 8004528:	4313      	orrs	r3, r2
 800452a:	f88d 3004 	strb.w	r3, [sp, #4]
	res &= LCD_local_dev->i2c_write(I2C_ADDR, &send_cmd.data_byte, 1);
 800452e:	6823      	ldr	r3, [r4, #0]
 8004530:	a901      	add	r1, sp, #4
 8004532:	2201      	movs	r2, #1
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	203f      	movs	r0, #63	; 0x3f
 8004538:	4798      	blx	r3

	LCD_local_dev->delay(20);
 800453a:	6823      	ldr	r3, [r4, #0]
	res &= LCD_local_dev->i2c_write(I2C_ADDR, &send_cmd.data_byte, 1);
 800453c:	4605      	mov	r5, r0
	LCD_local_dev->delay(20);
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	2014      	movs	r0, #20
 8004542:	4798      	blx	r3

	/*Pulse the enable pin*/
	send_cmd.data_bits.E = 1;
 8004544:	f89d 3004 	ldrb.w	r3, [sp, #4]
	res &= LCD_local_dev->i2c_write(I2C_ADDR, &send_cmd.data_byte, 1);
 8004548:	a901      	add	r1, sp, #4
	send_cmd.data_bits.E = 1;
 800454a:	f043 0304 	orr.w	r3, r3, #4
 800454e:	f88d 3004 	strb.w	r3, [sp, #4]
	res &= LCD_local_dev->i2c_write(I2C_ADDR, &send_cmd.data_byte, 1);
 8004552:	6823      	ldr	r3, [r4, #0]
 8004554:	2201      	movs	r2, #1
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	203f      	movs	r0, #63	; 0x3f
 800455a:	4798      	blx	r3
	LCD_local_dev->delay(20);
 800455c:	6823      	ldr	r3, [r4, #0]
 800455e:	4005      	ands	r5, r0
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	2014      	movs	r0, #20
 8004564:	4798      	blx	r3
	send_cmd.data_bits.E = 0;
 8004566:	f89d 3004 	ldrb.w	r3, [sp, #4]
	res &= LCD_local_dev->i2c_write(I2C_ADDR, &send_cmd.data_byte, 1);
 800456a:	a901      	add	r1, sp, #4
	send_cmd.data_bits.E = 0;
 800456c:	f36f 0382 	bfc	r3, #2, #1
 8004570:	f88d 3004 	strb.w	r3, [sp, #4]
	res &= LCD_local_dev->i2c_write(I2C_ADDR, &send_cmd.data_byte, 1);
 8004574:	6823      	ldr	r3, [r4, #0]
 8004576:	2201      	movs	r2, #1
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	203f      	movs	r0, #63	; 0x3f
 800457c:	4798      	blx	r3

	LCD_local_dev->delay(20);
 800457e:	6823      	ldr	r3, [r4, #0]
 8004580:	b2ed      	uxtb	r5, r5
 8004582:	689b      	ldr	r3, [r3, #8]
 8004584:	4005      	ands	r5, r0
 8004586:	2014      	movs	r0, #20
 8004588:	4798      	blx	r3

	/*Send the second half of the data*/
	send_cmd.data_byte &= ~(send_cmd.data_byte & 0xF0);
 800458a:	f89d 3004 	ldrb.w	r3, [sp, #4]
	send_cmd.data_byte |= (cmd & 0x0F) << 4;
	res &= LCD_local_dev->i2c_write(I2C_ADDR, &send_cmd.data_byte, 1);
 800458e:	a901      	add	r1, sp, #4
	send_cmd.data_byte &= ~(send_cmd.data_byte & 0xF0);
 8004590:	f003 030f 	and.w	r3, r3, #15
	send_cmd.data_byte |= (cmd & 0x0F) << 4;
 8004594:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
 8004598:	f88d 3004 	strb.w	r3, [sp, #4]
	res &= LCD_local_dev->i2c_write(I2C_ADDR, &send_cmd.data_byte, 1);
 800459c:	6823      	ldr	r3, [r4, #0]
 800459e:	2201      	movs	r2, #1
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	203f      	movs	r0, #63	; 0x3f
 80045a4:	4798      	blx	r3

	LCD_local_dev->delay(20);
 80045a6:	6823      	ldr	r3, [r4, #0]
 80045a8:	4005      	ands	r5, r0
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	2014      	movs	r0, #20
 80045ae:	4798      	blx	r3

	/*Pulse the enable pin*/
	send_cmd.data_bits.E = 1;
 80045b0:	f89d 3004 	ldrb.w	r3, [sp, #4]
	res &= LCD_local_dev->i2c_write(I2C_ADDR, &send_cmd.data_byte, 1);
 80045b4:	a901      	add	r1, sp, #4
	send_cmd.data_bits.E = 1;
 80045b6:	f043 0304 	orr.w	r3, r3, #4
 80045ba:	f88d 3004 	strb.w	r3, [sp, #4]
	res &= LCD_local_dev->i2c_write(I2C_ADDR, &send_cmd.data_byte, 1);
 80045be:	6823      	ldr	r3, [r4, #0]
 80045c0:	2201      	movs	r2, #1
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	203f      	movs	r0, #63	; 0x3f
 80045c6:	4798      	blx	r3
	LCD_local_dev->delay(20);
 80045c8:	6823      	ldr	r3, [r4, #0]
 80045ca:	4005      	ands	r5, r0
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	2014      	movs	r0, #20
 80045d0:	4798      	blx	r3
	send_cmd.data_bits.E = 0;
 80045d2:	f89d 3004 	ldrb.w	r3, [sp, #4]
	res &= LCD_local_dev->i2c_write(I2C_ADDR, &send_cmd.data_byte, 1);
 80045d6:	2201      	movs	r2, #1
	send_cmd.data_bits.E = 0;
 80045d8:	f36f 0382 	bfc	r3, #2, #1
 80045dc:	f88d 3004 	strb.w	r3, [sp, #4]
	res &= LCD_local_dev->i2c_write(I2C_ADDR, &send_cmd.data_byte, 1);
 80045e0:	6823      	ldr	r3, [r4, #0]
 80045e2:	a901      	add	r1, sp, #4
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	203f      	movs	r0, #63	; 0x3f
 80045e8:	4798      	blx	r3

	return res;
}
 80045ea:	4028      	ands	r0, r5
 80045ec:	b002      	add	sp, #8
 80045ee:	bd70      	pop	{r4, r5, r6, pc}
 80045f0:	20002b68 	.word	0x20002b68

080045f4 <LCD_I2C_init>:
	if(fp_struct == NULL)
 80045f4:	b110      	cbz	r0, 80045fc <LCD_I2C_init+0x8>
	LCD_local_dev = fp_struct;
 80045f6:	4b02      	ldr	r3, [pc, #8]	; (8004600 <LCD_I2C_init+0xc>)
 80045f8:	6018      	str	r0, [r3, #0]
	return true;
 80045fa:	2001      	movs	r0, #1
}
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	20002b68 	.word	0x20002b68

08004604 <LCD_init>:
{
 8004604:	b538      	push	{r3, r4, r5, lr}
	res &= LCD_send(LCD_CMD_OFF, LCD_CMD);
 8004606:	2100      	movs	r1, #0
 8004608:	2008      	movs	r0, #8
 800460a:	f7ff ff7f 	bl	800450c <LCD_send>
	LCD_local_dev->delay(10);
 800460e:	4d1d      	ldr	r5, [pc, #116]	; (8004684 <LCD_init+0x80>)
	res &= LCD_send(LCD_CMD_OFF, LCD_CMD);
 8004610:	4604      	mov	r4, r0
	LCD_local_dev->delay(10);
 8004612:	682b      	ldr	r3, [r5, #0]
 8004614:	200a      	movs	r0, #10
 8004616:	689b      	ldr	r3, [r3, #8]
 8004618:	4798      	blx	r3
	res &= LCD_send(0x0E, LCD_CMD);
 800461a:	2100      	movs	r1, #0
 800461c:	200e      	movs	r0, #14
 800461e:	f7ff ff75 	bl	800450c <LCD_send>
	LCD_local_dev->delay(10);
 8004622:	682b      	ldr	r3, [r5, #0]
 8004624:	4004      	ands	r4, r0
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	200a      	movs	r0, #10
 800462a:	4798      	blx	r3
	res &= LCD_send(LCD_CMD_ON, LCD_CMD);
 800462c:	2100      	movs	r1, #0
 800462e:	200e      	movs	r0, #14
 8004630:	f7ff ff6c 	bl	800450c <LCD_send>
	LCD_local_dev->delay(10);
 8004634:	682b      	ldr	r3, [r5, #0]
 8004636:	b2e4      	uxtb	r4, r4
 8004638:	689b      	ldr	r3, [r3, #8]
 800463a:	4004      	ands	r4, r0
 800463c:	200a      	movs	r0, #10
 800463e:	4798      	blx	r3
	res &= LCD_send(LCD_CMD_RETURN, LCD_CMD);
 8004640:	2100      	movs	r1, #0
 8004642:	2002      	movs	r0, #2
 8004644:	f7ff ff62 	bl	800450c <LCD_send>
	LCD_local_dev->delay(10);
 8004648:	682b      	ldr	r3, [r5, #0]
 800464a:	4004      	ands	r4, r0
 800464c:	689b      	ldr	r3, [r3, #8]
 800464e:	200a      	movs	r0, #10
 8004650:	4798      	blx	r3
	res &= LCD_send(LCD_CMD_CLR, LCD_CMD);
 8004652:	2100      	movs	r1, #0
 8004654:	2001      	movs	r0, #1
 8004656:	f7ff ff59 	bl	800450c <LCD_send>
	LCD_local_dev->delay(10);
 800465a:	682b      	ldr	r3, [r5, #0]
 800465c:	4004      	ands	r4, r0
 800465e:	689b      	ldr	r3, [r3, #8]
 8004660:	200a      	movs	r0, #10
 8004662:	4798      	blx	r3
	res &= LCD_send(LCD_CMD_SET_ENTRY, LCD_CMD);
 8004664:	2100      	movs	r1, #0
 8004666:	2028      	movs	r0, #40	; 0x28
 8004668:	f7ff ff50 	bl	800450c <LCD_send>
	LCD_local_dev->delay(10);
 800466c:	682b      	ldr	r3, [r5, #0]
 800466e:	4004      	ands	r4, r0
 8004670:	689b      	ldr	r3, [r3, #8]
 8004672:	200a      	movs	r0, #10
 8004674:	4798      	blx	r3
	res &= LCD_send(LCD_CMD_CURSOR_BLINK, LCD_CMD);
 8004676:	2100      	movs	r1, #0
 8004678:	200f      	movs	r0, #15
 800467a:	f7ff ff47 	bl	800450c <LCD_send>
}
 800467e:	4020      	ands	r0, r4
 8004680:	bd38      	pop	{r3, r4, r5, pc}
 8004682:	bf00      	nop
 8004684:	20002b68 	.word	0x20002b68

08004688 <LCD_write>:
{
 8004688:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800468c:	4607      	mov	r7, r0
 800468e:	460e      	mov	r6, r1
	for(uint8_t i = 0;i < len;i++)
 8004690:	f04f 0900 	mov.w	r9, #0
	bool res = true;
 8004694:	2501      	movs	r5, #1
		LCD_local_dev->delay(10);
 8004696:	f8df 8054 	ldr.w	r8, [pc, #84]	; 80046ec <LCD_write+0x64>
	for(uint8_t i = 0;i < len;i++)
 800469a:	454e      	cmp	r6, r9
 800469c:	d102      	bne.n	80046a4 <LCD_write+0x1c>
}
 800469e:	4628      	mov	r0, r5
 80046a0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		res = LCD_send(data_byte,LCD_DATA);
 80046a4:	2101      	movs	r1, #1
 80046a6:	f817 0009 	ldrb.w	r0, [r7, r9]
 80046aa:	f7ff ff2f 	bl	800450c <LCD_send>
		LCD_local_dev->delay(10);
 80046ae:	f8d8 3000 	ldr.w	r3, [r8]
		res = LCD_send(data_byte,LCD_DATA);
 80046b2:	4605      	mov	r5, r0
		LCD_local_dev->delay(10);
 80046b4:	689b      	ldr	r3, [r3, #8]
 80046b6:	200a      	movs	r0, #10
 80046b8:	4798      	blx	r3
		if(i == 15)
 80046ba:	fa5f f389 	uxtb.w	r3, r9
 80046be:	2b0f      	cmp	r3, #15
 80046c0:	d110      	bne.n	80046e4 <LCD_write+0x5c>
			res &= LCD_send(LCD_CMD_RETURN, LCD_CMD);
 80046c2:	2100      	movs	r1, #0
 80046c4:	2002      	movs	r0, #2
 80046c6:	f7ff ff21 	bl	800450c <LCD_send>
			LCD_local_dev->delay(10);
 80046ca:	f8d8 3000 	ldr.w	r3, [r8]
			res &= LCD_send(LCD_CMD_RETURN, LCD_CMD);
 80046ce:	4604      	mov	r4, r0
			LCD_local_dev->delay(10);
 80046d0:	689b      	ldr	r3, [r3, #8]
 80046d2:	200a      	movs	r0, #10
 80046d4:	4798      	blx	r3
			res &= LCD_send(0xC0, LCD_CMD);
 80046d6:	2100      	movs	r1, #0
 80046d8:	20c0      	movs	r0, #192	; 0xc0
 80046da:	f7ff ff17 	bl	800450c <LCD_send>
 80046de:	4004      	ands	r4, r0
 80046e0:	402c      	ands	r4, r5
 80046e2:	b2e5      	uxtb	r5, r4
	for(uint8_t i = 0;i < len;i++)
 80046e4:	f109 0901 	add.w	r9, r9, #1
 80046e8:	e7d7      	b.n	800469a <LCD_write+0x12>
 80046ea:	bf00      	nop
 80046ec:	20002b68 	.word	0x20002b68

080046f0 <LCD_clear>:
{
 80046f0:	b538      	push	{r3, r4, r5, lr}
	res &= LCD_send(LCD_CMD_CLR, LCD_CMD);
 80046f2:	2100      	movs	r1, #0
 80046f4:	2001      	movs	r0, #1
 80046f6:	f7ff ff09 	bl	800450c <LCD_send>
	LCD_local_dev->delay(10);
 80046fa:	4d09      	ldr	r5, [pc, #36]	; (8004720 <LCD_clear+0x30>)
	res &= LCD_send(LCD_CMD_CLR, LCD_CMD);
 80046fc:	4604      	mov	r4, r0
	LCD_local_dev->delay(10);
 80046fe:	682b      	ldr	r3, [r5, #0]
 8004700:	200a      	movs	r0, #10
 8004702:	689b      	ldr	r3, [r3, #8]
 8004704:	4798      	blx	r3
	res &= LCD_send(LCD_CMD_RETURN, LCD_CMD);
 8004706:	2100      	movs	r1, #0
 8004708:	2002      	movs	r0, #2
 800470a:	f7ff feff 	bl	800450c <LCD_send>
	LCD_local_dev->delay(10);
 800470e:	682b      	ldr	r3, [r5, #0]
 8004710:	4004      	ands	r4, r0
 8004712:	689b      	ldr	r3, [r3, #8]
 8004714:	200a      	movs	r0, #10
 8004716:	b2e4      	uxtb	r4, r4
 8004718:	4798      	blx	r3
}
 800471a:	4620      	mov	r0, r4
 800471c:	bd38      	pop	{r3, r4, r5, pc}
 800471e:	bf00      	nop
 8004720:	20002b68 	.word	0x20002b68

08004724 <Numpad_init>:
}scan_pin;

scan_pin	scan_array[COLUMN_NUM][ROW_NUM] 	= {0};

bool Numpad_init(Numpad_dev * dev)
{
 8004724:	b570      	push	{r4, r5, r6, lr}
	if(dev == NULL)
 8004726:	2800      	cmp	r0, #0
 8004728:	d046      	beq.n	80047b8 <Numpad_init+0x94>
		return false;

	numpad_local_dev = dev;
 800472a:	4b24      	ldr	r3, [pc, #144]	; (80047bc <Numpad_init+0x98>)

	/*Initialize an array with the functions*/

	/*column 1*/
	scan_array[0][0].write_func = numpad_local_dev->col0_write;
 800472c:	6902      	ldr	r2, [r0, #16]
	numpad_local_dev = dev;
 800472e:	6018      	str	r0, [r3, #0]
	scan_array[0][0].write_func = numpad_local_dev->col0_write;
 8004730:	4b23      	ldr	r3, [pc, #140]	; (80047c0 <Numpad_init+0x9c>)
	scan_array[0][1].write_func = numpad_local_dev->col0_write;
	scan_array[0][2].write_func = numpad_local_dev->col0_write;
	scan_array[0][3].write_func = numpad_local_dev->col0_write;

	scan_array[0][0].read_func = numpad_local_dev->row0_read;
 8004732:	6806      	ldr	r6, [r0, #0]
	scan_array[0][0].write_func = numpad_local_dev->col0_write;
 8004734:	601a      	str	r2, [r3, #0]
	scan_array[0][1].write_func = numpad_local_dev->col0_write;
 8004736:	60da      	str	r2, [r3, #12]
	scan_array[0][2].write_func = numpad_local_dev->col0_write;
 8004738:	619a      	str	r2, [r3, #24]
	scan_array[0][3].write_func = numpad_local_dev->col0_write;
 800473a:	625a      	str	r2, [r3, #36]	; 0x24
	scan_array[0][1].read_func = numpad_local_dev->row1_read;
	scan_array[0][2].read_func = numpad_local_dev->row2_read;
	scan_array[0][3].read_func = numpad_local_dev->row3_read;

	scan_array[0][0].character = '1';
 800473c:	2231      	movs	r2, #49	; 0x31
	scan_array[0][1].read_func = numpad_local_dev->row1_read;
 800473e:	6845      	ldr	r5, [r0, #4]
	scan_array[0][2].read_func = numpad_local_dev->row2_read;
 8004740:	6884      	ldr	r4, [r0, #8]
	scan_array[0][0].character = '1';
 8004742:	721a      	strb	r2, [r3, #8]
	scan_array[0][1].character = '4';
 8004744:	2234      	movs	r2, #52	; 0x34
	scan_array[0][3].read_func = numpad_local_dev->row3_read;
 8004746:	68c1      	ldr	r1, [r0, #12]
	scan_array[0][1].character = '4';
 8004748:	751a      	strb	r2, [r3, #20]
	scan_array[0][2].character = '7';
 800474a:	2237      	movs	r2, #55	; 0x37
 800474c:	f883 2020 	strb.w	r2, [r3, #32]
	scan_array[0][3].character = '*';
 8004750:	222a      	movs	r2, #42	; 0x2a
 8004752:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c


	/*column 2*/
	scan_array[1][0].write_func = numpad_local_dev->col1_write;
 8004756:	6942      	ldr	r2, [r0, #20]
	scan_array[0][0].read_func = numpad_local_dev->row0_read;
 8004758:	605e      	str	r6, [r3, #4]
	scan_array[1][0].write_func = numpad_local_dev->col1_write;
 800475a:	631a      	str	r2, [r3, #48]	; 0x30
	scan_array[1][1].write_func = numpad_local_dev->col1_write;
 800475c:	63da      	str	r2, [r3, #60]	; 0x3c
	scan_array[1][2].write_func = numpad_local_dev->col1_write;
 800475e:	649a      	str	r2, [r3, #72]	; 0x48
	scan_array[1][3].write_func = numpad_local_dev->col1_write;
 8004760:	655a      	str	r2, [r3, #84]	; 0x54
	scan_array[1][0].read_func = numpad_local_dev->row0_read;
	scan_array[1][1].read_func = numpad_local_dev->row1_read;
	scan_array[1][2].read_func = numpad_local_dev->row2_read;
	scan_array[1][3].read_func = numpad_local_dev->row3_read;

	scan_array[1][0].character = '2';
 8004762:	2232      	movs	r2, #50	; 0x32
 8004764:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	scan_array[1][1].character = '5';
 8004768:	2235      	movs	r2, #53	; 0x35
 800476a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	scan_array[1][2].character = '8';
 800476e:	2238      	movs	r2, #56	; 0x38
 8004770:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	scan_array[1][3].character = '0';
 8004774:	2230      	movs	r2, #48	; 0x30
 8004776:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

	/*column 3*/
	scan_array[2][0].write_func = numpad_local_dev->col2_write;
 800477a:	6982      	ldr	r2, [r0, #24]
	scan_array[0][1].read_func = numpad_local_dev->row1_read;
 800477c:	611d      	str	r5, [r3, #16]
	scan_array[0][2].read_func = numpad_local_dev->row2_read;
 800477e:	61dc      	str	r4, [r3, #28]
	scan_array[0][3].read_func = numpad_local_dev->row3_read;
 8004780:	6299      	str	r1, [r3, #40]	; 0x28
	scan_array[1][0].read_func = numpad_local_dev->row0_read;
 8004782:	635e      	str	r6, [r3, #52]	; 0x34
	scan_array[1][1].read_func = numpad_local_dev->row1_read;
 8004784:	641d      	str	r5, [r3, #64]	; 0x40
	scan_array[1][2].read_func = numpad_local_dev->row2_read;
 8004786:	64dc      	str	r4, [r3, #76]	; 0x4c
	scan_array[1][3].read_func = numpad_local_dev->row3_read;
 8004788:	6599      	str	r1, [r3, #88]	; 0x58
	scan_array[2][0].write_func = numpad_local_dev->col2_write;
 800478a:	661a      	str	r2, [r3, #96]	; 0x60
	scan_array[2][1].write_func = numpad_local_dev->col2_write;
 800478c:	66da      	str	r2, [r3, #108]	; 0x6c
	scan_array[2][2].write_func = numpad_local_dev->col2_write;
 800478e:	679a      	str	r2, [r3, #120]	; 0x78
	scan_array[2][3].write_func = numpad_local_dev->col2_write;
 8004790:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	scan_array[2][0].read_func = numpad_local_dev->row0_read;
	scan_array[2][1].read_func = numpad_local_dev->row1_read;
	scan_array[2][2].read_func = numpad_local_dev->row2_read;
	scan_array[2][3].read_func = numpad_local_dev->row3_read;

	scan_array[2][0].character = '3';
 8004794:	2233      	movs	r2, #51	; 0x33
 8004796:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	scan_array[2][1].character = '6';
 800479a:	2236      	movs	r2, #54	; 0x36
 800479c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	scan_array[2][2].character = '9';
 80047a0:	2239      	movs	r2, #57	; 0x39
 80047a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	scan_array[2][3].character = '#';
 80047a6:	2223      	movs	r2, #35	; 0x23

	return true;
 80047a8:	2001      	movs	r0, #1
	scan_array[2][0].read_func = numpad_local_dev->row0_read;
 80047aa:	665e      	str	r6, [r3, #100]	; 0x64
	scan_array[2][1].read_func = numpad_local_dev->row1_read;
 80047ac:	671d      	str	r5, [r3, #112]	; 0x70
	scan_array[2][2].read_func = numpad_local_dev->row2_read;
 80047ae:	67dc      	str	r4, [r3, #124]	; 0x7c
	scan_array[2][3].read_func = numpad_local_dev->row3_read;
 80047b0:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	scan_array[2][3].character = '#';
 80047b4:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
}
 80047b8:	bd70      	pop	{r4, r5, r6, pc}
 80047ba:	bf00      	nop
 80047bc:	20002b6c 	.word	0x20002b6c
 80047c0:	20002b70 	.word	0x20002b70

080047c4 <Numpad_scan>:


char Numpad_scan()
{
 80047c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047c8:	4c20      	ldr	r4, [pc, #128]	; (800484c <Numpad_scan+0x88>)
 80047ca:	2500      	movs	r5, #0
 80047cc:	46a0      	mov	r8, r4
	for(uint8_t i = 0;i < COLUMN_NUM;i++)
	{
		for(uint8_t j = 0;j < ROW_NUM;j++)
		{
			scan_array[i][j].write_func(false);
			numpad_local_dev->delay(10);
 80047ce:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8004850 <Numpad_scan+0x8c>
{
 80047d2:	4627      	mov	r7, r4
 80047d4:	2600      	movs	r6, #0
			scan_array[i][j].write_func(false);
 80047d6:	2000      	movs	r0, #0
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	4798      	blx	r3
			numpad_local_dev->delay(10);
 80047dc:	f8d9 3000 	ldr.w	r3, [r9]
 80047e0:	200a      	movs	r0, #10
 80047e2:	69db      	ldr	r3, [r3, #28]
 80047e4:	4798      	blx	r3
			if(!scan_array[i][j].read_func())
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4798      	blx	r3
 80047ea:	4682      	mov	sl, r0
 80047ec:	b9e0      	cbnz	r0, 8004828 <Numpad_scan+0x64>
			{
				numpad_local_dev->buzzer(true);
 80047ee:	f8d9 3000 	ldr.w	r3, [r9]
 80047f2:	2001      	movs	r0, #1
 80047f4:	6a1b      	ldr	r3, [r3, #32]
 80047f6:	4798      	blx	r3
				numpad_local_dev->delay(100);
 80047f8:	f8d9 3000 	ldr.w	r3, [r9]
 80047fc:	2064      	movs	r0, #100	; 0x64
 80047fe:	69db      	ldr	r3, [r3, #28]
 8004800:	4798      	blx	r3
				numpad_local_dev->buzzer(false);
 8004802:	f8d9 3000 	ldr.w	r3, [r9]
 8004806:	4650      	mov	r0, sl
 8004808:	6a1b      	ldr	r3, [r3, #32]
 800480a:	4798      	blx	r3
				scan_array[i][0].write_func(true);
 800480c:	2330      	movs	r3, #48	; 0x30
 800480e:	fb03 f405 	mul.w	r4, r3, r5
 8004812:	2001      	movs	r0, #1
 8004814:	f858 3004 	ldr.w	r3, [r8, r4]
 8004818:	4798      	blx	r3
				return scan_array[i][j].character;
 800481a:	230c      	movs	r3, #12
 800481c:	fb03 4406 	mla	r4, r3, r6, r4
 8004820:	4444      	add	r4, r8
 8004822:	7a20      	ldrb	r0, [r4, #8]

		scan_array[i][0].write_func(true);
	}

	return 'X';
}
 8004824:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for(uint8_t j = 0;j < ROW_NUM;j++)
 8004828:	3601      	adds	r6, #1
 800482a:	2e04      	cmp	r6, #4
 800482c:	f107 070c 	add.w	r7, r7, #12
 8004830:	d1d1      	bne.n	80047d6 <Numpad_scan+0x12>
		scan_array[i][0].write_func(true);
 8004832:	2330      	movs	r3, #48	; 0x30
 8004834:	436b      	muls	r3, r5
 8004836:	2001      	movs	r0, #1
 8004838:	f858 3003 	ldr.w	r3, [r8, r3]
	for(uint8_t i = 0;i < COLUMN_NUM;i++)
 800483c:	3501      	adds	r5, #1
		scan_array[i][0].write_func(true);
 800483e:	4798      	blx	r3
	for(uint8_t i = 0;i < COLUMN_NUM;i++)
 8004840:	2d03      	cmp	r5, #3
 8004842:	f104 0430 	add.w	r4, r4, #48	; 0x30
 8004846:	d1c4      	bne.n	80047d2 <Numpad_scan+0xe>
	return 'X';
 8004848:	2058      	movs	r0, #88	; 0x58
 800484a:	e7eb      	b.n	8004824 <Numpad_scan+0x60>
 800484c:	20002b70 	.word	0x20002b70
 8004850:	20002b6c 	.word	0x20002b6c

08004854 <init_task>:

	configASSERT(result == pdPASS);
}

void init_task(void * params)
{
 8004854:	b508      	push	{r3, lr}
	while(1)
	{
		interface_init();
 8004856:	f7ff fe45 	bl	80044e4 <interface_init>

		/*Call the initialising function of each task*/
		manager_task_create();
 800485a:	f000 f8f3 	bl	8004a44 <manager_task_create>
		uart_task_create();
 800485e:	f000 f90b 	bl	8004a78 <uart_task_create>
		gsm_task_create();
 8004862:	f000 f923 	bl	8004aac <gsm_task_create>
		io_task_create();
 8004866:	f000 f973 	bl	8004b50 <io_task_create>
		lcd_task_create();
 800486a:	f000 f9fb 	bl	8004c64 <lcd_task_create>
		numpad_task_create();
 800486e:	f000 fab5 	bl	8004ddc <numpad_task_create>

		/*Delete the init_task after initialisation*/
		vTaskDelete(NULL);
 8004872:	2000      	movs	r0, #0
 8004874:	f7ff f988 	bl	8003b88 <vTaskDelete>
	while(1)
 8004878:	e7ed      	b.n	8004856 <init_task+0x2>
	...

0800487c <init_task_create>:
{
 800487c:	b507      	push	{r0, r1, r2, lr}
	result = xTaskCreate(init_task,
 800487e:	2300      	movs	r3, #0
 8004880:	2201      	movs	r2, #1
 8004882:	4905      	ldr	r1, [pc, #20]	; (8004898 <init_task_create+0x1c>)
 8004884:	e9cd 2300 	strd	r2, r3, [sp]
 8004888:	4804      	ldr	r0, [pc, #16]	; (800489c <init_task_create+0x20>)
 800488a:	2264      	movs	r2, #100	; 0x64
 800488c:	f7ff f89a 	bl	80039c4 <xTaskCreate>
}
 8004890:	b003      	add	sp, #12
 8004892:	f85d fb04 	ldr.w	pc, [sp], #4
 8004896:	bf00      	nop
 8004898:	08004f12 	.word	0x08004f12
 800489c:	08004855 	.word	0x08004855

080048a0 <manager_task>:

	configASSERT(result == pdPASS);
}

void manager_task(void * params)
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b08a      	sub	sp, #40	; 0x28
	lcd_data 		lcd_data 	= {0};
 80048a4:	aa02      	add	r2, sp, #8
 80048a6:	4614      	mov	r4, r2
 80048a8:	4b5b      	ldr	r3, [pc, #364]	; (8004a18 <manager_task+0x178>)
 80048aa:	f103 0620 	add.w	r6, r3, #32
 80048ae:	4615      	mov	r5, r2
 80048b0:	6818      	ldr	r0, [r3, #0]
 80048b2:	6859      	ldr	r1, [r3, #4]
 80048b4:	3308      	adds	r3, #8
 80048b6:	c503      	stmia	r5!, {r0, r1}
 80048b8:	42b3      	cmp	r3, r6
 80048ba:	462a      	mov	r2, r5
 80048bc:	d1f7      	bne.n	80048ae <manager_task+0xe>
				/*Wait for status report from IO task (battery voltage, sensors etc.)*/
				xQueueReceive(io_queue, (void*)&io_data, pdMS_TO_TICKS(portMAX_DELAY));


				memset(lcd_data.text, '\0', LCD_BUFF_MAX_SIZE);
				if(io_data.vbat >= 3.2)
 80048be:	a754      	add	r7, pc, #336	; (adr r7, 8004a10 <manager_task+0x170>)
 80048c0:	e9d7 6700 	ldrd	r6, r7, [r7]
	io_state_data 	io_data 	= {0};
 80048c4:	2300      	movs	r3, #0
 80048c6:	e9cd 3300 	strd	r3, r3, [sp]
		switch(system_state)
 80048ca:	4d54      	ldr	r5, [pc, #336]	; (8004a1c <manager_task+0x17c>)
 80048cc:	782b      	ldrb	r3, [r5, #0]
 80048ce:	2b04      	cmp	r3, #4
 80048d0:	d8fd      	bhi.n	80048ce <manager_task+0x2e>
 80048d2:	e8df f003 	tbb	[pc, r3]
 80048d6:	2703      	.short	0x2703
 80048d8:	9a98      	.short	0x9a98
 80048da:	86          	.byte	0x86
 80048db:	00          	.byte	0x00
				memcpy(lcd_data.text, "HOME ALARM V1.0", 15);
 80048dc:	4622      	mov	r2, r4
 80048de:	4b50      	ldr	r3, [pc, #320]	; (8004a20 <manager_task+0x180>)
 80048e0:	f103 0e08 	add.w	lr, r3, #8
 80048e4:	4694      	mov	ip, r2
 80048e6:	6818      	ldr	r0, [r3, #0]
 80048e8:	6859      	ldr	r1, [r3, #4]
 80048ea:	3308      	adds	r3, #8
 80048ec:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80048f0:	4573      	cmp	r3, lr
 80048f2:	4662      	mov	r2, ip
 80048f4:	d1f6      	bne.n	80048e4 <manager_task+0x44>
 80048f6:	6818      	ldr	r0, [r3, #0]
 80048f8:	8899      	ldrh	r1, [r3, #4]
 80048fa:	799b      	ldrb	r3, [r3, #6]
 80048fc:	f8cc 0000 	str.w	r0, [ip]
				xQueueSend(lcd_queue, (void*)&lcd_data, pdMS_TO_TICKS(100));
 8004900:	4848      	ldr	r0, [pc, #288]	; (8004a24 <manager_task+0x184>)
				memcpy(lcd_data.text, "HOME ALARM V1.0", 15);
 8004902:	f8ac 1004 	strh.w	r1, [ip, #4]
 8004906:	f88c 3006 	strb.w	r3, [ip, #6]
				xQueueSend(lcd_queue, (void*)&lcd_data, pdMS_TO_TICKS(100));
 800490a:	2264      	movs	r2, #100	; 0x64
 800490c:	2300      	movs	r3, #0
 800490e:	4621      	mov	r1, r4
 8004910:	6800      	ldr	r0, [r0, #0]
 8004912:	f7fe fec6 	bl	80036a2 <xQueueGenericSend>
				vTaskDelay(pdMS_TO_TICKS(5000));
 8004916:	f241 3088 	movw	r0, #5000	; 0x1388
 800491a:	f7ff fb15 	bl	8003f48 <vTaskDelay>
				system_state = STATE_INIT;
 800491e:	2301      	movs	r3, #1
			}
			case STATE_ALERT:
			{
				/*Wait for user action to return to disarmed state*/

				system_state = STATE_DISARMED;
 8004920:	702b      	strb	r3, [r5, #0]

				break;
 8004922:	e7d3      	b.n	80048cc <manager_task+0x2c>
				memset(lcd_data.text, '\0', LCD_BUFF_MAX_SIZE);
 8004924:	2214      	movs	r2, #20
 8004926:	2100      	movs	r1, #0
 8004928:	eb0d 0002 	add.w	r0, sp, r2
 800492c:	f000 fa9a 	bl	8004e64 <memset>
				memcpy(lcd_data.text, "INITIALISING...", 15);
 8004930:	4622      	mov	r2, r4
 8004932:	4b3d      	ldr	r3, [pc, #244]	; (8004a28 <manager_task+0x188>)
 8004934:	f103 0e08 	add.w	lr, r3, #8
 8004938:	4694      	mov	ip, r2
 800493a:	6818      	ldr	r0, [r3, #0]
 800493c:	6859      	ldr	r1, [r3, #4]
 800493e:	3308      	adds	r3, #8
 8004940:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8004944:	4573      	cmp	r3, lr
 8004946:	4662      	mov	r2, ip
 8004948:	d1f6      	bne.n	8004938 <manager_task+0x98>
 800494a:	6818      	ldr	r0, [r3, #0]
 800494c:	8899      	ldrh	r1, [r3, #4]
 800494e:	799b      	ldrb	r3, [r3, #6]
				xQueueSend(lcd_queue, (void*)&lcd_data, pdMS_TO_TICKS(100));
 8004950:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004a24 <manager_task+0x184>
				memcpy(lcd_data.text, "INITIALISING...", 15);
 8004954:	f8ac 1004 	strh.w	r1, [ip, #4]
 8004958:	f88c 3006 	strb.w	r3, [ip, #6]
 800495c:	f8cc 0000 	str.w	r0, [ip]
				xQueueSend(lcd_queue, (void*)&lcd_data, pdMS_TO_TICKS(100));
 8004960:	2300      	movs	r3, #0
 8004962:	2264      	movs	r2, #100	; 0x64
 8004964:	4621      	mov	r1, r4
 8004966:	f8d8 0000 	ldr.w	r0, [r8]
 800496a:	f7fe fe9a 	bl	80036a2 <xQueueGenericSend>
				vTaskDelay(pdMS_TO_TICKS(2000));
 800496e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8004972:	f7ff fae9 	bl	8003f48 <vTaskDelay>
				xQueueReceive(io_queue, (void*)&io_data, pdMS_TO_TICKS(portMAX_DELAY));
 8004976:	4b2d      	ldr	r3, [pc, #180]	; (8004a2c <manager_task+0x18c>)
 8004978:	4669      	mov	r1, sp
 800497a:	6818      	ldr	r0, [r3, #0]
 800497c:	4a2c      	ldr	r2, [pc, #176]	; (8004a30 <manager_task+0x190>)
 800497e:	f7fe ff12 	bl	80037a6 <xQueueReceive>
				memset(lcd_data.text, '\0', LCD_BUFF_MAX_SIZE);
 8004982:	2220      	movs	r2, #32
 8004984:	2100      	movs	r1, #0
 8004986:	4620      	mov	r0, r4
 8004988:	f000 fa6c 	bl	8004e64 <memset>
				if(io_data.vbat >= 3.2)
 800498c:	9800      	ldr	r0, [sp, #0]
 800498e:	f7fb fe8d 	bl	80006ac <__aeabi_f2d>
 8004992:	4632      	mov	r2, r6
 8004994:	463b      	mov	r3, r7
 8004996:	f7fb ff55 	bl	8000844 <__aeabi_dcmpge>
 800499a:	b320      	cbz	r0, 80049e6 <manager_task+0x146>
					memcpy(lcd_data.text, "VBAT OK", 7);
 800499c:	4b25      	ldr	r3, [pc, #148]	; (8004a34 <manager_task+0x194>)
 800499e:	6818      	ldr	r0, [r3, #0]
 80049a0:	889a      	ldrh	r2, [r3, #4]
 80049a2:	799b      	ldrb	r3, [r3, #6]
 80049a4:	6020      	str	r0, [r4, #0]
 80049a6:	80a2      	strh	r2, [r4, #4]
 80049a8:	71a3      	strb	r3, [r4, #6]
				xQueueSend(lcd_queue, (void*)&lcd_data, pdMS_TO_TICKS(100));
 80049aa:	2300      	movs	r3, #0
 80049ac:	2264      	movs	r2, #100	; 0x64
 80049ae:	4621      	mov	r1, r4
 80049b0:	f8d8 0000 	ldr.w	r0, [r8]
 80049b4:	f7fe fe75 	bl	80036a2 <xQueueGenericSend>
				vTaskDelay(pdMS_TO_TICKS(2000));
 80049b8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80049bc:	f7ff fac4 	bl	8003f48 <vTaskDelay>
				if(io_data.io_state == 0)
 80049c0:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80049c4:	b9bb      	cbnz	r3, 80049f6 <manager_task+0x156>
					memcpy(lcd_data.text, "I/O OK", 7);
 80049c6:	4b1c      	ldr	r3, [pc, #112]	; (8004a38 <manager_task+0x198>)
 80049c8:	6818      	ldr	r0, [r3, #0]
 80049ca:	889a      	ldrh	r2, [r3, #4]
 80049cc:	799b      	ldrb	r3, [r3, #6]
 80049ce:	6020      	str	r0, [r4, #0]
 80049d0:	80a2      	strh	r2, [r4, #4]
 80049d2:	71a3      	strb	r3, [r4, #6]
				xQueueSend(lcd_queue, (void*)&lcd_data, pdMS_TO_TICKS(100));
 80049d4:	2300      	movs	r3, #0
 80049d6:	2264      	movs	r2, #100	; 0x64
 80049d8:	4621      	mov	r1, r4
 80049da:	f8d8 0000 	ldr.w	r0, [r8]
 80049de:	f7fe fe60 	bl	80036a2 <xQueueGenericSend>
				system_state = STATE_DISARMED;
 80049e2:	2302      	movs	r3, #2
 80049e4:	e79c      	b.n	8004920 <manager_task+0x80>
					memcpy(lcd_data.text, "VBAT ERROR", 10);
 80049e6:	4623      	mov	r3, r4
 80049e8:	4a14      	ldr	r2, [pc, #80]	; (8004a3c <manager_task+0x19c>)
 80049ea:	6810      	ldr	r0, [r2, #0]
 80049ec:	6851      	ldr	r1, [r2, #4]
 80049ee:	8912      	ldrh	r2, [r2, #8]
 80049f0:	c303      	stmia	r3!, {r0, r1}
 80049f2:	801a      	strh	r2, [r3, #0]
 80049f4:	e7d9      	b.n	80049aa <manager_task+0x10a>
					memcpy(lcd_data.text, "I/O ERROR", 9);
 80049f6:	4623      	mov	r3, r4
 80049f8:	4a11      	ldr	r2, [pc, #68]	; (8004a40 <manager_task+0x1a0>)
 80049fa:	6810      	ldr	r0, [r2, #0]
 80049fc:	6851      	ldr	r1, [r2, #4]
 80049fe:	7a12      	ldrb	r2, [r2, #8]
 8004a00:	c303      	stmia	r3!, {r0, r1}
 8004a02:	701a      	strb	r2, [r3, #0]
 8004a04:	e7e6      	b.n	80049d4 <manager_task+0x134>
				system_state = STATE_ARMED;
 8004a06:	2303      	movs	r3, #3
 8004a08:	e78a      	b.n	8004920 <manager_task+0x80>
				system_state = STATE_ALERT;
 8004a0a:	2304      	movs	r3, #4
 8004a0c:	e788      	b.n	8004920 <manager_task+0x80>
 8004a0e:	bf00      	nop
 8004a10:	9999999a 	.word	0x9999999a
 8004a14:	40099999 	.word	0x40099999
 8004a18:	08004e8c 	.word	0x08004e8c
 8004a1c:	20002c00 	.word	0x20002c00
 8004a20:	08004f19 	.word	0x08004f19
 8004a24:	20002b64 	.word	0x20002b64
 8004a28:	08004f29 	.word	0x08004f29
 8004a2c:	20002b60 	.word	0x20002b60
 8004a30:	00418936 	.word	0x00418936
 8004a34:	08004f39 	.word	0x08004f39
 8004a38:	08004f4c 	.word	0x08004f4c
 8004a3c:	08004f41 	.word	0x08004f41
 8004a40:	08004f53 	.word	0x08004f53

08004a44 <manager_task_create>:
{
 8004a44:	b507      	push	{r0, r1, r2, lr}
	result = xTaskCreate(manager_task,
 8004a46:	2300      	movs	r3, #0
 8004a48:	2202      	movs	r2, #2
 8004a4a:	4905      	ldr	r1, [pc, #20]	; (8004a60 <manager_task_create+0x1c>)
 8004a4c:	e9cd 2300 	strd	r2, r3, [sp]
 8004a50:	4804      	ldr	r0, [pc, #16]	; (8004a64 <manager_task_create+0x20>)
 8004a52:	2264      	movs	r2, #100	; 0x64
 8004a54:	f7fe ffb6 	bl	80039c4 <xTaskCreate>
}
 8004a58:	b003      	add	sp, #12
 8004a5a:	f85d fb04 	ldr.w	pc, [sp], #4
 8004a5e:	bf00      	nop
 8004a60:	08004f5d 	.word	0x08004f5d
 8004a64:	080048a1 	.word	0x080048a1

08004a68 <uart_task>:

	configASSERT(result == pdPASS);
}

void uart_task(void * params)
{
 8004a68:	b508      	push	{r3, lr}
	while(1)
	{
		/*Wait for data on the uart*/
		vTaskDelay(pdMS_TO_TICKS(portMAX_DELAY));
 8004a6a:	4c02      	ldr	r4, [pc, #8]	; (8004a74 <uart_task+0xc>)
 8004a6c:	4620      	mov	r0, r4
 8004a6e:	f7ff fa6b 	bl	8003f48 <vTaskDelay>
	while(1)
 8004a72:	e7fb      	b.n	8004a6c <uart_task+0x4>
 8004a74:	00418936 	.word	0x00418936

08004a78 <uart_task_create>:
{
 8004a78:	b507      	push	{r0, r1, r2, lr}
	result = xTaskCreate(uart_task,
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	2202      	movs	r2, #2
 8004a7e:	4905      	ldr	r1, [pc, #20]	; (8004a94 <uart_task_create+0x1c>)
 8004a80:	e9cd 2300 	strd	r2, r3, [sp]
 8004a84:	4804      	ldr	r0, [pc, #16]	; (8004a98 <uart_task_create+0x20>)
 8004a86:	22c8      	movs	r2, #200	; 0xc8
 8004a88:	f7fe ff9c 	bl	80039c4 <xTaskCreate>
}
 8004a8c:	b003      	add	sp, #12
 8004a8e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004a92:	bf00      	nop
 8004a94:	08004f67 	.word	0x08004f67
 8004a98:	08004a69 	.word	0x08004a69

08004a9c <gsm_task>:

	configASSERT(result == pdPASS);
}

void gsm_task(void * params)
{
 8004a9c:	b508      	push	{r3, lr}
	while(1)
	{
		/*Collect data from the system and control the state*/
		vTaskDelay(pdMS_TO_TICKS(portMAX_DELAY));
 8004a9e:	4c02      	ldr	r4, [pc, #8]	; (8004aa8 <gsm_task+0xc>)
 8004aa0:	4620      	mov	r0, r4
 8004aa2:	f7ff fa51 	bl	8003f48 <vTaskDelay>
	while(1)
 8004aa6:	e7fb      	b.n	8004aa0 <gsm_task+0x4>
 8004aa8:	00418936 	.word	0x00418936

08004aac <gsm_task_create>:
{
 8004aac:	b507      	push	{r0, r1, r2, lr}
	result = xTaskCreate(gsm_task,
 8004aae:	2300      	movs	r3, #0
 8004ab0:	2203      	movs	r2, #3
 8004ab2:	4905      	ldr	r1, [pc, #20]	; (8004ac8 <gsm_task_create+0x1c>)
 8004ab4:	e9cd 2300 	strd	r2, r3, [sp]
 8004ab8:	4804      	ldr	r0, [pc, #16]	; (8004acc <gsm_task_create+0x20>)
 8004aba:	22c8      	movs	r2, #200	; 0xc8
 8004abc:	f7fe ff82 	bl	80039c4 <xTaskCreate>
}
 8004ac0:	b003      	add	sp, #12
 8004ac2:	f85d fb04 	ldr.w	pc, [sp], #4
 8004ac6:	bf00      	nop
 8004ac8:	08004f6e 	.word	0x08004f6e
 8004acc:	08004a9d 	.word	0x08004a9d

08004ad0 <io_task>:

	configASSERT(result == pdPASS);
}

void io_task(void * params)
{
 8004ad0:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
		uint32_t adc_val = 0;
		float adc_val_f = 0.0f;
		HAL_ADC_Start(&hadc);
		HAL_ADC_PollForConversion(&hadc, 5000);
		adc_val = HAL_ADC_GetValue(&hadc);
		adc_val_f = adc_val * (3300.0 / 4095.0);
 8004ad4:	f20f 0960 	addw	r9, pc, #96	; 0x60
 8004ad8:	e9d9 8900 	ldrd	r8, r9, [r9]
		HAL_ADC_Start(&hadc);
 8004adc:	4d18      	ldr	r5, [pc, #96]	; (8004b40 <io_task+0x70>)
		io_data.vbat = ((adc_val_f * (10000.0f + 1000.f)) / (1000.0f)) / 1000.0;
 8004ade:	4e19      	ldr	r6, [pc, #100]	; (8004b44 <io_task+0x74>)
		io_state_data 	io_data 	= {0};
 8004ae0:	2400      	movs	r4, #0
		HAL_ADC_Start(&hadc);
 8004ae2:	4628      	mov	r0, r5
		io_state_data 	io_data 	= {0};
 8004ae4:	e9cd 4400 	strd	r4, r4, [sp]
		HAL_ADC_Start(&hadc);
 8004ae8:	f7fc ffdc 	bl	8001aa4 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 5000);
 8004aec:	f241 3188 	movw	r1, #5000	; 0x1388
 8004af0:	4628      	mov	r0, r5
 8004af2:	f7fc fe95 	bl	8001820 <HAL_ADC_PollForConversion>
		adc_val = HAL_ADC_GetValue(&hadc);
 8004af6:	4628      	mov	r0, r5
 8004af8:	f7fc fee8 	bl	80018cc <HAL_ADC_GetValue>
		adc_val_f = adc_val * (3300.0 / 4095.0);
 8004afc:	f7fb fdb4 	bl	8000668 <__aeabi_ui2d>
 8004b00:	4642      	mov	r2, r8
 8004b02:	464b      	mov	r3, r9
 8004b04:	f7fb fb44 	bl	8000190 <__aeabi_dmul>
 8004b08:	f7fb feb0 	bl	800086c <__aeabi_d2f>
		io_data.vbat = ((adc_val_f * (10000.0f + 1000.f)) / (1000.0f)) / 1000.0;
 8004b0c:	490e      	ldr	r1, [pc, #56]	; (8004b48 <io_task+0x78>)
 8004b0e:	f7fb fefd 	bl	800090c <__aeabi_fmul>
 8004b12:	4631      	mov	r1, r6
 8004b14:	f7fb ffae 	bl	8000a74 <__aeabi_fdiv>
 8004b18:	4631      	mov	r1, r6
 8004b1a:	f7fb ffab 	bl	8000a74 <__aeabi_fdiv>
 8004b1e:	9000      	str	r0, [sp, #0]

		xQueueSend(io_queue, (void*)&io_data, pdMS_TO_TICKS(100));
 8004b20:	480a      	ldr	r0, [pc, #40]	; (8004b4c <io_task+0x7c>)
 8004b22:	4623      	mov	r3, r4
 8004b24:	2264      	movs	r2, #100	; 0x64
 8004b26:	4669      	mov	r1, sp
 8004b28:	6800      	ldr	r0, [r0, #0]
 8004b2a:	f7fe fdba 	bl	80036a2 <xQueueGenericSend>

		vTaskDelay(pdMS_TO_TICKS(500));
 8004b2e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004b32:	f7ff fa09 	bl	8003f48 <vTaskDelay>
	while(1)
 8004b36:	e7d3      	b.n	8004ae0 <io_task+0x10>
 8004b38:	99c99c9a 	.word	0x99c99c9a
 8004b3c:	3fe9c99c 	.word	0x3fe9c99c
 8004b40:	20000030 	.word	0x20000030
 8004b44:	447a0000 	.word	0x447a0000
 8004b48:	462be000 	.word	0x462be000
 8004b4c:	20002b60 	.word	0x20002b60

08004b50 <io_task_create>:
{
 8004b50:	b507      	push	{r0, r1, r2, lr}
	result = xTaskCreate(io_task,
 8004b52:	2300      	movs	r3, #0
 8004b54:	2203      	movs	r2, #3
 8004b56:	4905      	ldr	r1, [pc, #20]	; (8004b6c <io_task_create+0x1c>)
 8004b58:	e9cd 2300 	strd	r2, r3, [sp]
 8004b5c:	4804      	ldr	r0, [pc, #16]	; (8004b70 <io_task_create+0x20>)
 8004b5e:	22c8      	movs	r2, #200	; 0xc8
 8004b60:	f7fe ff30 	bl	80039c4 <xTaskCreate>
}
 8004b64:	b003      	add	sp, #12
 8004b66:	f85d fb04 	ldr.w	pc, [sp], #4
 8004b6a:	bf00      	nop
 8004b6c:	08004f74 	.word	0x08004f74
 8004b70:	08004ad1 	.word	0x08004ad1

08004b74 <HAL_GPIO_EXTI_Callback>:



void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
	it_flag = true;
 8004b74:	2201      	movs	r2, #1
 8004b76:	4b01      	ldr	r3, [pc, #4]	; (8004b7c <HAL_GPIO_EXTI_Callback+0x8>)
 8004b78:	701a      	strb	r2, [r3, #0]
		{
			/*should not happen*/
			break;
		}
	}
}
 8004b7a:	4770      	bx	lr
 8004b7c:	20002c01 	.word	0x20002c01

08004b80 <lcd_task>:

	configASSERT(result == pdPASS);
}

void lcd_task(void * params)
{
 8004b80:	b580      	push	{r7, lr}
	lcd_i2c.i2c_write 	= i2c_write;
 8004b82:	4817      	ldr	r0, [pc, #92]	; (8004be0 <lcd_task+0x60>)
 8004b84:	4b17      	ldr	r3, [pc, #92]	; (8004be4 <lcd_task+0x64>)
{
 8004b86:	b088      	sub	sp, #32
	lcd_i2c.i2c_write 	= i2c_write;
 8004b88:	6003      	str	r3, [r0, #0]
	lcd_i2c.i2c_read 	= i2c_read;
 8004b8a:	4b17      	ldr	r3, [pc, #92]	; (8004be8 <lcd_task+0x68>)

	while(1)
	{
		/*Wait until data is received then print it on the LCD screen*/
		lcd_data data = {0};
		xQueueReceive(lcd_queue, (void*)&data, pdMS_TO_TICKS(portMAX_DELAY));
 8004b8c:	4f17      	ldr	r7, [pc, #92]	; (8004bec <lcd_task+0x6c>)
	lcd_i2c.i2c_read 	= i2c_read;
 8004b8e:	6043      	str	r3, [r0, #4]
	lcd_i2c.delay 		= i2c_delay;
 8004b90:	4b17      	ldr	r3, [pc, #92]	; (8004bf0 <lcd_task+0x70>)
		xQueueReceive(lcd_queue, (void*)&data, pdMS_TO_TICKS(portMAX_DELAY));
 8004b92:	f8df 8060 	ldr.w	r8, [pc, #96]	; 8004bf4 <lcd_task+0x74>
	lcd_i2c.delay 		= i2c_delay;
 8004b96:	6083      	str	r3, [r0, #8]
	LCD_I2C_init(&lcd_i2c);
 8004b98:	f7ff fd2c 	bl	80045f4 <LCD_I2C_init>
	LCD_init();
 8004b9c:	f7ff fd32 	bl	8004604 <LCD_init>
		lcd_data data = {0};
 8004ba0:	466c      	mov	r4, sp
 8004ba2:	4626      	mov	r6, r4
 8004ba4:	4b14      	ldr	r3, [pc, #80]	; (8004bf8 <lcd_task+0x78>)
 8004ba6:	f103 0220 	add.w	r2, r3, #32
 8004baa:	4625      	mov	r5, r4
 8004bac:	6818      	ldr	r0, [r3, #0]
 8004bae:	6859      	ldr	r1, [r3, #4]
 8004bb0:	3308      	adds	r3, #8
 8004bb2:	c503      	stmia	r5!, {r0, r1}
 8004bb4:	4293      	cmp	r3, r2
 8004bb6:	462c      	mov	r4, r5
 8004bb8:	d1f7      	bne.n	8004baa <lcd_task+0x2a>
		xQueueReceive(lcd_queue, (void*)&data, pdMS_TO_TICKS(portMAX_DELAY));
 8004bba:	4642      	mov	r2, r8
 8004bbc:	4631      	mov	r1, r6
 8004bbe:	6838      	ldr	r0, [r7, #0]
 8004bc0:	f7fe fdf1 	bl	80037a6 <xQueueReceive>
		taskENTER_CRITICAL();
 8004bc4:	f7ff fb2e 	bl	8004224 <vPortEnterCritical>
		LCD_clear();
 8004bc8:	f7ff fd92 	bl	80046f0 <LCD_clear>
		LCD_write(data.text, strlen(data.text));
 8004bcc:	4630      	mov	r0, r6
 8004bce:	f7fb fad7 	bl	8000180 <strlen>
 8004bd2:	b2c1      	uxtb	r1, r0
 8004bd4:	4630      	mov	r0, r6
 8004bd6:	f7ff fd57 	bl	8004688 <LCD_write>
		taskEXIT_CRITICAL();
 8004bda:	f7ff fb33 	bl	8004244 <vPortExitCritical>
	while(1)
 8004bde:	e7df      	b.n	8004ba0 <lcd_task+0x20>
 8004be0:	20002c04 	.word	0x20002c04
 8004be4:	08004bfd 	.word	0x08004bfd
 8004be8:	08004c21 	.word	0x08004c21
 8004bec:	20002b64 	.word	0x20002b64
 8004bf0:	08004c61 	.word	0x08004c61
 8004bf4:	00418936 	.word	0x00418936
 8004bf8:	08004eac 	.word	0x08004eac

08004bfc <i2c_write>:
	}
}


bool i2c_write(uint8_t dev_addr, uint8_t * data, uint8_t len)
{
 8004bfc:	b507      	push	{r0, r1, r2, lr}
 8004bfe:	4613      	mov	r3, r2
	HAL_StatusTypeDef status = HAL_ERROR;
	status = HAL_I2C_Master_Transmit(&hi2c1, (dev_addr << 1), data, len, 200);
 8004c00:	22c8      	movs	r2, #200	; 0xc8
 8004c02:	9200      	str	r2, [sp, #0]
 8004c04:	460a      	mov	r2, r1
 8004c06:	0041      	lsls	r1, r0, #1
 8004c08:	4804      	ldr	r0, [pc, #16]	; (8004c1c <i2c_write+0x20>)
 8004c0a:	f7fd fad9 	bl	80021c0 <HAL_I2C_Master_Transmit>
	return (status == HAL_OK) ? true : false;
}
 8004c0e:	fab0 f080 	clz	r0, r0
 8004c12:	0940      	lsrs	r0, r0, #5
 8004c14:	b003      	add	sp, #12
 8004c16:	f85d fb04 	ldr.w	pc, [sp], #4
 8004c1a:	bf00      	nop
 8004c1c:	20000084 	.word	0x20000084

08004c20 <i2c_read>:

bool i2c_read(uint8_t dev_addr, uint8_t * data, uint8_t len)
{
 8004c20:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	HAL_StatusTypeDef status = HAL_ERROR;
	status = HAL_I2C_Master_Transmit(&hi2c1, (dev_addr << 1), data, len, 200);
 8004c24:	27c8      	movs	r7, #200	; 0xc8
{
 8004c26:	460c      	mov	r4, r1
	status = HAL_I2C_Master_Transmit(&hi2c1, (dev_addr << 1), data, len, 200);
 8004c28:	4615      	mov	r5, r2
 8004c2a:	4e0c      	ldr	r6, [pc, #48]	; (8004c5c <i2c_read+0x3c>)
 8004c2c:	ea4f 0840 	mov.w	r8, r0, lsl #1
 8004c30:	4613      	mov	r3, r2
 8004c32:	4630      	mov	r0, r6
 8004c34:	460a      	mov	r2, r1
 8004c36:	9700      	str	r7, [sp, #0]
 8004c38:	4641      	mov	r1, r8
 8004c3a:	f7fd fac1 	bl	80021c0 <HAL_I2C_Master_Transmit>
	status = HAL_I2C_Master_Receive(&hi2c1, ((dev_addr << 1) | 0x01), data, len, 200);
 8004c3e:	462b      	mov	r3, r5
 8004c40:	4622      	mov	r2, r4
 8004c42:	4630      	mov	r0, r6
 8004c44:	9700      	str	r7, [sp, #0]
 8004c46:	f048 0101 	orr.w	r1, r8, #1
 8004c4a:	f7fd fb91 	bl	8002370 <HAL_I2C_Master_Receive>
	return (status == HAL_OK) ? true : false;
}
 8004c4e:	fab0 f080 	clz	r0, r0
 8004c52:	0940      	lsrs	r0, r0, #5
 8004c54:	b002      	add	sp, #8
 8004c56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004c5a:	bf00      	nop
 8004c5c:	20000084 	.word	0x20000084

08004c60 <i2c_delay>:

void i2c_delay(uint32_t ms)
{
	vTaskDelay(ms);
 8004c60:	f7ff b972 	b.w	8003f48 <vTaskDelay>

08004c64 <lcd_task_create>:
{
 8004c64:	b507      	push	{r0, r1, r2, lr}
	result = xTaskCreate(lcd_task,
 8004c66:	2300      	movs	r3, #0
 8004c68:	2203      	movs	r2, #3
 8004c6a:	4905      	ldr	r1, [pc, #20]	; (8004c80 <lcd_task_create+0x1c>)
 8004c6c:	e9cd 2300 	strd	r2, r3, [sp]
 8004c70:	4804      	ldr	r0, [pc, #16]	; (8004c84 <lcd_task_create+0x20>)
 8004c72:	2264      	movs	r2, #100	; 0x64
 8004c74:	f7fe fea6 	bl	80039c4 <xTaskCreate>
}
 8004c78:	b003      	add	sp, #12
 8004c7a:	f85d fb04 	ldr.w	pc, [sp], #4
 8004c7e:	bf00      	nop
 8004c80:	08004f79 	.word	0x08004f79
 8004c84:	08004b81 	.word	0x08004b81

08004c88 <numpad_task>:

void numpad_task(void * params)
{
	char key = 'X';

	numpad_ctrl.col0_write = col0_write;
 8004c88:	481a      	ldr	r0, [pc, #104]	; (8004cf4 <numpad_task+0x6c>)
 8004c8a:	4b1b      	ldr	r3, [pc, #108]	; (8004cf8 <numpad_task+0x70>)
{
 8004c8c:	b5f0      	push	{r4, r5, r6, r7, lr}
	numpad_ctrl.col0_write = col0_write;
 8004c8e:	6103      	str	r3, [r0, #16]
	numpad_ctrl.col1_write = col1_write;
 8004c90:	4b1a      	ldr	r3, [pc, #104]	; (8004cfc <numpad_task+0x74>)
{
 8004c92:	b089      	sub	sp, #36	; 0x24
	numpad_ctrl.col1_write = col1_write;
 8004c94:	6143      	str	r3, [r0, #20]
	numpad_ctrl.col2_write = col2_write;
 8004c96:	4b1a      	ldr	r3, [pc, #104]	; (8004d00 <numpad_task+0x78>)
		if(key != 'X')
		{
			lcd_data data = {0};
			data.text[0] = key;
			/*Send the key to the LCD task*/
			xQueueSend(lcd_queue, (void*)&data, pdMS_TO_TICKS(100));
 8004c98:	4e1a      	ldr	r6, [pc, #104]	; (8004d04 <numpad_task+0x7c>)
	numpad_ctrl.col2_write = col2_write;
 8004c9a:	6183      	str	r3, [r0, #24]
	numpad_ctrl.row0_read = row0_read;
 8004c9c:	4b1a      	ldr	r3, [pc, #104]	; (8004d08 <numpad_task+0x80>)
 8004c9e:	6003      	str	r3, [r0, #0]
	numpad_ctrl.row1_read = row1_read;
 8004ca0:	4b1a      	ldr	r3, [pc, #104]	; (8004d0c <numpad_task+0x84>)
 8004ca2:	6043      	str	r3, [r0, #4]
	numpad_ctrl.row2_read = row2_read;
 8004ca4:	4b1a      	ldr	r3, [pc, #104]	; (8004d10 <numpad_task+0x88>)
 8004ca6:	6083      	str	r3, [r0, #8]
	numpad_ctrl.row3_read = row3_read;
 8004ca8:	4b1a      	ldr	r3, [pc, #104]	; (8004d14 <numpad_task+0x8c>)
 8004caa:	60c3      	str	r3, [r0, #12]
	numpad_ctrl.delay 	= numpad_delay;
 8004cac:	4b1a      	ldr	r3, [pc, #104]	; (8004d18 <numpad_task+0x90>)
 8004cae:	61c3      	str	r3, [r0, #28]
	numpad_ctrl.buzzer 	= buzzer_write;
 8004cb0:	4b1a      	ldr	r3, [pc, #104]	; (8004d1c <numpad_task+0x94>)
 8004cb2:	6203      	str	r3, [r0, #32]
	Numpad_init(&numpad_ctrl);
 8004cb4:	f7ff fd36 	bl	8004724 <Numpad_init>
		key = Numpad_scan();
 8004cb8:	f7ff fd84 	bl	80047c4 <Numpad_scan>
		if(key != 'X')
 8004cbc:	2858      	cmp	r0, #88	; 0x58
		key = Numpad_scan();
 8004cbe:	4602      	mov	r2, r0
		if(key != 'X')
 8004cc0:	d014      	beq.n	8004cec <numpad_task+0x64>
			lcd_data data = {0};
 8004cc2:	466c      	mov	r4, sp
 8004cc4:	4627      	mov	r7, r4
 8004cc6:	4b16      	ldr	r3, [pc, #88]	; (8004d20 <numpad_task+0x98>)
 8004cc8:	f103 0c20 	add.w	ip, r3, #32
 8004ccc:	4625      	mov	r5, r4
 8004cce:	6818      	ldr	r0, [r3, #0]
 8004cd0:	6859      	ldr	r1, [r3, #4]
 8004cd2:	3308      	adds	r3, #8
 8004cd4:	c503      	stmia	r5!, {r0, r1}
 8004cd6:	4563      	cmp	r3, ip
 8004cd8:	462c      	mov	r4, r5
 8004cda:	d1f7      	bne.n	8004ccc <numpad_task+0x44>
			data.text[0] = key;
 8004cdc:	f88d 2000 	strb.w	r2, [sp]
			xQueueSend(lcd_queue, (void*)&data, pdMS_TO_TICKS(100));
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	2264      	movs	r2, #100	; 0x64
 8004ce4:	4639      	mov	r1, r7
 8004ce6:	6830      	ldr	r0, [r6, #0]
 8004ce8:	f7fe fcdb 	bl	80036a2 <xQueueGenericSend>
		}
		vTaskDelay(pdMS_TO_TICKS(100));
 8004cec:	2064      	movs	r0, #100	; 0x64
 8004cee:	f7ff f92b 	bl	8003f48 <vTaskDelay>
		key = Numpad_scan();
 8004cf2:	e7e1      	b.n	8004cb8 <numpad_task+0x30>
 8004cf4:	20002c10 	.word	0x20002c10
 8004cf8:	08004d29 	.word	0x08004d29
 8004cfc:	08004d39 	.word	0x08004d39
 8004d00:	08004d49 	.word	0x08004d49
 8004d04:	20002b64 	.word	0x20002b64
 8004d08:	08004d59 	.word	0x08004d59
 8004d0c:	08004d71 	.word	0x08004d71
 8004d10:	08004d89 	.word	0x08004d89
 8004d14:	08004da1 	.word	0x08004da1
 8004d18:	08004d25 	.word	0x08004d25
 8004d1c:	08004db9 	.word	0x08004db9
 8004d20:	08004ecc 	.word	0x08004ecc

08004d24 <numpad_delay>:
	(state == true) ? HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2) : HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
}

void numpad_delay(uint32_t ms)
{
	vTaskDelay(ms);
 8004d24:	f7ff b910 	b.w	8003f48 <vTaskDelay>

08004d28 <col0_write>:
{
 8004d28:	4602      	mov	r2, r0
	HAL_GPIO_WritePin(COL0_GPIO_Port, COL0_Pin, (GPIO_PinState)status);
 8004d2a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8004d2e:	4801      	ldr	r0, [pc, #4]	; (8004d34 <col0_write+0xc>)
 8004d30:	f7fd b88a 	b.w	8001e48 <HAL_GPIO_WritePin>
 8004d34:	40020400 	.word	0x40020400

08004d38 <col1_write>:
{
 8004d38:	4602      	mov	r2, r0
	HAL_GPIO_WritePin(COL1_GPIO_Port, COL1_Pin, (GPIO_PinState)status);
 8004d3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8004d3e:	4801      	ldr	r0, [pc, #4]	; (8004d44 <col1_write+0xc>)
 8004d40:	f7fd b882 	b.w	8001e48 <HAL_GPIO_WritePin>
 8004d44:	40020400 	.word	0x40020400

08004d48 <col2_write>:
{
 8004d48:	4602      	mov	r2, r0
	HAL_GPIO_WritePin(COL2_GPIO_Port, COL2_Pin, (GPIO_PinState)status);
 8004d4a:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8004d4e:	4801      	ldr	r0, [pc, #4]	; (8004d54 <col2_write+0xc>)
 8004d50:	f7fd b87a 	b.w	8001e48 <HAL_GPIO_WritePin>
 8004d54:	40020400 	.word	0x40020400

08004d58 <row0_read>:
{
 8004d58:	b508      	push	{r3, lr}
	return (HAL_GPIO_ReadPin(ROW0_GPIO_Port, ROW0_Pin) == GPIO_PIN_SET) ? true : false;
 8004d5a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d5e:	4803      	ldr	r0, [pc, #12]	; (8004d6c <row0_read+0x14>)
 8004d60:	f7fd f86c 	bl	8001e3c <HAL_GPIO_ReadPin>
}
 8004d64:	1e43      	subs	r3, r0, #1
 8004d66:	4258      	negs	r0, r3
 8004d68:	4158      	adcs	r0, r3
 8004d6a:	bd08      	pop	{r3, pc}
 8004d6c:	40020400 	.word	0x40020400

08004d70 <row1_read>:
{
 8004d70:	b508      	push	{r3, lr}
	return (HAL_GPIO_ReadPin(ROW1_GPIO_Port, ROW1_Pin) == GPIO_PIN_SET) ? true : false;
 8004d72:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004d76:	4803      	ldr	r0, [pc, #12]	; (8004d84 <row1_read+0x14>)
 8004d78:	f7fd f860 	bl	8001e3c <HAL_GPIO_ReadPin>
}
 8004d7c:	1e43      	subs	r3, r0, #1
 8004d7e:	4258      	negs	r0, r3
 8004d80:	4158      	adcs	r0, r3
 8004d82:	bd08      	pop	{r3, pc}
 8004d84:	40020000 	.word	0x40020000

08004d88 <row2_read>:
{
 8004d88:	b508      	push	{r3, lr}
	return (HAL_GPIO_ReadPin(ROW2_GPIO_Port, ROW2_Pin) == GPIO_PIN_SET) ? true : false;
 8004d8a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004d8e:	4803      	ldr	r0, [pc, #12]	; (8004d9c <row2_read+0x14>)
 8004d90:	f7fd f854 	bl	8001e3c <HAL_GPIO_ReadPin>
}
 8004d94:	1e43      	subs	r3, r0, #1
 8004d96:	4258      	negs	r0, r3
 8004d98:	4158      	adcs	r0, r3
 8004d9a:	bd08      	pop	{r3, pc}
 8004d9c:	40020000 	.word	0x40020000

08004da0 <row3_read>:
{
 8004da0:	b508      	push	{r3, lr}
	return (HAL_GPIO_ReadPin(ROW3_GPIO_Port, ROW3_Pin) == GPIO_PIN_SET) ? true : false;
 8004da2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8004da6:	4803      	ldr	r0, [pc, #12]	; (8004db4 <row3_read+0x14>)
 8004da8:	f7fd f848 	bl	8001e3c <HAL_GPIO_ReadPin>
}
 8004dac:	1e43      	subs	r3, r0, #1
 8004dae:	4258      	negs	r0, r3
 8004db0:	4158      	adcs	r0, r3
 8004db2:	bd08      	pop	{r3, pc}
 8004db4:	40020000 	.word	0x40020000

08004db8 <buzzer_write>:
	TIM4->ARR = 137;
 8004db8:	2289      	movs	r2, #137	; 0x89
 8004dba:	4b06      	ldr	r3, [pc, #24]	; (8004dd4 <buzzer_write+0x1c>)
	(state == true) ? HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2) : HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 8004dbc:	2104      	movs	r1, #4
	TIM4->ARR = 137;
 8004dbe:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM4->CCR2 = 68;
 8004dc0:	2244      	movs	r2, #68	; 0x44
 8004dc2:	639a      	str	r2, [r3, #56]	; 0x38
	(state == true) ? HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2) : HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 8004dc4:	b110      	cbz	r0, 8004dcc <buzzer_write+0x14>
 8004dc6:	4804      	ldr	r0, [pc, #16]	; (8004dd8 <buzzer_write+0x20>)
 8004dc8:	f7fe b97d 	b.w	80030c6 <HAL_TIM_PWM_Start>
 8004dcc:	4802      	ldr	r0, [pc, #8]	; (8004dd8 <buzzer_write+0x20>)
 8004dce:	f7fe b97c 	b.w	80030ca <HAL_TIM_PWM_Stop>
 8004dd2:	bf00      	nop
 8004dd4:	40000800 	.word	0x40000800
 8004dd8:	20000170 	.word	0x20000170

08004ddc <numpad_task_create>:
{
 8004ddc:	b507      	push	{r0, r1, r2, lr}
	result = xTaskCreate(numpad_task,
 8004dde:	2300      	movs	r3, #0
 8004de0:	2204      	movs	r2, #4
 8004de2:	4905      	ldr	r1, [pc, #20]	; (8004df8 <numpad_task_create+0x1c>)
 8004de4:	e9cd 2300 	strd	r2, r3, [sp]
 8004de8:	4804      	ldr	r0, [pc, #16]	; (8004dfc <numpad_task_create+0x20>)
 8004dea:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004dee:	f7fe fde9 	bl	80039c4 <xTaskCreate>
}
 8004df2:	b003      	add	sp, #12
 8004df4:	f85d fb04 	ldr.w	pc, [sp], #4
 8004df8:	08004f7f 	.word	0x08004f7f
 8004dfc:	08004c89 	.word	0x08004c89

08004e00 <__libc_init_array>:
 8004e00:	b570      	push	{r4, r5, r6, lr}
 8004e02:	2600      	movs	r6, #0
 8004e04:	4d0c      	ldr	r5, [pc, #48]	; (8004e38 <__libc_init_array+0x38>)
 8004e06:	4c0d      	ldr	r4, [pc, #52]	; (8004e3c <__libc_init_array+0x3c>)
 8004e08:	1b64      	subs	r4, r4, r5
 8004e0a:	10a4      	asrs	r4, r4, #2
 8004e0c:	42a6      	cmp	r6, r4
 8004e0e:	d109      	bne.n	8004e24 <__libc_init_array+0x24>
 8004e10:	f000 f830 	bl	8004e74 <_init>
 8004e14:	2600      	movs	r6, #0
 8004e16:	4d0a      	ldr	r5, [pc, #40]	; (8004e40 <__libc_init_array+0x40>)
 8004e18:	4c0a      	ldr	r4, [pc, #40]	; (8004e44 <__libc_init_array+0x44>)
 8004e1a:	1b64      	subs	r4, r4, r5
 8004e1c:	10a4      	asrs	r4, r4, #2
 8004e1e:	42a6      	cmp	r6, r4
 8004e20:	d105      	bne.n	8004e2e <__libc_init_array+0x2e>
 8004e22:	bd70      	pop	{r4, r5, r6, pc}
 8004e24:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e28:	4798      	blx	r3
 8004e2a:	3601      	adds	r6, #1
 8004e2c:	e7ee      	b.n	8004e0c <__libc_init_array+0xc>
 8004e2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e32:	4798      	blx	r3
 8004e34:	3601      	adds	r6, #1
 8004e36:	e7f2      	b.n	8004e1e <__libc_init_array+0x1e>
 8004e38:	08004f90 	.word	0x08004f90
 8004e3c:	08004f90 	.word	0x08004f90
 8004e40:	08004f90 	.word	0x08004f90
 8004e44:	08004f94 	.word	0x08004f94

08004e48 <memcpy>:
 8004e48:	440a      	add	r2, r1
 8004e4a:	4291      	cmp	r1, r2
 8004e4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e50:	d100      	bne.n	8004e54 <memcpy+0xc>
 8004e52:	4770      	bx	lr
 8004e54:	b510      	push	{r4, lr}
 8004e56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e5a:	4291      	cmp	r1, r2
 8004e5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e60:	d1f9      	bne.n	8004e56 <memcpy+0xe>
 8004e62:	bd10      	pop	{r4, pc}

08004e64 <memset>:
 8004e64:	4603      	mov	r3, r0
 8004e66:	4402      	add	r2, r0
 8004e68:	4293      	cmp	r3, r2
 8004e6a:	d100      	bne.n	8004e6e <memset+0xa>
 8004e6c:	4770      	bx	lr
 8004e6e:	f803 1b01 	strb.w	r1, [r3], #1
 8004e72:	e7f9      	b.n	8004e68 <memset+0x4>

08004e74 <_init>:
 8004e74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e76:	bf00      	nop
 8004e78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e7a:	bc08      	pop	{r3}
 8004e7c:	469e      	mov	lr, r3
 8004e7e:	4770      	bx	lr

08004e80 <_fini>:
 8004e80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e82:	bf00      	nop
 8004e84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004e86:	bc08      	pop	{r3}
 8004e88:	469e      	mov	lr, r3
 8004e8a:	4770      	bx	lr
