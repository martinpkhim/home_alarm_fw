
home_alarm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007508  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000033c  08007648  08007648  00017648  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007984  08007984  00020108  2**0
                  CONTENTS
  4 .ARM          00000008  08007984  08007984  00017984  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800798c  0800798c  00020108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800798c  0800798c  0001798c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007990  08007990  00017990  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000108  20000000  08007994  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d04  20000108  08007a9c  00020108  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002e0c  08007a9c  00022e0c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 12 .debug_info   00023093  00000000  00000000  00020131  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000659b  00000000  00000000  000431c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00012b4e  00000000  00000000  0004975f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001538  00000000  00000000  0005c2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000021e0  00000000  00000000  0005d7e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018dc6  00000000  00000000  0005f9c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00029061  00000000  00000000  0007878e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00093713  00000000  00000000  000a17ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00134f02  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000048a8  00000000  00000000  00134f54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000108 	.word	0x20000108
 800015c:	00000000 	.word	0x00000000
 8000160:	08007630 	.word	0x08007630

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	2000010c 	.word	0x2000010c
 800017c:	08007630 	.word	0x08007630

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr

080001a4 <__aeabi_dmul>:
 80001a4:	b570      	push	{r4, r5, r6, lr}
 80001a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001b2:	bf1d      	ittte	ne
 80001b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001b8:	ea94 0f0c 	teqne	r4, ip
 80001bc:	ea95 0f0c 	teqne	r5, ip
 80001c0:	f000 f8de 	bleq	8000380 <__aeabi_dmul+0x1dc>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea81 0603 	eor.w	r6, r1, r3
 80001ca:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001ce:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001d2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001d6:	bf18      	it	ne
 80001d8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80001dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80001e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001e4:	d038      	beq.n	8000258 <__aeabi_dmul+0xb4>
 80001e6:	fba0 ce02 	umull	ip, lr, r0, r2
 80001ea:	f04f 0500 	mov.w	r5, #0
 80001ee:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001f2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001f6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001fa:	f04f 0600 	mov.w	r6, #0
 80001fe:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000202:	f09c 0f00 	teq	ip, #0
 8000206:	bf18      	it	ne
 8000208:	f04e 0e01 	orrne.w	lr, lr, #1
 800020c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000210:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000214:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000218:	d204      	bcs.n	8000224 <__aeabi_dmul+0x80>
 800021a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800021e:	416d      	adcs	r5, r5
 8000220:	eb46 0606 	adc.w	r6, r6, r6
 8000224:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000228:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800022c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000230:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000234:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000238:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800023c:	bf88      	it	hi
 800023e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000242:	d81e      	bhi.n	8000282 <__aeabi_dmul+0xde>
 8000244:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000248:	bf08      	it	eq
 800024a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800024e:	f150 0000 	adcs.w	r0, r0, #0
 8000252:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000256:	bd70      	pop	{r4, r5, r6, pc}
 8000258:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800025c:	ea46 0101 	orr.w	r1, r6, r1
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	ea81 0103 	eor.w	r1, r1, r3
 8000268:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800026c:	bfc2      	ittt	gt
 800026e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000272:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000276:	bd70      	popgt	{r4, r5, r6, pc}
 8000278:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800027c:	f04f 0e00 	mov.w	lr, #0
 8000280:	3c01      	subs	r4, #1
 8000282:	f300 80ab 	bgt.w	80003dc <__aeabi_dmul+0x238>
 8000286:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800028a:	bfde      	ittt	le
 800028c:	2000      	movle	r0, #0
 800028e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000292:	bd70      	pople	{r4, r5, r6, pc}
 8000294:	f1c4 0400 	rsb	r4, r4, #0
 8000298:	3c20      	subs	r4, #32
 800029a:	da35      	bge.n	8000308 <__aeabi_dmul+0x164>
 800029c:	340c      	adds	r4, #12
 800029e:	dc1b      	bgt.n	80002d8 <__aeabi_dmul+0x134>
 80002a0:	f104 0414 	add.w	r4, r4, #20
 80002a4:	f1c4 0520 	rsb	r5, r4, #32
 80002a8:	fa00 f305 	lsl.w	r3, r0, r5
 80002ac:	fa20 f004 	lsr.w	r0, r0, r4
 80002b0:	fa01 f205 	lsl.w	r2, r1, r5
 80002b4:	ea40 0002 	orr.w	r0, r0, r2
 80002b8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002c4:	fa21 f604 	lsr.w	r6, r1, r4
 80002c8:	eb42 0106 	adc.w	r1, r2, r6
 80002cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002d0:	bf08      	it	eq
 80002d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002d6:	bd70      	pop	{r4, r5, r6, pc}
 80002d8:	f1c4 040c 	rsb	r4, r4, #12
 80002dc:	f1c4 0520 	rsb	r5, r4, #32
 80002e0:	fa00 f304 	lsl.w	r3, r0, r4
 80002e4:	fa20 f005 	lsr.w	r0, r0, r5
 80002e8:	fa01 f204 	lsl.w	r2, r1, r4
 80002ec:	ea40 0002 	orr.w	r0, r0, r2
 80002f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	f141 0100 	adc.w	r1, r1, #0
 80002fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000300:	bf08      	it	eq
 8000302:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000306:	bd70      	pop	{r4, r5, r6, pc}
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f205 	lsl.w	r2, r0, r5
 8000310:	ea4e 0e02 	orr.w	lr, lr, r2
 8000314:	fa20 f304 	lsr.w	r3, r0, r4
 8000318:	fa01 f205 	lsl.w	r2, r1, r5
 800031c:	ea43 0302 	orr.w	r3, r3, r2
 8000320:	fa21 f004 	lsr.w	r0, r1, r4
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000328:	fa21 f204 	lsr.w	r2, r1, r4
 800032c:	ea20 0002 	bic.w	r0, r0, r2
 8000330:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000334:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000338:	bf08      	it	eq
 800033a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033e:	bd70      	pop	{r4, r5, r6, pc}
 8000340:	f094 0f00 	teq	r4, #0
 8000344:	d10f      	bne.n	8000366 <__aeabi_dmul+0x1c2>
 8000346:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800034a:	0040      	lsls	r0, r0, #1
 800034c:	eb41 0101 	adc.w	r1, r1, r1
 8000350:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000354:	bf08      	it	eq
 8000356:	3c01      	subeq	r4, #1
 8000358:	d0f7      	beq.n	800034a <__aeabi_dmul+0x1a6>
 800035a:	ea41 0106 	orr.w	r1, r1, r6
 800035e:	f095 0f00 	teq	r5, #0
 8000362:	bf18      	it	ne
 8000364:	4770      	bxne	lr
 8000366:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800036a:	0052      	lsls	r2, r2, #1
 800036c:	eb43 0303 	adc.w	r3, r3, r3
 8000370:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000374:	bf08      	it	eq
 8000376:	3d01      	subeq	r5, #1
 8000378:	d0f7      	beq.n	800036a <__aeabi_dmul+0x1c6>
 800037a:	ea43 0306 	orr.w	r3, r3, r6
 800037e:	4770      	bx	lr
 8000380:	ea94 0f0c 	teq	r4, ip
 8000384:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000388:	bf18      	it	ne
 800038a:	ea95 0f0c 	teqne	r5, ip
 800038e:	d00c      	beq.n	80003aa <__aeabi_dmul+0x206>
 8000390:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000394:	bf18      	it	ne
 8000396:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800039a:	d1d1      	bne.n	8000340 <__aeabi_dmul+0x19c>
 800039c:	ea81 0103 	eor.w	r1, r1, r3
 80003a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd70      	pop	{r4, r5, r6, pc}
 80003aa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003ae:	bf06      	itte	eq
 80003b0:	4610      	moveq	r0, r2
 80003b2:	4619      	moveq	r1, r3
 80003b4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003b8:	d019      	beq.n	80003ee <__aeabi_dmul+0x24a>
 80003ba:	ea94 0f0c 	teq	r4, ip
 80003be:	d102      	bne.n	80003c6 <__aeabi_dmul+0x222>
 80003c0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003c4:	d113      	bne.n	80003ee <__aeabi_dmul+0x24a>
 80003c6:	ea95 0f0c 	teq	r5, ip
 80003ca:	d105      	bne.n	80003d8 <__aeabi_dmul+0x234>
 80003cc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003d0:	bf1c      	itt	ne
 80003d2:	4610      	movne	r0, r2
 80003d4:	4619      	movne	r1, r3
 80003d6:	d10a      	bne.n	80003ee <__aeabi_dmul+0x24a>
 80003d8:	ea81 0103 	eor.w	r1, r1, r3
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e8:	f04f 0000 	mov.w	r0, #0
 80003ec:	bd70      	pop	{r4, r5, r6, pc}
 80003ee:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003f2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003f6:	bd70      	pop	{r4, r5, r6, pc}

080003f8 <__aeabi_drsub>:
 80003f8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003fc:	e002      	b.n	8000404 <__adddf3>
 80003fe:	bf00      	nop

08000400 <__aeabi_dsub>:
 8000400:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000404 <__adddf3>:
 8000404:	b530      	push	{r4, r5, lr}
 8000406:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800040a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	bf1f      	itttt	ne
 800041a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800041e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000422:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000426:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042a:	f000 80e2 	beq.w	80005f2 <__adddf3+0x1ee>
 800042e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000432:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000436:	bfb8      	it	lt
 8000438:	426d      	neglt	r5, r5
 800043a:	dd0c      	ble.n	8000456 <__adddf3+0x52>
 800043c:	442c      	add	r4, r5
 800043e:	ea80 0202 	eor.w	r2, r0, r2
 8000442:	ea81 0303 	eor.w	r3, r1, r3
 8000446:	ea82 0000 	eor.w	r0, r2, r0
 800044a:	ea83 0101 	eor.w	r1, r3, r1
 800044e:	ea80 0202 	eor.w	r2, r0, r2
 8000452:	ea81 0303 	eor.w	r3, r1, r3
 8000456:	2d36      	cmp	r5, #54	; 0x36
 8000458:	bf88      	it	hi
 800045a:	bd30      	pophi	{r4, r5, pc}
 800045c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000460:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000464:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000468:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800046c:	d002      	beq.n	8000474 <__adddf3+0x70>
 800046e:	4240      	negs	r0, r0
 8000470:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000474:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000478:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800047c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000480:	d002      	beq.n	8000488 <__adddf3+0x84>
 8000482:	4252      	negs	r2, r2
 8000484:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000488:	ea94 0f05 	teq	r4, r5
 800048c:	f000 80a7 	beq.w	80005de <__adddf3+0x1da>
 8000490:	f1a4 0401 	sub.w	r4, r4, #1
 8000494:	f1d5 0e20 	rsbs	lr, r5, #32
 8000498:	db0d      	blt.n	80004b6 <__adddf3+0xb2>
 800049a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800049e:	fa22 f205 	lsr.w	r2, r2, r5
 80004a2:	1880      	adds	r0, r0, r2
 80004a4:	f141 0100 	adc.w	r1, r1, #0
 80004a8:	fa03 f20e 	lsl.w	r2, r3, lr
 80004ac:	1880      	adds	r0, r0, r2
 80004ae:	fa43 f305 	asr.w	r3, r3, r5
 80004b2:	4159      	adcs	r1, r3
 80004b4:	e00e      	b.n	80004d4 <__adddf3+0xd0>
 80004b6:	f1a5 0520 	sub.w	r5, r5, #32
 80004ba:	f10e 0e20 	add.w	lr, lr, #32
 80004be:	2a01      	cmp	r2, #1
 80004c0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004c4:	bf28      	it	cs
 80004c6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ca:	fa43 f305 	asr.w	r3, r3, r5
 80004ce:	18c0      	adds	r0, r0, r3
 80004d0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d8:	d507      	bpl.n	80004ea <__adddf3+0xe6>
 80004da:	f04f 0e00 	mov.w	lr, #0
 80004de:	f1dc 0c00 	rsbs	ip, ip, #0
 80004e2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004e6:	eb6e 0101 	sbc.w	r1, lr, r1
 80004ea:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004ee:	d31b      	bcc.n	8000528 <__adddf3+0x124>
 80004f0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004f4:	d30c      	bcc.n	8000510 <__adddf3+0x10c>
 80004f6:	0849      	lsrs	r1, r1, #1
 80004f8:	ea5f 0030 	movs.w	r0, r0, rrx
 80004fc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000500:	f104 0401 	add.w	r4, r4, #1
 8000504:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000508:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800050c:	f080 809a 	bcs.w	8000644 <__adddf3+0x240>
 8000510:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000514:	bf08      	it	eq
 8000516:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800051a:	f150 0000 	adcs.w	r0, r0, #0
 800051e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000522:	ea41 0105 	orr.w	r1, r1, r5
 8000526:	bd30      	pop	{r4, r5, pc}
 8000528:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800052c:	4140      	adcs	r0, r0
 800052e:	eb41 0101 	adc.w	r1, r1, r1
 8000532:	3c01      	subs	r4, #1
 8000534:	bf28      	it	cs
 8000536:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800053a:	d2e9      	bcs.n	8000510 <__adddf3+0x10c>
 800053c:	f091 0f00 	teq	r1, #0
 8000540:	bf04      	itt	eq
 8000542:	4601      	moveq	r1, r0
 8000544:	2000      	moveq	r0, #0
 8000546:	fab1 f381 	clz	r3, r1
 800054a:	bf08      	it	eq
 800054c:	3320      	addeq	r3, #32
 800054e:	f1a3 030b 	sub.w	r3, r3, #11
 8000552:	f1b3 0220 	subs.w	r2, r3, #32
 8000556:	da0c      	bge.n	8000572 <__adddf3+0x16e>
 8000558:	320c      	adds	r2, #12
 800055a:	dd08      	ble.n	800056e <__adddf3+0x16a>
 800055c:	f102 0c14 	add.w	ip, r2, #20
 8000560:	f1c2 020c 	rsb	r2, r2, #12
 8000564:	fa01 f00c 	lsl.w	r0, r1, ip
 8000568:	fa21 f102 	lsr.w	r1, r1, r2
 800056c:	e00c      	b.n	8000588 <__adddf3+0x184>
 800056e:	f102 0214 	add.w	r2, r2, #20
 8000572:	bfd8      	it	le
 8000574:	f1c2 0c20 	rsble	ip, r2, #32
 8000578:	fa01 f102 	lsl.w	r1, r1, r2
 800057c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000580:	bfdc      	itt	le
 8000582:	ea41 010c 	orrle.w	r1, r1, ip
 8000586:	4090      	lslle	r0, r2
 8000588:	1ae4      	subs	r4, r4, r3
 800058a:	bfa2      	ittt	ge
 800058c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000590:	4329      	orrge	r1, r5
 8000592:	bd30      	popge	{r4, r5, pc}
 8000594:	ea6f 0404 	mvn.w	r4, r4
 8000598:	3c1f      	subs	r4, #31
 800059a:	da1c      	bge.n	80005d6 <__adddf3+0x1d2>
 800059c:	340c      	adds	r4, #12
 800059e:	dc0e      	bgt.n	80005be <__adddf3+0x1ba>
 80005a0:	f104 0414 	add.w	r4, r4, #20
 80005a4:	f1c4 0220 	rsb	r2, r4, #32
 80005a8:	fa20 f004 	lsr.w	r0, r0, r4
 80005ac:	fa01 f302 	lsl.w	r3, r1, r2
 80005b0:	ea40 0003 	orr.w	r0, r0, r3
 80005b4:	fa21 f304 	lsr.w	r3, r1, r4
 80005b8:	ea45 0103 	orr.w	r1, r5, r3
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	f1c4 040c 	rsb	r4, r4, #12
 80005c2:	f1c4 0220 	rsb	r2, r4, #32
 80005c6:	fa20 f002 	lsr.w	r0, r0, r2
 80005ca:	fa01 f304 	lsl.w	r3, r1, r4
 80005ce:	ea40 0003 	orr.w	r0, r0, r3
 80005d2:	4629      	mov	r1, r5
 80005d4:	bd30      	pop	{r4, r5, pc}
 80005d6:	fa21 f004 	lsr.w	r0, r1, r4
 80005da:	4629      	mov	r1, r5
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	f094 0f00 	teq	r4, #0
 80005e2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005e6:	bf06      	itte	eq
 80005e8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005ec:	3401      	addeq	r4, #1
 80005ee:	3d01      	subne	r5, #1
 80005f0:	e74e      	b.n	8000490 <__adddf3+0x8c>
 80005f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005f6:	bf18      	it	ne
 80005f8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005fc:	d029      	beq.n	8000652 <__adddf3+0x24e>
 80005fe:	ea94 0f05 	teq	r4, r5
 8000602:	bf08      	it	eq
 8000604:	ea90 0f02 	teqeq	r0, r2
 8000608:	d005      	beq.n	8000616 <__adddf3+0x212>
 800060a:	ea54 0c00 	orrs.w	ip, r4, r0
 800060e:	bf04      	itt	eq
 8000610:	4619      	moveq	r1, r3
 8000612:	4610      	moveq	r0, r2
 8000614:	bd30      	pop	{r4, r5, pc}
 8000616:	ea91 0f03 	teq	r1, r3
 800061a:	bf1e      	ittt	ne
 800061c:	2100      	movne	r1, #0
 800061e:	2000      	movne	r0, #0
 8000620:	bd30      	popne	{r4, r5, pc}
 8000622:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000626:	d105      	bne.n	8000634 <__adddf3+0x230>
 8000628:	0040      	lsls	r0, r0, #1
 800062a:	4149      	adcs	r1, r1
 800062c:	bf28      	it	cs
 800062e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000638:	bf3c      	itt	cc
 800063a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800063e:	bd30      	popcc	{r4, r5, pc}
 8000640:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000644:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000648:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800064c:	f04f 0000 	mov.w	r0, #0
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000656:	bf1a      	itte	ne
 8000658:	4619      	movne	r1, r3
 800065a:	4610      	movne	r0, r2
 800065c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000660:	bf1c      	itt	ne
 8000662:	460b      	movne	r3, r1
 8000664:	4602      	movne	r2, r0
 8000666:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800066a:	bf06      	itte	eq
 800066c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000670:	ea91 0f03 	teqeq	r1, r3
 8000674:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000678:	bd30      	pop	{r4, r5, pc}
 800067a:	bf00      	nop

0800067c <__aeabi_ui2d>:
 800067c:	f090 0f00 	teq	r0, #0
 8000680:	bf04      	itt	eq
 8000682:	2100      	moveq	r1, #0
 8000684:	4770      	bxeq	lr
 8000686:	b530      	push	{r4, r5, lr}
 8000688:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800068c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000690:	f04f 0500 	mov.w	r5, #0
 8000694:	f04f 0100 	mov.w	r1, #0
 8000698:	e750      	b.n	800053c <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_i2d>:
 800069c:	f090 0f00 	teq	r0, #0
 80006a0:	bf04      	itt	eq
 80006a2:	2100      	moveq	r1, #0
 80006a4:	4770      	bxeq	lr
 80006a6:	b530      	push	{r4, r5, lr}
 80006a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006b4:	bf48      	it	mi
 80006b6:	4240      	negmi	r0, r0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e73e      	b.n	800053c <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_f2d>:
 80006c0:	0042      	lsls	r2, r0, #1
 80006c2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006c6:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ca:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006ce:	bf1f      	itttt	ne
 80006d0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006d4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006d8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006dc:	4770      	bxne	lr
 80006de:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006e2:	bf08      	it	eq
 80006e4:	4770      	bxeq	lr
 80006e6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006ea:	bf04      	itt	eq
 80006ec:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006f0:	4770      	bxeq	lr
 80006f2:	b530      	push	{r4, r5, lr}
 80006f4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000700:	e71c      	b.n	800053c <__adddf3+0x138>
 8000702:	bf00      	nop

08000704 <__aeabi_ul2d>:
 8000704:	ea50 0201 	orrs.w	r2, r0, r1
 8000708:	bf08      	it	eq
 800070a:	4770      	bxeq	lr
 800070c:	b530      	push	{r4, r5, lr}
 800070e:	f04f 0500 	mov.w	r5, #0
 8000712:	e00a      	b.n	800072a <__aeabi_l2d+0x16>

08000714 <__aeabi_l2d>:
 8000714:	ea50 0201 	orrs.w	r2, r0, r1
 8000718:	bf08      	it	eq
 800071a:	4770      	bxeq	lr
 800071c:	b530      	push	{r4, r5, lr}
 800071e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000722:	d502      	bpl.n	800072a <__aeabi_l2d+0x16>
 8000724:	4240      	negs	r0, r0
 8000726:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800072a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800072e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000732:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000736:	f43f aed8 	beq.w	80004ea <__adddf3+0xe6>
 800073a:	f04f 0203 	mov.w	r2, #3
 800073e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000742:	bf18      	it	ne
 8000744:	3203      	addne	r2, #3
 8000746:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800074a:	bf18      	it	ne
 800074c:	3203      	addne	r2, #3
 800074e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000752:	f1c2 0320 	rsb	r3, r2, #32
 8000756:	fa00 fc03 	lsl.w	ip, r0, r3
 800075a:	fa20 f002 	lsr.w	r0, r0, r2
 800075e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000762:	ea40 000e 	orr.w	r0, r0, lr
 8000766:	fa21 f102 	lsr.w	r1, r1, r2
 800076a:	4414      	add	r4, r2
 800076c:	e6bd      	b.n	80004ea <__adddf3+0xe6>
 800076e:	bf00      	nop

08000770 <__gedf2>:
 8000770:	f04f 3cff 	mov.w	ip, #4294967295
 8000774:	e006      	b.n	8000784 <__cmpdf2+0x4>
 8000776:	bf00      	nop

08000778 <__ledf2>:
 8000778:	f04f 0c01 	mov.w	ip, #1
 800077c:	e002      	b.n	8000784 <__cmpdf2+0x4>
 800077e:	bf00      	nop

08000780 <__cmpdf2>:
 8000780:	f04f 0c01 	mov.w	ip, #1
 8000784:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000788:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800078c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000790:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000794:	bf18      	it	ne
 8000796:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800079a:	d01b      	beq.n	80007d4 <__cmpdf2+0x54>
 800079c:	b001      	add	sp, #4
 800079e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80007a2:	bf0c      	ite	eq
 80007a4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80007a8:	ea91 0f03 	teqne	r1, r3
 80007ac:	bf02      	ittt	eq
 80007ae:	ea90 0f02 	teqeq	r0, r2
 80007b2:	2000      	moveq	r0, #0
 80007b4:	4770      	bxeq	lr
 80007b6:	f110 0f00 	cmn.w	r0, #0
 80007ba:	ea91 0f03 	teq	r1, r3
 80007be:	bf58      	it	pl
 80007c0:	4299      	cmppl	r1, r3
 80007c2:	bf08      	it	eq
 80007c4:	4290      	cmpeq	r0, r2
 80007c6:	bf2c      	ite	cs
 80007c8:	17d8      	asrcs	r0, r3, #31
 80007ca:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80007ce:	f040 0001 	orr.w	r0, r0, #1
 80007d2:	4770      	bx	lr
 80007d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80007d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007dc:	d102      	bne.n	80007e4 <__cmpdf2+0x64>
 80007de:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80007e2:	d107      	bne.n	80007f4 <__cmpdf2+0x74>
 80007e4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80007e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80007ec:	d1d6      	bne.n	800079c <__cmpdf2+0x1c>
 80007ee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80007f2:	d0d3      	beq.n	800079c <__cmpdf2+0x1c>
 80007f4:	f85d 0b04 	ldr.w	r0, [sp], #4
 80007f8:	4770      	bx	lr
 80007fa:	bf00      	nop

080007fc <__aeabi_cdrcmple>:
 80007fc:	4684      	mov	ip, r0
 80007fe:	4610      	mov	r0, r2
 8000800:	4662      	mov	r2, ip
 8000802:	468c      	mov	ip, r1
 8000804:	4619      	mov	r1, r3
 8000806:	4663      	mov	r3, ip
 8000808:	e000      	b.n	800080c <__aeabi_cdcmpeq>
 800080a:	bf00      	nop

0800080c <__aeabi_cdcmpeq>:
 800080c:	b501      	push	{r0, lr}
 800080e:	f7ff ffb7 	bl	8000780 <__cmpdf2>
 8000812:	2800      	cmp	r0, #0
 8000814:	bf48      	it	mi
 8000816:	f110 0f00 	cmnmi.w	r0, #0
 800081a:	bd01      	pop	{r0, pc}

0800081c <__aeabi_dcmpeq>:
 800081c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000820:	f7ff fff4 	bl	800080c <__aeabi_cdcmpeq>
 8000824:	bf0c      	ite	eq
 8000826:	2001      	moveq	r0, #1
 8000828:	2000      	movne	r0, #0
 800082a:	f85d fb08 	ldr.w	pc, [sp], #8
 800082e:	bf00      	nop

08000830 <__aeabi_dcmplt>:
 8000830:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000834:	f7ff ffea 	bl	800080c <__aeabi_cdcmpeq>
 8000838:	bf34      	ite	cc
 800083a:	2001      	movcc	r0, #1
 800083c:	2000      	movcs	r0, #0
 800083e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000842:	bf00      	nop

08000844 <__aeabi_dcmple>:
 8000844:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000848:	f7ff ffe0 	bl	800080c <__aeabi_cdcmpeq>
 800084c:	bf94      	ite	ls
 800084e:	2001      	movls	r0, #1
 8000850:	2000      	movhi	r0, #0
 8000852:	f85d fb08 	ldr.w	pc, [sp], #8
 8000856:	bf00      	nop

08000858 <__aeabi_dcmpge>:
 8000858:	f84d ed08 	str.w	lr, [sp, #-8]!
 800085c:	f7ff ffce 	bl	80007fc <__aeabi_cdrcmple>
 8000860:	bf94      	ite	ls
 8000862:	2001      	movls	r0, #1
 8000864:	2000      	movhi	r0, #0
 8000866:	f85d fb08 	ldr.w	pc, [sp], #8
 800086a:	bf00      	nop

0800086c <__aeabi_dcmpgt>:
 800086c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000870:	f7ff ffc4 	bl	80007fc <__aeabi_cdrcmple>
 8000874:	bf34      	ite	cc
 8000876:	2001      	movcc	r0, #1
 8000878:	2000      	movcs	r0, #0
 800087a:	f85d fb08 	ldr.w	pc, [sp], #8
 800087e:	bf00      	nop

08000880 <__aeabi_d2f>:
 8000880:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000884:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000888:	bf24      	itt	cs
 800088a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800088e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000892:	d90d      	bls.n	80008b0 <__aeabi_d2f+0x30>
 8000894:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000898:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800089c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 80008a0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 80008a4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 80008a8:	bf08      	it	eq
 80008aa:	f020 0001 	biceq.w	r0, r0, #1
 80008ae:	4770      	bx	lr
 80008b0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80008b4:	d121      	bne.n	80008fa <__aeabi_d2f+0x7a>
 80008b6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80008ba:	bfbc      	itt	lt
 80008bc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80008c0:	4770      	bxlt	lr
 80008c2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008c6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80008ca:	f1c2 0218 	rsb	r2, r2, #24
 80008ce:	f1c2 0c20 	rsb	ip, r2, #32
 80008d2:	fa10 f30c 	lsls.w	r3, r0, ip
 80008d6:	fa20 f002 	lsr.w	r0, r0, r2
 80008da:	bf18      	it	ne
 80008dc:	f040 0001 	orrne.w	r0, r0, #1
 80008e0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80008e4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80008e8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80008ec:	ea40 000c 	orr.w	r0, r0, ip
 80008f0:	fa23 f302 	lsr.w	r3, r3, r2
 80008f4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80008f8:	e7cc      	b.n	8000894 <__aeabi_d2f+0x14>
 80008fa:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80008fe:	d107      	bne.n	8000910 <__aeabi_d2f+0x90>
 8000900:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000904:	bf1e      	ittt	ne
 8000906:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800090a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 800090e:	4770      	bxne	lr
 8000910:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000914:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000918:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800091c:	4770      	bx	lr
 800091e:	bf00      	nop

08000920 <__aeabi_fmul>:
 8000920:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000924:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000928:	bf1e      	ittt	ne
 800092a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800092e:	ea92 0f0c 	teqne	r2, ip
 8000932:	ea93 0f0c 	teqne	r3, ip
 8000936:	d06f      	beq.n	8000a18 <__aeabi_fmul+0xf8>
 8000938:	441a      	add	r2, r3
 800093a:	ea80 0c01 	eor.w	ip, r0, r1
 800093e:	0240      	lsls	r0, r0, #9
 8000940:	bf18      	it	ne
 8000942:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000946:	d01e      	beq.n	8000986 <__aeabi_fmul+0x66>
 8000948:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800094c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000950:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000954:	fba0 3101 	umull	r3, r1, r0, r1
 8000958:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800095c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000960:	bf3e      	ittt	cc
 8000962:	0049      	lslcc	r1, r1, #1
 8000964:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000968:	005b      	lslcc	r3, r3, #1
 800096a:	ea40 0001 	orr.w	r0, r0, r1
 800096e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000972:	2afd      	cmp	r2, #253	; 0xfd
 8000974:	d81d      	bhi.n	80009b2 <__aeabi_fmul+0x92>
 8000976:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800097a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800097e:	bf08      	it	eq
 8000980:	f020 0001 	biceq.w	r0, r0, #1
 8000984:	4770      	bx	lr
 8000986:	f090 0f00 	teq	r0, #0
 800098a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800098e:	bf08      	it	eq
 8000990:	0249      	lsleq	r1, r1, #9
 8000992:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000996:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800099a:	3a7f      	subs	r2, #127	; 0x7f
 800099c:	bfc2      	ittt	gt
 800099e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80009a2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80009a6:	4770      	bxgt	lr
 80009a8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80009ac:	f04f 0300 	mov.w	r3, #0
 80009b0:	3a01      	subs	r2, #1
 80009b2:	dc5d      	bgt.n	8000a70 <__aeabi_fmul+0x150>
 80009b4:	f112 0f19 	cmn.w	r2, #25
 80009b8:	bfdc      	itt	le
 80009ba:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80009be:	4770      	bxle	lr
 80009c0:	f1c2 0200 	rsb	r2, r2, #0
 80009c4:	0041      	lsls	r1, r0, #1
 80009c6:	fa21 f102 	lsr.w	r1, r1, r2
 80009ca:	f1c2 0220 	rsb	r2, r2, #32
 80009ce:	fa00 fc02 	lsl.w	ip, r0, r2
 80009d2:	ea5f 0031 	movs.w	r0, r1, rrx
 80009d6:	f140 0000 	adc.w	r0, r0, #0
 80009da:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80009de:	bf08      	it	eq
 80009e0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80009e4:	4770      	bx	lr
 80009e6:	f092 0f00 	teq	r2, #0
 80009ea:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80009ee:	bf02      	ittt	eq
 80009f0:	0040      	lsleq	r0, r0, #1
 80009f2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80009f6:	3a01      	subeq	r2, #1
 80009f8:	d0f9      	beq.n	80009ee <__aeabi_fmul+0xce>
 80009fa:	ea40 000c 	orr.w	r0, r0, ip
 80009fe:	f093 0f00 	teq	r3, #0
 8000a02:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a06:	bf02      	ittt	eq
 8000a08:	0049      	lsleq	r1, r1, #1
 8000a0a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000a0e:	3b01      	subeq	r3, #1
 8000a10:	d0f9      	beq.n	8000a06 <__aeabi_fmul+0xe6>
 8000a12:	ea41 010c 	orr.w	r1, r1, ip
 8000a16:	e78f      	b.n	8000938 <__aeabi_fmul+0x18>
 8000a18:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a1c:	ea92 0f0c 	teq	r2, ip
 8000a20:	bf18      	it	ne
 8000a22:	ea93 0f0c 	teqne	r3, ip
 8000a26:	d00a      	beq.n	8000a3e <__aeabi_fmul+0x11e>
 8000a28:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000a2c:	bf18      	it	ne
 8000a2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000a32:	d1d8      	bne.n	80009e6 <__aeabi_fmul+0xc6>
 8000a34:	ea80 0001 	eor.w	r0, r0, r1
 8000a38:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000a3c:	4770      	bx	lr
 8000a3e:	f090 0f00 	teq	r0, #0
 8000a42:	bf17      	itett	ne
 8000a44:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000a48:	4608      	moveq	r0, r1
 8000a4a:	f091 0f00 	teqne	r1, #0
 8000a4e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000a52:	d014      	beq.n	8000a7e <__aeabi_fmul+0x15e>
 8000a54:	ea92 0f0c 	teq	r2, ip
 8000a58:	d101      	bne.n	8000a5e <__aeabi_fmul+0x13e>
 8000a5a:	0242      	lsls	r2, r0, #9
 8000a5c:	d10f      	bne.n	8000a7e <__aeabi_fmul+0x15e>
 8000a5e:	ea93 0f0c 	teq	r3, ip
 8000a62:	d103      	bne.n	8000a6c <__aeabi_fmul+0x14c>
 8000a64:	024b      	lsls	r3, r1, #9
 8000a66:	bf18      	it	ne
 8000a68:	4608      	movne	r0, r1
 8000a6a:	d108      	bne.n	8000a7e <__aeabi_fmul+0x15e>
 8000a6c:	ea80 0001 	eor.w	r0, r0, r1
 8000a70:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000a74:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a78:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a7c:	4770      	bx	lr
 8000a7e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a82:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000a86:	4770      	bx	lr

08000a88 <__aeabi_fdiv>:
 8000a88:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000a8c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000a90:	bf1e      	ittt	ne
 8000a92:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000a96:	ea92 0f0c 	teqne	r2, ip
 8000a9a:	ea93 0f0c 	teqne	r3, ip
 8000a9e:	d069      	beq.n	8000b74 <__aeabi_fdiv+0xec>
 8000aa0:	eba2 0203 	sub.w	r2, r2, r3
 8000aa4:	ea80 0c01 	eor.w	ip, r0, r1
 8000aa8:	0249      	lsls	r1, r1, #9
 8000aaa:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000aae:	d037      	beq.n	8000b20 <__aeabi_fdiv+0x98>
 8000ab0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000ab4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ab8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000abc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000ac0:	428b      	cmp	r3, r1
 8000ac2:	bf38      	it	cc
 8000ac4:	005b      	lslcc	r3, r3, #1
 8000ac6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000aca:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ace:	428b      	cmp	r3, r1
 8000ad0:	bf24      	itt	cs
 8000ad2:	1a5b      	subcs	r3, r3, r1
 8000ad4:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ad8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000adc:	bf24      	itt	cs
 8000ade:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ae2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ae6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000aea:	bf24      	itt	cs
 8000aec:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000af0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000af4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000af8:	bf24      	itt	cs
 8000afa:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000afe:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000b02:	011b      	lsls	r3, r3, #4
 8000b04:	bf18      	it	ne
 8000b06:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000b0a:	d1e0      	bne.n	8000ace <__aeabi_fdiv+0x46>
 8000b0c:	2afd      	cmp	r2, #253	; 0xfd
 8000b0e:	f63f af50 	bhi.w	80009b2 <__aeabi_fmul+0x92>
 8000b12:	428b      	cmp	r3, r1
 8000b14:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b18:	bf08      	it	eq
 8000b1a:	f020 0001 	biceq.w	r0, r0, #1
 8000b1e:	4770      	bx	lr
 8000b20:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000b24:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000b28:	327f      	adds	r2, #127	; 0x7f
 8000b2a:	bfc2      	ittt	gt
 8000b2c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000b30:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000b34:	4770      	bxgt	lr
 8000b36:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b3a:	f04f 0300 	mov.w	r3, #0
 8000b3e:	3a01      	subs	r2, #1
 8000b40:	e737      	b.n	80009b2 <__aeabi_fmul+0x92>
 8000b42:	f092 0f00 	teq	r2, #0
 8000b46:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000b4a:	bf02      	ittt	eq
 8000b4c:	0040      	lsleq	r0, r0, #1
 8000b4e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000b52:	3a01      	subeq	r2, #1
 8000b54:	d0f9      	beq.n	8000b4a <__aeabi_fdiv+0xc2>
 8000b56:	ea40 000c 	orr.w	r0, r0, ip
 8000b5a:	f093 0f00 	teq	r3, #0
 8000b5e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b62:	bf02      	ittt	eq
 8000b64:	0049      	lsleq	r1, r1, #1
 8000b66:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000b6a:	3b01      	subeq	r3, #1
 8000b6c:	d0f9      	beq.n	8000b62 <__aeabi_fdiv+0xda>
 8000b6e:	ea41 010c 	orr.w	r1, r1, ip
 8000b72:	e795      	b.n	8000aa0 <__aeabi_fdiv+0x18>
 8000b74:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000b78:	ea92 0f0c 	teq	r2, ip
 8000b7c:	d108      	bne.n	8000b90 <__aeabi_fdiv+0x108>
 8000b7e:	0242      	lsls	r2, r0, #9
 8000b80:	f47f af7d 	bne.w	8000a7e <__aeabi_fmul+0x15e>
 8000b84:	ea93 0f0c 	teq	r3, ip
 8000b88:	f47f af70 	bne.w	8000a6c <__aeabi_fmul+0x14c>
 8000b8c:	4608      	mov	r0, r1
 8000b8e:	e776      	b.n	8000a7e <__aeabi_fmul+0x15e>
 8000b90:	ea93 0f0c 	teq	r3, ip
 8000b94:	d104      	bne.n	8000ba0 <__aeabi_fdiv+0x118>
 8000b96:	024b      	lsls	r3, r1, #9
 8000b98:	f43f af4c 	beq.w	8000a34 <__aeabi_fmul+0x114>
 8000b9c:	4608      	mov	r0, r1
 8000b9e:	e76e      	b.n	8000a7e <__aeabi_fmul+0x15e>
 8000ba0:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ba4:	bf18      	it	ne
 8000ba6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000baa:	d1ca      	bne.n	8000b42 <__aeabi_fdiv+0xba>
 8000bac:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000bb0:	f47f af5c 	bne.w	8000a6c <__aeabi_fmul+0x14c>
 8000bb4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000bb8:	f47f af3c 	bne.w	8000a34 <__aeabi_fmul+0x114>
 8000bbc:	e75f      	b.n	8000a7e <__aeabi_fmul+0x15e>
 8000bbe:	bf00      	nop

08000bc0 <__aeabi_uldivmod>:
 8000bc0:	b953      	cbnz	r3, 8000bd8 <__aeabi_uldivmod+0x18>
 8000bc2:	b94a      	cbnz	r2, 8000bd8 <__aeabi_uldivmod+0x18>
 8000bc4:	2900      	cmp	r1, #0
 8000bc6:	bf08      	it	eq
 8000bc8:	2800      	cmpeq	r0, #0
 8000bca:	bf1c      	itt	ne
 8000bcc:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd0:	f04f 30ff 	movne.w	r0, #4294967295
 8000bd4:	f000 b976 	b.w	8000ec4 <__aeabi_idiv0>
 8000bd8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bdc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be0:	f000 f806 	bl	8000bf0 <__udivmoddi4>
 8000be4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bec:	b004      	add	sp, #16
 8000bee:	4770      	bx	lr

08000bf0 <__udivmoddi4>:
 8000bf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bf4:	9e08      	ldr	r6, [sp, #32]
 8000bf6:	460d      	mov	r5, r1
 8000bf8:	4604      	mov	r4, r0
 8000bfa:	4688      	mov	r8, r1
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d14d      	bne.n	8000c9c <__udivmoddi4+0xac>
 8000c00:	428a      	cmp	r2, r1
 8000c02:	4694      	mov	ip, r2
 8000c04:	d968      	bls.n	8000cd8 <__udivmoddi4+0xe8>
 8000c06:	fab2 f282 	clz	r2, r2
 8000c0a:	b152      	cbz	r2, 8000c22 <__udivmoddi4+0x32>
 8000c0c:	fa01 f302 	lsl.w	r3, r1, r2
 8000c10:	f1c2 0120 	rsb	r1, r2, #32
 8000c14:	fa20 f101 	lsr.w	r1, r0, r1
 8000c18:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c1c:	ea41 0803 	orr.w	r8, r1, r3
 8000c20:	4094      	lsls	r4, r2
 8000c22:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000c26:	fbb8 f7f1 	udiv	r7, r8, r1
 8000c2a:	fa1f fe8c 	uxth.w	lr, ip
 8000c2e:	fb01 8817 	mls	r8, r1, r7, r8
 8000c32:	fb07 f00e 	mul.w	r0, r7, lr
 8000c36:	0c23      	lsrs	r3, r4, #16
 8000c38:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c3c:	4298      	cmp	r0, r3
 8000c3e:	d90a      	bls.n	8000c56 <__udivmoddi4+0x66>
 8000c40:	eb1c 0303 	adds.w	r3, ip, r3
 8000c44:	f107 35ff 	add.w	r5, r7, #4294967295
 8000c48:	f080 811e 	bcs.w	8000e88 <__udivmoddi4+0x298>
 8000c4c:	4298      	cmp	r0, r3
 8000c4e:	f240 811b 	bls.w	8000e88 <__udivmoddi4+0x298>
 8000c52:	3f02      	subs	r7, #2
 8000c54:	4463      	add	r3, ip
 8000c56:	1a1b      	subs	r3, r3, r0
 8000c58:	fbb3 f0f1 	udiv	r0, r3, r1
 8000c5c:	fb01 3310 	mls	r3, r1, r0, r3
 8000c60:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c64:	b2a4      	uxth	r4, r4
 8000c66:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c6a:	45a6      	cmp	lr, r4
 8000c6c:	d90a      	bls.n	8000c84 <__udivmoddi4+0x94>
 8000c6e:	eb1c 0404 	adds.w	r4, ip, r4
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c76:	f080 8109 	bcs.w	8000e8c <__udivmoddi4+0x29c>
 8000c7a:	45a6      	cmp	lr, r4
 8000c7c:	f240 8106 	bls.w	8000e8c <__udivmoddi4+0x29c>
 8000c80:	4464      	add	r4, ip
 8000c82:	3802      	subs	r0, #2
 8000c84:	2100      	movs	r1, #0
 8000c86:	eba4 040e 	sub.w	r4, r4, lr
 8000c8a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c8e:	b11e      	cbz	r6, 8000c98 <__udivmoddi4+0xa8>
 8000c90:	2300      	movs	r3, #0
 8000c92:	40d4      	lsrs	r4, r2
 8000c94:	e9c6 4300 	strd	r4, r3, [r6]
 8000c98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9c:	428b      	cmp	r3, r1
 8000c9e:	d908      	bls.n	8000cb2 <__udivmoddi4+0xc2>
 8000ca0:	2e00      	cmp	r6, #0
 8000ca2:	f000 80ee 	beq.w	8000e82 <__udivmoddi4+0x292>
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	e9c6 0500 	strd	r0, r5, [r6]
 8000cac:	4608      	mov	r0, r1
 8000cae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb2:	fab3 f183 	clz	r1, r3
 8000cb6:	2900      	cmp	r1, #0
 8000cb8:	d14a      	bne.n	8000d50 <__udivmoddi4+0x160>
 8000cba:	42ab      	cmp	r3, r5
 8000cbc:	d302      	bcc.n	8000cc4 <__udivmoddi4+0xd4>
 8000cbe:	4282      	cmp	r2, r0
 8000cc0:	f200 80fc 	bhi.w	8000ebc <__udivmoddi4+0x2cc>
 8000cc4:	1a84      	subs	r4, r0, r2
 8000cc6:	eb65 0303 	sbc.w	r3, r5, r3
 8000cca:	2001      	movs	r0, #1
 8000ccc:	4698      	mov	r8, r3
 8000cce:	2e00      	cmp	r6, #0
 8000cd0:	d0e2      	beq.n	8000c98 <__udivmoddi4+0xa8>
 8000cd2:	e9c6 4800 	strd	r4, r8, [r6]
 8000cd6:	e7df      	b.n	8000c98 <__udivmoddi4+0xa8>
 8000cd8:	b902      	cbnz	r2, 8000cdc <__udivmoddi4+0xec>
 8000cda:	deff      	udf	#255	; 0xff
 8000cdc:	fab2 f282 	clz	r2, r2
 8000ce0:	2a00      	cmp	r2, #0
 8000ce2:	f040 8091 	bne.w	8000e08 <__udivmoddi4+0x218>
 8000ce6:	eba1 000c 	sub.w	r0, r1, ip
 8000cea:	2101      	movs	r1, #1
 8000cec:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cf0:	fa1f fe8c 	uxth.w	lr, ip
 8000cf4:	fbb0 f3f7 	udiv	r3, r0, r7
 8000cf8:	fb07 0013 	mls	r0, r7, r3, r0
 8000cfc:	0c25      	lsrs	r5, r4, #16
 8000cfe:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000d02:	fb0e f003 	mul.w	r0, lr, r3
 8000d06:	42a8      	cmp	r0, r5
 8000d08:	d908      	bls.n	8000d1c <__udivmoddi4+0x12c>
 8000d0a:	eb1c 0505 	adds.w	r5, ip, r5
 8000d0e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d12:	d202      	bcs.n	8000d1a <__udivmoddi4+0x12a>
 8000d14:	42a8      	cmp	r0, r5
 8000d16:	f200 80ce 	bhi.w	8000eb6 <__udivmoddi4+0x2c6>
 8000d1a:	4643      	mov	r3, r8
 8000d1c:	1a2d      	subs	r5, r5, r0
 8000d1e:	fbb5 f0f7 	udiv	r0, r5, r7
 8000d22:	fb07 5510 	mls	r5, r7, r0, r5
 8000d26:	fb0e fe00 	mul.w	lr, lr, r0
 8000d2a:	b2a4      	uxth	r4, r4
 8000d2c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d30:	45a6      	cmp	lr, r4
 8000d32:	d908      	bls.n	8000d46 <__udivmoddi4+0x156>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 35ff 	add.w	r5, r0, #4294967295
 8000d3c:	d202      	bcs.n	8000d44 <__udivmoddi4+0x154>
 8000d3e:	45a6      	cmp	lr, r4
 8000d40:	f200 80b6 	bhi.w	8000eb0 <__udivmoddi4+0x2c0>
 8000d44:	4628      	mov	r0, r5
 8000d46:	eba4 040e 	sub.w	r4, r4, lr
 8000d4a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d4e:	e79e      	b.n	8000c8e <__udivmoddi4+0x9e>
 8000d50:	f1c1 0720 	rsb	r7, r1, #32
 8000d54:	408b      	lsls	r3, r1
 8000d56:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d5a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d5e:	fa25 fa07 	lsr.w	sl, r5, r7
 8000d62:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d66:	fbba f8f9 	udiv	r8, sl, r9
 8000d6a:	fa20 f307 	lsr.w	r3, r0, r7
 8000d6e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000d72:	408d      	lsls	r5, r1
 8000d74:	fa1f fe8c 	uxth.w	lr, ip
 8000d78:	431d      	orrs	r5, r3
 8000d7a:	fa00 f301 	lsl.w	r3, r0, r1
 8000d7e:	fb08 f00e 	mul.w	r0, r8, lr
 8000d82:	0c2c      	lsrs	r4, r5, #16
 8000d84:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000d88:	42a0      	cmp	r0, r4
 8000d8a:	fa02 f201 	lsl.w	r2, r2, r1
 8000d8e:	d90b      	bls.n	8000da8 <__udivmoddi4+0x1b8>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d98:	f080 8088 	bcs.w	8000eac <__udivmoddi4+0x2bc>
 8000d9c:	42a0      	cmp	r0, r4
 8000d9e:	f240 8085 	bls.w	8000eac <__udivmoddi4+0x2bc>
 8000da2:	f1a8 0802 	sub.w	r8, r8, #2
 8000da6:	4464      	add	r4, ip
 8000da8:	1a24      	subs	r4, r4, r0
 8000daa:	fbb4 f0f9 	udiv	r0, r4, r9
 8000dae:	fb09 4410 	mls	r4, r9, r0, r4
 8000db2:	fb00 fe0e 	mul.w	lr, r0, lr
 8000db6:	b2ad      	uxth	r5, r5
 8000db8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000dbc:	45a6      	cmp	lr, r4
 8000dbe:	d908      	bls.n	8000dd2 <__udivmoddi4+0x1e2>
 8000dc0:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc4:	f100 35ff 	add.w	r5, r0, #4294967295
 8000dc8:	d26c      	bcs.n	8000ea4 <__udivmoddi4+0x2b4>
 8000dca:	45a6      	cmp	lr, r4
 8000dcc:	d96a      	bls.n	8000ea4 <__udivmoddi4+0x2b4>
 8000dce:	3802      	subs	r0, #2
 8000dd0:	4464      	add	r4, ip
 8000dd2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dd6:	fba0 9502 	umull	r9, r5, r0, r2
 8000dda:	eba4 040e 	sub.w	r4, r4, lr
 8000dde:	42ac      	cmp	r4, r5
 8000de0:	46c8      	mov	r8, r9
 8000de2:	46ae      	mov	lr, r5
 8000de4:	d356      	bcc.n	8000e94 <__udivmoddi4+0x2a4>
 8000de6:	d053      	beq.n	8000e90 <__udivmoddi4+0x2a0>
 8000de8:	2e00      	cmp	r6, #0
 8000dea:	d069      	beq.n	8000ec0 <__udivmoddi4+0x2d0>
 8000dec:	ebb3 0208 	subs.w	r2, r3, r8
 8000df0:	eb64 040e 	sbc.w	r4, r4, lr
 8000df4:	fa22 f301 	lsr.w	r3, r2, r1
 8000df8:	fa04 f707 	lsl.w	r7, r4, r7
 8000dfc:	431f      	orrs	r7, r3
 8000dfe:	40cc      	lsrs	r4, r1
 8000e00:	e9c6 7400 	strd	r7, r4, [r6]
 8000e04:	2100      	movs	r1, #0
 8000e06:	e747      	b.n	8000c98 <__udivmoddi4+0xa8>
 8000e08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e0c:	f1c2 0120 	rsb	r1, r2, #32
 8000e10:	fa25 f301 	lsr.w	r3, r5, r1
 8000e14:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e18:	fa20 f101 	lsr.w	r1, r0, r1
 8000e1c:	4095      	lsls	r5, r2
 8000e1e:	430d      	orrs	r5, r1
 8000e20:	fbb3 f1f7 	udiv	r1, r3, r7
 8000e24:	fb07 3311 	mls	r3, r7, r1, r3
 8000e28:	fa1f fe8c 	uxth.w	lr, ip
 8000e2c:	0c28      	lsrs	r0, r5, #16
 8000e2e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e32:	fb01 f30e 	mul.w	r3, r1, lr
 8000e36:	4283      	cmp	r3, r0
 8000e38:	fa04 f402 	lsl.w	r4, r4, r2
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x260>
 8000e3e:	eb1c 0000 	adds.w	r0, ip, r0
 8000e42:	f101 38ff 	add.w	r8, r1, #4294967295
 8000e46:	d22f      	bcs.n	8000ea8 <__udivmoddi4+0x2b8>
 8000e48:	4283      	cmp	r3, r0
 8000e4a:	d92d      	bls.n	8000ea8 <__udivmoddi4+0x2b8>
 8000e4c:	3902      	subs	r1, #2
 8000e4e:	4460      	add	r0, ip
 8000e50:	1ac0      	subs	r0, r0, r3
 8000e52:	fbb0 f3f7 	udiv	r3, r0, r7
 8000e56:	fb07 0013 	mls	r0, r7, r3, r0
 8000e5a:	b2ad      	uxth	r5, r5
 8000e5c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000e60:	fb03 f00e 	mul.w	r0, r3, lr
 8000e64:	42a8      	cmp	r0, r5
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x28a>
 8000e68:	eb1c 0505 	adds.w	r5, ip, r5
 8000e6c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e70:	d216      	bcs.n	8000ea0 <__udivmoddi4+0x2b0>
 8000e72:	42a8      	cmp	r0, r5
 8000e74:	d914      	bls.n	8000ea0 <__udivmoddi4+0x2b0>
 8000e76:	3b02      	subs	r3, #2
 8000e78:	4465      	add	r5, ip
 8000e7a:	1a28      	subs	r0, r5, r0
 8000e7c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000e80:	e738      	b.n	8000cf4 <__udivmoddi4+0x104>
 8000e82:	4631      	mov	r1, r6
 8000e84:	4630      	mov	r0, r6
 8000e86:	e707      	b.n	8000c98 <__udivmoddi4+0xa8>
 8000e88:	462f      	mov	r7, r5
 8000e8a:	e6e4      	b.n	8000c56 <__udivmoddi4+0x66>
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	e6f9      	b.n	8000c84 <__udivmoddi4+0x94>
 8000e90:	454b      	cmp	r3, r9
 8000e92:	d2a9      	bcs.n	8000de8 <__udivmoddi4+0x1f8>
 8000e94:	ebb9 0802 	subs.w	r8, r9, r2
 8000e98:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e9c:	3801      	subs	r0, #1
 8000e9e:	e7a3      	b.n	8000de8 <__udivmoddi4+0x1f8>
 8000ea0:	4643      	mov	r3, r8
 8000ea2:	e7ea      	b.n	8000e7a <__udivmoddi4+0x28a>
 8000ea4:	4628      	mov	r0, r5
 8000ea6:	e794      	b.n	8000dd2 <__udivmoddi4+0x1e2>
 8000ea8:	4641      	mov	r1, r8
 8000eaa:	e7d1      	b.n	8000e50 <__udivmoddi4+0x260>
 8000eac:	46d0      	mov	r8, sl
 8000eae:	e77b      	b.n	8000da8 <__udivmoddi4+0x1b8>
 8000eb0:	4464      	add	r4, ip
 8000eb2:	3802      	subs	r0, #2
 8000eb4:	e747      	b.n	8000d46 <__udivmoddi4+0x156>
 8000eb6:	3b02      	subs	r3, #2
 8000eb8:	4465      	add	r5, ip
 8000eba:	e72f      	b.n	8000d1c <__udivmoddi4+0x12c>
 8000ebc:	4608      	mov	r0, r1
 8000ebe:	e706      	b.n	8000cce <__udivmoddi4+0xde>
 8000ec0:	4631      	mov	r1, r6
 8000ec2:	e6e9      	b.n	8000c98 <__udivmoddi4+0xa8>

08000ec4 <__aeabi_idiv0>:
 8000ec4:	4770      	bx	lr
 8000ec6:	bf00      	nop

08000ec8 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000ec8:	b530      	push	{r4, r5, lr}

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000eca:	2400      	movs	r4, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000ecc:	4815      	ldr	r0, [pc, #84]	; (8000f24 <MX_ADC_Init+0x5c>)
 8000ece:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <MX_ADC_Init+0x60>)
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
  hadc.Init.ContinuousConvMode = DISABLE;
  hadc.Init.NbrOfConversion = 1;
 8000ed0:	2501      	movs	r5, #1
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000ed2:	e9c0 3400 	strd	r3, r4, [r0]
  hadc.Init.DiscontinuousConvMode = DISABLE;
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ed6:	2310      	movs	r3, #16
{
 8000ed8:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8000eda:	e9cd 4401 	strd	r4, r4, [sp, #4]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ede:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000ee2:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8000ee6:	e9c0 4406 	strd	r4, r4, [r0, #24]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000eea:	e9c0 340d 	strd	r3, r4, [r0, #52]	; 0x34
  ADC_ChannelConfTypeDef sConfig = {0};
 8000eee:	9403      	str	r4, [sp, #12]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8000ef0:	6204      	str	r4, [r0, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000ef2:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 8000ef6:	6285      	str	r5, [r0, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000ef8:	f880 402c 	strb.w	r4, [r0, #44]	; 0x2c
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000efc:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000f00:	f000 fbf6 	bl	80016f0 <HAL_ADC_Init>
 8000f04:	b108      	cbz	r0, 8000f0a <MX_ADC_Init+0x42>
  {
    Error_Handler();
 8000f06:	f000 f9b3 	bl	8001270 <Error_Handler>
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f0a:	4806      	ldr	r0, [pc, #24]	; (8000f24 <MX_ADC_Init+0x5c>)
 8000f0c:	a901      	add	r1, sp, #4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f0e:	e9cd 4501 	strd	r4, r5, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8000f12:	9403      	str	r4, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000f14:	f000 fd08 	bl	8001928 <HAL_ADC_ConfigChannel>
 8000f18:	b108      	cbz	r0, 8000f1e <MX_ADC_Init+0x56>
  {
    Error_Handler();
 8000f1a:	f000 f9a9 	bl	8001270 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000f1e:	b005      	add	sp, #20
 8000f20:	bd30      	pop	{r4, r5, pc}
 8000f22:	bf00      	nop
 8000f24:	20000124 	.word	0x20000124
 8000f28:	40012400 	.word	0x40012400

08000f2c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000f2c:	b510      	push	{r4, lr}
 8000f2e:	4604      	mov	r4, r0
 8000f30:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f32:	2214      	movs	r2, #20
 8000f34:	2100      	movs	r1, #0
 8000f36:	a803      	add	r0, sp, #12
 8000f38:	f005 fa4a 	bl	80063d0 <memset>
  if(adcHandle->Instance==ADC1)
 8000f3c:	6822      	ldr	r2, [r4, #0]
 8000f3e:	4b10      	ldr	r3, [pc, #64]	; (8000f80 <HAL_ADC_MspInit+0x54>)
 8000f40:	429a      	cmp	r2, r3
 8000f42:	d11b      	bne.n	8000f7c <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f44:	f503 338a 	add.w	r3, r3, #70656	; 0x11400
 8000f48:	6a1a      	ldr	r2, [r3, #32]
    PA0-WKUP1     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = ADC_VBAT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(ADC_VBAT_GPIO_Port, &GPIO_InitStruct);
 8000f4a:	480e      	ldr	r0, [pc, #56]	; (8000f84 <HAL_ADC_MspInit+0x58>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000f50:	621a      	str	r2, [r3, #32]
 8000f52:	6a1a      	ldr	r2, [r3, #32]
    HAL_GPIO_Init(ADC_VBAT_GPIO_Port, &GPIO_InitStruct);
 8000f54:	a903      	add	r1, sp, #12
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000f56:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000f5a:	9201      	str	r2, [sp, #4]
 8000f5c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f5e:	69da      	ldr	r2, [r3, #28]
 8000f60:	f042 0201 	orr.w	r2, r2, #1
 8000f64:	61da      	str	r2, [r3, #28]
 8000f66:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f68:	2201      	movs	r2, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	9302      	str	r3, [sp, #8]
 8000f70:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f72:	2303      	movs	r3, #3
 8000f74:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(ADC_VBAT_GPIO_Port, &GPIO_InitStruct);
 8000f78:	f000 ff02 	bl	8001d80 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000f7c:	b008      	add	sp, #32
 8000f7e:	bd10      	pop	{r4, pc}
 8000f80:	40012400 	.word	0x40012400
 8000f84:	40020000 	.word	0x40020000

08000f88 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f88:	4b0a      	ldr	r3, [pc, #40]	; (8000fb4 <MX_DMA_Init+0x2c>)
{
 8000f8a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f8c:	69da      	ldr	r2, [r3, #28]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 6, 0);
 8000f8e:	2106      	movs	r1, #6
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f90:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000f94:	61da      	str	r2, [r3, #28]
 8000f96:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 6, 0);
 8000f98:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000f9a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000f9e:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 6, 0);
 8000fa0:	2010      	movs	r0, #16
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fa2:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 6, 0);
 8000fa4:	f000 fdf2 	bl	8001b8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000fa8:	2010      	movs	r0, #16

}
 8000faa:	b003      	add	sp, #12
 8000fac:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000fb0:	f000 be1e 	b.w	8001bf0 <HAL_NVIC_EnableIRQ>
 8000fb4:	40023800 	.word	0x40023800

08000fb8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000fbc:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fbe:	2214      	movs	r2, #20
 8000fc0:	2100      	movs	r1, #0
 8000fc2:	a803      	add	r0, sp, #12
 8000fc4:	f005 fa04 	bl	80063d0 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fc8:	4b4f      	ldr	r3, [pc, #316]	; (8001108 <MX_GPIO_Init+0x150>)
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, COL0_Pin|COL1_Pin|COL2_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 8000fca:	4d50      	ldr	r5, [pc, #320]	; (800110c <MX_GPIO_Init+0x154>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fcc:	69da      	ldr	r2, [r3, #28]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWRKEY_GPIO_Port, PWRKEY_Pin, GPIO_PIN_RESET);
 8000fce:	4f50      	ldr	r7, [pc, #320]	; (8001110 <MX_GPIO_Init+0x158>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fd0:	f042 0201 	orr.w	r2, r2, #1
 8000fd4:	61da      	str	r2, [r3, #28]
 8000fd6:	69da      	ldr	r2, [r3, #28]
  HAL_GPIO_WritePin(GPIOB, COL0_Pin|COL1_Pin|COL2_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 8000fd8:	4628      	mov	r0, r5
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fda:	f002 0201 	and.w	r2, r2, #1
 8000fde:	9201      	str	r2, [sp, #4]
 8000fe0:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe2:	69da      	ldr	r2, [r3, #28]
  HAL_GPIO_WritePin(GPIOB, COL0_Pin|COL1_Pin|COL2_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 8000fe4:	f247 0140 	movw	r1, #28736	; 0x7040
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fe8:	f042 0202 	orr.w	r2, r2, #2
 8000fec:	61da      	str	r2, [r3, #28]
 8000fee:	69db      	ldr	r3, [r3, #28]
  HAL_GPIO_WritePin(GPIOB, COL0_Pin|COL1_Pin|COL2_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 8000ff0:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff2:	f003 0302 	and.w	r3, r3, #2
 8000ff6:	9302      	str	r3, [sp, #8]
 8000ff8:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, COL0_Pin|COL1_Pin|COL2_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 8000ffa:	f000 ff8d 	bl	8001f18 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PWRKEY_GPIO_Port, PWRKEY_Pin, GPIO_PIN_RESET);
 8000ffe:	2200      	movs	r2, #0
 8001000:	4638      	mov	r0, r7
 8001002:	f44f 4100 	mov.w	r1, #32768	; 0x8000

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SENS0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001006:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(PWRKEY_GPIO_Port, PWRKEY_Pin, GPIO_PIN_RESET);
 8001008:	f000 ff86 	bl	8001f18 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800100c:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(SENS0_GPIO_Port, &GPIO_InitStruct);
 800100e:	4638      	mov	r0, r7
 8001010:	a903      	add	r1, sp, #12

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SENS1_Pin|SENS2_Pin|SENS3_Pin|SENS4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001012:	f44f 1688 	mov.w	r6, #1114112	; 0x110000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001016:	e9cd 3403 	strd	r3, r4, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(SENS0_GPIO_Port, &GPIO_InitStruct);
 800101c:	f000 feb0 	bl	8001d80 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001020:	23f0      	movs	r3, #240	; 0xf0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001022:	4638      	mov	r0, r7
 8001024:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001026:	e9cd 3603 	strd	r3, r6, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102a:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800102c:	f000 fea8 	bl	8001d80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SENS5_Pin|SENS6_Pin|SENS7_Pin|SENS8_Pin
 8001030:	f640 4307 	movw	r3, #3079	; 0xc07
                          |SENS9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001034:	4628      	mov	r0, r5
 8001036:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001038:	e9cd 3603 	strd	r3, r6, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800103c:	9405      	str	r4, [sp, #20]

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = COL0_Pin|COL1_Pin|COL2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800103e:	2601      	movs	r6, #1
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001040:	f000 fe9e 	bl	8001d80 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001044:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8001048:	e9cd 3603 	strd	r3, r6, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800104c:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ROW0_Pin;
 800104e:	f44f 4800 	mov.w	r8, #32768	; 0x8000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001052:	4628      	mov	r0, r5
 8001054:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001056:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001058:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105a:	f000 fe91 	bl	8001d80 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(ROW0_GPIO_Port, &GPIO_InitStruct);
 800105e:	4628      	mov	r0, r5
 8001060:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001062:	e9cd 8403 	strd	r8, r4, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001066:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(ROW0_GPIO_Port, &GPIO_InitStruct);
 8001068:	f000 fe8a 	bl	8001d80 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ROW1_Pin|ROW2_Pin|ROW3_Pin;
 800106c:	f44f 63e0 	mov.w	r3, #1792	; 0x700
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001070:	4638      	mov	r0, r7
 8001072:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001074:	e9cd 3403 	strd	r3, r4, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001078:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800107a:	f000 fe81 	bl	8001d80 <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWRKEY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(PWRKEY_GPIO_Port, &GPIO_InitStruct);
 800107e:	4638      	mov	r0, r7
 8001080:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001082:	e9cd 8603 	strd	r8, r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001086:	e9cd 4405 	strd	r4, r4, [sp, #20]
  HAL_GPIO_Init(PWRKEY_GPIO_Port, &GPIO_InitStruct);
 800108a:	f000 fe79 	bl	8001d80 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 800108e:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8001090:	4628      	mov	r0, r5
 8001092:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001094:	e9cd 3603 	strd	r3, r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001098:	e9cd 4405 	strd	r4, r4, [sp, #20]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 800109c:	f000 fe70 	bl	8001d80 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80010a0:	4622      	mov	r2, r4
 80010a2:	4621      	mov	r1, r4
 80010a4:	2006      	movs	r0, #6
 80010a6:	f000 fd71 	bl	8001b8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80010aa:	2006      	movs	r0, #6
 80010ac:	f000 fda0 	bl	8001bf0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 80010b0:	4622      	mov	r2, r4
 80010b2:	4621      	mov	r1, r4
 80010b4:	2007      	movs	r0, #7
 80010b6:	f000 fd69 	bl	8001b8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80010ba:	2007      	movs	r0, #7
 80010bc:	f000 fd98 	bl	8001bf0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 80010c0:	4622      	mov	r2, r4
 80010c2:	4621      	mov	r1, r4
 80010c4:	2008      	movs	r0, #8
 80010c6:	f000 fd61 	bl	8001b8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80010ca:	2008      	movs	r0, #8
 80010cc:	f000 fd90 	bl	8001bf0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 80010d0:	4622      	mov	r2, r4
 80010d2:	4621      	mov	r1, r4
 80010d4:	200a      	movs	r0, #10
 80010d6:	f000 fd59 	bl	8001b8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 80010da:	200a      	movs	r0, #10
 80010dc:	f000 fd88 	bl	8001bf0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80010e0:	4622      	mov	r2, r4
 80010e2:	4621      	mov	r1, r4
 80010e4:	2017      	movs	r0, #23
 80010e6:	f000 fd51 	bl	8001b8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80010ea:	2017      	movs	r0, #23
 80010ec:	f000 fd80 	bl	8001bf0 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80010f0:	4622      	mov	r2, r4
 80010f2:	4621      	mov	r1, r4
 80010f4:	2028      	movs	r0, #40	; 0x28
 80010f6:	f000 fd49 	bl	8001b8c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80010fa:	2028      	movs	r0, #40	; 0x28
 80010fc:	f000 fd78 	bl	8001bf0 <HAL_NVIC_EnableIRQ>

}
 8001100:	b008      	add	sp, #32
 8001102:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001106:	bf00      	nop
 8001108:	40023800 	.word	0x40023800
 800110c:	40020400 	.word	0x40020400
 8001110:	40020000 	.word	0x40020000

08001114 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001114:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001116:	480b      	ldr	r0, [pc, #44]	; (8001144 <MX_I2C1_Init+0x30>)
  hi2c1.Init.ClockSpeed = 100000;
 8001118:	4a0b      	ldr	r2, [pc, #44]	; (8001148 <MX_I2C1_Init+0x34>)
 800111a:	4b0c      	ldr	r3, [pc, #48]	; (800114c <MX_I2C1_Init+0x38>)
 800111c:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001120:	2300      	movs	r3, #0
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001122:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 8001126:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800112a:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800112e:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001132:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001134:	f001 f804 	bl	8002140 <HAL_I2C_Init>
 8001138:	b118      	cbz	r0, 8001142 <MX_I2C1_Init+0x2e>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800113a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800113e:	f000 b897 	b.w	8001270 <Error_Handler>
}
 8001142:	bd08      	pop	{r3, pc}
 8001144:	20000178 	.word	0x20000178
 8001148:	40005400 	.word	0x40005400
 800114c:	000186a0 	.word	0x000186a0

08001150 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001150:	b510      	push	{r4, lr}
 8001152:	4604      	mov	r4, r0
 8001154:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001156:	2214      	movs	r2, #20
 8001158:	2100      	movs	r1, #0
 800115a:	a803      	add	r0, sp, #12
 800115c:	f005 f938 	bl	80063d0 <memset>
  if(i2cHandle->Instance==I2C1)
 8001160:	6822      	ldr	r2, [r4, #0]
 8001162:	4b12      	ldr	r3, [pc, #72]	; (80011ac <HAL_I2C_MspInit+0x5c>)
 8001164:	429a      	cmp	r2, r3
 8001166:	d11f      	bne.n	80011a8 <HAL_I2C_MspInit+0x58>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001168:	4c11      	ldr	r4, [pc, #68]	; (80011b0 <HAL_I2C_MspInit+0x60>)
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800116a:	f44f 7240 	mov.w	r2, #768	; 0x300
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800116e:	69e3      	ldr	r3, [r4, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001170:	2103      	movs	r1, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001172:	f043 0302 	orr.w	r3, r3, #2
 8001176:	61e3      	str	r3, [r4, #28]
 8001178:	69e3      	ldr	r3, [r4, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800117a:	480e      	ldr	r0, [pc, #56]	; (80011b4 <HAL_I2C_MspInit+0x64>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800117c:	f003 0302 	and.w	r3, r3, #2
 8001180:	9301      	str	r3, [sp, #4]
 8001182:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001184:	2312      	movs	r3, #18
 8001186:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800118a:	2304      	movs	r3, #4
 800118c:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001190:	a903      	add	r1, sp, #12
 8001192:	f000 fdf5 	bl	8001d80 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001196:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001198:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800119c:	6263      	str	r3, [r4, #36]	; 0x24
 800119e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80011a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011a4:	9302      	str	r3, [sp, #8]
 80011a6:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80011a8:	b008      	add	sp, #32
 80011aa:	bd10      	pop	{r4, pc}
 80011ac:	40005400 	.word	0x40005400
 80011b0:	40023800 	.word	0x40023800
 80011b4:	40020400 	.word	0x40020400

080011b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011b8:	b510      	push	{r4, lr}
 80011ba:	b092      	sub	sp, #72	; 0x48
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011bc:	2220      	movs	r2, #32
 80011be:	2100      	movs	r1, #0
 80011c0:	a806      	add	r0, sp, #24
 80011c2:	f005 f905 	bl	80063d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011c6:	2214      	movs	r2, #20
 80011c8:	2100      	movs	r1, #0
 80011ca:	4668      	mov	r0, sp
 80011cc:	f005 f900 	bl	80063d0 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011d0:	4a15      	ldr	r2, [pc, #84]	; (8001228 <SystemClock_Config+0x70>)
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80011d2:	2100      	movs	r1, #0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011d4:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011d6:	2401      	movs	r4, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011d8:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 80011dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011e0:	6013      	str	r3, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011e2:	2302      	movs	r3, #2
 80011e4:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011e6:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80011e8:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011ec:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 80011ee:	e9cd 130f 	strd	r1, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 80011f2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011f6:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011f8:	e9cd 4208 	strd	r4, r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 80011fc:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011fe:	f001 facf 	bl	80027a0 <HAL_RCC_OscConfig>
 8001202:	b108      	cbz	r0, 8001208 <SystemClock_Config+0x50>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001204:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001206:	e7fe      	b.n	8001206 <SystemClock_Config+0x4e>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001208:	220f      	movs	r2, #15
 800120a:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800120c:	e9cd 0002 	strd	r0, r0, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001210:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001212:	4621      	mov	r1, r4
 8001214:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001216:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800121a:	f001 fd13 	bl	8002c44 <HAL_RCC_ClockConfig>
 800121e:	b108      	cbz	r0, 8001224 <SystemClock_Config+0x6c>
 8001220:	b672      	cpsid	i
  while (1)
 8001222:	e7fe      	b.n	8001222 <SystemClock_Config+0x6a>
}
 8001224:	b012      	add	sp, #72	; 0x48
 8001226:	bd10      	pop	{r4, pc}
 8001228:	40007000 	.word	0x40007000

0800122c <main>:
{
 800122c:	b508      	push	{r3, lr}
  HAL_Init();
 800122e:	f000 fa3e 	bl	80016ae <HAL_Init>
  SystemClock_Config();
 8001232:	f7ff ffc1 	bl	80011b8 <SystemClock_Config>
  MX_GPIO_Init();
 8001236:	f7ff febf 	bl	8000fb8 <MX_GPIO_Init>
  MX_DMA_Init();
 800123a:	f7ff fea5 	bl	8000f88 <MX_DMA_Init>
  MX_ADC_Init();
 800123e:	f7ff fe43 	bl	8000ec8 <MX_ADC_Init>
  MX_TIM4_Init();
 8001242:	f000 f96b 	bl	800151c <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8001246:	f000 f9a3 	bl	8001590 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 800124a:	f7ff ff63 	bl	8001114 <MX_I2C1_Init>
  MX_SPI1_Init();
 800124e:	f000 f811 	bl	8001274 <MX_SPI1_Init>
  app_main();
 8001252:	f003 ff29 	bl	80050a8 <app_main>
	  __NOP();
 8001256:	bf00      	nop
  while (1)
 8001258:	e7fd      	b.n	8001256 <main+0x2a>
	...

0800125c <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM6) {
 800125c:	6802      	ldr	r2, [r0, #0]
 800125e:	4b03      	ldr	r3, [pc, #12]	; (800126c <HAL_TIM_PeriodElapsedCallback+0x10>)
 8001260:	429a      	cmp	r2, r3
 8001262:	d101      	bne.n	8001268 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 8001264:	f000 ba32 	b.w	80016cc <HAL_IncTick>
}
 8001268:	4770      	bx	lr
 800126a:	bf00      	nop
 800126c:	40001000 	.word	0x40001000

08001270 <Error_Handler>:
 8001270:	b672      	cpsid	i
  while (1)
 8001272:	e7fe      	b.n	8001272 <Error_Handler+0x2>

08001274 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001274:	b508      	push	{r3, lr}

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001276:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi1.Instance = SPI1;
 800127a:	480d      	ldr	r0, [pc, #52]	; (80012b0 <MX_SPI1_Init+0x3c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800127c:	4a0d      	ldr	r2, [pc, #52]	; (80012b4 <MX_SPI1_Init+0x40>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800127e:	f44f 7100 	mov.w	r1, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001282:	e9c0 2300 	strd	r2, r3, [r0]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001286:	2300      	movs	r3, #0
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001288:	2220      	movs	r2, #32
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800128a:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800128e:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001292:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001296:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001298:	230a      	movs	r3, #10
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800129a:	e9c0 1206 	strd	r1, r2, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 800129e:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80012a0:	f001 fe7c 	bl	8002f9c <HAL_SPI_Init>
 80012a4:	b118      	cbz	r0, 80012ae <MX_SPI1_Init+0x3a>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80012a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80012aa:	f7ff bfe1 	b.w	8001270 <Error_Handler>
}
 80012ae:	bd08      	pop	{r3, pc}
 80012b0:	200001cc 	.word	0x200001cc
 80012b4:	40013000 	.word	0x40013000

080012b8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80012b8:	b510      	push	{r4, lr}
 80012ba:	4604      	mov	r4, r0
 80012bc:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012be:	2214      	movs	r2, #20
 80012c0:	2100      	movs	r1, #0
 80012c2:	a803      	add	r0, sp, #12
 80012c4:	f005 f884 	bl	80063d0 <memset>
  if(spiHandle->Instance==SPI1)
 80012c8:	6822      	ldr	r2, [r4, #0]
 80012ca:	4b12      	ldr	r3, [pc, #72]	; (8001314 <HAL_SPI_MspInit+0x5c>)
 80012cc:	429a      	cmp	r2, r3
 80012ce:	d11f      	bne.n	8001310 <HAL_SPI_MspInit+0x58>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012d0:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 80012d4:	6a1a      	ldr	r2, [r3, #32]
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80012d6:	2103      	movs	r1, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012d8:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80012dc:	621a      	str	r2, [r3, #32]
 80012de:	6a1a      	ldr	r2, [r3, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e0:	480d      	ldr	r0, [pc, #52]	; (8001318 <HAL_SPI_MspInit+0x60>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 80012e2:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80012e6:	9201      	str	r2, [sp, #4]
 80012e8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ea:	69da      	ldr	r2, [r3, #28]
 80012ec:	f042 0202 	orr.w	r2, r2, #2
 80012f0:	61da      	str	r2, [r3, #28]
 80012f2:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012f4:	2238      	movs	r2, #56	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	9302      	str	r3, [sp, #8]
 80012fc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012fe:	2302      	movs	r3, #2
 8001300:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001304:	2305      	movs	r3, #5
 8001306:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800130a:	a903      	add	r1, sp, #12
 800130c:	f000 fd38 	bl	8001d80 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001310:	b008      	add	sp, #32
 8001312:	bd10      	pop	{r4, pc}
 8001314:	40013000 	.word	0x40013000
 8001318:	40020400 	.word	0x40020400

0800131c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800131c:	4b0f      	ldr	r3, [pc, #60]	; (800135c <HAL_MspInit+0x40>)
{
 800131e:	b084      	sub	sp, #16
  __HAL_RCC_COMP_CLK_ENABLE();
 8001320:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001322:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001326:	625a      	str	r2, [r3, #36]	; 0x24
 8001328:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800132a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800132e:	9201      	str	r2, [sp, #4]
 8001330:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001332:	6a1a      	ldr	r2, [r3, #32]
 8001334:	f042 0201 	orr.w	r2, r2, #1
 8001338:	621a      	str	r2, [r3, #32]
 800133a:	6a1a      	ldr	r2, [r3, #32]
 800133c:	f002 0201 	and.w	r2, r2, #1
 8001340:	9202      	str	r2, [sp, #8]
 8001342:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001344:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001346:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800134a:	625a      	str	r2, [r3, #36]	; 0x24
 800134c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800134e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001352:	9303      	str	r3, [sp, #12]
 8001354:	9b03      	ldr	r3, [sp, #12]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001356:	b004      	add	sp, #16
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	40023800 	.word	0x40023800

08001360 <HAL_InitTick>:
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001360:	4b20      	ldr	r3, [pc, #128]	; (80013e4 <HAL_InitTick+0x84>)
{
 8001362:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001364:	6a5a      	ldr	r2, [r3, #36]	; 0x24
{
 8001366:	b088      	sub	sp, #32
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001368:	f042 0210 	orr.w	r2, r2, #16
 800136c:	625a      	str	r2, [r3, #36]	; 0x24
 800136e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
{
 8001370:	4605      	mov	r5, r0
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001372:	f003 0310 	and.w	r3, r3, #16
 8001376:	9302      	str	r3, [sp, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001378:	a901      	add	r1, sp, #4
 800137a:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 800137c:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800137e:	f001 fd43 	bl	8002e08 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001382:	9b06      	ldr	r3, [sp, #24]
 8001384:	bb43      	cbnz	r3, 80013d8 <HAL_InitTick+0x78>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001386:	f001 fd1f 	bl	8002dc8 <HAL_RCC_GetPCLK1Freq>

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800138a:	4e17      	ldr	r6, [pc, #92]	; (80013e8 <HAL_InitTick+0x88>)
 800138c:	4b17      	ldr	r3, [pc, #92]	; (80013ec <HAL_InitTick+0x8c>)
 800138e:	6033      	str	r3, [r6, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001390:	f240 33e7 	movw	r3, #999	; 0x3e7
 8001394:	60f3      	str	r3, [r6, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001396:	4b16      	ldr	r3, [pc, #88]	; (80013f0 <HAL_InitTick+0x90>)
 8001398:	fbb0 f3f3 	udiv	r3, r0, r3
 800139c:	3b01      	subs	r3, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 800139e:	6073      	str	r3, [r6, #4]
  htim6.Init.ClockDivision = 0;
 80013a0:	2300      	movs	r3, #0
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;

  status = HAL_TIM_Base_Init(&htim6);
 80013a2:	4630      	mov	r0, r6
  htim6.Init.ClockDivision = 0;
 80013a4:	6133      	str	r3, [r6, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013a6:	60b3      	str	r3, [r6, #8]
  status = HAL_TIM_Base_Init(&htim6);
 80013a8:	f002 f909 	bl	80035be <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 80013ac:	4604      	mov	r4, r0
 80013ae:	b980      	cbnz	r0, 80013d2 <HAL_InitTick+0x72>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80013b0:	4630      	mov	r0, r6
 80013b2:	f002 f929 	bl	8003608 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 80013b6:	4604      	mov	r4, r0
 80013b8:	b958      	cbnz	r0, 80013d2 <HAL_InitTick+0x72>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80013ba:	202b      	movs	r0, #43	; 0x2b
 80013bc:	f000 fc18 	bl	8001bf0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013c0:	2d0f      	cmp	r5, #15
 80013c2:	d80d      	bhi.n	80013e0 <HAL_InitTick+0x80>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 80013c4:	4622      	mov	r2, r4
 80013c6:	4629      	mov	r1, r5
 80013c8:	202b      	movs	r0, #43	; 0x2b
 80013ca:	f000 fbdf 	bl	8001b8c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013ce:	4b09      	ldr	r3, [pc, #36]	; (80013f4 <HAL_InitTick+0x94>)
 80013d0:	601d      	str	r5, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 80013d2:	4620      	mov	r0, r4
 80013d4:	b008      	add	sp, #32
 80013d6:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80013d8:	f001 fcf6 	bl	8002dc8 <HAL_RCC_GetPCLK1Freq>
 80013dc:	0040      	lsls	r0, r0, #1
 80013de:	e7d4      	b.n	800138a <HAL_InitTick+0x2a>
        status = HAL_ERROR;
 80013e0:	2401      	movs	r4, #1
 80013e2:	e7f6      	b.n	80013d2 <HAL_InitTick+0x72>
 80013e4:	40023800 	.word	0x40023800
 80013e8:	20000224 	.word	0x20000224
 80013ec:	40001000 	.word	0x40001000
 80013f0:	000f4240 	.word	0x000f4240
 80013f4:	20000008 	.word	0x20000008

080013f8 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013f8:	e7fe      	b.n	80013f8 <NMI_Handler>

080013fa <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013fa:	e7fe      	b.n	80013fa <HardFault_Handler>

080013fc <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013fc:	e7fe      	b.n	80013fc <MemManage_Handler>

080013fe <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013fe:	e7fe      	b.n	80013fe <BusFault_Handler>

08001400 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001400:	e7fe      	b.n	8001400 <UsageFault_Handler>

08001402 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001402:	4770      	bx	lr

08001404 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SENS5_Pin);
 8001404:	2001      	movs	r0, #1
 8001406:	f000 bd8d 	b.w	8001f24 <HAL_GPIO_EXTI_IRQHandler>

0800140a <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SENS6_Pin);
 800140a:	2002      	movs	r0, #2
 800140c:	f000 bd8a 	b.w	8001f24 <HAL_GPIO_EXTI_IRQHandler>

08001410 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SENS7_Pin);
 8001410:	2004      	movs	r0, #4
 8001412:	f000 bd87 	b.w	8001f24 <HAL_GPIO_EXTI_IRQHandler>

08001416 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SENS1_Pin);
 8001416:	2010      	movs	r0, #16
 8001418:	f000 bd84 	b.w	8001f24 <HAL_GPIO_EXTI_IRQHandler>

0800141c <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800141c:	4801      	ldr	r0, [pc, #4]	; (8001424 <DMA1_Channel6_IRQHandler+0x8>)
 800141e:	f000 bc65 	b.w	8001cec <HAL_DMA_IRQHandler>
 8001422:	bf00      	nop
 8001424:	200002a8 	.word	0x200002a8

08001428 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001428:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SENS2_Pin);
 800142a:	2020      	movs	r0, #32
 800142c:	f000 fd7a 	bl	8001f24 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SENS3_Pin);
 8001430:	2040      	movs	r0, #64	; 0x40
 8001432:	f000 fd77 	bl	8001f24 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SENS4_Pin);
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001436:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(SENS4_Pin);
 800143a:	2080      	movs	r0, #128	; 0x80
 800143c:	f000 bd72 	b.w	8001f24 <HAL_GPIO_EXTI_IRQHandler>

08001440 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001440:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SENS8_Pin);
 8001442:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001446:	f000 fd6d 	bl	8001f24 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SENS9_Pin);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800144a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(SENS9_Pin);
 800144e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001452:	f000 bd67 	b.w	8001f24 <HAL_GPIO_EXTI_IRQHandler>
	...

08001458 <TIM6_IRQHandler>:
void TIM6_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001458:	4801      	ldr	r0, [pc, #4]	; (8001460 <TIM6_IRQHandler+0x8>)
 800145a:	f002 ba17 	b.w	800388c <HAL_TIM_IRQHandler>
 800145e:	bf00      	nop
 8001460:	20000224 	.word	0x20000224

08001464 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001464:	4a0b      	ldr	r2, [pc, #44]	; (8001494 <_sbrk+0x30>)
{
 8001466:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001468:	6811      	ldr	r1, [r2, #0]
{
 800146a:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 800146c:	b909      	cbnz	r1, 8001472 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 800146e:	490a      	ldr	r1, [pc, #40]	; (8001498 <_sbrk+0x34>)
 8001470:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001472:	6810      	ldr	r0, [r2, #0]
 8001474:	4909      	ldr	r1, [pc, #36]	; (800149c <_sbrk+0x38>)
 8001476:	4c0a      	ldr	r4, [pc, #40]	; (80014a0 <_sbrk+0x3c>)
 8001478:	4403      	add	r3, r0
 800147a:	1b09      	subs	r1, r1, r4
 800147c:	428b      	cmp	r3, r1
 800147e:	d906      	bls.n	800148e <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001480:	f004 ff6e 	bl	8006360 <__errno>
 8001484:	230c      	movs	r3, #12
 8001486:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001488:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 800148c:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 800148e:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001490:	e7fc      	b.n	800148c <_sbrk+0x28>
 8001492:	bf00      	nop
 8001494:	20000264 	.word	0x20000264
 8001498:	20002e10 	.word	0x20002e10
 800149c:	20004000 	.word	0x20004000
 80014a0:	00000400 	.word	0x00000400

080014a4 <SystemInit>:
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80014a4:	4770      	bx	lr
	...

080014a8 <HAL_TIM_PWM_MspInit>:
}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM4)
 80014a8:	6802      	ldr	r2, [r0, #0]
 80014aa:	4b08      	ldr	r3, [pc, #32]	; (80014cc <HAL_TIM_PWM_MspInit+0x24>)
{
 80014ac:	b082      	sub	sp, #8
  if(tim_pwmHandle->Instance==TIM4)
 80014ae:	429a      	cmp	r2, r3
 80014b0:	d10a      	bne.n	80014c8 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80014b2:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80014b6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014b8:	f042 0204 	orr.w	r2, r2, #4
 80014bc:	625a      	str	r2, [r3, #36]	; 0x24
 80014be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80014c0:	f003 0304 	and.w	r3, r3, #4
 80014c4:	9301      	str	r3, [sp, #4]
 80014c6:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80014c8:	b002      	add	sp, #8
 80014ca:	4770      	bx	lr
 80014cc:	40000800 	.word	0x40000800

080014d0 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80014d0:	b510      	push	{r4, lr}
 80014d2:	4604      	mov	r4, r0
 80014d4:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d6:	2214      	movs	r2, #20
 80014d8:	2100      	movs	r1, #0
 80014da:	a801      	add	r0, sp, #4
 80014dc:	f004 ff78 	bl	80063d0 <memset>
  if(timHandle->Instance==TIM4)
 80014e0:	6822      	ldr	r2, [r4, #0]
 80014e2:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <HAL_TIM_MspPostInit+0x44>)
 80014e4:	429a      	cmp	r2, r3
 80014e6:	d113      	bne.n	8001510 <HAL_TIM_MspPostInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014e8:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80014ec:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014ee:	480a      	ldr	r0, [pc, #40]	; (8001518 <HAL_TIM_MspPostInit+0x48>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014f0:	f042 0202 	orr.w	r2, r2, #2
 80014f4:	61da      	str	r2, [r3, #28]
 80014f6:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f8:	2280      	movs	r2, #128	; 0x80
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	9300      	str	r3, [sp, #0]
 8001500:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001502:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001504:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001506:	e9cd 2301 	strd	r2, r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800150a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800150c:	f000 fc38 	bl	8001d80 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001510:	b006      	add	sp, #24
 8001512:	bd10      	pop	{r4, pc}
 8001514:	40000800 	.word	0x40000800
 8001518:	40020400 	.word	0x40020400

0800151c <MX_TIM4_Init>:
{
 800151c:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800151e:	2400      	movs	r4, #0
{
 8001520:	b086      	sub	sp, #24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001522:	4621      	mov	r1, r4
 8001524:	2210      	movs	r2, #16
 8001526:	a802      	add	r0, sp, #8
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001528:	e9cd 4400 	strd	r4, r4, [sp]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800152c:	f004 ff50 	bl	80063d0 <memset>
  htim4.Init.Prescaler = 32;
 8001530:	2320      	movs	r3, #32
  htim4.Instance = TIM4;
 8001532:	4815      	ldr	r0, [pc, #84]	; (8001588 <MX_TIM4_Init+0x6c>)
  htim4.Init.Prescaler = 32;
 8001534:	4915      	ldr	r1, [pc, #84]	; (800158c <MX_TIM4_Init+0x70>)
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001536:	6084      	str	r4, [r0, #8]
  htim4.Init.Prescaler = 32;
 8001538:	e9c0 1300 	strd	r1, r3, [r0]
  htim4.Init.Period = 137;
 800153c:	2389      	movs	r3, #137	; 0x89
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800153e:	e9c0 3403 	strd	r3, r4, [r0, #12]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001542:	2380      	movs	r3, #128	; 0x80
 8001544:	6143      	str	r3, [r0, #20]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001546:	f002 f8f4 	bl	8003732 <HAL_TIM_PWM_Init>
 800154a:	b108      	cbz	r0, 8001550 <MX_TIM4_Init+0x34>
    Error_Handler();
 800154c:	f7ff fe90 	bl	8001270 <Error_Handler>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001550:	4669      	mov	r1, sp
 8001552:	480d      	ldr	r0, [pc, #52]	; (8001588 <MX_TIM4_Init+0x6c>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001554:	e9cd 4400 	strd	r4, r4, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001558:	f002 fa1e 	bl	8003998 <HAL_TIMEx_MasterConfigSynchronization>
 800155c:	b108      	cbz	r0, 8001562 <MX_TIM4_Init+0x46>
    Error_Handler();
 800155e:	f7ff fe87 	bl	8001270 <Error_Handler>
  sConfigOC.Pulse = 0;
 8001562:	2260      	movs	r2, #96	; 0x60
 8001564:	2300      	movs	r3, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001566:	4808      	ldr	r0, [pc, #32]	; (8001588 <MX_TIM4_Init+0x6c>)
  sConfigOC.Pulse = 0;
 8001568:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800156c:	a902      	add	r1, sp, #8
 800156e:	2204      	movs	r2, #4
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001570:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001574:	f002 f905 	bl	8003782 <HAL_TIM_PWM_ConfigChannel>
 8001578:	b108      	cbz	r0, 800157e <MX_TIM4_Init+0x62>
    Error_Handler();
 800157a:	f7ff fe79 	bl	8001270 <Error_Handler>
  HAL_TIM_MspPostInit(&htim4);
 800157e:	4802      	ldr	r0, [pc, #8]	; (8001588 <MX_TIM4_Init+0x6c>)
 8001580:	f7ff ffa6 	bl	80014d0 <HAL_TIM_MspPostInit>
}
 8001584:	b006      	add	sp, #24
 8001586:	bd10      	pop	{r4, pc}
 8001588:	20000268 	.word	0x20000268
 800158c:	40000800 	.word	0x40000800

08001590 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001590:	b508      	push	{r3, lr}

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
 8001592:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart2.Instance = USART2;
 8001596:	480a      	ldr	r0, [pc, #40]	; (80015c0 <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 8001598:	4a0a      	ldr	r2, [pc, #40]	; (80015c4 <MX_USART2_UART_Init+0x34>)
 800159a:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800159e:	2300      	movs	r3, #0
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015a0:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015a2:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015a6:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015aa:	6103      	str	r3, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015ac:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015ae:	f002 fab3 	bl	8003b18 <HAL_UART_Init>
 80015b2:	b118      	cbz	r0, 80015bc <MX_USART2_UART_Init+0x2c>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015b4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80015b8:	f7ff be5a 	b.w	8001270 <Error_Handler>
}
 80015bc:	bd08      	pop	{r3, pc}
 80015be:	bf00      	nop
 80015c0:	200002ec 	.word	0x200002ec
 80015c4:	40004400 	.word	0x40004400

080015c8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015c8:	b530      	push	{r4, r5, lr}
 80015ca:	4605      	mov	r5, r0
 80015cc:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ce:	2214      	movs	r2, #20
 80015d0:	2100      	movs	r1, #0
 80015d2:	a803      	add	r0, sp, #12
 80015d4:	f004 fefc 	bl	80063d0 <memset>
  if(uartHandle->Instance==USART2)
 80015d8:	682a      	ldr	r2, [r5, #0]
 80015da:	4b1e      	ldr	r3, [pc, #120]	; (8001654 <HAL_UART_MspInit+0x8c>)
 80015dc:	429a      	cmp	r2, r3
 80015de:	d136      	bne.n	800164e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80015e0:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80015e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015e6:	2103      	movs	r1, #3
    __HAL_RCC_USART2_CLK_ENABLE();
 80015e8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80015ec:	625a      	str	r2, [r3, #36]	; 0x24
 80015ee:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f0:	4819      	ldr	r0, [pc, #100]	; (8001658 <HAL_UART_MspInit+0x90>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80015f2:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80015f6:	9201      	str	r2, [sp, #4]
 80015f8:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fa:	69da      	ldr	r2, [r3, #28]

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 80015fc:	4c17      	ldr	r4, [pc, #92]	; (800165c <HAL_UART_MspInit+0x94>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fe:	f042 0201 	orr.w	r2, r2, #1
 8001602:	61da      	str	r2, [r3, #28]
 8001604:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001606:	220c      	movs	r2, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001608:	f003 0301 	and.w	r3, r3, #1
 800160c:	9302      	str	r3, [sp, #8]
 800160e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001610:	2302      	movs	r3, #2
 8001612:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001616:	2307      	movs	r3, #7
 8001618:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800161c:	a903      	add	r1, sp, #12
 800161e:	f000 fbaf 	bl	8001d80 <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001622:	2300      	movs	r3, #0
 8001624:	480e      	ldr	r0, [pc, #56]	; (8001660 <HAL_UART_MspInit+0x98>)
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_rx.Init.MemInc = DMA_MINC_DISABLE;
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001626:	f04f 0c20 	mov.w	ip, #32
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800162a:	e9c4 0300 	strd	r0, r3, [r4]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_DISABLE;
 800162e:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001632:	e9c4 3304 	strd	r3, r3, [r4, #16]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001636:	f44f 5340 	mov.w	r3, #12288	; 0x3000
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800163a:	4620      	mov	r0, r4
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800163c:	e9c4 c306 	strd	ip, r3, [r4, #24]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001640:	f000 fae4 	bl	8001c0c <HAL_DMA_Init>
 8001644:	b108      	cbz	r0, 800164a <HAL_UART_MspInit+0x82>
    {
      Error_Handler();
 8001646:	f7ff fe13 	bl	8001270 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800164a:	63ac      	str	r4, [r5, #56]	; 0x38
 800164c:	6265      	str	r5, [r4, #36]	; 0x24

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800164e:	b009      	add	sp, #36	; 0x24
 8001650:	bd30      	pop	{r4, r5, pc}
 8001652:	bf00      	nop
 8001654:	40004400 	.word	0x40004400
 8001658:	40020000 	.word	0x40020000
 800165c:	200002a8 	.word	0x200002a8
 8001660:	4002606c 	.word	0x4002606c

08001664 <Reset_Handler>:
 8001664:	480c      	ldr	r0, [pc, #48]	; (8001698 <LoopFillZerobss+0x12>)
 8001666:	490d      	ldr	r1, [pc, #52]	; (800169c <LoopFillZerobss+0x16>)
 8001668:	4a0d      	ldr	r2, [pc, #52]	; (80016a0 <LoopFillZerobss+0x1a>)
 800166a:	2300      	movs	r3, #0
 800166c:	e002      	b.n	8001674 <LoopCopyDataInit>

0800166e <CopyDataInit>:
 800166e:	58d4      	ldr	r4, [r2, r3]
 8001670:	50c4      	str	r4, [r0, r3]
 8001672:	3304      	adds	r3, #4

08001674 <LoopCopyDataInit>:
 8001674:	18c4      	adds	r4, r0, r3
 8001676:	428c      	cmp	r4, r1
 8001678:	d3f9      	bcc.n	800166e <CopyDataInit>
 800167a:	4a0a      	ldr	r2, [pc, #40]	; (80016a4 <LoopFillZerobss+0x1e>)
 800167c:	4c0a      	ldr	r4, [pc, #40]	; (80016a8 <LoopFillZerobss+0x22>)
 800167e:	2300      	movs	r3, #0
 8001680:	e001      	b.n	8001686 <LoopFillZerobss>

08001682 <FillZerobss>:
 8001682:	6013      	str	r3, [r2, #0]
 8001684:	3204      	adds	r2, #4

08001686 <LoopFillZerobss>:
 8001686:	42a2      	cmp	r2, r4
 8001688:	d3fb      	bcc.n	8001682 <FillZerobss>
 800168a:	f7ff ff0b 	bl	80014a4 <SystemInit>
 800168e:	f004 fe6d 	bl	800636c <__libc_init_array>
 8001692:	f7ff fdcb 	bl	800122c <main>
 8001696:	4770      	bx	lr
 8001698:	20000000 	.word	0x20000000
 800169c:	20000108 	.word	0x20000108
 80016a0:	08007994 	.word	0x08007994
 80016a4:	20000108 	.word	0x20000108
 80016a8:	20002e0c 	.word	0x20002e0c

080016ac <ADC1_IRQHandler>:
 80016ac:	e7fe      	b.n	80016ac <ADC1_IRQHandler>

080016ae <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016ae:	b510      	push	{r4, lr}
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016b0:	2003      	movs	r0, #3
 80016b2:	f000 fa59 	bl	8001b68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016b6:	200f      	movs	r0, #15
 80016b8:	f7ff fe52 	bl	8001360 <HAL_InitTick>
 80016bc:	4604      	mov	r4, r0
 80016be:	b918      	cbnz	r0, 80016c8 <HAL_Init+0x1a>
    status = HAL_ERROR;
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016c0:	f7ff fe2c 	bl	800131c <HAL_MspInit>
  }

  /* Return function status */
  return status;
}
 80016c4:	4620      	mov	r0, r4
 80016c6:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 80016c8:	2401      	movs	r4, #1
 80016ca:	e7fb      	b.n	80016c4 <HAL_Init+0x16>

080016cc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 80016cc:	4a03      	ldr	r2, [pc, #12]	; (80016dc <HAL_IncTick+0x10>)
 80016ce:	4904      	ldr	r1, [pc, #16]	; (80016e0 <HAL_IncTick+0x14>)
 80016d0:	6813      	ldr	r3, [r2, #0]
 80016d2:	6809      	ldr	r1, [r1, #0]
 80016d4:	440b      	add	r3, r1
 80016d6:	6013      	str	r3, [r2, #0]
}
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	20000330 	.word	0x20000330
 80016e0:	20000004 	.word	0x20000004

080016e4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80016e4:	4b01      	ldr	r3, [pc, #4]	; (80016ec <HAL_GetTick+0x8>)
 80016e6:	6818      	ldr	r0, [r3, #0]
}
 80016e8:	4770      	bx	lr
 80016ea:	bf00      	nop
 80016ec:	20000330 	.word	0x20000330

080016f0 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80016f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cr1 = 0;
  uint32_t tmp_cr2 = 0;
  
  /* Check ADC handle */
  if(hadc == NULL)
 80016f2:	4604      	mov	r4, r0
 80016f4:	b908      	cbnz	r0, 80016fa <HAL_ADC_Init+0xa>
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
      
      tmp_hal_status = HAL_ERROR;
 80016f6:	2001      	movs	r0, #1
 80016f8:	e095      	b.n	8001826 <HAL_ADC_Init+0x136>
  if (hadc->State == HAL_ADC_STATE_RESET)
 80016fa:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80016fc:	b973      	cbnz	r3, 800171c <HAL_ADC_Init+0x2c>
    ADC_CLEAR_ERRORCODE(hadc);
 80016fe:	6503      	str	r3, [r0, #80]	; 0x50
    hadc->Lock = HAL_UNLOCKED;
 8001700:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001704:	4b56      	ldr	r3, [pc, #344]	; (8001860 <HAL_ADC_Init+0x170>)
 8001706:	6a1a      	ldr	r2, [r3, #32]
 8001708:	f042 0201 	orr.w	r2, r2, #1
 800170c:	621a      	str	r2, [r3, #32]
 800170e:	6a1b      	ldr	r3, [r3, #32]
 8001710:	f003 0301 	and.w	r3, r3, #1
 8001714:	9301      	str	r3, [sp, #4]
 8001716:	9b01      	ldr	r3, [sp, #4]
    HAL_ADC_MspInit(hadc);
 8001718:	f7ff fc08 	bl	8000f2c <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800171c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800171e:	06db      	lsls	r3, r3, #27
 8001720:	d4e9      	bmi.n	80016f6 <HAL_ADC_Init+0x6>
    ADC_STATE_CLR_SET(hadc->State,
 8001722:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    MODIFY_REG(ADC->CCR                 ,
 8001724:	4a4f      	ldr	r2, [pc, #316]	; (8001864 <HAL_ADC_Init+0x174>)
    ADC_STATE_CLR_SET(hadc->State,
 8001726:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800172a:	f023 0302 	bic.w	r3, r3, #2
 800172e:	f043 0302 	orr.w	r3, r3, #2
 8001732:	64e3      	str	r3, [r4, #76]	; 0x4c
    MODIFY_REG(ADC->CCR                 ,
 8001734:	6853      	ldr	r3, [r2, #4]
 8001736:	6861      	ldr	r1, [r4, #4]
 8001738:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800173c:	430b      	orrs	r3, r1
 800173e:	6053      	str	r3, [r2, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001740:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001744:	fa91 f1a1 	rbit	r1, r1
 8001748:	2302      	movs	r3, #2
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800174a:	fab1 f181 	clz	r1, r1
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 800174e:	f894 5024 	ldrb.w	r5, [r4, #36]	; 0x24
 8001752:	fa93 f3a3 	rbit	r3, r3
 8001756:	fab3 f383 	clz	r3, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800175a:	6960      	ldr	r0, [r4, #20]
 800175c:	68e2      	ldr	r2, [r4, #12]
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 800175e:	fa05 f303 	lsl.w	r3, r5, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001762:	4302      	orrs	r2, r0
 8001764:	6a20      	ldr	r0, [r4, #32]
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8001766:	6926      	ldr	r6, [r4, #16]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8001768:	4302      	orrs	r2, r0
 800176a:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
 800176e:	fa00 f101 	lsl.w	r1, r0, r1
 8001772:	430a      	orrs	r2, r1
                hadc->Init.ChannelsBank                                        |
 8001774:	4313      	orrs	r3, r2
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001776:	6b62      	ldr	r2, [r4, #52]	; 0x34
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8001778:	6820      	ldr	r0, [r4, #0]
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800177a:	2a10      	cmp	r2, #16
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 800177c:	bf1c      	itt	ne
 800177e:	6ba1      	ldrne	r1, [r4, #56]	; 0x38
 8001780:	430a      	orrne	r2, r1
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8001782:	6801      	ldr	r1, [r0, #0]
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 8001784:	bf18      	it	ne
 8001786:	4313      	orrne	r3, r2
    if ((ADC_IS_ENABLE(hadc) == RESET))
 8001788:	f011 0140 	ands.w	r1, r1, #64	; 0x40
 800178c:	d124      	bne.n	80017d8 <HAL_ADC_Init+0xe8>
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 800178e:	69a2      	ldr	r2, [r4, #24]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001790:	69e7      	ldr	r7, [r4, #28]
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 8001792:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8001794:	68a2      	ldr	r2, [r4, #8]
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 8001796:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800179a:	ea42 0207 	orr.w	r2, r2, r7
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 800179e:	d044      	beq.n	800182a <HAL_ADC_Init+0x13a>
 80017a0:	2e01      	cmp	r6, #1
 80017a2:	bf08      	it	eq
 80017a4:	f44f 7180 	moveq.w	r1, #256	; 0x100
                  hadc->Init.LowPowerAutoPowerOff           |
 80017a8:	430a      	orrs	r2, r1
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80017aa:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80017ae:	2901      	cmp	r1, #1
 80017b0:	d10d      	bne.n	80017ce <HAL_ADC_Init+0xde>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80017b2:	2d00      	cmp	r5, #0
 80017b4:	d13b      	bne.n	800182e <HAL_ADC_Init+0x13e>
 80017b6:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80017ba:	fa91 f1a1 	rbit	r1, r1
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80017be:	fab1 f581 	clz	r5, r1
 80017c2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80017c4:	3901      	subs	r1, #1
 80017c6:	40a9      	lsls	r1, r5
 80017c8:	430a      	orrs	r2, r1
 80017ca:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
        MODIFY_REG(hadc->Instance->CR1,
 80017ce:	6845      	ldr	r5, [r0, #4]
 80017d0:	4925      	ldr	r1, [pc, #148]	; (8001868 <HAL_ADC_Init+0x178>)
 80017d2:	4029      	ands	r1, r5
 80017d4:	430a      	orrs	r2, r1
 80017d6:	6042      	str	r2, [r0, #4]
    MODIFY_REG(hadc->Instance->CR2    ,
 80017d8:	6881      	ldr	r1, [r0, #8]
 80017da:	4a24      	ldr	r2, [pc, #144]	; (800186c <HAL_ADC_Init+0x17c>)
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80017dc:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
    MODIFY_REG(hadc->Instance->CR2    ,
 80017e0:	ea02 0201 	and.w	r2, r2, r1
 80017e4:	ea42 0203 	orr.w	r2, r2, r3
 80017e8:	6082      	str	r2, [r0, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80017ea:	d001      	beq.n	80017f0 <HAL_ADC_Init+0x100>
 80017ec:	2e01      	cmp	r6, #1
 80017ee:	d127      	bne.n	8001840 <HAL_ADC_Init+0x150>
      MODIFY_REG(hadc->Instance->SQR1                         ,
 80017f0:	6b05      	ldr	r5, [r0, #48]	; 0x30
 80017f2:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 80017f6:	fa92 f2a2 	rbit	r2, r2
 80017fa:	fab2 f182 	clz	r1, r2
 80017fe:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001800:	3a01      	subs	r2, #1
 8001802:	408a      	lsls	r2, r1
 8001804:	f025 71f8 	bic.w	r1, r5, #32505856	; 0x1f00000
 8001808:	430a      	orrs	r2, r1
      MODIFY_REG(hadc->Instance->SQR1,
 800180a:	6302      	str	r2, [r0, #48]	; 0x30
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 800180c:	6881      	ldr	r1, [r0, #8]
 800180e:	4a18      	ldr	r2, [pc, #96]	; (8001870 <HAL_ADC_Init+0x180>)
 8001810:	400a      	ands	r2, r1
 8001812:	429a      	cmp	r2, r3
 8001814:	d118      	bne.n	8001848 <HAL_ADC_Init+0x158>
      ADC_CLEAR_ERRORCODE(hadc);
 8001816:	2000      	movs	r0, #0
 8001818:	6520      	str	r0, [r4, #80]	; 0x50
      ADC_STATE_CLR_SET(hadc->State,
 800181a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800181c:	f023 0303 	bic.w	r3, r3, #3
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	64e3      	str	r3, [r4, #76]	; 0x4c
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8001826:	b003      	add	sp, #12
 8001828:	bdf0      	pop	{r4, r5, r6, r7, pc}
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 800182a:	4631      	mov	r1, r6
 800182c:	e7bc      	b.n	80017a8 <HAL_ADC_Init+0xb8>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800182e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8001830:	f041 0120 	orr.w	r1, r1, #32
 8001834:	64e1      	str	r1, [r4, #76]	; 0x4c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001836:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001838:	f041 0101 	orr.w	r1, r1, #1
 800183c:	6521      	str	r1, [r4, #80]	; 0x50
 800183e:	e7c6      	b.n	80017ce <HAL_ADC_Init+0xde>
      MODIFY_REG(hadc->Instance->SQR1,
 8001840:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8001842:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8001846:	e7e0      	b.n	800180a <HAL_ADC_Init+0x11a>
      ADC_STATE_CLR_SET(hadc->State,
 8001848:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800184a:	f023 0312 	bic.w	r3, r3, #18
 800184e:	f043 0310 	orr.w	r3, r3, #16
 8001852:	64e3      	str	r3, [r4, #76]	; 0x4c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001854:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001856:	f043 0301 	orr.w	r3, r3, #1
 800185a:	6523      	str	r3, [r4, #80]	; 0x50
 800185c:	e74b      	b.n	80016f6 <HAL_ADC_Init+0x6>
 800185e:	bf00      	nop
 8001860:	40023800 	.word	0x40023800
 8001864:	40012700 	.word	0x40012700
 8001868:	fcfc16ff 	.word	0xfcfc16ff
 800186c:	c0fff18d 	.word	0xc0fff18d
 8001870:	bf80fffe 	.word	0xbf80fffe

08001874 <HAL_ADC_PollForConversion>:
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001874:	6803      	ldr	r3, [r0, #0]
{
 8001876:	b570      	push	{r4, r5, r6, lr}
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001878:	689a      	ldr	r2, [r3, #8]
{
 800187a:	4604      	mov	r4, r0
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800187c:	0552      	lsls	r2, r2, #21
{
 800187e:	460d      	mov	r5, r1
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001880:	d50b      	bpl.n	800189a <HAL_ADC_PollForConversion+0x26>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001882:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001884:	05de      	lsls	r6, r3, #23
 8001886:	d508      	bpl.n	800189a <HAL_ADC_PollForConversion+0x26>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001888:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800188a:	f043 0320 	orr.w	r3, r3, #32
 800188e:	64c3      	str	r3, [r0, #76]	; 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001890:	2300      	movs	r3, #0
 8001892:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
    
    return HAL_ERROR;
 8001896:	2001      	movs	r0, #1
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
}
 8001898:	bd70      	pop	{r4, r5, r6, pc}
  tickstart = HAL_GetTick();
 800189a:	f7ff ff23 	bl	80016e4 <HAL_GetTick>
 800189e:	4606      	mov	r6, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80018a0:	6823      	ldr	r3, [r4, #0]
 80018a2:	681a      	ldr	r2, [r3, #0]
 80018a4:	0791      	lsls	r1, r2, #30
 80018a6:	d50e      	bpl.n	80018c6 <HAL_ADC_PollForConversion+0x52>
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80018a8:	69a2      	ldr	r2, [r4, #24]
 80018aa:	b912      	cbnz	r2, 80018b2 <HAL_ADC_PollForConversion+0x3e>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80018ac:	f06f 0212 	mvn.w	r2, #18
 80018b0:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80018b2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80018b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018b8:	64e2      	str	r2, [r4, #76]	; 0x4c
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018ba:	689a      	ldr	r2, [r3, #8]
 80018bc:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 80018c0:	d017      	beq.n	80018f2 <HAL_ADC_PollForConversion+0x7e>
  return HAL_OK;
 80018c2:	2000      	movs	r0, #0
 80018c4:	e7e8      	b.n	8001898 <HAL_ADC_PollForConversion+0x24>
    if(Timeout != HAL_MAX_DELAY)
 80018c6:	1c68      	adds	r0, r5, #1
 80018c8:	d0eb      	beq.n	80018a2 <HAL_ADC_PollForConversion+0x2e>
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80018ca:	b965      	cbnz	r5, 80018e6 <HAL_ADC_PollForConversion+0x72>
        if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80018cc:	6823      	ldr	r3, [r4, #0]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f013 0302 	ands.w	r3, r3, #2
 80018d4:	d1e4      	bne.n	80018a0 <HAL_ADC_PollForConversion+0x2c>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80018d6:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
          return HAL_TIMEOUT;
 80018d8:	2003      	movs	r0, #3
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80018da:	f042 0204 	orr.w	r2, r2, #4
 80018de:	64e2      	str	r2, [r4, #76]	; 0x4c
          __HAL_UNLOCK(hadc);
 80018e0:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
          return HAL_TIMEOUT;
 80018e4:	e7d8      	b.n	8001898 <HAL_ADC_PollForConversion+0x24>
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80018e6:	f7ff fefd 	bl	80016e4 <HAL_GetTick>
 80018ea:	1b80      	subs	r0, r0, r6
 80018ec:	42a8      	cmp	r0, r5
 80018ee:	d8ed      	bhi.n	80018cc <HAL_ADC_PollForConversion+0x58>
 80018f0:	e7d6      	b.n	80018a0 <HAL_ADC_PollForConversion+0x2c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018f2:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80018f6:	2800      	cmp	r0, #0
 80018f8:	d1e3      	bne.n	80018c2 <HAL_ADC_PollForConversion+0x4e>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80018fa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80018fc:	f012 7ff8 	tst.w	r2, #32505856	; 0x1f00000
 8001900:	d002      	beq.n	8001908 <HAL_ADC_PollForConversion+0x94>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001902:	689b      	ldr	r3, [r3, #8]
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001904:	055a      	lsls	r2, r3, #21
 8001906:	d4dc      	bmi.n	80018c2 <HAL_ADC_PollForConversion+0x4e>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001908:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800190a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800190e:	64e3      	str	r3, [r4, #76]	; 0x4c
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001910:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001912:	04db      	lsls	r3, r3, #19
 8001914:	d4d5      	bmi.n	80018c2 <HAL_ADC_PollForConversion+0x4e>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001916:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001918:	f043 0301 	orr.w	r3, r3, #1
 800191c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800191e:	e7bb      	b.n	8001898 <HAL_ADC_PollForConversion+0x24>

08001920 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001920:	6803      	ldr	r3, [r0, #0]
 8001922:	6d98      	ldr	r0, [r3, #88]	; 0x58
}
 8001924:	4770      	bx	lr
	...

08001928 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0;
 8001928:	2300      	movs	r3, #0
{
 800192a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0;
 800192c:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800192e:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8001932:	2b01      	cmp	r3, #1
 8001934:	f000 8099 	beq.w	8001a6a <HAL_ADC_ConfigChannel+0x142>
 8001938:	2301      	movs	r3, #1
 800193a:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800193e:	684d      	ldr	r5, [r1, #4]
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8001940:	6804      	ldr	r4, [r0, #0]
  if (sConfig->Rank < 7)
 8001942:	2d06      	cmp	r5, #6
    MODIFY_REG(hadc->Instance->SQR5,
 8001944:	680a      	ldr	r2, [r1, #0]
 8001946:	eb05 0385 	add.w	r3, r5, r5, lsl #2
  if (sConfig->Rank < 7)
 800194a:	d822      	bhi.n	8001992 <HAL_ADC_ConfigChannel+0x6a>
    MODIFY_REG(hadc->Instance->SQR5,
 800194c:	261f      	movs	r6, #31
 800194e:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8001950:	3b05      	subs	r3, #5
 8001952:	409e      	lsls	r6, r3
 8001954:	ea25 0506 	bic.w	r5, r5, r6
 8001958:	fa02 f303 	lsl.w	r3, r2, r3
 800195c:	432b      	orrs	r3, r5
 800195e:	6423      	str	r3, [r4, #64]	; 0x40
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 8001960:	2a09      	cmp	r2, #9
 8001962:	d848      	bhi.n	80019f6 <HAL_ADC_ConfigChannel+0xce>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 8001964:	2607      	movs	r6, #7
 8001966:	6963      	ldr	r3, [r4, #20]
 8001968:	688d      	ldr	r5, [r1, #8]
 800196a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800196e:	4096      	lsls	r6, r2
 8001970:	ea23 0306 	bic.w	r3, r3, r6
 8001974:	fa05 f202 	lsl.w	r2, r5, r2
 8001978:	431a      	orrs	r2, r3
 800197a:	6162      	str	r2, [r4, #20]
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800197c:	6809      	ldr	r1, [r1, #0]
 800197e:	f1a1 0310 	sub.w	r3, r1, #16
 8001982:	2b01      	cmp	r3, #1
 8001984:	d959      	bls.n	8001a3a <HAL_ADC_ConfigChannel+0x112>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001986:	2300      	movs	r3, #0
 8001988:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 800198c:	4618      	mov	r0, r3
}
 800198e:	b002      	add	sp, #8
 8001990:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13)
 8001992:	2d0c      	cmp	r5, #12
 8001994:	d80a      	bhi.n	80019ac <HAL_ADC_ConfigChannel+0x84>
    MODIFY_REG(hadc->Instance->SQR4,
 8001996:	261f      	movs	r6, #31
 8001998:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 800199a:	3b23      	subs	r3, #35	; 0x23
 800199c:	409e      	lsls	r6, r3
 800199e:	ea25 0506 	bic.w	r5, r5, r6
 80019a2:	fa02 f303 	lsl.w	r3, r2, r3
 80019a6:	432b      	orrs	r3, r5
 80019a8:	63e3      	str	r3, [r4, #60]	; 0x3c
 80019aa:	e7d9      	b.n	8001960 <HAL_ADC_ConfigChannel+0x38>
  else if (sConfig->Rank < 19)
 80019ac:	2d12      	cmp	r5, #18
 80019ae:	d80a      	bhi.n	80019c6 <HAL_ADC_ConfigChannel+0x9e>
    MODIFY_REG(hadc->Instance->SQR3,
 80019b0:	261f      	movs	r6, #31
 80019b2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80019b4:	3b41      	subs	r3, #65	; 0x41
 80019b6:	409e      	lsls	r6, r3
 80019b8:	ea25 0506 	bic.w	r5, r5, r6
 80019bc:	fa02 f303 	lsl.w	r3, r2, r3
 80019c0:	432b      	orrs	r3, r5
 80019c2:	63a3      	str	r3, [r4, #56]	; 0x38
 80019c4:	e7cc      	b.n	8001960 <HAL_ADC_ConfigChannel+0x38>
  else if (sConfig->Rank < 25)
 80019c6:	2d18      	cmp	r5, #24
 80019c8:	f04f 051f 	mov.w	r5, #31
 80019cc:	d809      	bhi.n	80019e2 <HAL_ADC_ConfigChannel+0xba>
    MODIFY_REG(hadc->Instance->SQR2,
 80019ce:	6b66      	ldr	r6, [r4, #52]	; 0x34
 80019d0:	3b5f      	subs	r3, #95	; 0x5f
 80019d2:	409d      	lsls	r5, r3
 80019d4:	ea26 0505 	bic.w	r5, r6, r5
 80019d8:	fa02 f303 	lsl.w	r3, r2, r3
 80019dc:	432b      	orrs	r3, r5
 80019de:	6363      	str	r3, [r4, #52]	; 0x34
 80019e0:	e7be      	b.n	8001960 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1,
 80019e2:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80019e4:	3b7d      	subs	r3, #125	; 0x7d
 80019e6:	409d      	lsls	r5, r3
 80019e8:	ea26 0505 	bic.w	r5, r6, r5
 80019ec:	fa02 f303 	lsl.w	r3, r2, r3
 80019f0:	432b      	orrs	r3, r5
 80019f2:	6323      	str	r3, [r4, #48]	; 0x30
 80019f4:	e7b4      	b.n	8001960 <HAL_ADC_ConfigChannel+0x38>
  else if (sConfig->Channel < ADC_CHANNEL_20)
 80019f6:	2a13      	cmp	r2, #19
 80019f8:	d80d      	bhi.n	8001a16 <HAL_ADC_ConfigChannel+0xee>
    MODIFY_REG(hadc->Instance->SMPR2,
 80019fa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80019fe:	f1a2 051e 	sub.w	r5, r2, #30
 8001a02:	2207      	movs	r2, #7
 8001a04:	6923      	ldr	r3, [r4, #16]
 8001a06:	40aa      	lsls	r2, r5
 8001a08:	ea23 0202 	bic.w	r2, r3, r2
 8001a0c:	688b      	ldr	r3, [r1, #8]
 8001a0e:	40ab      	lsls	r3, r5
 8001a10:	431a      	orrs	r2, r3
 8001a12:	6122      	str	r2, [r4, #16]
 8001a14:	e7b2      	b.n	800197c <HAL_ADC_ConfigChannel+0x54>
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8001a16:	2a1a      	cmp	r2, #26
 8001a18:	d80d      	bhi.n	8001a36 <HAL_ADC_ConfigChannel+0x10e>
    MODIFY_REG(hadc->Instance->SMPR1,
 8001a1a:	2507      	movs	r5, #7
 8001a1c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001a20:	68e3      	ldr	r3, [r4, #12]
 8001a22:	3a3c      	subs	r2, #60	; 0x3c
 8001a24:	4095      	lsls	r5, r2
 8001a26:	ea23 0305 	bic.w	r3, r3, r5
 8001a2a:	688d      	ldr	r5, [r1, #8]
 8001a2c:	fa05 f202 	lsl.w	r2, r5, r2
 8001a30:	431a      	orrs	r2, r3
 8001a32:	60e2      	str	r2, [r4, #12]
 8001a34:	e7a2      	b.n	800197c <HAL_ADC_ConfigChannel+0x54>
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8001a36:	bf00      	nop
 8001a38:	e7a0      	b.n	800197c <HAL_ADC_ConfigChannel+0x54>
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8001a3a:	4b0d      	ldr	r3, [pc, #52]	; (8001a70 <HAL_ADC_ConfigChannel+0x148>)
 8001a3c:	685a      	ldr	r2, [r3, #4]
 8001a3e:	0212      	lsls	r2, r2, #8
 8001a40:	d4a1      	bmi.n	8001986 <HAL_ADC_ConfigChannel+0x5e>
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8001a42:	685a      	ldr	r2, [r3, #4]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a44:	2910      	cmp	r1, #16
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8001a46:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 8001a4a:	605a      	str	r2, [r3, #4]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001a4c:	d19b      	bne.n	8001986 <HAL_ADC_ConfigChannel+0x5e>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8001a4e:	4b09      	ldr	r3, [pc, #36]	; (8001a74 <HAL_ADC_ConfigChannel+0x14c>)
 8001a50:	4a09      	ldr	r2, [pc, #36]	; (8001a78 <HAL_ADC_ConfigChannel+0x150>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	fbb3 f3f2 	udiv	r3, r3, r2
 8001a58:	220a      	movs	r2, #10
 8001a5a:	4353      	muls	r3, r2
            wait_loop_index--;
 8001a5c:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 8001a5e:	9b01      	ldr	r3, [sp, #4]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d090      	beq.n	8001986 <HAL_ADC_ConfigChannel+0x5e>
            wait_loop_index--;
 8001a64:	9b01      	ldr	r3, [sp, #4]
 8001a66:	3b01      	subs	r3, #1
 8001a68:	e7f8      	b.n	8001a5c <HAL_ADC_ConfigChannel+0x134>
  __HAL_LOCK(hadc);
 8001a6a:	2002      	movs	r0, #2
 8001a6c:	e78f      	b.n	800198e <HAL_ADC_ConfigChannel+0x66>
 8001a6e:	bf00      	nop
 8001a70:	40012700 	.word	0x40012700
 8001a74:	20000000 	.word	0x20000000
 8001a78:	000f4240 	.word	0x000f4240

08001a7c <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0;
  __IO uint32_t wait_loop_index = 0;
 8001a7c:	2300      	movs	r3, #0
{
 8001a7e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0;
 8001a80:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a82:	6803      	ldr	r3, [r0, #0]
{
 8001a84:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001a86:	681a      	ldr	r2, [r3, #0]
 8001a88:	0652      	lsls	r2, r2, #25
 8001a8a:	d502      	bpl.n	8001a92 <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8001a8c:	2000      	movs	r0, #0
}
 8001a8e:	b003      	add	sp, #12
 8001a90:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 8001a92:	689a      	ldr	r2, [r3, #8]
 8001a94:	f042 0201 	orr.w	r2, r2, #1
 8001a98:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8001a9a:	4b15      	ldr	r3, [pc, #84]	; (8001af0 <ADC_Enable+0x74>)
 8001a9c:	4a15      	ldr	r2, [pc, #84]	; (8001af4 <ADC_Enable+0x78>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	fbb3 f3f2 	udiv	r3, r3, r2
 8001aa4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
      wait_loop_index--;
 8001aa8:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 8001aaa:	9b01      	ldr	r3, [sp, #4]
 8001aac:	b9e3      	cbnz	r3, 8001ae8 <ADC_Enable+0x6c>
    tickstart = HAL_GetTick();    
 8001aae:	f7ff fe19 	bl	80016e4 <HAL_GetTick>
 8001ab2:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 8001ab4:	6823      	ldr	r3, [r4, #0]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	065b      	lsls	r3, r3, #25
 8001aba:	d4e7      	bmi.n	8001a8c <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8001abc:	f7ff fe12 	bl	80016e4 <HAL_GetTick>
 8001ac0:	1b40      	subs	r0, r0, r5
 8001ac2:	2802      	cmp	r0, #2
 8001ac4:	d9f6      	bls.n	8001ab4 <ADC_Enable+0x38>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001ac6:	6823      	ldr	r3, [r4, #0]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8001ace:	d1f1      	bne.n	8001ab4 <ADC_Enable+0x38>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ad0:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
          return HAL_ERROR;
 8001ad2:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ad4:	f042 0210 	orr.w	r2, r2, #16
 8001ad8:	64e2      	str	r2, [r4, #76]	; 0x4c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ada:	6d22      	ldr	r2, [r4, #80]	; 0x50
          __HAL_UNLOCK(hadc);
 8001adc:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ae0:	f042 0201 	orr.w	r2, r2, #1
 8001ae4:	6522      	str	r2, [r4, #80]	; 0x50
          return HAL_ERROR;
 8001ae6:	e7d2      	b.n	8001a8e <ADC_Enable+0x12>
      wait_loop_index--;
 8001ae8:	9b01      	ldr	r3, [sp, #4]
 8001aea:	3b01      	subs	r3, #1
 8001aec:	e7dc      	b.n	8001aa8 <ADC_Enable+0x2c>
 8001aee:	bf00      	nop
 8001af0:	20000000 	.word	0x20000000
 8001af4:	000f4240 	.word	0x000f4240

08001af8 <HAL_ADC_Start>:
{
 8001af8:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8001afa:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
{
 8001afe:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d02e      	beq.n	8001b62 <HAL_ADC_Start+0x6a>
 8001b04:	2301      	movs	r3, #1
 8001b06:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  tmp_hal_status = ADC_Enable(hadc);
 8001b0a:	f7ff ffb7 	bl	8001a7c <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8001b0e:	bb38      	cbnz	r0, 8001b60 <HAL_ADC_Start+0x68>
    ADC_STATE_CLR_SET(hadc->State,
 8001b10:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001b12:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001b16:	f023 0301 	bic.w	r3, r3, #1
 8001b1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b1e:	64e3      	str	r3, [r4, #76]	; 0x4c
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001b20:	6823      	ldr	r3, [r4, #0]
 8001b22:	685a      	ldr	r2, [r3, #4]
 8001b24:	0552      	lsls	r2, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001b26:	bf41      	itttt	mi
 8001b28:	6ce2      	ldrmi	r2, [r4, #76]	; 0x4c
 8001b2a:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8001b2e:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8001b32:	64e2      	strmi	r2, [r4, #76]	; 0x4c
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b34:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8001b36:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b3a:	bf1c      	itt	ne
 8001b3c:	6d22      	ldrne	r2, [r4, #80]	; 0x50
 8001b3e:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8001b42:	6522      	str	r2, [r4, #80]	; 0x50
    __HAL_UNLOCK(hadc);
 8001b44:	2200      	movs	r2, #0
 8001b46:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001b4a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001b4e:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001b50:	689a      	ldr	r2, [r3, #8]
 8001b52:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8001b56:	d103      	bne.n	8001b60 <HAL_ADC_Start+0x68>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8001b58:	689a      	ldr	r2, [r3, #8]
 8001b5a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001b5e:	609a      	str	r2, [r3, #8]
}
 8001b60:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8001b62:	2002      	movs	r0, #2
 8001b64:	e7fc      	b.n	8001b60 <HAL_ADC_Start+0x68>
	...

08001b68 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b68:	4907      	ldr	r1, [pc, #28]	; (8001b88 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b6a:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001b6c:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001b6e:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001b72:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001b76:	0412      	lsls	r2, r2, #16
 8001b78:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001b7a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001b7c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001b80:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001b84:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001b86:	4770      	bx	lr
 8001b88:	e000ed00 	.word	0xe000ed00

08001b8c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b8c:	4b16      	ldr	r3, [pc, #88]	; (8001be8 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b8e:	b530      	push	{r4, r5, lr}
 8001b90:	68dc      	ldr	r4, [r3, #12]
 8001b92:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b96:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b9a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b9c:	2b04      	cmp	r3, #4
 8001b9e:	bf28      	it	cs
 8001ba0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ba2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ba4:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ba8:	bf98      	it	ls
 8001baa:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bac:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bb0:	bf88      	it	hi
 8001bb2:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb4:	ea21 0303 	bic.w	r3, r1, r3
 8001bb8:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bba:	fa05 f404 	lsl.w	r4, r5, r4
 8001bbe:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8001bc2:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bc4:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bc8:	bfac      	ite	ge
 8001bca:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bce:	4a07      	ldrlt	r2, [pc, #28]	; (8001bec <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bd0:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001bd4:	b2db      	uxtb	r3, r3
 8001bd6:	bfab      	itete	ge
 8001bd8:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001bdc:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be0:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001be4:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001be6:	bd30      	pop	{r4, r5, pc}
 8001be8:	e000ed00 	.word	0xe000ed00
 8001bec:	e000ed14 	.word	0xe000ed14

08001bf0 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001bf0:	2800      	cmp	r0, #0
 8001bf2:	db08      	blt.n	8001c06 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001bf4:	2301      	movs	r3, #1
 8001bf6:	0942      	lsrs	r2, r0, #5
 8001bf8:	f000 001f 	and.w	r0, r0, #31
 8001bfc:	fa03 f000 	lsl.w	r0, r3, r0
 8001c00:	4b01      	ldr	r3, [pc, #4]	; (8001c08 <HAL_NVIC_EnableIRQ+0x18>)
 8001c02:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001c06:	4770      	bx	lr
 8001c08:	e000e100 	.word	0xe000e100

08001c0c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c0c:	b510      	push	{r4, lr}
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001c0e:	b348      	cbz	r0, 8001c64 <HAL_DMA_Init+0x58>
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001c10:	2214      	movs	r2, #20
 8001c12:	6801      	ldr	r1, [r0, #0]
 8001c14:	4b14      	ldr	r3, [pc, #80]	; (8001c68 <HAL_DMA_Init+0x5c>)
 8001c16:	440b      	add	r3, r1
 8001c18:	fbb3 f3f2 	udiv	r3, r3, r2
 8001c1c:	009b      	lsls	r3, r3, #2
 8001c1e:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001c20:	4b12      	ldr	r3, [pc, #72]	; (8001c6c <HAL_DMA_Init+0x60>)
 8001c22:	63c3      	str	r3, [r0, #60]	; 0x3c
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c24:	2302      	movs	r3, #2
 8001c26:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001c2a:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8001c2e:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c30:	68c4      	ldr	r4, [r0, #12]
  tmp = hdma->Instance->CCR;
 8001c32:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c34:	4323      	orrs	r3, r4
 8001c36:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8001c38:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c3c:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c3e:	6944      	ldr	r4, [r0, #20]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8001c40:	f022 0270 	bic.w	r2, r2, #112	; 0x70
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c44:	4323      	orrs	r3, r4
 8001c46:	6984      	ldr	r4, [r0, #24]
 8001c48:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8001c4a:	69c4      	ldr	r4, [r0, #28]
 8001c4c:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8001c4e:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001c50:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001c52:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c54:	2300      	movs	r3, #0
 8001c56:	6383      	str	r3, [r0, #56]	; 0x38

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001c58:	f880 3020 	strb.w	r3, [r0, #32]
  hdma->State = HAL_DMA_STATE_READY;
 8001c5c:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21

  return HAL_OK;
 8001c60:	4618      	mov	r0, r3
}
 8001c62:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001c64:	2001      	movs	r0, #1
 8001c66:	e7fc      	b.n	8001c62 <HAL_DMA_Init+0x56>
 8001c68:	bffd9ff8 	.word	0xbffd9ff8
 8001c6c:	40026000 	.word	0x40026000

08001c70 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c70:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001c72:	f890 4020 	ldrb.w	r4, [r0, #32]
 8001c76:	2c01      	cmp	r4, #1
 8001c78:	d036      	beq.n	8001ce8 <HAL_DMA_Start_IT+0x78>
 8001c7a:	2401      	movs	r4, #1
 8001c7c:	f880 4020 	strb.w	r4, [r0, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001c80:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
 8001c84:	2600      	movs	r6, #0
 8001c86:	2c01      	cmp	r4, #1
 8001c88:	b2e5      	uxtb	r5, r4
 8001c8a:	f04f 0402 	mov.w	r4, #2
 8001c8e:	d129      	bne.n	8001ce4 <HAL_DMA_Start_IT+0x74>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c90:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001c94:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c96:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8001c98:	6826      	ldr	r6, [r4, #0]
 8001c9a:	f026 0601 	bic.w	r6, r6, #1
 8001c9e:	6026      	str	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ca0:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	; 0x3c
 8001ca4:	f007 071c 	and.w	r7, r7, #28
 8001ca8:	40bd      	lsls	r5, r7
 8001caa:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001cac:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001cae:	6843      	ldr	r3, [r0, #4]
 8001cb0:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8001cb2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001cb4:	bf0b      	itete	eq
 8001cb6:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001cb8:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001cba:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001cbc:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8001cbe:	b14b      	cbz	r3, 8001cd4 <HAL_DMA_Start_IT+0x64>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001cc0:	6823      	ldr	r3, [r4, #0]
 8001cc2:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 8001cc6:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001cc8:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001cca:	6823      	ldr	r3, [r4, #0]
 8001ccc:	f043 0301 	orr.w	r3, r3, #1
 8001cd0:	6023      	str	r3, [r4, #0]
}
 8001cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001cd4:	6823      	ldr	r3, [r4, #0]
 8001cd6:	f023 0304 	bic.w	r3, r3, #4
 8001cda:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001cdc:	6823      	ldr	r3, [r4, #0]
 8001cde:	f043 030a 	orr.w	r3, r3, #10
 8001ce2:	e7f0      	b.n	8001cc6 <HAL_DMA_Start_IT+0x56>
    __HAL_UNLOCK(hdma);
 8001ce4:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8001ce8:	2002      	movs	r0, #2
 8001cea:	e7f2      	b.n	8001cd2 <HAL_DMA_Start_IT+0x62>

08001cec <HAL_DMA_IRQHandler>:
{
 8001cec:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001cee:	2404      	movs	r4, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001cf0:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001cf2:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001cf4:	680e      	ldr	r6, [r1, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001cf6:	f002 021c 	and.w	r2, r2, #28
  uint32_t source_it = hdma->Instance->CCR;
 8001cfa:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001cfc:	4094      	lsls	r4, r2
 8001cfe:	4234      	tst	r4, r6
  uint32_t source_it = hdma->Instance->CCR;
 8001d00:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001d02:	d00e      	beq.n	8001d22 <HAL_DMA_IRQHandler+0x36>
 8001d04:	f015 0f04 	tst.w	r5, #4
 8001d08:	d00b      	beq.n	8001d22 <HAL_DMA_IRQHandler+0x36>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	0692      	lsls	r2, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001d0e:	bf5e      	ittt	pl
 8001d10:	681a      	ldrpl	r2, [r3, #0]
 8001d12:	f022 0204 	bicpl.w	r2, r2, #4
 8001d16:	601a      	strpl	r2, [r3, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8001d18:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001d1a:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 8001d1c:	b373      	cbz	r3, 8001d7c <HAL_DMA_IRQHandler+0x90>
}
 8001d1e:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8001d20:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001d22:	2402      	movs	r4, #2
 8001d24:	4094      	lsls	r4, r2
 8001d26:	4234      	tst	r4, r6
 8001d28:	d012      	beq.n	8001d50 <HAL_DMA_IRQHandler+0x64>
 8001d2a:	f015 0f02 	tst.w	r5, #2
 8001d2e:	d00f      	beq.n	8001d50 <HAL_DMA_IRQHandler+0x64>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001d30:	681a      	ldr	r2, [r3, #0]
 8001d32:	0695      	lsls	r5, r2, #26
 8001d34:	d406      	bmi.n	8001d44 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001d36:	681a      	ldr	r2, [r3, #0]
 8001d38:	f022 020a 	bic.w	r2, r2, #10
 8001d3c:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001d44:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d46:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8001d48:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8001d4c:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001d4e:	e7e5      	b.n	8001d1c <HAL_DMA_IRQHandler+0x30>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001d50:	2408      	movs	r4, #8
 8001d52:	4094      	lsls	r4, r2
 8001d54:	4234      	tst	r4, r6
 8001d56:	d011      	beq.n	8001d7c <HAL_DMA_IRQHandler+0x90>
 8001d58:	072c      	lsls	r4, r5, #28
 8001d5a:	d50f      	bpl.n	8001d7c <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001d5c:	681c      	ldr	r4, [r3, #0]
 8001d5e:	f024 040e 	bic.w	r4, r4, #14
 8001d62:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001d64:	2301      	movs	r3, #1
 8001d66:	fa03 f202 	lsl.w	r2, r3, r2
 8001d6a:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001d6c:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8001d6e:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001d72:	2300      	movs	r3, #0
 8001d74:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8001d78:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001d7a:	e7cf      	b.n	8001d1c <HAL_DMA_IRQHandler+0x30>
}
 8001d7c:	bc70      	pop	{r4, r5, r6}
 8001d7e:	4770      	bx	lr

08001d80 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00;
 8001d80:	2300      	movs	r3, #0
{
 8001d82:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d86:	f8df 9178 	ldr.w	r9, [pc, #376]	; 8001f00 <HAL_GPIO_Init+0x180>
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001d8a:	4c5e      	ldr	r4, [pc, #376]	; (8001f04 <HAL_GPIO_Init+0x184>)
  while (((GPIO_Init->Pin) >> position) != 0)
 8001d8c:	680a      	ldr	r2, [r1, #0]
 8001d8e:	fa32 f503 	lsrs.w	r5, r2, r3
 8001d92:	d102      	bne.n	8001d9a <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 8001d94:	b003      	add	sp, #12
 8001d96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001d9a:	2501      	movs	r5, #1
 8001d9c:	fa05 fe03 	lsl.w	lr, r5, r3
    if (iocurrent)
 8001da0:	ea1e 0202 	ands.w	r2, lr, r2
 8001da4:	f000 80a2 	beq.w	8001eec <HAL_GPIO_Init+0x16c>
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001da8:	f04f 0c03 	mov.w	ip, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001dac:	684e      	ldr	r6, [r1, #4]
 8001dae:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8001db2:	f006 0503 	and.w	r5, r6, #3
 8001db6:	1e6f      	subs	r7, r5, #1
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001db8:	fa0c fc08 	lsl.w	ip, ip, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001dbc:	2f01      	cmp	r7, #1
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001dbe:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001dc2:	d834      	bhi.n	8001e2e <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 8001dc4:	6887      	ldr	r7, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001dc6:	ea07 0a0c 	and.w	sl, r7, ip
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001dca:	68cf      	ldr	r7, [r1, #12]
 8001dcc:	fa07 f708 	lsl.w	r7, r7, r8
 8001dd0:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8001dd4:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001dd6:	6847      	ldr	r7, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001dd8:	ea27 0e0e 	bic.w	lr, r7, lr
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ddc:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8001de0:	409f      	lsls	r7, r3
 8001de2:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001de6:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001de8:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dea:	2d02      	cmp	r5, #2
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001dec:	ea07 0e0c 	and.w	lr, r7, ip
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001df0:	688f      	ldr	r7, [r1, #8]
 8001df2:	fa07 f708 	lsl.w	r7, r7, r8
 8001df6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8001dfa:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001dfc:	d119      	bne.n	8001e32 <HAL_GPIO_Init+0xb2>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001dfe:	f04f 0e0f 	mov.w	lr, #15
        temp = GPIOx->AFR[position >> 3];
 8001e02:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001e06:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001e0a:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8001e0e:	f8da 7020 	ldr.w	r7, [sl, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001e12:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001e16:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001e1a:	ea27 0e0e 	bic.w	lr, r7, lr
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001e1e:	690f      	ldr	r7, [r1, #16]
 8001e20:	fa07 f70b 	lsl.w	r7, r7, fp
 8001e24:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3] = temp;
 8001e28:	f8ca 7020 	str.w	r7, [sl, #32]
 8001e2c:	e001      	b.n	8001e32 <HAL_GPIO_Init+0xb2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e2e:	2d03      	cmp	r5, #3
 8001e30:	d1da      	bne.n	8001de8 <HAL_GPIO_Init+0x68>
      temp = GPIOx->MODER;
 8001e32:	6807      	ldr	r7, [r0, #0]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001e34:	fa05 f508 	lsl.w	r5, r5, r8
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001e38:	ea07 070c 	and.w	r7, r7, ip
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001e3c:	432f      	orrs	r7, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e3e:	f416 3f40 	tst.w	r6, #196608	; 0x30000
      GPIOx->MODER = temp;
 8001e42:	6007      	str	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e44:	d052      	beq.n	8001eec <HAL_GPIO_Init+0x16c>
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001e46:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e4a:	f8d9 5020 	ldr.w	r5, [r9, #32]
 8001e4e:	f023 0703 	bic.w	r7, r3, #3
 8001e52:	f045 0501 	orr.w	r5, r5, #1
 8001e56:	f8c9 5020 	str.w	r5, [r9, #32]
 8001e5a:	f8d9 5020 	ldr.w	r5, [r9, #32]
 8001e5e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8001e62:	f005 0501 	and.w	r5, r5, #1
 8001e66:	9501      	str	r5, [sp, #4]
 8001e68:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001e6c:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e70:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001e72:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp = SYSCFG->EXTICR[position >> 2];
 8001e76:	68bd      	ldr	r5, [r7, #8]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001e78:	fa0c fc0e 	lsl.w	ip, ip, lr
 8001e7c:	ea25 0c0c 	bic.w	ip, r5, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001e80:	4d21      	ldr	r5, [pc, #132]	; (8001f08 <HAL_GPIO_Init+0x188>)
 8001e82:	42a8      	cmp	r0, r5
 8001e84:	d034      	beq.n	8001ef0 <HAL_GPIO_Init+0x170>
 8001e86:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001e8a:	42a8      	cmp	r0, r5
 8001e8c:	d032      	beq.n	8001ef4 <HAL_GPIO_Init+0x174>
 8001e8e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001e92:	42a8      	cmp	r0, r5
 8001e94:	d030      	beq.n	8001ef8 <HAL_GPIO_Init+0x178>
 8001e96:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001e9a:	42a8      	cmp	r0, r5
 8001e9c:	d02e      	beq.n	8001efc <HAL_GPIO_Init+0x17c>
 8001e9e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8001ea2:	42a8      	cmp	r0, r5
 8001ea4:	bf0c      	ite	eq
 8001ea6:	2504      	moveq	r5, #4
 8001ea8:	2505      	movne	r5, #5
 8001eaa:	fa05 f50e 	lsl.w	r5, r5, lr
 8001eae:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8001eb2:	60bd      	str	r5, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001eb4:	43d7      	mvns	r7, r2
        temp = EXTI->IMR;
 8001eb6:	6825      	ldr	r5, [r4, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001eb8:	f416 3f80 	tst.w	r6, #65536	; 0x10000
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001ebc:	bf0c      	ite	eq
 8001ebe:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent);
 8001ec0:	4315      	orrne	r5, r2
        EXTI->IMR = temp;
 8001ec2:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR;
 8001ec4:	6865      	ldr	r5, [r4, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ec6:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001eca:	bf0c      	ite	eq
 8001ecc:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent);
 8001ece:	4315      	orrne	r5, r2
        EXTI->EMR = temp;
 8001ed0:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR;
 8001ed2:	68a5      	ldr	r5, [r4, #8]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001ed4:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001ed8:	bf0c      	ite	eq
 8001eda:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent);
 8001edc:	4315      	orrne	r5, r2
        EXTI->RTSR = temp;
 8001ede:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR;
 8001ee0:	68e5      	ldr	r5, [r4, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ee2:	02b6      	lsls	r6, r6, #10
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8001ee4:	bf54      	ite	pl
 8001ee6:	403d      	andpl	r5, r7
          SET_BIT(temp, iocurrent);
 8001ee8:	4315      	orrmi	r5, r2
        EXTI->FTSR = temp;
 8001eea:	60e5      	str	r5, [r4, #12]
    position++;
 8001eec:	3301      	adds	r3, #1
 8001eee:	e74d      	b.n	8001d8c <HAL_GPIO_Init+0xc>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001ef0:	2500      	movs	r5, #0
 8001ef2:	e7da      	b.n	8001eaa <HAL_GPIO_Init+0x12a>
 8001ef4:	2501      	movs	r5, #1
 8001ef6:	e7d8      	b.n	8001eaa <HAL_GPIO_Init+0x12a>
 8001ef8:	2502      	movs	r5, #2
 8001efa:	e7d6      	b.n	8001eaa <HAL_GPIO_Init+0x12a>
 8001efc:	2503      	movs	r5, #3
 8001efe:	e7d4      	b.n	8001eaa <HAL_GPIO_Init+0x12a>
 8001f00:	40023800 	.word	0x40023800
 8001f04:	40010400 	.word	0x40010400
 8001f08:	40020000 	.word	0x40020000

08001f0c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001f0c:	6903      	ldr	r3, [r0, #16]
 8001f0e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8001f10:	bf14      	ite	ne
 8001f12:	2001      	movne	r0, #1
 8001f14:	2000      	moveq	r0, #0
 8001f16:	4770      	bx	lr

08001f18 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f18:	b10a      	cbz	r2, 8001f1e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001f1a:	6181      	str	r1, [r0, #24]
  }
}
 8001f1c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8001f1e:	0409      	lsls	r1, r1, #16
 8001f20:	e7fb      	b.n	8001f1a <HAL_GPIO_WritePin+0x2>

08001f22 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001f22:	4770      	bx	lr

08001f24 <HAL_GPIO_EXTI_IRQHandler>:
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001f24:	4a04      	ldr	r2, [pc, #16]	; (8001f38 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 8001f26:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001f28:	6951      	ldr	r1, [r2, #20]
 8001f2a:	4201      	tst	r1, r0
 8001f2c:	d002      	beq.n	8001f34 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f2e:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f30:	f7ff fff7 	bl	8001f22 <HAL_GPIO_EXTI_Callback>
}
 8001f34:	bd08      	pop	{r3, pc}
 8001f36:	bf00      	nop
 8001f38:	40010400 	.word	0x40010400

08001f3c <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001f3c:	6801      	ldr	r1, [r0, #0]
 8001f3e:	2200      	movs	r2, #0
 8001f40:	694b      	ldr	r3, [r1, #20]
 8001f42:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8001f46:	d010      	beq.n	8001f6a <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001f48:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001f4c:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 8001f4e:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8001f50:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001f52:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001f56:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f5a:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f5c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001f60:	f043 0304 	orr.w	r3, r3, #4
 8001f64:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8001f66:	2001      	movs	r0, #1
 8001f68:	4770      	bx	lr
  }
  return HAL_OK;
 8001f6a:	4618      	mov	r0, r3
}
 8001f6c:	4770      	bx	lr

08001f6e <I2C_WaitOnFlagUntilTimeout>:
{
 8001f6e:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 8001f72:	4606      	mov	r6, r0
 8001f74:	460f      	mov	r7, r1
 8001f76:	4691      	mov	r9, r2
 8001f78:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f7a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8001f7e:	6833      	ldr	r3, [r6, #0]
 8001f80:	f1ba 0f01 	cmp.w	sl, #1
 8001f84:	bf0c      	ite	eq
 8001f86:	695c      	ldreq	r4, [r3, #20]
 8001f88:	699c      	ldrne	r4, [r3, #24]
 8001f8a:	ea27 0404 	bic.w	r4, r7, r4
 8001f8e:	b2a4      	uxth	r4, r4
 8001f90:	fab4 f484 	clz	r4, r4
 8001f94:	0964      	lsrs	r4, r4, #5
 8001f96:	45a1      	cmp	r9, r4
 8001f98:	d001      	beq.n	8001f9e <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 8001f9a:	2000      	movs	r0, #0
 8001f9c:	e017      	b.n	8001fce <I2C_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 8001f9e:	1c6a      	adds	r2, r5, #1
 8001fa0:	d0ee      	beq.n	8001f80 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001fa2:	f7ff fb9f 	bl	80016e4 <HAL_GetTick>
 8001fa6:	9b08      	ldr	r3, [sp, #32]
 8001fa8:	1ac0      	subs	r0, r0, r3
 8001faa:	42a8      	cmp	r0, r5
 8001fac:	d801      	bhi.n	8001fb2 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001fae:	2d00      	cmp	r5, #0
 8001fb0:	d1e5      	bne.n	8001f7e <I2C_WaitOnFlagUntilTimeout+0x10>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001fb2:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8001fb4:	2220      	movs	r2, #32
        return HAL_ERROR;
 8001fb6:	2001      	movs	r0, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001fb8:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001fba:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001fbe:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001fc2:	6c32      	ldr	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8001fc4:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001fc8:	f042 0220 	orr.w	r2, r2, #32
 8001fcc:	6432      	str	r2, [r6, #64]	; 0x40
}
 8001fce:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

08001fd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8001fd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001fd6:	4604      	mov	r4, r0
 8001fd8:	460f      	mov	r7, r1
 8001fda:	4616      	mov	r6, r2
 8001fdc:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001fde:	6825      	ldr	r5, [r4, #0]
 8001fe0:	6968      	ldr	r0, [r5, #20]
 8001fe2:	ea27 0000 	bic.w	r0, r7, r0
 8001fe6:	b280      	uxth	r0, r0
 8001fe8:	b1b8      	cbz	r0, 800201a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x48>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001fea:	696b      	ldr	r3, [r5, #20]
 8001fec:	055a      	lsls	r2, r3, #21
 8001fee:	d516      	bpl.n	800201e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ff0:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 8001ff2:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ff4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ff8:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ffa:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 8001ffe:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002000:	2300      	movs	r3, #0
 8002002:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002004:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002008:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800200c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 800200e:	f042 0204 	orr.w	r2, r2, #4
        return HAL_ERROR;
 8002012:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002014:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002016:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800201a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 800201e:	1c73      	adds	r3, r6, #1
 8002020:	d0de      	beq.n	8001fe0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002022:	f7ff fb5f 	bl	80016e4 <HAL_GetTick>
 8002026:	eba0 0008 	sub.w	r0, r0, r8
 800202a:	42b0      	cmp	r0, r6
 800202c:	d801      	bhi.n	8002032 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
 800202e:	2e00      	cmp	r6, #0
 8002030:	d1d5      	bne.n	8001fde <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002032:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8002034:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002036:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002038:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800203c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002040:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002042:	f042 0220 	orr.w	r2, r2, #32
 8002046:	e7e4      	b.n	8002012 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

08002048 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8002048:	b570      	push	{r4, r5, r6, lr}
 800204a:	4604      	mov	r4, r0
 800204c:	460d      	mov	r5, r1
 800204e:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002050:	6821      	ldr	r1, [r4, #0]
 8002052:	694b      	ldr	r3, [r1, #20]
 8002054:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8002058:	d001      	beq.n	800205e <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 800205a:	2000      	movs	r0, #0
 800205c:	e010      	b.n	8002080 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800205e:	694a      	ldr	r2, [r1, #20]
 8002060:	06d2      	lsls	r2, r2, #27
 8002062:	d50e      	bpl.n	8002082 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002064:	f06f 0210 	mvn.w	r2, #16
 8002068:	614a      	str	r2, [r1, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 800206a:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 800206c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800206e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002072:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002076:	6c22      	ldr	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002078:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800207a:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800207c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8002080:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002082:	f7ff fb2f 	bl	80016e4 <HAL_GetTick>
 8002086:	1b80      	subs	r0, r0, r6
 8002088:	42a8      	cmp	r0, r5
 800208a:	d801      	bhi.n	8002090 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 800208c:	2d00      	cmp	r5, #0
 800208e:	d1df      	bne.n	8002050 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002090:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8002092:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002094:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002096:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800209a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800209e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80020a0:	f042 0220 	orr.w	r2, r2, #32
 80020a4:	e7e8      	b.n	8002078 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

080020a6 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 80020a6:	b570      	push	{r4, r5, r6, lr}
 80020a8:	4604      	mov	r4, r0
 80020aa:	460d      	mov	r5, r1
 80020ac:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80020ae:	6823      	ldr	r3, [r4, #0]
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	075b      	lsls	r3, r3, #29
 80020b4:	d501      	bpl.n	80020ba <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 80020b6:	2000      	movs	r0, #0
}
 80020b8:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80020ba:	4620      	mov	r0, r4
 80020bc:	f7ff ff3e 	bl	8001f3c <I2C_IsAcknowledgeFailed>
 80020c0:	b9a8      	cbnz	r0, 80020ee <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 80020c2:	1c6a      	adds	r2, r5, #1
 80020c4:	d0f3      	beq.n	80020ae <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020c6:	f7ff fb0d 	bl	80016e4 <HAL_GetTick>
 80020ca:	1b80      	subs	r0, r0, r6
 80020cc:	42a8      	cmp	r0, r5
 80020ce:	d801      	bhi.n	80020d4 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 80020d0:	2d00      	cmp	r5, #0
 80020d2:	d1ec      	bne.n	80020ae <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80020d4:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80020d6:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80020d8:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80020da:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020de:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020e2:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80020e4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020e8:	f042 0220 	orr.w	r2, r2, #32
 80020ec:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80020ee:	2001      	movs	r0, #1
 80020f0:	e7e2      	b.n	80020b8 <I2C_WaitOnBTFFlagUntilTimeout+0x12>

080020f2 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 80020f2:	b570      	push	{r4, r5, r6, lr}
 80020f4:	4604      	mov	r4, r0
 80020f6:	460d      	mov	r5, r1
 80020f8:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020fa:	6823      	ldr	r3, [r4, #0]
 80020fc:	695b      	ldr	r3, [r3, #20]
 80020fe:	061b      	lsls	r3, r3, #24
 8002100:	d501      	bpl.n	8002106 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8002102:	2000      	movs	r0, #0
}
 8002104:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002106:	4620      	mov	r0, r4
 8002108:	f7ff ff18 	bl	8001f3c <I2C_IsAcknowledgeFailed>
 800210c:	b9a8      	cbnz	r0, 800213a <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 800210e:	1c6a      	adds	r2, r5, #1
 8002110:	d0f3      	beq.n	80020fa <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002112:	f7ff fae7 	bl	80016e4 <HAL_GetTick>
 8002116:	1b80      	subs	r0, r0, r6
 8002118:	42a8      	cmp	r0, r5
 800211a:	d801      	bhi.n	8002120 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 800211c:	2d00      	cmp	r5, #0
 800211e:	d1ec      	bne.n	80020fa <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002120:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8002122:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002124:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002126:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800212a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800212e:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002130:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002134:	f042 0220 	orr.w	r2, r2, #32
 8002138:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 800213a:	2001      	movs	r0, #1
 800213c:	e7e2      	b.n	8002104 <I2C_WaitOnTXEFlagUntilTimeout+0x12>
	...

08002140 <HAL_I2C_Init>:
{
 8002140:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 8002142:	4604      	mov	r4, r0
 8002144:	b908      	cbnz	r0, 800214a <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 8002146:	2001      	movs	r0, #1
}
 8002148:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 800214a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800214e:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002152:	b91b      	cbnz	r3, 800215c <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8002154:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8002158:	f7fe fffa 	bl	8001150 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800215c:	2324      	movs	r3, #36	; 0x24
 800215e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002162:	6823      	ldr	r3, [r4, #0]
 8002164:	681a      	ldr	r2, [r3, #0]
 8002166:	f022 0201 	bic.w	r2, r2, #1
 800216a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800216c:	681a      	ldr	r2, [r3, #0]
 800216e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002172:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800217a:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800217c:	f000 fe24 	bl	8002dc8 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002180:	4a3f      	ldr	r2, [pc, #252]	; (8002280 <HAL_I2C_Init+0x140>)
 8002182:	6863      	ldr	r3, [r4, #4]
 8002184:	4293      	cmp	r3, r2
 8002186:	bf94      	ite	ls
 8002188:	4a3e      	ldrls	r2, [pc, #248]	; (8002284 <HAL_I2C_Init+0x144>)
 800218a:	4a3f      	ldrhi	r2, [pc, #252]	; (8002288 <HAL_I2C_Init+0x148>)
 800218c:	4290      	cmp	r0, r2
 800218e:	bf8c      	ite	hi
 8002190:	2200      	movhi	r2, #0
 8002192:	2201      	movls	r2, #1
 8002194:	2a00      	cmp	r2, #0
 8002196:	d1d6      	bne.n	8002146 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002198:	4e39      	ldr	r6, [pc, #228]	; (8002280 <HAL_I2C_Init+0x140>)
  freqrange = I2C_FREQRANGE(pclk1);
 800219a:	493c      	ldr	r1, [pc, #240]	; (800228c <HAL_I2C_Init+0x14c>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800219c:	42b3      	cmp	r3, r6
  freqrange = I2C_FREQRANGE(pclk1);
 800219e:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021a2:	bf88      	it	hi
 80021a4:	f44f 7696 	movhi.w	r6, #300	; 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021a8:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021aa:	f100 30ff 	add.w	r0, r0, #4294967295
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021ae:	6855      	ldr	r5, [r2, #4]
 80021b0:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80021b4:	ea45 0501 	orr.w	r5, r5, r1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021b8:	bf82      	ittt	hi
 80021ba:	4371      	mulhi	r1, r6
 80021bc:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 80021c0:	fbb1 f1f6 	udivhi	r1, r1, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80021c4:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80021c6:	6a15      	ldr	r5, [r2, #32]
 80021c8:	3101      	adds	r1, #1
 80021ca:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 80021ce:	4329      	orrs	r1, r5
 80021d0:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80021d2:	69d1      	ldr	r1, [r2, #28]
 80021d4:	4d2a      	ldr	r5, [pc, #168]	; (8002280 <HAL_I2C_Init+0x140>)
 80021d6:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 80021da:	42ab      	cmp	r3, r5
 80021dc:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80021e0:	d832      	bhi.n	8002248 <HAL_I2C_Init+0x108>
 80021e2:	005b      	lsls	r3, r3, #1
 80021e4:	fbb0 f0f3 	udiv	r0, r0, r3
 80021e8:	1c43      	adds	r3, r0, #1
 80021ea:	f640 70fc 	movw	r0, #4092	; 0xffc
 80021ee:	4203      	tst	r3, r0
 80021f0:	d042      	beq.n	8002278 <HAL_I2C_Init+0x138>
 80021f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021f6:	430b      	orrs	r3, r1
 80021f8:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80021fa:	6811      	ldr	r1, [r2, #0]
 80021fc:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 8002200:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 8002204:	4303      	orrs	r3, r0
 8002206:	430b      	orrs	r3, r1
 8002208:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800220a:	6891      	ldr	r1, [r2, #8]
 800220c:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 8002210:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 8002214:	4303      	orrs	r3, r0
 8002216:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 800221a:	430b      	orrs	r3, r1
 800221c:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800221e:	68d1      	ldr	r1, [r2, #12]
 8002220:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 8002224:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002228:	4303      	orrs	r3, r0
 800222a:	430b      	orrs	r3, r1
 800222c:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 800222e:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002230:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 8002232:	f043 0301 	orr.w	r3, r3, #1
 8002236:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8002238:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800223a:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800223c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002240:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002242:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8002246:	e77f      	b.n	8002148 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002248:	68a5      	ldr	r5, [r4, #8]
 800224a:	b955      	cbnz	r5, 8002262 <HAL_I2C_Init+0x122>
 800224c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002250:	fbb0 f3f3 	udiv	r3, r0, r3
 8002254:	3301      	adds	r3, #1
 8002256:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800225a:	b17b      	cbz	r3, 800227c <HAL_I2C_Init+0x13c>
 800225c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002260:	e7c9      	b.n	80021f6 <HAL_I2C_Init+0xb6>
 8002262:	2519      	movs	r5, #25
 8002264:	436b      	muls	r3, r5
 8002266:	fbb0 f3f3 	udiv	r3, r0, r3
 800226a:	3301      	adds	r3, #1
 800226c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002270:	b123      	cbz	r3, 800227c <HAL_I2C_Init+0x13c>
 8002272:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002276:	e7be      	b.n	80021f6 <HAL_I2C_Init+0xb6>
 8002278:	2304      	movs	r3, #4
 800227a:	e7bc      	b.n	80021f6 <HAL_I2C_Init+0xb6>
 800227c:	2301      	movs	r3, #1
 800227e:	e7ba      	b.n	80021f6 <HAL_I2C_Init+0xb6>
 8002280:	000186a0 	.word	0x000186a0
 8002284:	001e847f 	.word	0x001e847f
 8002288:	003d08ff 	.word	0x003d08ff
 800228c:	000f4240 	.word	0x000f4240

08002290 <HAL_I2C_Master_Transmit>:
{
 8002290:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002294:	4604      	mov	r4, r0
 8002296:	b085      	sub	sp, #20
 8002298:	4698      	mov	r8, r3
 800229a:	460d      	mov	r5, r1
 800229c:	4691      	mov	r9, r2
 800229e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 80022a0:	f7ff fa20 	bl	80016e4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 80022a4:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 80022a8:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80022aa:	2b20      	cmp	r3, #32
 80022ac:	d004      	beq.n	80022b8 <HAL_I2C_Master_Transmit+0x28>
    return HAL_BUSY;
 80022ae:	2502      	movs	r5, #2
}
 80022b0:	4628      	mov	r0, r5
 80022b2:	b005      	add	sp, #20
 80022b4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80022b8:	9000      	str	r0, [sp, #0]
 80022ba:	2319      	movs	r3, #25
 80022bc:	2201      	movs	r2, #1
 80022be:	4620      	mov	r0, r4
 80022c0:	495b      	ldr	r1, [pc, #364]	; (8002430 <HAL_I2C_Master_Transmit+0x1a0>)
 80022c2:	f7ff fe54 	bl	8001f6e <I2C_WaitOnFlagUntilTimeout>
 80022c6:	2800      	cmp	r0, #0
 80022c8:	d1f1      	bne.n	80022ae <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 80022ca:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d0ed      	beq.n	80022ae <HAL_I2C_Master_Transmit+0x1e>
 80022d2:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022d4:	6821      	ldr	r1, [r4, #0]
    __HAL_LOCK(hi2c);
 80022d6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80022da:	680b      	ldr	r3, [r1, #0]
 80022dc:	07da      	lsls	r2, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 80022de:	bf5e      	ittt	pl
 80022e0:	680b      	ldrpl	r3, [r1, #0]
 80022e2:	f043 0301 	orrpl.w	r3, r3, #1
 80022e6:	600b      	strpl	r3, [r1, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80022e8:	680b      	ldr	r3, [r1, #0]
 80022ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80022ee:	600b      	str	r3, [r1, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80022f0:	2321      	movs	r3, #33	; 0x21
 80022f2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80022f6:	2310      	movs	r3, #16
 80022f8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80022fc:	2300      	movs	r3, #0
 80022fe:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8002300:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002304:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8002306:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 800230a:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800230c:	4b49      	ldr	r3, [pc, #292]	; (8002434 <HAL_I2C_Master_Transmit+0x1a4>)
 800230e:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002310:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002312:	2b08      	cmp	r3, #8
 8002314:	d004      	beq.n	8002320 <HAL_I2C_Master_Transmit+0x90>
 8002316:	2b01      	cmp	r3, #1
 8002318:	d002      	beq.n	8002320 <HAL_I2C_Master_Transmit+0x90>
 800231a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800231e:	d104      	bne.n	800232a <HAL_I2C_Master_Transmit+0x9a>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002320:	680b      	ldr	r3, [r1, #0]
 8002322:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002326:	600b      	str	r3, [r1, #0]
 8002328:	e002      	b.n	8002330 <HAL_I2C_Master_Transmit+0xa0>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 800232a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800232c:	2b12      	cmp	r3, #18
 800232e:	d0f7      	beq.n	8002320 <HAL_I2C_Master_Transmit+0x90>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002330:	2200      	movs	r2, #0
 8002332:	463b      	mov	r3, r7
 8002334:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002338:	4620      	mov	r0, r4
 800233a:	9600      	str	r6, [sp, #0]
 800233c:	f7ff fe17 	bl	8001f6e <I2C_WaitOnFlagUntilTimeout>
 8002340:	6822      	ldr	r2, [r4, #0]
 8002342:	b138      	cbz	r0, 8002354 <HAL_I2C_Master_Transmit+0xc4>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002344:	6813      	ldr	r3, [r2, #0]
 8002346:	05db      	lsls	r3, r3, #23
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002348:	bf44      	itt	mi
 800234a:	f44f 7300 	movmi.w	r3, #512	; 0x200
 800234e:	6423      	strmi	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002350:	2501      	movs	r5, #1
 8002352:	e7ad      	b.n	80022b0 <HAL_I2C_Master_Transmit+0x20>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002354:	6923      	ldr	r3, [r4, #16]
 8002356:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800235a:	d121      	bne.n	80023a0 <HAL_I2C_Master_Transmit+0x110>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800235c:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8002360:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002362:	4633      	mov	r3, r6
 8002364:	463a      	mov	r2, r7
 8002366:	4620      	mov	r0, r4
 8002368:	4933      	ldr	r1, [pc, #204]	; (8002438 <HAL_I2C_Master_Transmit+0x1a8>)
 800236a:	f7ff fe32 	bl	8001fd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800236e:	4605      	mov	r5, r0
 8002370:	2800      	cmp	r0, #0
 8002372:	d1ed      	bne.n	8002350 <HAL_I2C_Master_Transmit+0xc0>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002374:	6823      	ldr	r3, [r4, #0]
 8002376:	9003      	str	r0, [sp, #12]
 8002378:	695a      	ldr	r2, [r3, #20]
 800237a:	9203      	str	r2, [sp, #12]
 800237c:	699b      	ldr	r3, [r3, #24]
 800237e:	9303      	str	r3, [sp, #12]
 8002380:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8002382:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002384:	b9f3      	cbnz	r3, 80023c4 <HAL_I2C_Master_Transmit+0x134>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002386:	6821      	ldr	r1, [r4, #0]
 8002388:	680a      	ldr	r2, [r1, #0]
 800238a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800238e:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002390:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8002392:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8002396:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800239a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 800239e:	e787      	b.n	80022b0 <HAL_I2C_Master_Transmit+0x20>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80023a0:	11eb      	asrs	r3, r5, #7
 80023a2:	f003 0306 	and.w	r3, r3, #6
 80023a6:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 80023aa:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80023ac:	4620      	mov	r0, r4
 80023ae:	4633      	mov	r3, r6
 80023b0:	463a      	mov	r2, r7
 80023b2:	4922      	ldr	r1, [pc, #136]	; (800243c <HAL_I2C_Master_Transmit+0x1ac>)
 80023b4:	f7ff fe0d 	bl	8001fd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023b8:	2800      	cmp	r0, #0
 80023ba:	d1c9      	bne.n	8002350 <HAL_I2C_Master_Transmit+0xc0>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80023bc:	6823      	ldr	r3, [r4, #0]
 80023be:	b2ed      	uxtb	r5, r5
 80023c0:	611d      	str	r5, [r3, #16]
 80023c2:	e7ce      	b.n	8002362 <HAL_I2C_Master_Transmit+0xd2>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80023c4:	4632      	mov	r2, r6
 80023c6:	4639      	mov	r1, r7
 80023c8:	4620      	mov	r0, r4
 80023ca:	f7ff fe92 	bl	80020f2 <I2C_WaitOnTXEFlagUntilTimeout>
 80023ce:	b140      	cbz	r0, 80023e2 <HAL_I2C_Master_Transmit+0x152>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80023d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80023d2:	2b04      	cmp	r3, #4
 80023d4:	d1bc      	bne.n	8002350 <HAL_I2C_Master_Transmit+0xc0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80023d6:	6822      	ldr	r2, [r4, #0]
 80023d8:	6813      	ldr	r3, [r2, #0]
 80023da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023de:	6013      	str	r3, [r2, #0]
 80023e0:	e7b6      	b.n	8002350 <HAL_I2C_Master_Transmit+0xc0>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80023e2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80023e4:	6820      	ldr	r0, [r4, #0]
 80023e6:	461a      	mov	r2, r3
 80023e8:	f812 1b01 	ldrb.w	r1, [r2], #1
 80023ec:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 80023ee:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80023f0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80023f2:	3a01      	subs	r2, #1
 80023f4:	b292      	uxth	r2, r2
 80023f6:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80023f8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80023fa:	f8d0 c014 	ldr.w	ip, [r0, #20]
      hi2c->XferSize--;
 80023fe:	1e51      	subs	r1, r2, #1
 8002400:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002402:	f01c 0f04 	tst.w	ip, #4
      hi2c->XferSize--;
 8002406:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002408:	d00a      	beq.n	8002420 <HAL_I2C_Master_Transmit+0x190>
 800240a:	b149      	cbz	r1, 8002420 <HAL_I2C_Master_Transmit+0x190>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800240c:	7859      	ldrb	r1, [r3, #1]
        hi2c->pBuffPtr++;
 800240e:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002410:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 8002412:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8002414:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 8002416:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 8002418:	3b01      	subs	r3, #1
 800241a:	b29b      	uxth	r3, r3
 800241c:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 800241e:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002420:	4632      	mov	r2, r6
 8002422:	4639      	mov	r1, r7
 8002424:	4620      	mov	r0, r4
 8002426:	f7ff fe3e 	bl	80020a6 <I2C_WaitOnBTFFlagUntilTimeout>
 800242a:	2800      	cmp	r0, #0
 800242c:	d0a9      	beq.n	8002382 <HAL_I2C_Master_Transmit+0xf2>
 800242e:	e7cf      	b.n	80023d0 <HAL_I2C_Master_Transmit+0x140>
 8002430:	00100002 	.word	0x00100002
 8002434:	ffff0000 	.word	0xffff0000
 8002438:	00010002 	.word	0x00010002
 800243c:	00010008 	.word	0x00010008

08002440 <HAL_I2C_Master_Receive>:
{
 8002440:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002444:	4604      	mov	r4, r0
 8002446:	b089      	sub	sp, #36	; 0x24
 8002448:	4698      	mov	r8, r3
 800244a:	460e      	mov	r6, r1
 800244c:	4691      	mov	r9, r2
 800244e:	9f10      	ldr	r7, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8002450:	f7ff f948 	bl	80016e4 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002454:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8002458:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800245a:	2b20      	cmp	r3, #32
 800245c:	d004      	beq.n	8002468 <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY;
 800245e:	2602      	movs	r6, #2
}
 8002460:	4630      	mov	r0, r6
 8002462:	b009      	add	sp, #36	; 0x24
 8002464:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002468:	9000      	str	r0, [sp, #0]
 800246a:	2319      	movs	r3, #25
 800246c:	2201      	movs	r2, #1
 800246e:	4620      	mov	r0, r4
 8002470:	4998      	ldr	r1, [pc, #608]	; (80026d4 <HAL_I2C_Master_Receive+0x294>)
 8002472:	f7ff fd7c 	bl	8001f6e <I2C_WaitOnFlagUntilTimeout>
 8002476:	2800      	cmp	r0, #0
 8002478:	d1f1      	bne.n	800245e <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 800247a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800247e:	2b01      	cmp	r3, #1
 8002480:	d0ed      	beq.n	800245e <HAL_I2C_Master_Receive+0x1e>
 8002482:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002484:	6821      	ldr	r1, [r4, #0]
    __HAL_LOCK(hi2c);
 8002486:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800248a:	680b      	ldr	r3, [r1, #0]
 800248c:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 800248e:	bf5e      	ittt	pl
 8002490:	680b      	ldrpl	r3, [r1, #0]
 8002492:	f043 0301 	orrpl.w	r3, r3, #1
 8002496:	600b      	strpl	r3, [r1, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002498:	680b      	ldr	r3, [r1, #0]
 800249a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800249e:	600b      	str	r3, [r1, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80024a0:	2322      	movs	r3, #34	; 0x22
 80024a2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80024a6:	2310      	movs	r3, #16
 80024a8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80024ac:	2300      	movs	r3, #0
 80024ae:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80024b0:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024b4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 80024b6:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 80024ba:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024bc:	4b86      	ldr	r3, [pc, #536]	; (80026d8 <HAL_I2C_Master_Receive+0x298>)
 80024be:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80024c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024c2:	680a      	ldr	r2, [r1, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80024c4:	2b08      	cmp	r3, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80024c6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80024ca:	600a      	str	r2, [r1, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80024cc:	d004      	beq.n	80024d8 <HAL_I2C_Master_Receive+0x98>
 80024ce:	2b01      	cmp	r3, #1
 80024d0:	d002      	beq.n	80024d8 <HAL_I2C_Master_Receive+0x98>
 80024d2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80024d6:	d104      	bne.n	80024e2 <HAL_I2C_Master_Receive+0xa2>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024d8:	680b      	ldr	r3, [r1, #0]
 80024da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024de:	600b      	str	r3, [r1, #0]
 80024e0:	e002      	b.n	80024e8 <HAL_I2C_Master_Receive+0xa8>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80024e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80024e4:	2b11      	cmp	r3, #17
 80024e6:	d0f7      	beq.n	80024d8 <HAL_I2C_Master_Receive+0x98>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024e8:	463b      	mov	r3, r7
 80024ea:	2200      	movs	r2, #0
 80024ec:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024f0:	4620      	mov	r0, r4
 80024f2:	9500      	str	r5, [sp, #0]
 80024f4:	f7ff fd3b 	bl	8001f6e <I2C_WaitOnFlagUntilTimeout>
 80024f8:	6823      	ldr	r3, [r4, #0]
 80024fa:	b138      	cbz	r0, 800250c <HAL_I2C_Master_Receive+0xcc>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024fc:	681b      	ldr	r3, [r3, #0]
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024fe:	05d8      	lsls	r0, r3, #23
 8002500:	d502      	bpl.n	8002508 <HAL_I2C_Master_Receive+0xc8>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002502:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002506:	6423      	str	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002508:	2601      	movs	r6, #1
 800250a:	e7a9      	b.n	8002460 <HAL_I2C_Master_Receive+0x20>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800250c:	6922      	ldr	r2, [r4, #16]
 800250e:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 8002512:	d127      	bne.n	8002564 <HAL_I2C_Master_Receive+0x124>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002514:	f046 0601 	orr.w	r6, r6, #1
 8002518:	b2f6      	uxtb	r6, r6
 800251a:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800251c:	462b      	mov	r3, r5
 800251e:	463a      	mov	r2, r7
 8002520:	4620      	mov	r0, r4
 8002522:	496e      	ldr	r1, [pc, #440]	; (80026dc <HAL_I2C_Master_Receive+0x29c>)
 8002524:	f7ff fd55 	bl	8001fd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002528:	4606      	mov	r6, r0
 800252a:	2800      	cmp	r0, #0
 800252c:	d1ec      	bne.n	8002508 <HAL_I2C_Master_Receive+0xc8>
    if (hi2c->XferSize == 0U)
 800252e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002530:	6821      	ldr	r1, [r4, #0]
    if (hi2c->XferSize == 0U)
 8002532:	2b00      	cmp	r3, #0
 8002534:	d14b      	bne.n	80025ce <HAL_I2C_Master_Receive+0x18e>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002536:	9003      	str	r0, [sp, #12]
 8002538:	694b      	ldr	r3, [r1, #20]
 800253a:	9303      	str	r3, [sp, #12]
 800253c:	698b      	ldr	r3, [r1, #24]
 800253e:	9303      	str	r3, [sp, #12]
 8002540:	9b03      	ldr	r3, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002542:	680b      	ldr	r3, [r1, #0]
 8002544:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002548:	600b      	str	r3, [r1, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800254a:	f8df 8194 	ldr.w	r8, [pc, #404]	; 80026e0 <HAL_I2C_Master_Receive+0x2a0>
    while (hi2c->XferSize > 0U)
 800254e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002550:	2b00      	cmp	r3, #0
 8002552:	d164      	bne.n	800261e <HAL_I2C_Master_Receive+0x1de>
    hi2c->State = HAL_I2C_STATE_READY;
 8002554:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8002556:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 800255a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800255e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8002562:	e77d      	b.n	8002460 <HAL_I2C_Master_Receive+0x20>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002564:	ea4f 18e6 	mov.w	r8, r6, asr #7
 8002568:	f008 0806 	and.w	r8, r8, #6
 800256c:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8002570:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002572:	4620      	mov	r0, r4
 8002574:	462b      	mov	r3, r5
 8002576:	463a      	mov	r2, r7
 8002578:	495a      	ldr	r1, [pc, #360]	; (80026e4 <HAL_I2C_Master_Receive+0x2a4>)
 800257a:	f7ff fd2a 	bl	8001fd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800257e:	2800      	cmp	r0, #0
 8002580:	d1c2      	bne.n	8002508 <HAL_I2C_Master_Receive+0xc8>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002582:	6823      	ldr	r3, [r4, #0]
 8002584:	b2f6      	uxtb	r6, r6
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002586:	463a      	mov	r2, r7
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002588:	611e      	str	r6, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800258a:	4620      	mov	r0, r4
 800258c:	462b      	mov	r3, r5
 800258e:	4953      	ldr	r1, [pc, #332]	; (80026dc <HAL_I2C_Master_Receive+0x29c>)
 8002590:	f7ff fd1f 	bl	8001fd2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002594:	4602      	mov	r2, r0
 8002596:	2800      	cmp	r0, #0
 8002598:	d1b6      	bne.n	8002508 <HAL_I2C_Master_Receive+0xc8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800259a:	6823      	ldr	r3, [r4, #0]
 800259c:	9007      	str	r0, [sp, #28]
 800259e:	6959      	ldr	r1, [r3, #20]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025a0:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025a2:	9107      	str	r1, [sp, #28]
 80025a4:	6999      	ldr	r1, [r3, #24]
 80025a6:	9107      	str	r1, [sp, #28]
 80025a8:	9907      	ldr	r1, [sp, #28]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025aa:	6819      	ldr	r1, [r3, #0]
 80025ac:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 80025b0:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80025b2:	463b      	mov	r3, r7
 80025b4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80025b8:	9500      	str	r5, [sp, #0]
 80025ba:	f7ff fcd8 	bl	8001f6e <I2C_WaitOnFlagUntilTimeout>
 80025be:	6822      	ldr	r2, [r4, #0]
 80025c0:	b108      	cbz	r0, 80025c6 <HAL_I2C_Master_Receive+0x186>
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80025c2:	6813      	ldr	r3, [r2, #0]
 80025c4:	e79b      	b.n	80024fe <HAL_I2C_Master_Receive+0xbe>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80025c6:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 80025ca:	6113      	str	r3, [r2, #16]
 80025cc:	e7a6      	b.n	800251c <HAL_I2C_Master_Receive+0xdc>
    else if (hi2c->XferSize == 1U)
 80025ce:	2b01      	cmp	r3, #1
 80025d0:	d10a      	bne.n	80025e8 <HAL_I2C_Master_Receive+0x1a8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025d2:	680b      	ldr	r3, [r1, #0]
 80025d4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80025d8:	600b      	str	r3, [r1, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025da:	9004      	str	r0, [sp, #16]
 80025dc:	694b      	ldr	r3, [r1, #20]
 80025de:	9304      	str	r3, [sp, #16]
 80025e0:	698b      	ldr	r3, [r1, #24]
 80025e2:	9304      	str	r3, [sp, #16]
 80025e4:	9b04      	ldr	r3, [sp, #16]
 80025e6:	e7ac      	b.n	8002542 <HAL_I2C_Master_Receive+0x102>
    else if (hi2c->XferSize == 2U)
 80025e8:	2b02      	cmp	r3, #2
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025ea:	680b      	ldr	r3, [r1, #0]
    else if (hi2c->XferSize == 2U)
 80025ec:	d10d      	bne.n	800260a <HAL_I2C_Master_Receive+0x1ca>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80025ee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80025f2:	600b      	str	r3, [r1, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80025f4:	680b      	ldr	r3, [r1, #0]
 80025f6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80025fa:	600b      	str	r3, [r1, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80025fc:	9005      	str	r0, [sp, #20]
 80025fe:	694b      	ldr	r3, [r1, #20]
 8002600:	9305      	str	r3, [sp, #20]
 8002602:	698b      	ldr	r3, [r1, #24]
 8002604:	9305      	str	r3, [sp, #20]
 8002606:	9b05      	ldr	r3, [sp, #20]
 8002608:	e79f      	b.n	800254a <HAL_I2C_Master_Receive+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800260a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800260e:	600b      	str	r3, [r1, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002610:	9006      	str	r0, [sp, #24]
 8002612:	694b      	ldr	r3, [r1, #20]
 8002614:	9306      	str	r3, [sp, #24]
 8002616:	698b      	ldr	r3, [r1, #24]
 8002618:	9306      	str	r3, [sp, #24]
 800261a:	9b06      	ldr	r3, [sp, #24]
 800261c:	e795      	b.n	800254a <HAL_I2C_Master_Receive+0x10a>
      if (hi2c->XferSize <= 3U)
 800261e:	2b03      	cmp	r3, #3
 8002620:	d862      	bhi.n	80026e8 <HAL_I2C_Master_Receive+0x2a8>
        if (hi2c->XferSize == 1U)
 8002622:	2b01      	cmp	r3, #1
 8002624:	d116      	bne.n	8002654 <HAL_I2C_Master_Receive+0x214>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002626:	462a      	mov	r2, r5
 8002628:	4639      	mov	r1, r7
 800262a:	4620      	mov	r0, r4
 800262c:	f7ff fd0c 	bl	8002048 <I2C_WaitOnRXNEFlagUntilTimeout>
 8002630:	2800      	cmp	r0, #0
 8002632:	f47f af69 	bne.w	8002508 <HAL_I2C_Master_Receive+0xc8>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002636:	6823      	ldr	r3, [r4, #0]
 8002638:	691a      	ldr	r2, [r3, #16]
 800263a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800263c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800263e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002640:	3301      	adds	r3, #1
 8002642:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002644:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002646:	3b01      	subs	r3, #1
 8002648:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800264a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800264c:	3b01      	subs	r3, #1
 800264e:	b29b      	uxth	r3, r3
 8002650:	8563      	strh	r3, [r4, #42]	; 0x2a
 8002652:	e77c      	b.n	800254e <HAL_I2C_Master_Receive+0x10e>
        else if (hi2c->XferSize == 2U)
 8002654:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002656:	f04f 0200 	mov.w	r2, #0
 800265a:	463b      	mov	r3, r7
 800265c:	4641      	mov	r1, r8
 800265e:	4620      	mov	r0, r4
 8002660:	9500      	str	r5, [sp, #0]
        else if (hi2c->XferSize == 2U)
 8002662:	d11a      	bne.n	800269a <HAL_I2C_Master_Receive+0x25a>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002664:	f7ff fc83 	bl	8001f6e <I2C_WaitOnFlagUntilTimeout>
 8002668:	2800      	cmp	r0, #0
 800266a:	f47f af4d 	bne.w	8002508 <HAL_I2C_Master_Receive+0xc8>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800266e:	6823      	ldr	r3, [r4, #0]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002676:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002678:	691a      	ldr	r2, [r3, #16]
 800267a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800267c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800267e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002680:	1c53      	adds	r3, r2, #1
 8002682:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002684:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002686:	3b01      	subs	r3, #1
 8002688:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800268a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800268c:	3b01      	subs	r3, #1
 800268e:	b29b      	uxth	r3, r3
 8002690:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002692:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002694:	691b      	ldr	r3, [r3, #16]
 8002696:	7053      	strb	r3, [r2, #1]
 8002698:	e7d1      	b.n	800263e <HAL_I2C_Master_Receive+0x1fe>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800269a:	f7ff fc68 	bl	8001f6e <I2C_WaitOnFlagUntilTimeout>
 800269e:	4602      	mov	r2, r0
 80026a0:	2800      	cmp	r0, #0
 80026a2:	f47f af31 	bne.w	8002508 <HAL_I2C_Master_Receive+0xc8>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026a6:	6823      	ldr	r3, [r4, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026a8:	4620      	mov	r0, r4
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026aa:	6819      	ldr	r1, [r3, #0]
 80026ac:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 80026b0:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026b2:	6919      	ldr	r1, [r3, #16]
 80026b4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80026b6:	7019      	strb	r1, [r3, #0]
          hi2c->pBuffPtr++;
 80026b8:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026ba:	4641      	mov	r1, r8
          hi2c->pBuffPtr++;
 80026bc:	3301      	adds	r3, #1
 80026be:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80026c0:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026c2:	9500      	str	r5, [sp, #0]
          hi2c->XferSize--;
 80026c4:	3b01      	subs	r3, #1
 80026c6:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80026c8:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80026ca:	3b01      	subs	r3, #1
 80026cc:	b29b      	uxth	r3, r3
 80026ce:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026d0:	463b      	mov	r3, r7
 80026d2:	e7c7      	b.n	8002664 <HAL_I2C_Master_Receive+0x224>
 80026d4:	00100002 	.word	0x00100002
 80026d8:	ffff0000 	.word	0xffff0000
 80026dc:	00010002 	.word	0x00010002
 80026e0:	00010004 	.word	0x00010004
 80026e4:	00010008 	.word	0x00010008
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80026e8:	462a      	mov	r2, r5
 80026ea:	4639      	mov	r1, r7
 80026ec:	4620      	mov	r0, r4
 80026ee:	f7ff fcab 	bl	8002048 <I2C_WaitOnRXNEFlagUntilTimeout>
 80026f2:	2800      	cmp	r0, #0
 80026f4:	f47f af08 	bne.w	8002508 <HAL_I2C_Master_Receive+0xc8>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80026f8:	6823      	ldr	r3, [r4, #0]
 80026fa:	691a      	ldr	r2, [r3, #16]
 80026fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80026fe:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8002700:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002702:	1c53      	adds	r3, r2, #1
 8002704:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8002706:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002708:	3b01      	subs	r3, #1
 800270a:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 800270c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800270e:	3b01      	subs	r3, #1
 8002710:	b29b      	uxth	r3, r3
 8002712:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002714:	6823      	ldr	r3, [r4, #0]
 8002716:	6959      	ldr	r1, [r3, #20]
 8002718:	0749      	lsls	r1, r1, #29
 800271a:	f57f af18 	bpl.w	800254e <HAL_I2C_Master_Receive+0x10e>
 800271e:	e7b9      	b.n	8002694 <HAL_I2C_Master_Receive+0x254>

08002720 <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002720:	4b1c      	ldr	r3, [pc, #112]	; (8002794 <RCC_SetFlashLatencyFromMSIRange+0x74>)
{
 8002722:	b082      	sub	sp, #8
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002724:	689a      	ldr	r2, [r3, #8]
 8002726:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 800272a:	d00c      	beq.n	8002746 <RCC_SetFlashLatencyFromMSIRange+0x26>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800272c:	2200      	movs	r2, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800272e:	491a      	ldr	r1, [pc, #104]	; (8002798 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8002730:	680b      	ldr	r3, [r1, #0]
 8002732:	f023 0301 	bic.w	r3, r3, #1
 8002736:	4313      	orrs	r3, r2
 8002738:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800273a:	6808      	ldr	r0, [r1, #0]
 800273c:	f000 0001 	and.w	r0, r0, #1
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8002740:	4050      	eors	r0, r2
 8002742:	b002      	add	sp, #8
 8002744:	4770      	bx	lr
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002746:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002748:	4914      	ldr	r1, [pc, #80]	; (800279c <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 800274a:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 800274e:	d00f      	beq.n	8002770 <RCC_SetFlashLatencyFromMSIRange+0x50>
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002750:	680a      	ldr	r2, [r1, #0]
 8002752:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8002756:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 800275a:	d1e7      	bne.n	800272c <RCC_SetFlashLatencyFromMSIRange+0xc>
 800275c:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 8002760:	d1e4      	bne.n	800272c <RCC_SetFlashLatencyFromMSIRange+0xc>
  __HAL_FLASH_SET_LATENCY(latency);
 8002762:	4a0d      	ldr	r2, [pc, #52]	; (8002798 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8002764:	6813      	ldr	r3, [r2, #0]
 8002766:	f043 0304 	orr.w	r3, r3, #4
 800276a:	6013      	str	r3, [r2, #0]
      latency = FLASH_LATENCY_1; /* 1WS */
 800276c:	2201      	movs	r2, #1
 800276e:	e7de      	b.n	800272e <RCC_SetFlashLatencyFromMSIRange+0xe>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002770:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002772:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002776:	625a      	str	r2, [r3, #36]	; 0x24
 8002778:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800277a:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800277e:	9201      	str	r2, [sp, #4]
 8002780:	9a01      	ldr	r2, [sp, #4]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002782:	680a      	ldr	r2, [r1, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 8002784:	6a59      	ldr	r1, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002786:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 800278a:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
 800278e:	6259      	str	r1, [r3, #36]	; 0x24
 8002790:	e7e1      	b.n	8002756 <RCC_SetFlashLatencyFromMSIRange+0x36>
 8002792:	bf00      	nop
 8002794:	40023800 	.word	0x40023800
 8002798:	40023c00 	.word	0x40023c00
 800279c:	40007000 	.word	0x40007000

080027a0 <HAL_RCC_OscConfig>:
{
 80027a0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 80027a4:	4604      	mov	r4, r0
 80027a6:	2800      	cmp	r0, #0
 80027a8:	d060      	beq.n	800286c <HAL_RCC_OscConfig+0xcc>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027aa:	4b91      	ldr	r3, [pc, #580]	; (80029f0 <HAL_RCC_OscConfig+0x250>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ac:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027ae:	689e      	ldr	r6, [r3, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027b0:	689f      	ldr	r7, [r3, #8]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027b2:	07d0      	lsls	r0, r2, #31
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80027b4:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80027b8:	f407 3780 	and.w	r7, r7, #65536	; 0x10000
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027bc:	d44b      	bmi.n	8002856 <HAL_RCC_OscConfig+0xb6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80027be:	6823      	ldr	r3, [r4, #0]
 80027c0:	0799      	lsls	r1, r3, #30
 80027c2:	f100 8097 	bmi.w	80028f4 <HAL_RCC_OscConfig+0x154>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80027c6:	6823      	ldr	r3, [r4, #0]
 80027c8:	06d8      	lsls	r0, r3, #27
 80027ca:	d536      	bpl.n	800283a <HAL_RCC_OscConfig+0x9a>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80027cc:	2e00      	cmp	r6, #0
 80027ce:	f040 80e0 	bne.w	8002992 <HAL_RCC_OscConfig+0x1f2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80027d2:	4d87      	ldr	r5, [pc, #540]	; (80029f0 <HAL_RCC_OscConfig+0x250>)
 80027d4:	682b      	ldr	r3, [r5, #0]
 80027d6:	0599      	lsls	r1, r3, #22
 80027d8:	d502      	bpl.n	80027e0 <HAL_RCC_OscConfig+0x40>
 80027da:	69a3      	ldr	r3, [r4, #24]
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d045      	beq.n	800286c <HAL_RCC_OscConfig+0xcc>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80027e0:	686b      	ldr	r3, [r5, #4]
 80027e2:	6a20      	ldr	r0, [r4, #32]
 80027e4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 80027e8:	4298      	cmp	r0, r3
 80027ea:	f240 80c0 	bls.w	800296e <HAL_RCC_OscConfig+0x1ce>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80027ee:	f7ff ff97 	bl	8002720 <RCC_SetFlashLatencyFromMSIRange>
 80027f2:	2800      	cmp	r0, #0
 80027f4:	d13a      	bne.n	800286c <HAL_RCC_OscConfig+0xcc>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80027f6:	686b      	ldr	r3, [r5, #4]
 80027f8:	6a22      	ldr	r2, [r4, #32]
 80027fa:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80027fe:	4313      	orrs	r3, r2
 8002800:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002802:	686b      	ldr	r3, [r5, #4]
 8002804:	69e2      	ldr	r2, [r4, #28]
 8002806:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800280a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800280e:	606b      	str	r3, [r5, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002810:	4b77      	ldr	r3, [pc, #476]	; (80029f0 <HAL_RCC_OscConfig+0x250>)
 8002812:	6899      	ldr	r1, [r3, #8]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8002814:	6a23      	ldr	r3, [r4, #32]
 8002816:	0b5b      	lsrs	r3, r3, #13
 8002818:	1c5a      	adds	r2, r3, #1
 800281a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800281e:	4093      	lsls	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8002820:	f3c1 1203 	ubfx	r2, r1, #4, #4
 8002824:	4973      	ldr	r1, [pc, #460]	; (80029f4 <HAL_RCC_OscConfig+0x254>)
 8002826:	5c8a      	ldrb	r2, [r1, r2]
 8002828:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 800282a:	4a73      	ldr	r2, [pc, #460]	; (80029f8 <HAL_RCC_OscConfig+0x258>)
 800282c:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 800282e:	4b73      	ldr	r3, [pc, #460]	; (80029fc <HAL_RCC_OscConfig+0x25c>)
 8002830:	6818      	ldr	r0, [r3, #0]
 8002832:	f7fe fd95 	bl	8001360 <HAL_InitTick>
        if(status != HAL_OK)
 8002836:	2800      	cmp	r0, #0
 8002838:	d130      	bne.n	800289c <HAL_RCC_OscConfig+0xfc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800283a:	6823      	ldr	r3, [r4, #0]
 800283c:	0718      	lsls	r0, r3, #28
 800283e:	f100 80e1 	bmi.w	8002a04 <HAL_RCC_OscConfig+0x264>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002842:	6823      	ldr	r3, [r4, #0]
 8002844:	0759      	lsls	r1, r3, #29
 8002846:	f100 8101 	bmi.w	8002a4c <HAL_RCC_OscConfig+0x2ac>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800284a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800284c:	2800      	cmp	r0, #0
 800284e:	f040 8169 	bne.w	8002b24 <HAL_RCC_OscConfig+0x384>
  return HAL_OK;
 8002852:	2000      	movs	r0, #0
 8002854:	e022      	b.n	800289c <HAL_RCC_OscConfig+0xfc>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002856:	2e08      	cmp	r6, #8
 8002858:	d002      	beq.n	8002860 <HAL_RCC_OscConfig+0xc0>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 800285a:	2e0c      	cmp	r6, #12
 800285c:	d108      	bne.n	8002870 <HAL_RCC_OscConfig+0xd0>
 800285e:	b13f      	cbz	r7, 8002870 <HAL_RCC_OscConfig+0xd0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	039a      	lsls	r2, r3, #14
 8002864:	d5ab      	bpl.n	80027be <HAL_RCC_OscConfig+0x1e>
 8002866:	6863      	ldr	r3, [r4, #4]
 8002868:	2b00      	cmp	r3, #0
 800286a:	d1a8      	bne.n	80027be <HAL_RCC_OscConfig+0x1e>
          return HAL_ERROR;
 800286c:	2001      	movs	r0, #1
 800286e:	e015      	b.n	800289c <HAL_RCC_OscConfig+0xfc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002870:	6862      	ldr	r2, [r4, #4]
 8002872:	2a01      	cmp	r2, #1
 8002874:	d115      	bne.n	80028a2 <HAL_RCC_OscConfig+0x102>
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800287c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800287e:	f7fe ff31 	bl	80016e4 <HAL_GetTick>
 8002882:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002884:	f8df 8168 	ldr.w	r8, [pc, #360]	; 80029f0 <HAL_RCC_OscConfig+0x250>
 8002888:	f8d8 3000 	ldr.w	r3, [r8]
 800288c:	039b      	lsls	r3, r3, #14
 800288e:	d496      	bmi.n	80027be <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002890:	f7fe ff28 	bl	80016e4 <HAL_GetTick>
 8002894:	1b40      	subs	r0, r0, r5
 8002896:	2864      	cmp	r0, #100	; 0x64
 8002898:	d9f6      	bls.n	8002888 <HAL_RCC_OscConfig+0xe8>
            return HAL_TIMEOUT;
 800289a:	2003      	movs	r0, #3
}
 800289c:	b003      	add	sp, #12
 800289e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028a2:	4d53      	ldr	r5, [pc, #332]	; (80029f0 <HAL_RCC_OscConfig+0x250>)
 80028a4:	682b      	ldr	r3, [r5, #0]
 80028a6:	b9a2      	cbnz	r2, 80028d2 <HAL_RCC_OscConfig+0x132>
 80028a8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028ac:	602b      	str	r3, [r5, #0]
 80028ae:	682b      	ldr	r3, [r5, #0]
 80028b0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80028b4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80028b6:	f7fe ff15 	bl	80016e4 <HAL_GetTick>
 80028ba:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80028bc:	682b      	ldr	r3, [r5, #0]
 80028be:	0398      	lsls	r0, r3, #14
 80028c0:	f57f af7d 	bpl.w	80027be <HAL_RCC_OscConfig+0x1e>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028c4:	f7fe ff0e 	bl	80016e4 <HAL_GetTick>
 80028c8:	eba0 0008 	sub.w	r0, r0, r8
 80028cc:	2864      	cmp	r0, #100	; 0x64
 80028ce:	d9f5      	bls.n	80028bc <HAL_RCC_OscConfig+0x11c>
 80028d0:	e7e3      	b.n	800289a <HAL_RCC_OscConfig+0xfa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028d2:	2a05      	cmp	r2, #5
 80028d4:	bf0b      	itete	eq
 80028d6:	f443 2380 	orreq.w	r3, r3, #262144	; 0x40000
 80028da:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
 80028de:	602b      	streq	r3, [r5, #0]
 80028e0:	602b      	strne	r3, [r5, #0]
 80028e2:	bf0b      	itete	eq
 80028e4:	682b      	ldreq	r3, [r5, #0]
 80028e6:	682b      	ldrne	r3, [r5, #0]
 80028e8:	f443 3380 	orreq.w	r3, r3, #65536	; 0x10000
 80028ec:	f423 2380 	bicne.w	r3, r3, #262144	; 0x40000
 80028f0:	602b      	str	r3, [r5, #0]
 80028f2:	e7c4      	b.n	800287e <HAL_RCC_OscConfig+0xde>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80028f4:	2e04      	cmp	r6, #4
 80028f6:	d002      	beq.n	80028fe <HAL_RCC_OscConfig+0x15e>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80028f8:	2e0c      	cmp	r6, #12
 80028fa:	d10f      	bne.n	800291c <HAL_RCC_OscConfig+0x17c>
 80028fc:	b977      	cbnz	r7, 800291c <HAL_RCC_OscConfig+0x17c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028fe:	4a3c      	ldr	r2, [pc, #240]	; (80029f0 <HAL_RCC_OscConfig+0x250>)
 8002900:	6813      	ldr	r3, [r2, #0]
 8002902:	0799      	lsls	r1, r3, #30
 8002904:	d502      	bpl.n	800290c <HAL_RCC_OscConfig+0x16c>
 8002906:	68e3      	ldr	r3, [r4, #12]
 8002908:	2b01      	cmp	r3, #1
 800290a:	d1af      	bne.n	800286c <HAL_RCC_OscConfig+0xcc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800290c:	6853      	ldr	r3, [r2, #4]
 800290e:	6921      	ldr	r1, [r4, #16]
 8002910:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8002914:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002918:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800291a:	e754      	b.n	80027c6 <HAL_RCC_OscConfig+0x26>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800291c:	68e2      	ldr	r2, [r4, #12]
 800291e:	4b38      	ldr	r3, [pc, #224]	; (8002a00 <HAL_RCC_OscConfig+0x260>)
 8002920:	b1b2      	cbz	r2, 8002950 <HAL_RCC_OscConfig+0x1b0>
        __HAL_RCC_HSI_ENABLE();
 8002922:	2201      	movs	r2, #1
 8002924:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002926:	f7fe fedd 	bl	80016e4 <HAL_GetTick>
 800292a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800292c:	4d30      	ldr	r5, [pc, #192]	; (80029f0 <HAL_RCC_OscConfig+0x250>)
 800292e:	682b      	ldr	r3, [r5, #0]
 8002930:	079a      	lsls	r2, r3, #30
 8002932:	d507      	bpl.n	8002944 <HAL_RCC_OscConfig+0x1a4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002934:	686b      	ldr	r3, [r5, #4]
 8002936:	6922      	ldr	r2, [r4, #16]
 8002938:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800293c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002940:	606b      	str	r3, [r5, #4]
 8002942:	e740      	b.n	80027c6 <HAL_RCC_OscConfig+0x26>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002944:	f7fe fece 	bl	80016e4 <HAL_GetTick>
 8002948:	1bc0      	subs	r0, r0, r7
 800294a:	2802      	cmp	r0, #2
 800294c:	d9ef      	bls.n	800292e <HAL_RCC_OscConfig+0x18e>
 800294e:	e7a4      	b.n	800289a <HAL_RCC_OscConfig+0xfa>
        __HAL_RCC_HSI_DISABLE();
 8002950:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002952:	f7fe fec7 	bl	80016e4 <HAL_GetTick>
 8002956:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002958:	4f25      	ldr	r7, [pc, #148]	; (80029f0 <HAL_RCC_OscConfig+0x250>)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	079b      	lsls	r3, r3, #30
 800295e:	f57f af32 	bpl.w	80027c6 <HAL_RCC_OscConfig+0x26>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002962:	f7fe febf 	bl	80016e4 <HAL_GetTick>
 8002966:	1b40      	subs	r0, r0, r5
 8002968:	2802      	cmp	r0, #2
 800296a:	d9f6      	bls.n	800295a <HAL_RCC_OscConfig+0x1ba>
 800296c:	e795      	b.n	800289a <HAL_RCC_OscConfig+0xfa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800296e:	686b      	ldr	r3, [r5, #4]
 8002970:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002974:	4303      	orrs	r3, r0
 8002976:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002978:	686b      	ldr	r3, [r5, #4]
 800297a:	69e2      	ldr	r2, [r4, #28]
 800297c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002980:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002984:	606b      	str	r3, [r5, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002986:	f7ff fecb 	bl	8002720 <RCC_SetFlashLatencyFromMSIRange>
 800298a:	2800      	cmp	r0, #0
 800298c:	f43f af40 	beq.w	8002810 <HAL_RCC_OscConfig+0x70>
 8002990:	e76c      	b.n	800286c <HAL_RCC_OscConfig+0xcc>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002992:	69a2      	ldr	r2, [r4, #24]
 8002994:	4b1a      	ldr	r3, [pc, #104]	; (8002a00 <HAL_RCC_OscConfig+0x260>)
 8002996:	b1e2      	cbz	r2, 80029d2 <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_MSI_ENABLE();
 8002998:	2201      	movs	r2, #1
 800299a:	621a      	str	r2, [r3, #32]
        tickstart = HAL_GetTick();
 800299c:	f7fe fea2 	bl	80016e4 <HAL_GetTick>
 80029a0:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80029a2:	4d13      	ldr	r5, [pc, #76]	; (80029f0 <HAL_RCC_OscConfig+0x250>)
 80029a4:	682b      	ldr	r3, [r5, #0]
 80029a6:	059a      	lsls	r2, r3, #22
 80029a8:	d50d      	bpl.n	80029c6 <HAL_RCC_OscConfig+0x226>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029aa:	686b      	ldr	r3, [r5, #4]
 80029ac:	6a22      	ldr	r2, [r4, #32]
 80029ae:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80029b2:	4313      	orrs	r3, r2
 80029b4:	606b      	str	r3, [r5, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029b6:	686b      	ldr	r3, [r5, #4]
 80029b8:	69e2      	ldr	r2, [r4, #28]
 80029ba:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80029be:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80029c2:	606b      	str	r3, [r5, #4]
 80029c4:	e739      	b.n	800283a <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029c6:	f7fe fe8d 	bl	80016e4 <HAL_GetTick>
 80029ca:	1bc0      	subs	r0, r0, r7
 80029cc:	2802      	cmp	r0, #2
 80029ce:	d9e9      	bls.n	80029a4 <HAL_RCC_OscConfig+0x204>
 80029d0:	e763      	b.n	800289a <HAL_RCC_OscConfig+0xfa>
        __HAL_RCC_MSI_DISABLE();
 80029d2:	621a      	str	r2, [r3, #32]
        tickstart = HAL_GetTick();
 80029d4:	f7fe fe86 	bl	80016e4 <HAL_GetTick>
 80029d8:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80029da:	4f05      	ldr	r7, [pc, #20]	; (80029f0 <HAL_RCC_OscConfig+0x250>)
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	059b      	lsls	r3, r3, #22
 80029e0:	f57f af2b 	bpl.w	800283a <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80029e4:	f7fe fe7e 	bl	80016e4 <HAL_GetTick>
 80029e8:	1b40      	subs	r0, r0, r5
 80029ea:	2802      	cmp	r0, #2
 80029ec:	d9f6      	bls.n	80029dc <HAL_RCC_OscConfig+0x23c>
 80029ee:	e754      	b.n	800289a <HAL_RCC_OscConfig+0xfa>
 80029f0:	40023800 	.word	0x40023800
 80029f4:	08007654 	.word	0x08007654
 80029f8:	20000000 	.word	0x20000000
 80029fc:	20000008 	.word	0x20000008
 8002a00:	42470000 	.word	0x42470000
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002a04:	6962      	ldr	r2, [r4, #20]
 8002a06:	4b72      	ldr	r3, [pc, #456]	; (8002bd0 <HAL_RCC_OscConfig+0x430>)
 8002a08:	b182      	cbz	r2, 8002a2c <HAL_RCC_OscConfig+0x28c>
      __HAL_RCC_LSI_ENABLE();
 8002a0a:	2201      	movs	r2, #1
 8002a0c:	f8c3 2680 	str.w	r2, [r3, #1664]	; 0x680
      tickstart = HAL_GetTick();
 8002a10:	f7fe fe68 	bl	80016e4 <HAL_GetTick>
 8002a14:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002a16:	4f6f      	ldr	r7, [pc, #444]	; (8002bd4 <HAL_RCC_OscConfig+0x434>)
 8002a18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a1a:	079a      	lsls	r2, r3, #30
 8002a1c:	f53f af11 	bmi.w	8002842 <HAL_RCC_OscConfig+0xa2>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a20:	f7fe fe60 	bl	80016e4 <HAL_GetTick>
 8002a24:	1b40      	subs	r0, r0, r5
 8002a26:	2802      	cmp	r0, #2
 8002a28:	d9f6      	bls.n	8002a18 <HAL_RCC_OscConfig+0x278>
 8002a2a:	e736      	b.n	800289a <HAL_RCC_OscConfig+0xfa>
      __HAL_RCC_LSI_DISABLE();
 8002a2c:	f8c3 2680 	str.w	r2, [r3, #1664]	; 0x680
      tickstart = HAL_GetTick();
 8002a30:	f7fe fe58 	bl	80016e4 <HAL_GetTick>
 8002a34:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002a36:	4f67      	ldr	r7, [pc, #412]	; (8002bd4 <HAL_RCC_OscConfig+0x434>)
 8002a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a3a:	079b      	lsls	r3, r3, #30
 8002a3c:	f57f af01 	bpl.w	8002842 <HAL_RCC_OscConfig+0xa2>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a40:	f7fe fe50 	bl	80016e4 <HAL_GetTick>
 8002a44:	1b40      	subs	r0, r0, r5
 8002a46:	2802      	cmp	r0, #2
 8002a48:	d9f6      	bls.n	8002a38 <HAL_RCC_OscConfig+0x298>
 8002a4a:	e726      	b.n	800289a <HAL_RCC_OscConfig+0xfa>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a4c:	4b61      	ldr	r3, [pc, #388]	; (8002bd4 <HAL_RCC_OscConfig+0x434>)
 8002a4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a50:	00d0      	lsls	r0, r2, #3
 8002a52:	d429      	bmi.n	8002aa8 <HAL_RCC_OscConfig+0x308>
      pwrclkchanged = SET;
 8002a54:	f04f 0801 	mov.w	r8, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a5a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002a5e:	625a      	str	r2, [r3, #36]	; 0x24
 8002a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a66:	9301      	str	r3, [sp, #4]
 8002a68:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a6a:	4d5b      	ldr	r5, [pc, #364]	; (8002bd8 <HAL_RCC_OscConfig+0x438>)
 8002a6c:	682b      	ldr	r3, [r5, #0]
 8002a6e:	05d9      	lsls	r1, r3, #23
 8002a70:	d51d      	bpl.n	8002aae <HAL_RCC_OscConfig+0x30e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a72:	68a3      	ldr	r3, [r4, #8]
 8002a74:	4d57      	ldr	r5, [pc, #348]	; (8002bd4 <HAL_RCC_OscConfig+0x434>)
 8002a76:	2b01      	cmp	r3, #1
 8002a78:	d129      	bne.n	8002ace <HAL_RCC_OscConfig+0x32e>
 8002a7a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002a7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a80:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8002a82:	f7fe fe2f 	bl	80016e4 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002a86:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002a8a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002a8c:	4f51      	ldr	r7, [pc, #324]	; (8002bd4 <HAL_RCC_OscConfig+0x434>)
 8002a8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a90:	059b      	lsls	r3, r3, #22
 8002a92:	d541      	bpl.n	8002b18 <HAL_RCC_OscConfig+0x378>
    if(pwrclkchanged == SET)
 8002a94:	f1b8 0f00 	cmp.w	r8, #0
 8002a98:	f43f aed7 	beq.w	800284a <HAL_RCC_OscConfig+0xaa>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002a9c:	4a4d      	ldr	r2, [pc, #308]	; (8002bd4 <HAL_RCC_OscConfig+0x434>)
 8002a9e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8002aa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002aa4:	6253      	str	r3, [r2, #36]	; 0x24
 8002aa6:	e6d0      	b.n	800284a <HAL_RCC_OscConfig+0xaa>
    FlagStatus       pwrclkchanged = RESET;
 8002aa8:	f04f 0800 	mov.w	r8, #0
 8002aac:	e7dd      	b.n	8002a6a <HAL_RCC_OscConfig+0x2ca>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002aae:	682b      	ldr	r3, [r5, #0]
 8002ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ab4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002ab6:	f7fe fe15 	bl	80016e4 <HAL_GetTick>
 8002aba:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002abc:	682b      	ldr	r3, [r5, #0]
 8002abe:	05da      	lsls	r2, r3, #23
 8002ac0:	d4d7      	bmi.n	8002a72 <HAL_RCC_OscConfig+0x2d2>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002ac2:	f7fe fe0f 	bl	80016e4 <HAL_GetTick>
 8002ac6:	1bc0      	subs	r0, r0, r7
 8002ac8:	2864      	cmp	r0, #100	; 0x64
 8002aca:	d9f7      	bls.n	8002abc <HAL_RCC_OscConfig+0x31c>
 8002acc:	e6e5      	b.n	800289a <HAL_RCC_OscConfig+0xfa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ace:	b9ab      	cbnz	r3, 8002afc <HAL_RCC_OscConfig+0x35c>
 8002ad0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ad2:	f241 3988 	movw	r9, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ad6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002ada:	636b      	str	r3, [r5, #52]	; 0x34
 8002adc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002ade:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002ae2:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8002ae4:	f7fe fdfe 	bl	80016e4 <HAL_GetTick>
 8002ae8:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002aea:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002aec:	0598      	lsls	r0, r3, #22
 8002aee:	d5d1      	bpl.n	8002a94 <HAL_RCC_OscConfig+0x2f4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002af0:	f7fe fdf8 	bl	80016e4 <HAL_GetTick>
 8002af4:	1bc0      	subs	r0, r0, r7
 8002af6:	4548      	cmp	r0, r9
 8002af8:	d9f7      	bls.n	8002aea <HAL_RCC_OscConfig+0x34a>
 8002afa:	e6ce      	b.n	800289a <HAL_RCC_OscConfig+0xfa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002afc:	2b05      	cmp	r3, #5
 8002afe:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002b00:	d103      	bne.n	8002b0a <HAL_RCC_OscConfig+0x36a>
 8002b02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b06:	636b      	str	r3, [r5, #52]	; 0x34
 8002b08:	e7b7      	b.n	8002a7a <HAL_RCC_OscConfig+0x2da>
 8002b0a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002b0e:	636b      	str	r3, [r5, #52]	; 0x34
 8002b10:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002b12:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b16:	e7b3      	b.n	8002a80 <HAL_RCC_OscConfig+0x2e0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b18:	f7fe fde4 	bl	80016e4 <HAL_GetTick>
 8002b1c:	1b40      	subs	r0, r0, r5
 8002b1e:	4548      	cmp	r0, r9
 8002b20:	d9b5      	bls.n	8002a8e <HAL_RCC_OscConfig+0x2ee>
 8002b22:	e6ba      	b.n	800289a <HAL_RCC_OscConfig+0xfa>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b24:	2e0c      	cmp	r6, #12
 8002b26:	d03a      	beq.n	8002b9e <HAL_RCC_OscConfig+0x3fe>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	4b29      	ldr	r3, [pc, #164]	; (8002bd0 <HAL_RCC_OscConfig+0x430>)
 8002b2c:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8002b2e:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b30:	d127      	bne.n	8002b82 <HAL_RCC_OscConfig+0x3e2>
        tickstart = HAL_GetTick();
 8002b32:	f7fe fdd7 	bl	80016e4 <HAL_GetTick>
 8002b36:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b38:	4d26      	ldr	r5, [pc, #152]	; (8002bd4 <HAL_RCC_OscConfig+0x434>)
 8002b3a:	682b      	ldr	r3, [r5, #0]
 8002b3c:	0199      	lsls	r1, r3, #6
 8002b3e:	d41a      	bmi.n	8002b76 <HAL_RCC_OscConfig+0x3d6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b40:	68aa      	ldr	r2, [r5, #8]
 8002b42:	e9d4 310a 	ldrd	r3, r1, [r4, #40]	; 0x28
 8002b46:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 8002b4a:	430b      	orrs	r3, r1
 8002b4c:	4313      	orrs	r3, r2
 8002b4e:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002b50:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8002b52:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b54:	60ab      	str	r3, [r5, #8]
        __HAL_RCC_PLL_ENABLE();
 8002b56:	4b1e      	ldr	r3, [pc, #120]	; (8002bd0 <HAL_RCC_OscConfig+0x430>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b58:	4d1e      	ldr	r5, [pc, #120]	; (8002bd4 <HAL_RCC_OscConfig+0x434>)
        __HAL_RCC_PLL_ENABLE();
 8002b5a:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002b5c:	f7fe fdc2 	bl	80016e4 <HAL_GetTick>
 8002b60:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002b62:	682b      	ldr	r3, [r5, #0]
 8002b64:	019a      	lsls	r2, r3, #6
 8002b66:	f53f ae74 	bmi.w	8002852 <HAL_RCC_OscConfig+0xb2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b6a:	f7fe fdbb 	bl	80016e4 <HAL_GetTick>
 8002b6e:	1b00      	subs	r0, r0, r4
 8002b70:	2802      	cmp	r0, #2
 8002b72:	d9f6      	bls.n	8002b62 <HAL_RCC_OscConfig+0x3c2>
 8002b74:	e691      	b.n	800289a <HAL_RCC_OscConfig+0xfa>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b76:	f7fe fdb5 	bl	80016e4 <HAL_GetTick>
 8002b7a:	1b80      	subs	r0, r0, r6
 8002b7c:	2802      	cmp	r0, #2
 8002b7e:	d9dc      	bls.n	8002b3a <HAL_RCC_OscConfig+0x39a>
 8002b80:	e68b      	b.n	800289a <HAL_RCC_OscConfig+0xfa>
        tickstart = HAL_GetTick();
 8002b82:	f7fe fdaf 	bl	80016e4 <HAL_GetTick>
 8002b86:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002b88:	4d12      	ldr	r5, [pc, #72]	; (8002bd4 <HAL_RCC_OscConfig+0x434>)
 8002b8a:	682b      	ldr	r3, [r5, #0]
 8002b8c:	019b      	lsls	r3, r3, #6
 8002b8e:	f57f ae60 	bpl.w	8002852 <HAL_RCC_OscConfig+0xb2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b92:	f7fe fda7 	bl	80016e4 <HAL_GetTick>
 8002b96:	1b00      	subs	r0, r0, r4
 8002b98:	2802      	cmp	r0, #2
 8002b9a:	d9f6      	bls.n	8002b8a <HAL_RCC_OscConfig+0x3ea>
 8002b9c:	e67d      	b.n	800289a <HAL_RCC_OscConfig+0xfa>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b9e:	2801      	cmp	r0, #1
 8002ba0:	f43f ae7c 	beq.w	800289c <HAL_RCC_OscConfig+0xfc>
        pll_config = RCC->CFGR;
 8002ba4:	4b0b      	ldr	r3, [pc, #44]	; (8002bd4 <HAL_RCC_OscConfig+0x434>)
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002ba6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        pll_config = RCC->CFGR;
 8002ba8:	689b      	ldr	r3, [r3, #8]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002baa:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8002bae:	4291      	cmp	r1, r2
 8002bb0:	f47f ae5c 	bne.w	800286c <HAL_RCC_OscConfig+0xcc>
 8002bb4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002bb6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bba:	428a      	cmp	r2, r1
 8002bbc:	f47f ae56 	bne.w	800286c <HAL_RCC_OscConfig+0xcc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002bc0:	6b22      	ldr	r2, [r4, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002bc2:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002bc6:	4293      	cmp	r3, r2
 8002bc8:	f43f ae43 	beq.w	8002852 <HAL_RCC_OscConfig+0xb2>
 8002bcc:	e64e      	b.n	800286c <HAL_RCC_OscConfig+0xcc>
 8002bce:	bf00      	nop
 8002bd0:	42470000 	.word	0x42470000
 8002bd4:	40023800 	.word	0x40023800
 8002bd8:	40007000 	.word	0x40007000

08002bdc <HAL_RCC_GetSysClockFreq>:
{
 8002bdc:	b508      	push	{r3, lr}
  tmpreg = RCC->CFGR;
 8002bde:	4b15      	ldr	r3, [pc, #84]	; (8002c34 <HAL_RCC_GetSysClockFreq+0x58>)
 8002be0:	689a      	ldr	r2, [r3, #8]
  switch (tmpreg & RCC_CFGR_SWS)
 8002be2:	f002 010c 	and.w	r1, r2, #12
 8002be6:	2908      	cmp	r1, #8
 8002be8:	d021      	beq.n	8002c2e <HAL_RCC_GetSysClockFreq+0x52>
 8002bea:	290c      	cmp	r1, #12
 8002bec:	d003      	beq.n	8002bf6 <HAL_RCC_GetSysClockFreq+0x1a>
 8002bee:	2904      	cmp	r1, #4
 8002bf0:	d115      	bne.n	8002c1e <HAL_RCC_GetSysClockFreq+0x42>
      sysclockfreq = HSI_VALUE;
 8002bf2:	4811      	ldr	r0, [pc, #68]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 8002bf4:	e012      	b.n	8002c1c <HAL_RCC_GetSysClockFreq+0x40>
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bf6:	689b      	ldr	r3, [r3, #8]
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002bf8:	4810      	ldr	r0, [pc, #64]	; (8002c3c <HAL_RCC_GetSysClockFreq+0x60>)
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002bfa:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002bfe:	f3c2 4183 	ubfx	r1, r2, #18, #4
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002c02:	5c41      	ldrb	r1, [r0, r1]
 8002c04:	bf14      	ite	ne
 8002c06:	480e      	ldrne	r0, [pc, #56]	; (8002c40 <HAL_RCC_GetSysClockFreq+0x64>)
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002c08:	480b      	ldreq	r0, [pc, #44]	; (8002c38 <HAL_RCC_GetSysClockFreq+0x5c>)
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002c0a:	f3c2 5281 	ubfx	r2, r2, #22, #2
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002c0e:	bf18      	it	ne
 8002c10:	2300      	movne	r3, #0
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002c12:	fba1 0100 	umull	r0, r1, r1, r0
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002c16:	3201      	adds	r2, #1
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002c18:	f7fd ffd2 	bl	8000bc0 <__aeabi_uldivmod>
}
 8002c1c:	bd08      	pop	{r3, pc}
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002c1e:	6858      	ldr	r0, [r3, #4]
 8002c20:	f3c0 3042 	ubfx	r0, r0, #13, #3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002c24:	1c43      	adds	r3, r0, #1
 8002c26:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002c2a:	4098      	lsls	r0, r3
      break;
 8002c2c:	e7f6      	b.n	8002c1c <HAL_RCC_GetSysClockFreq+0x40>
  switch (tmpreg & RCC_CFGR_SWS)
 8002c2e:	4804      	ldr	r0, [pc, #16]	; (8002c40 <HAL_RCC_GetSysClockFreq+0x64>)
 8002c30:	e7f4      	b.n	8002c1c <HAL_RCC_GetSysClockFreq+0x40>
 8002c32:	bf00      	nop
 8002c34:	40023800 	.word	0x40023800
 8002c38:	00f42400 	.word	0x00f42400
 8002c3c:	0800766c 	.word	0x0800766c
 8002c40:	016e3600 	.word	0x016e3600

08002c44 <HAL_RCC_ClockConfig>:
{
 8002c44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c48:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8002c4a:	4604      	mov	r4, r0
 8002c4c:	b910      	cbnz	r0, 8002c54 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002c4e:	2001      	movs	r0, #1
}
 8002c50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002c54:	4b57      	ldr	r3, [pc, #348]	; (8002db4 <HAL_RCC_ClockConfig+0x170>)
 8002c56:	681a      	ldr	r2, [r3, #0]
 8002c58:	f002 0201 	and.w	r2, r2, #1
 8002c5c:	428a      	cmp	r2, r1
 8002c5e:	d32a      	bcc.n	8002cb6 <HAL_RCC_ClockConfig+0x72>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c60:	6822      	ldr	r2, [r4, #0]
 8002c62:	0796      	lsls	r6, r2, #30
 8002c64:	d438      	bmi.n	8002cd8 <HAL_RCC_ClockConfig+0x94>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c66:	07d0      	lsls	r0, r2, #31
 8002c68:	d43e      	bmi.n	8002ce8 <HAL_RCC_ClockConfig+0xa4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002c6a:	4b52      	ldr	r3, [pc, #328]	; (8002db4 <HAL_RCC_ClockConfig+0x170>)
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	f002 0201 	and.w	r2, r2, #1
 8002c72:	42aa      	cmp	r2, r5
 8002c74:	f200 808c 	bhi.w	8002d90 <HAL_RCC_ClockConfig+0x14c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c78:	6822      	ldr	r2, [r4, #0]
 8002c7a:	0751      	lsls	r1, r2, #29
 8002c7c:	f100 8091 	bmi.w	8002da2 <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c80:	0713      	lsls	r3, r2, #28
 8002c82:	d507      	bpl.n	8002c94 <HAL_RCC_ClockConfig+0x50>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002c84:	4a4c      	ldr	r2, [pc, #304]	; (8002db8 <HAL_RCC_ClockConfig+0x174>)
 8002c86:	6921      	ldr	r1, [r4, #16]
 8002c88:	6893      	ldr	r3, [r2, #8]
 8002c8a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002c8e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002c92:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c94:	f7ff ffa2 	bl	8002bdc <HAL_RCC_GetSysClockFreq>
}
 8002c98:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002c9c:	4b46      	ldr	r3, [pc, #280]	; (8002db8 <HAL_RCC_ClockConfig+0x174>)
 8002c9e:	4a47      	ldr	r2, [pc, #284]	; (8002dbc <HAL_RCC_ClockConfig+0x178>)
 8002ca0:	689b      	ldr	r3, [r3, #8]
 8002ca2:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002ca6:	5cd3      	ldrb	r3, [r2, r3]
 8002ca8:	40d8      	lsrs	r0, r3
 8002caa:	4b45      	ldr	r3, [pc, #276]	; (8002dc0 <HAL_RCC_ClockConfig+0x17c>)
 8002cac:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8002cae:	4b45      	ldr	r3, [pc, #276]	; (8002dc4 <HAL_RCC_ClockConfig+0x180>)
 8002cb0:	6818      	ldr	r0, [r3, #0]
 8002cb2:	f7fe bb55 	b.w	8001360 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cb6:	2901      	cmp	r1, #1
 8002cb8:	bf02      	ittt	eq
 8002cba:	681a      	ldreq	r2, [r3, #0]
 8002cbc:	f042 0204 	orreq.w	r2, r2, #4
 8002cc0:	601a      	streq	r2, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	f022 0201 	bic.w	r2, r2, #1
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	601a      	str	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0301 	and.w	r3, r3, #1
 8002cd2:	428b      	cmp	r3, r1
 8002cd4:	d1bb      	bne.n	8002c4e <HAL_RCC_ClockConfig+0xa>
 8002cd6:	e7c3      	b.n	8002c60 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cd8:	4937      	ldr	r1, [pc, #220]	; (8002db8 <HAL_RCC_ClockConfig+0x174>)
 8002cda:	68a0      	ldr	r0, [r4, #8]
 8002cdc:	688b      	ldr	r3, [r1, #8]
 8002cde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ce2:	4303      	orrs	r3, r0
 8002ce4:	608b      	str	r3, [r1, #8]
 8002ce6:	e7be      	b.n	8002c66 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ce8:	6862      	ldr	r2, [r4, #4]
 8002cea:	4b33      	ldr	r3, [pc, #204]	; (8002db8 <HAL_RCC_ClockConfig+0x174>)
 8002cec:	2a02      	cmp	r2, #2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cee:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002cf0:	d11c      	bne.n	8002d2c <HAL_RCC_ClockConfig+0xe8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002cf2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002cf6:	d0aa      	beq.n	8002c4e <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cf8:	4e2f      	ldr	r6, [pc, #188]	; (8002db8 <HAL_RCC_ClockConfig+0x174>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cfa:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cfe:	68b3      	ldr	r3, [r6, #8]
 8002d00:	f023 0303 	bic.w	r3, r3, #3
 8002d04:	4313      	orrs	r3, r2
 8002d06:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002d08:	f7fe fcec 	bl	80016e4 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d0c:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8002d0e:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d10:	2b02      	cmp	r3, #2
 8002d12:	d118      	bne.n	8002d46 <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002d14:	68b3      	ldr	r3, [r6, #8]
 8002d16:	f003 030c 	and.w	r3, r3, #12
 8002d1a:	2b08      	cmp	r3, #8
 8002d1c:	d0a5      	beq.n	8002c6a <HAL_RCC_ClockConfig+0x26>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d1e:	f7fe fce1 	bl	80016e4 <HAL_GetTick>
 8002d22:	1bc0      	subs	r0, r0, r7
 8002d24:	4540      	cmp	r0, r8
 8002d26:	d9f5      	bls.n	8002d14 <HAL_RCC_ClockConfig+0xd0>
          return HAL_TIMEOUT;
 8002d28:	2003      	movs	r0, #3
 8002d2a:	e791      	b.n	8002c50 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d2c:	2a03      	cmp	r2, #3
 8002d2e:	d102      	bne.n	8002d36 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d30:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002d34:	e7df      	b.n	8002cf6 <HAL_RCC_ClockConfig+0xb2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002d36:	2a01      	cmp	r2, #1
 8002d38:	d102      	bne.n	8002d40 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002d3a:	f013 0f02 	tst.w	r3, #2
 8002d3e:	e7da      	b.n	8002cf6 <HAL_RCC_ClockConfig+0xb2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002d40:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002d44:	e7d7      	b.n	8002cf6 <HAL_RCC_ClockConfig+0xb2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002d46:	2b03      	cmp	r3, #3
 8002d48:	d10a      	bne.n	8002d60 <HAL_RCC_ClockConfig+0x11c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002d4a:	68b3      	ldr	r3, [r6, #8]
 8002d4c:	f003 030c 	and.w	r3, r3, #12
 8002d50:	2b0c      	cmp	r3, #12
 8002d52:	d08a      	beq.n	8002c6a <HAL_RCC_ClockConfig+0x26>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d54:	f7fe fcc6 	bl	80016e4 <HAL_GetTick>
 8002d58:	1bc0      	subs	r0, r0, r7
 8002d5a:	4540      	cmp	r0, r8
 8002d5c:	d9f5      	bls.n	8002d4a <HAL_RCC_ClockConfig+0x106>
 8002d5e:	e7e3      	b.n	8002d28 <HAL_RCC_ClockConfig+0xe4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	d110      	bne.n	8002d86 <HAL_RCC_ClockConfig+0x142>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d64:	68b3      	ldr	r3, [r6, #8]
 8002d66:	f003 030c 	and.w	r3, r3, #12
 8002d6a:	2b04      	cmp	r3, #4
 8002d6c:	f43f af7d 	beq.w	8002c6a <HAL_RCC_ClockConfig+0x26>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d70:	f7fe fcb8 	bl	80016e4 <HAL_GetTick>
 8002d74:	1bc0      	subs	r0, r0, r7
 8002d76:	4540      	cmp	r0, r8
 8002d78:	d9f4      	bls.n	8002d64 <HAL_RCC_ClockConfig+0x120>
 8002d7a:	e7d5      	b.n	8002d28 <HAL_RCC_ClockConfig+0xe4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d7c:	f7fe fcb2 	bl	80016e4 <HAL_GetTick>
 8002d80:	1bc0      	subs	r0, r0, r7
 8002d82:	4540      	cmp	r0, r8
 8002d84:	d8d0      	bhi.n	8002d28 <HAL_RCC_ClockConfig+0xe4>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002d86:	68b3      	ldr	r3, [r6, #8]
 8002d88:	f013 0f0c 	tst.w	r3, #12
 8002d8c:	d1f6      	bne.n	8002d7c <HAL_RCC_ClockConfig+0x138>
 8002d8e:	e76c      	b.n	8002c6a <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	f022 0201 	bic.w	r2, r2, #1
 8002d96:	601a      	str	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	07da      	lsls	r2, r3, #31
 8002d9c:	f57f af6c 	bpl.w	8002c78 <HAL_RCC_ClockConfig+0x34>
 8002da0:	e755      	b.n	8002c4e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002da2:	4905      	ldr	r1, [pc, #20]	; (8002db8 <HAL_RCC_ClockConfig+0x174>)
 8002da4:	68e0      	ldr	r0, [r4, #12]
 8002da6:	688b      	ldr	r3, [r1, #8]
 8002da8:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002dac:	4303      	orrs	r3, r0
 8002dae:	608b      	str	r3, [r1, #8]
 8002db0:	e766      	b.n	8002c80 <HAL_RCC_ClockConfig+0x3c>
 8002db2:	bf00      	nop
 8002db4:	40023c00 	.word	0x40023c00
 8002db8:	40023800 	.word	0x40023800
 8002dbc:	08007654 	.word	0x08007654
 8002dc0:	20000000 	.word	0x20000000
 8002dc4:	20000008 	.word	0x20000008

08002dc8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002dc8:	4b04      	ldr	r3, [pc, #16]	; (8002ddc <HAL_RCC_GetPCLK1Freq+0x14>)
 8002dca:	4a05      	ldr	r2, [pc, #20]	; (8002de0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002dcc:	689b      	ldr	r3, [r3, #8]
 8002dce:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002dd2:	5cd3      	ldrb	r3, [r2, r3]
 8002dd4:	4a03      	ldr	r2, [pc, #12]	; (8002de4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002dd6:	6810      	ldr	r0, [r2, #0]
}
 8002dd8:	40d8      	lsrs	r0, r3
 8002dda:	4770      	bx	lr
 8002ddc:	40023800 	.word	0x40023800
 8002de0:	08007664 	.word	0x08007664
 8002de4:	20000000 	.word	0x20000000

08002de8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002de8:	4b04      	ldr	r3, [pc, #16]	; (8002dfc <HAL_RCC_GetPCLK2Freq+0x14>)
 8002dea:	4a05      	ldr	r2, [pc, #20]	; (8002e00 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002df2:	5cd3      	ldrb	r3, [r2, r3]
 8002df4:	4a03      	ldr	r2, [pc, #12]	; (8002e04 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002df6:	6810      	ldr	r0, [r2, #0]
}
 8002df8:	40d8      	lsrs	r0, r3
 8002dfa:	4770      	bx	lr
 8002dfc:	40023800 	.word	0x40023800
 8002e00:	08007664 	.word	0x08007664
 8002e04:	20000000 	.word	0x20000000

08002e08 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002e08:	230f      	movs	r3, #15
 8002e0a:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002e0c:	4b0b      	ldr	r3, [pc, #44]	; (8002e3c <HAL_RCC_GetClockConfig+0x34>)
 8002e0e:	689a      	ldr	r2, [r3, #8]
 8002e10:	f002 0203 	and.w	r2, r2, #3
 8002e14:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002e16:	689a      	ldr	r2, [r3, #8]
 8002e18:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8002e1c:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002e1e:	689a      	ldr	r2, [r3, #8]
 8002e20:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002e24:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	08db      	lsrs	r3, r3, #3
 8002e2a:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002e2e:	6103      	str	r3, [r0, #16]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002e30:	4b03      	ldr	r3, [pc, #12]	; (8002e40 <HAL_RCC_GetClockConfig+0x38>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f003 0301 	and.w	r3, r3, #1
 8002e38:	600b      	str	r3, [r1, #0]
}
 8002e3a:	4770      	bx	lr
 8002e3c:	40023800 	.word	0x40023800
 8002e40:	40023c00 	.word	0x40023c00

08002e44 <SPI_WaitFlagStateUntilTimeout.constprop.0>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 8002e44:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8002e48:	461c      	mov	r4, r3
 8002e4a:	4616      	mov	r6, r2
 8002e4c:	460f      	mov	r7, r1
 8002e4e:	4605      	mov	r5, r0
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002e50:	f7fe fc48 	bl	80016e4 <HAL_GetTick>
 8002e54:	4434      	add	r4, r6
 8002e56:	1a24      	subs	r4, r4, r0
  tmp_tickstart = HAL_GetTick();
 8002e58:	f7fe fc44 	bl	80016e4 <HAL_GetTick>
 8002e5c:	4680      	mov	r8, r0

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002e5e:	4b23      	ldr	r3, [pc, #140]	; (8002eec <SPI_WaitFlagStateUntilTimeout.constprop.0+0xa8>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f3c3 33cb 	ubfx	r3, r3, #15, #12
 8002e66:	4363      	muls	r3, r4

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e68:	682a      	ldr	r2, [r5, #0]
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
      {
        tmp_timeout = 0U;
      }
      count--;
 8002e6a:	9301      	str	r3, [sp, #4]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002e6c:	6893      	ldr	r3, [r2, #8]
 8002e6e:	ea37 0303 	bics.w	r3, r7, r3
 8002e72:	d001      	beq.n	8002e78 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x34>
    }
  }

  return HAL_OK;
 8002e74:	2000      	movs	r0, #0
 8002e76:	e02e      	b.n	8002ed6 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x92>
    if (Timeout != HAL_MAX_DELAY)
 8002e78:	1c73      	adds	r3, r6, #1
 8002e7a:	d0f7      	beq.n	8002e6c <SPI_WaitFlagStateUntilTimeout.constprop.0+0x28>
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002e7c:	f7fe fc32 	bl	80016e4 <HAL_GetTick>
 8002e80:	eba0 0008 	sub.w	r0, r0, r8
 8002e84:	42a0      	cmp	r0, r4
 8002e86:	d329      	bcc.n	8002edc <SPI_WaitFlagStateUntilTimeout.constprop.0+0x98>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002e88:	682b      	ldr	r3, [r5, #0]
 8002e8a:	685a      	ldr	r2, [r3, #4]
 8002e8c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002e90:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e92:	686a      	ldr	r2, [r5, #4]
 8002e94:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002e98:	d10a      	bne.n	8002eb0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
 8002e9a:	68aa      	ldr	r2, [r5, #8]
 8002e9c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002ea0:	d002      	beq.n	8002ea8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x64>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002ea2:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002ea6:	d103      	bne.n	8002eb0 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x6c>
          __HAL_SPI_DISABLE(hspi);
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002eae:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002eb0:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8002eb2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8002eb6:	d107      	bne.n	8002ec8 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x84>
          SPI_RESET_CRC(hspi);
 8002eb8:	681a      	ldr	r2, [r3, #0]
 8002eba:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002ebe:	601a      	str	r2, [r3, #0]
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002ec6:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8002ec8:	2301      	movs	r3, #1
 8002eca:	f885 3051 	strb.w	r3, [r5, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8002ece:	2300      	movs	r3, #0
        return HAL_TIMEOUT;
 8002ed0:	2003      	movs	r0, #3
        __HAL_UNLOCK(hspi);
 8002ed2:	f885 3050 	strb.w	r3, [r5, #80]	; 0x50
}
 8002ed6:	b002      	add	sp, #8
 8002ed8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(count == 0U)
 8002edc:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8002ede:	2b00      	cmp	r3, #0
      count--;
 8002ee0:	9b01      	ldr	r3, [sp, #4]
        tmp_timeout = 0U;
 8002ee2:	bf08      	it	eq
 8002ee4:	2400      	moveq	r4, #0
      count--;
 8002ee6:	3b01      	subs	r3, #1
 8002ee8:	e7be      	b.n	8002e68 <SPI_WaitFlagStateUntilTimeout.constprop.0+0x24>
 8002eea:	bf00      	nop
 8002eec:	20000000 	.word	0x20000000

08002ef0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002ef0:	b538      	push	{r3, r4, r5, lr}
 8002ef2:	4613      	mov	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ef4:	6842      	ldr	r2, [r0, #4]
{
 8002ef6:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ef8:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002efc:	d11f      	bne.n	8002f3e <SPI_EndRxTransaction+0x4e>
 8002efe:	6882      	ldr	r2, [r0, #8]
 8002f00:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8002f04:	d002      	beq.n	8002f0c <SPI_EndRxTransaction+0x1c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f06:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8002f0a:	d107      	bne.n	8002f1c <SPI_EndRxTransaction+0x2c>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002f0c:	6825      	ldr	r5, [r4, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002f0e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    __HAL_SPI_DISABLE(hspi);
 8002f12:	6828      	ldr	r0, [r5, #0]
 8002f14:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8002f18:	6028      	str	r0, [r5, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002f1a:	d007      	beq.n	8002f2c <SPI_EndRxTransaction+0x3c>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f1c:	460a      	mov	r2, r1
 8002f1e:	2180      	movs	r1, #128	; 0x80
 8002f20:	4620      	mov	r0, r4
 8002f22:	f7ff ff8f 	bl	8002e44 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8002f26:	b920      	cbnz	r0, 8002f32 <SPI_EndRxTransaction+0x42>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8002f28:	2000      	movs	r0, #0
}
 8002f2a:	bd38      	pop	{r3, r4, r5, pc}
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002f2c:	460a      	mov	r2, r1
 8002f2e:	2101      	movs	r1, #1
 8002f30:	e7f6      	b.n	8002f20 <SPI_EndRxTransaction+0x30>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f32:	6d63      	ldr	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8002f34:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f36:	f043 0320 	orr.w	r3, r3, #32
 8002f3a:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8002f3c:	e7f5      	b.n	8002f2a <SPI_EndRxTransaction+0x3a>
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002f3e:	460a      	mov	r2, r1
 8002f40:	2101      	movs	r1, #1
 8002f42:	e7ee      	b.n	8002f22 <SPI_EndRxTransaction+0x32>

08002f44 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002f44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002f46:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002f48:	4a12      	ldr	r2, [pc, #72]	; (8002f94 <SPI_EndRxTxTransaction+0x50>)
{
 8002f4a:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002f4c:	6815      	ldr	r5, [r2, #0]
 8002f4e:	4a12      	ldr	r2, [pc, #72]	; (8002f98 <SPI_EndRxTxTransaction+0x54>)
 8002f50:	fbb5 f5f2 	udiv	r5, r5, r2
 8002f54:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002f58:	4355      	muls	r5, r2
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f5a:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002f5c:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002f5e:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002f62:	d10b      	bne.n	8002f7c <SPI_EndRxTxTransaction+0x38>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002f64:	460a      	mov	r2, r1
 8002f66:	2180      	movs	r1, #128	; 0x80
 8002f68:	f7ff ff6c 	bl	8002e44 <SPI_WaitFlagStateUntilTimeout.constprop.0>
 8002f6c:	b178      	cbz	r0, 8002f8e <SPI_EndRxTxTransaction+0x4a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
 8002f6e:	2003      	movs	r0, #3
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002f70:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8002f72:	f043 0320 	orr.w	r3, r3, #32
 8002f76:	6563      	str	r3, [r4, #84]	; 0x54
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
}
 8002f78:	b003      	add	sp, #12
 8002f7a:	bd30      	pop	{r4, r5, pc}
      if (count == 0U)
 8002f7c:	9b01      	ldr	r3, [sp, #4]
 8002f7e:	b133      	cbz	r3, 8002f8e <SPI_EndRxTxTransaction+0x4a>
      count--;
 8002f80:	9b01      	ldr	r3, [sp, #4]
 8002f82:	3b01      	subs	r3, #1
 8002f84:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002f86:	6823      	ldr	r3, [r4, #0]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	061b      	lsls	r3, r3, #24
 8002f8c:	d4f6      	bmi.n	8002f7c <SPI_EndRxTxTransaction+0x38>
  return HAL_OK;
 8002f8e:	2000      	movs	r0, #0
 8002f90:	e7f2      	b.n	8002f78 <SPI_EndRxTxTransaction+0x34>
 8002f92:	bf00      	nop
 8002f94:	20000000 	.word	0x20000000
 8002f98:	016e3600 	.word	0x016e3600

08002f9c <HAL_SPI_Init>:
{
 8002f9c:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8002f9e:	4604      	mov	r4, r0
 8002fa0:	2800      	cmp	r0, #0
 8002fa2:	d04d      	beq.n	8003040 <HAL_SPI_Init+0xa4>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002fa4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d146      	bne.n	8003038 <HAL_SPI_Init+0x9c>
    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002faa:	6842      	ldr	r2, [r0, #4]
 8002fac:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8002fb0:	d000      	beq.n	8002fb4 <HAL_SPI_Init+0x18>
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002fb2:	61c3      	str	r3, [r0, #28]
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	62a3      	str	r3, [r4, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8002fb8:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8002fbc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002fc0:	b923      	cbnz	r3, 8002fcc <HAL_SPI_Init+0x30>
    HAL_SPI_MspInit(hspi);
 8002fc2:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 8002fc4:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8002fc8:	f7fe f976 	bl	80012b8 <HAL_SPI_MspInit>
  hspi->State = HAL_SPI_STATE_BUSY;
 8002fcc:	2302      	movs	r3, #2
  __HAL_SPI_DISABLE(hspi);
 8002fce:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8002fd0:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8002fd4:	680b      	ldr	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002fd6:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8002fd8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002fdc:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002fde:	6863      	ldr	r3, [r4, #4]
 8002fe0:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 8002fe4:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8002fe8:	4303      	orrs	r3, r0
 8002fea:	68e0      	ldr	r0, [r4, #12]
 8002fec:	69a2      	ldr	r2, [r4, #24]
 8002fee:	f400 6000 	and.w	r0, r0, #2048	; 0x800
 8002ff2:	4303      	orrs	r3, r0
 8002ff4:	6920      	ldr	r0, [r4, #16]
 8002ff6:	f000 0002 	and.w	r0, r0, #2
 8002ffa:	4303      	orrs	r3, r0
 8002ffc:	6960      	ldr	r0, [r4, #20]
 8002ffe:	f000 0001 	and.w	r0, r0, #1
 8003002:	4303      	orrs	r3, r0
 8003004:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8003008:	4303      	orrs	r3, r0
 800300a:	69e0      	ldr	r0, [r4, #28]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800300c:	0c12      	lsrs	r2, r2, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800300e:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8003012:	4303      	orrs	r3, r0
 8003014:	6a20      	ldr	r0, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003016:	f002 0204 	and.w	r2, r2, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800301a:	f000 0080 	and.w	r0, r0, #128	; 0x80
 800301e:	4303      	orrs	r3, r0
 8003020:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8003022:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 8003026:	4303      	orrs	r3, r0
 8003028:	600b      	str	r3, [r1, #0]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800302a:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 800302c:	2301      	movs	r3, #1
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800302e:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003030:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003032:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
}
 8003036:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003038:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800303a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800303e:	e7b9      	b.n	8002fb4 <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8003040:	2001      	movs	r0, #1
 8003042:	e7f8      	b.n	8003036 <HAL_SPI_Init+0x9a>

08003044 <HAL_SPI_Transmit>:
{
 8003044:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8003048:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 800304a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 800304e:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 8003050:	2b01      	cmp	r3, #1
{
 8003052:	460d      	mov	r5, r1
 8003054:	4617      	mov	r7, r2
  __HAL_LOCK(hspi);
 8003056:	f000 80a0 	beq.w	800319a <HAL_SPI_Transmit+0x156>
 800305a:	2301      	movs	r3, #1
 800305c:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8003060:	f7fe fb40 	bl	80016e4 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 8003064:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 8003068:	4680      	mov	r8, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 800306a:	2b01      	cmp	r3, #1
 800306c:	b2d8      	uxtb	r0, r3
 800306e:	f040 8092 	bne.w	8003196 <HAL_SPI_Transmit+0x152>
  if ((pData == NULL) || (Size == 0U))
 8003072:	2d00      	cmp	r5, #0
 8003074:	d05d      	beq.n	8003132 <HAL_SPI_Transmit+0xee>
 8003076:	2f00      	cmp	r7, #0
 8003078:	d05b      	beq.n	8003132 <HAL_SPI_Transmit+0xee>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800307a:	2303      	movs	r3, #3
 800307c:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003080:	2300      	movs	r3, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003082:	68a2      	ldr	r2, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003084:	6563      	str	r3, [r4, #84]	; 0x54
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003086:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->RxISR       = NULL;
 800308a:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  hspi->TxXferCount = Size;
 800308e:	86e7      	strh	r7, [r4, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003090:	63a3      	str	r3, [r4, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003092:	87a3      	strh	r3, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003094:	87e3      	strh	r3, [r4, #62]	; 0x3e
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003096:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_DISABLE(hspi);
 8003098:	6823      	ldr	r3, [r4, #0]
  hspi->TxXferSize  = Size;
 800309a:	86a7      	strh	r7, [r4, #52]	; 0x34
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800309c:	d107      	bne.n	80030ae <HAL_SPI_Transmit+0x6a>
    __HAL_SPI_DISABLE(hspi);
 800309e:	681a      	ldr	r2, [r3, #0]
 80030a0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80030a4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030ac:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030ae:	681a      	ldr	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80030b0:	68e1      	ldr	r1, [r4, #12]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80030b2:	0652      	lsls	r2, r2, #25
    __HAL_SPI_ENABLE(hspi);
 80030b4:	bf5e      	ittt	pl
 80030b6:	681a      	ldrpl	r2, [r3, #0]
 80030b8:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 80030bc:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80030be:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030c2:	6862      	ldr	r2, [r4, #4]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80030c4:	d141      	bne.n	800314a <HAL_SPI_Transmit+0x106>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030c6:	b10a      	cbz	r2, 80030cc <HAL_SPI_Transmit+0x88>
 80030c8:	2f01      	cmp	r7, #1
 80030ca:	d107      	bne.n	80030dc <HAL_SPI_Transmit+0x98>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80030cc:	f835 2b02 	ldrh.w	r2, [r5], #2
 80030d0:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80030d2:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 80030d4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80030d6:	3b01      	subs	r3, #1
 80030d8:	b29b      	uxth	r3, r3
 80030da:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 80030dc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80030de:	b29b      	uxth	r3, r3
 80030e0:	b9a3      	cbnz	r3, 800310c <HAL_SPI_Transmit+0xc8>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030e2:	4642      	mov	r2, r8
 80030e4:	4631      	mov	r1, r6
 80030e6:	4620      	mov	r0, r4
 80030e8:	f7ff ff2c 	bl	8002f44 <SPI_EndRxTxTransaction>
 80030ec:	2800      	cmp	r0, #0
 80030ee:	d14f      	bne.n	8003190 <HAL_SPI_Transmit+0x14c>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030f0:	68a3      	ldr	r3, [r4, #8]
 80030f2:	b933      	cbnz	r3, 8003102 <HAL_SPI_Transmit+0xbe>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030f4:	9301      	str	r3, [sp, #4]
 80030f6:	6823      	ldr	r3, [r4, #0]
 80030f8:	68da      	ldr	r2, [r3, #12]
 80030fa:	9201      	str	r2, [sp, #4]
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	9301      	str	r3, [sp, #4]
 8003100:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003102:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8003104:	3800      	subs	r0, #0
 8003106:	bf18      	it	ne
 8003108:	2001      	movne	r0, #1
error:
 800310a:	e012      	b.n	8003132 <HAL_SPI_Transmit+0xee>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800310c:	6822      	ldr	r2, [r4, #0]
 800310e:	6893      	ldr	r3, [r2, #8]
 8003110:	0798      	lsls	r0, r3, #30
 8003112:	d505      	bpl.n	8003120 <HAL_SPI_Transmit+0xdc>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003114:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003116:	f833 1b02 	ldrh.w	r1, [r3], #2
 800311a:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800311c:	6323      	str	r3, [r4, #48]	; 0x30
 800311e:	e7d9      	b.n	80030d4 <HAL_SPI_Transmit+0x90>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003120:	f7fe fae0 	bl	80016e4 <HAL_GetTick>
 8003124:	eba0 0008 	sub.w	r0, r0, r8
 8003128:	42b0      	cmp	r0, r6
 800312a:	d30b      	bcc.n	8003144 <HAL_SPI_Transmit+0x100>
 800312c:	1c71      	adds	r1, r6, #1
 800312e:	d0d5      	beq.n	80030dc <HAL_SPI_Transmit+0x98>
          errorcode = HAL_TIMEOUT;
 8003130:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8003132:	2301      	movs	r3, #1
 8003134:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8003138:	2300      	movs	r3, #0
 800313a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 800313e:	b002      	add	sp, #8
 8003140:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003144:	2e00      	cmp	r6, #0
 8003146:	d1c9      	bne.n	80030dc <HAL_SPI_Transmit+0x98>
 8003148:	e7f2      	b.n	8003130 <HAL_SPI_Transmit+0xec>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800314a:	b10a      	cbz	r2, 8003150 <HAL_SPI_Transmit+0x10c>
 800314c:	2f01      	cmp	r7, #1
 800314e:	d108      	bne.n	8003162 <HAL_SPI_Transmit+0x11e>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003150:	782a      	ldrb	r2, [r5, #0]
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003152:	731a      	strb	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003154:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003156:	3301      	adds	r3, #1
 8003158:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800315a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800315c:	3b01      	subs	r3, #1
 800315e:	b29b      	uxth	r3, r3
 8003160:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8003162:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003164:	b29b      	uxth	r3, r3
 8003166:	2b00      	cmp	r3, #0
 8003168:	d0bb      	beq.n	80030e2 <HAL_SPI_Transmit+0x9e>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800316a:	6823      	ldr	r3, [r4, #0]
 800316c:	689a      	ldr	r2, [r3, #8]
 800316e:	0792      	lsls	r2, r2, #30
 8003170:	d502      	bpl.n	8003178 <HAL_SPI_Transmit+0x134>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003172:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8003174:	7812      	ldrb	r2, [r2, #0]
 8003176:	e7ec      	b.n	8003152 <HAL_SPI_Transmit+0x10e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003178:	f7fe fab4 	bl	80016e4 <HAL_GetTick>
 800317c:	eba0 0008 	sub.w	r0, r0, r8
 8003180:	42b0      	cmp	r0, r6
 8003182:	d302      	bcc.n	800318a <HAL_SPI_Transmit+0x146>
 8003184:	1c73      	adds	r3, r6, #1
 8003186:	d0ec      	beq.n	8003162 <HAL_SPI_Transmit+0x11e>
 8003188:	e7d2      	b.n	8003130 <HAL_SPI_Transmit+0xec>
 800318a:	2e00      	cmp	r6, #0
 800318c:	d1e9      	bne.n	8003162 <HAL_SPI_Transmit+0x11e>
 800318e:	e7cf      	b.n	8003130 <HAL_SPI_Transmit+0xec>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003190:	2320      	movs	r3, #32
 8003192:	6563      	str	r3, [r4, #84]	; 0x54
 8003194:	e7ac      	b.n	80030f0 <HAL_SPI_Transmit+0xac>
    errorcode = HAL_BUSY;
 8003196:	2002      	movs	r0, #2
 8003198:	e7cb      	b.n	8003132 <HAL_SPI_Transmit+0xee>
  __HAL_LOCK(hspi);
 800319a:	2002      	movs	r0, #2
 800319c:	e7cf      	b.n	800313e <HAL_SPI_Transmit+0xfa>

0800319e <HAL_SPI_TransmitReceive>:
{
 800319e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80031a2:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 80031a4:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 80031a8:	4604      	mov	r4, r0
  __HAL_LOCK(hspi);
 80031aa:	2b01      	cmp	r3, #1
{
 80031ac:	460d      	mov	r5, r1
 80031ae:	4691      	mov	r9, r2
 80031b0:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 80031b2:	f000 80e6 	beq.w	8003382 <HAL_SPI_TransmitReceive+0x1e4>
 80031b6:	2301      	movs	r3, #1
 80031b8:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 80031bc:	f7fe fa92 	bl	80016e4 <HAL_GetTick>
  tmp_state           = hspi->State;
 80031c0:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 80031c4:	4680      	mov	r8, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80031c6:	2b01      	cmp	r3, #1
  tmp_mode            = hspi->Init.Mode;
 80031c8:	6862      	ldr	r2, [r4, #4]
  tmp_state           = hspi->State;
 80031ca:	b2d9      	uxtb	r1, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80031cc:	d00a      	beq.n	80031e4 <HAL_SPI_TransmitReceive+0x46>
 80031ce:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 80031d2:	f040 80d4 	bne.w	800337e <HAL_SPI_TransmitReceive+0x1e0>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80031d6:	68a3      	ldr	r3, [r4, #8]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f040 80d0 	bne.w	800337e <HAL_SPI_TransmitReceive+0x1e0>
 80031de:	2904      	cmp	r1, #4
 80031e0:	f040 80cd 	bne.w	800337e <HAL_SPI_TransmitReceive+0x1e0>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80031e4:	2d00      	cmp	r5, #0
 80031e6:	d040      	beq.n	800326a <HAL_SPI_TransmitReceive+0xcc>
 80031e8:	f1b9 0f00 	cmp.w	r9, #0
 80031ec:	d03d      	beq.n	800326a <HAL_SPI_TransmitReceive+0xcc>
 80031ee:	2e00      	cmp	r6, #0
 80031f0:	d03b      	beq.n	800326a <HAL_SPI_TransmitReceive+0xcc>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80031f2:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80031f6:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80031fa:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80031fc:	bf1c      	itt	ne
 80031fe:	2305      	movne	r3, #5
 8003200:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003204:	2300      	movs	r3, #0
 8003206:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 8003208:	e9c4 3310 	strd	r3, r3, [r4, #64]	; 0x40
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800320c:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 800320e:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8003210:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003212:	6819      	ldr	r1, [r3, #0]
  hspi->RxXferSize  = Size;
 8003214:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003216:	0649      	lsls	r1, r1, #25
    __HAL_SPI_ENABLE(hspi);
 8003218:	bf58      	it	pl
 800321a:	6819      	ldrpl	r1, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800321c:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 800321e:	bf58      	it	pl
 8003220:	f041 0140 	orrpl.w	r1, r1, #64	; 0x40
  hspi->TxXferSize  = Size;
 8003224:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8003226:	bf58      	it	pl
 8003228:	6019      	strpl	r1, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800322a:	68e1      	ldr	r1, [r4, #12]
 800322c:	f5b1 6f00 	cmp.w	r1, #2048	; 0x800
 8003230:	d152      	bne.n	80032d8 <HAL_SPI_TransmitReceive+0x13a>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003232:	b10a      	cbz	r2, 8003238 <HAL_SPI_TransmitReceive+0x9a>
 8003234:	2e01      	cmp	r6, #1
 8003236:	d107      	bne.n	8003248 <HAL_SPI_TransmitReceive+0xaa>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003238:	f835 2b02 	ldrh.w	r2, [r5], #2
 800323c:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 800323e:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003240:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8003242:	3b01      	subs	r3, #1
 8003244:	b29b      	uxth	r3, r3
 8003246:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8003248:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800324a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800324c:	b29b      	uxth	r3, r3
 800324e:	b973      	cbnz	r3, 800326e <HAL_SPI_TransmitReceive+0xd0>
 8003250:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003252:	b29b      	uxth	r3, r3
 8003254:	b95b      	cbnz	r3, 800326e <HAL_SPI_TransmitReceive+0xd0>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003256:	4642      	mov	r2, r8
 8003258:	4639      	mov	r1, r7
 800325a:	4620      	mov	r0, r4
 800325c:	f7ff fe72 	bl	8002f44 <SPI_EndRxTxTransaction>
 8003260:	2800      	cmp	r0, #0
 8003262:	f000 8081 	beq.w	8003368 <HAL_SPI_TransmitReceive+0x1ca>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003266:	2320      	movs	r3, #32
 8003268:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 800326a:	2001      	movs	r0, #1
 800326c:	e02b      	b.n	80032c6 <HAL_SPI_TransmitReceive+0x128>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800326e:	6821      	ldr	r1, [r4, #0]
 8003270:	688b      	ldr	r3, [r1, #8]
 8003272:	079e      	lsls	r6, r3, #30
 8003274:	d50d      	bpl.n	8003292 <HAL_SPI_TransmitReceive+0xf4>
 8003276:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003278:	b29b      	uxth	r3, r3
 800327a:	b153      	cbz	r3, 8003292 <HAL_SPI_TransmitReceive+0xf4>
 800327c:	b14d      	cbz	r5, 8003292 <HAL_SPI_TransmitReceive+0xf4>
        txallowed = 0U;
 800327e:	2500      	movs	r5, #0
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003280:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003282:	f833 2b02 	ldrh.w	r2, [r3], #2
 8003286:	60ca      	str	r2, [r1, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003288:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 800328a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 800328c:	3b01      	subs	r3, #1
 800328e:	b29b      	uxth	r3, r3
 8003290:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003292:	688a      	ldr	r2, [r1, #8]
 8003294:	f012 0201 	ands.w	r2, r2, #1
 8003298:	d00c      	beq.n	80032b4 <HAL_SPI_TransmitReceive+0x116>
 800329a:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800329c:	b29b      	uxth	r3, r3
 800329e:	b14b      	cbz	r3, 80032b4 <HAL_SPI_TransmitReceive+0x116>
        txallowed = 1U;
 80032a0:	4615      	mov	r5, r2
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80032a2:	68c9      	ldr	r1, [r1, #12]
 80032a4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80032a6:	f823 1b02 	strh.w	r1, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80032aa:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 80032ac:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 80032ae:	3b01      	subs	r3, #1
 80032b0:	b29b      	uxth	r3, r3
 80032b2:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80032b4:	f7fe fa16 	bl	80016e4 <HAL_GetTick>
 80032b8:	eba0 0008 	sub.w	r0, r0, r8
 80032bc:	42b8      	cmp	r0, r7
 80032be:	d3c4      	bcc.n	800324a <HAL_SPI_TransmitReceive+0xac>
 80032c0:	1c78      	adds	r0, r7, #1
 80032c2:	d0c2      	beq.n	800324a <HAL_SPI_TransmitReceive+0xac>
        errorcode = HAL_TIMEOUT;
 80032c4:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 80032c6:	2301      	movs	r3, #1
 80032c8:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80032cc:	2300      	movs	r3, #0
 80032ce:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 80032d2:	b003      	add	sp, #12
 80032d4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80032d8:	b10a      	cbz	r2, 80032de <HAL_SPI_TransmitReceive+0x140>
 80032da:	2e01      	cmp	r6, #1
 80032dc:	d108      	bne.n	80032f0 <HAL_SPI_TransmitReceive+0x152>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80032de:	782a      	ldrb	r2, [r5, #0]
 80032e0:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80032e2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80032e4:	3301      	adds	r3, #1
 80032e6:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 80032e8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80032ea:	3b01      	subs	r3, #1
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 80032f0:	2501      	movs	r5, #1
 80032f2:	e02d      	b.n	8003350 <HAL_SPI_TransmitReceive+0x1b2>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80032f4:	6822      	ldr	r2, [r4, #0]
 80032f6:	6893      	ldr	r3, [r2, #8]
 80032f8:	0799      	lsls	r1, r3, #30
 80032fa:	d50e      	bpl.n	800331a <HAL_SPI_TransmitReceive+0x17c>
 80032fc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 80032fe:	b29b      	uxth	r3, r3
 8003300:	b15b      	cbz	r3, 800331a <HAL_SPI_TransmitReceive+0x17c>
 8003302:	b155      	cbz	r5, 800331a <HAL_SPI_TransmitReceive+0x17c>
        txallowed = 0U;
 8003304:	2500      	movs	r5, #0
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8003306:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003308:	781b      	ldrb	r3, [r3, #0]
 800330a:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 800330c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 800330e:	3301      	adds	r3, #1
 8003310:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8003312:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003314:	3b01      	subs	r3, #1
 8003316:	b29b      	uxth	r3, r3
 8003318:	86e3      	strh	r3, [r4, #54]	; 0x36
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800331a:	6822      	ldr	r2, [r4, #0]
 800331c:	6891      	ldr	r1, [r2, #8]
 800331e:	f011 0101 	ands.w	r1, r1, #1
 8003322:	d00d      	beq.n	8003340 <HAL_SPI_TransmitReceive+0x1a2>
 8003324:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003326:	b29b      	uxth	r3, r3
 8003328:	b153      	cbz	r3, 8003340 <HAL_SPI_TransmitReceive+0x1a2>
        txallowed = 1U;
 800332a:	460d      	mov	r5, r1
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800332c:	68d2      	ldr	r2, [r2, #12]
 800332e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003330:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003332:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003334:	3301      	adds	r3, #1
 8003336:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8003338:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800333a:	3b01      	subs	r3, #1
 800333c:	b29b      	uxth	r3, r3
 800333e:	87e3      	strh	r3, [r4, #62]	; 0x3e
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003340:	f7fe f9d0 	bl	80016e4 <HAL_GetTick>
 8003344:	eba0 0008 	sub.w	r0, r0, r8
 8003348:	42b8      	cmp	r0, r7
 800334a:	d30a      	bcc.n	8003362 <HAL_SPI_TransmitReceive+0x1c4>
 800334c:	1c7b      	adds	r3, r7, #1
 800334e:	d1b9      	bne.n	80032c4 <HAL_SPI_TransmitReceive+0x126>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003350:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8003352:	b29b      	uxth	r3, r3
 8003354:	2b00      	cmp	r3, #0
 8003356:	d1cd      	bne.n	80032f4 <HAL_SPI_TransmitReceive+0x156>
 8003358:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800335a:	b29b      	uxth	r3, r3
 800335c:	2b00      	cmp	r3, #0
 800335e:	d1c9      	bne.n	80032f4 <HAL_SPI_TransmitReceive+0x156>
 8003360:	e779      	b.n	8003256 <HAL_SPI_TransmitReceive+0xb8>
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003362:	2f00      	cmp	r7, #0
 8003364:	d1f4      	bne.n	8003350 <HAL_SPI_TransmitReceive+0x1b2>
 8003366:	e7ad      	b.n	80032c4 <HAL_SPI_TransmitReceive+0x126>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003368:	68a3      	ldr	r3, [r4, #8]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d1ab      	bne.n	80032c6 <HAL_SPI_TransmitReceive+0x128>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800336e:	6823      	ldr	r3, [r4, #0]
 8003370:	9001      	str	r0, [sp, #4]
 8003372:	68da      	ldr	r2, [r3, #12]
 8003374:	9201      	str	r2, [sp, #4]
 8003376:	689b      	ldr	r3, [r3, #8]
 8003378:	9301      	str	r3, [sp, #4]
 800337a:	9b01      	ldr	r3, [sp, #4]
 800337c:	e7a3      	b.n	80032c6 <HAL_SPI_TransmitReceive+0x128>
    errorcode = HAL_BUSY;
 800337e:	2002      	movs	r0, #2
 8003380:	e7a1      	b.n	80032c6 <HAL_SPI_TransmitReceive+0x128>
  __HAL_LOCK(hspi);
 8003382:	2002      	movs	r0, #2
 8003384:	e7a5      	b.n	80032d2 <HAL_SPI_TransmitReceive+0x134>

08003386 <HAL_SPI_Receive>:
{
 8003386:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800338a:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800338c:	6843      	ldr	r3, [r0, #4]
{
 800338e:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003390:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 8003394:	4689      	mov	r9, r1
 8003396:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003398:	d10c      	bne.n	80033b4 <HAL_SPI_Receive+0x2e>
 800339a:	6883      	ldr	r3, [r0, #8]
 800339c:	b953      	cbnz	r3, 80033b4 <HAL_SPI_Receive+0x2e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800339e:	2304      	movs	r3, #4
 80033a0:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80033a4:	4613      	mov	r3, r2
 80033a6:	9500      	str	r5, [sp, #0]
 80033a8:	460a      	mov	r2, r1
 80033aa:	f7ff fef8 	bl	800319e <HAL_SPI_TransmitReceive>
}
 80033ae:	b003      	add	sp, #12
 80033b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  __HAL_LOCK(hspi);
 80033b4:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 80033b8:	2b01      	cmp	r3, #1
 80033ba:	f000 8086 	beq.w	80034ca <HAL_SPI_Receive+0x144>
 80033be:	2301      	movs	r3, #1
 80033c0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 80033c4:	f7fe f98e 	bl	80016e4 <HAL_GetTick>
  if (hspi->State != HAL_SPI_STATE_READY)
 80033c8:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tickstart = HAL_GetTick();
 80033cc:	4680      	mov	r8, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	b2d8      	uxtb	r0, r3
 80033d2:	d178      	bne.n	80034c6 <HAL_SPI_Receive+0x140>
  if ((pData == NULL) || (Size == 0U))
 80033d4:	f1b9 0f00 	cmp.w	r9, #0
 80033d8:	d05c      	beq.n	8003494 <HAL_SPI_Receive+0x10e>
 80033da:	2f00      	cmp	r7, #0
 80033dc:	d05a      	beq.n	8003494 <HAL_SPI_Receive+0x10e>
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033de:	2600      	movs	r6, #0
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80033e0:	2304      	movs	r3, #4
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033e2:	68a2      	ldr	r2, [r4, #8]
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80033e4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80033e8:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80033ec:	6566      	str	r6, [r4, #84]	; 0x54
  hspi->TxISR       = NULL;
 80033ee:	e9c4 6610 	strd	r6, r6, [r4, #64]	; 0x40
  hspi->RxXferCount = Size;
 80033f2:	87e7      	strh	r7, [r4, #62]	; 0x3e
    __HAL_SPI_DISABLE(hspi);
 80033f4:	6823      	ldr	r3, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80033f6:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  hspi->RxXferSize  = Size;
 80033fa:	87a7      	strh	r7, [r4, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80033fc:	6326      	str	r6, [r4, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 80033fe:	86a6      	strh	r6, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003400:	86e6      	strh	r6, [r4, #54]	; 0x36
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003402:	d107      	bne.n	8003414 <HAL_SPI_Receive+0x8e>
    __HAL_SPI_DISABLE(hspi);
 8003404:	681a      	ldr	r2, [r3, #0]
 8003406:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800340a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800340c:	681a      	ldr	r2, [r3, #0]
 800340e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003412:	601a      	str	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	0656      	lsls	r6, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8003418:	bf5e      	ittt	pl
 800341a:	681a      	ldrpl	r2, [r3, #0]
 800341c:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8003420:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003422:	68e3      	ldr	r3, [r4, #12]
 8003424:	b1f3      	cbz	r3, 8003464 <HAL_SPI_Receive+0xde>
    while (hspi->RxXferCount > 0U)
 8003426:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003428:	b29b      	uxth	r3, r3
 800342a:	b1fb      	cbz	r3, 800346c <HAL_SPI_Receive+0xe6>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800342c:	6823      	ldr	r3, [r4, #0]
 800342e:	689a      	ldr	r2, [r3, #8]
 8003430:	07d2      	lsls	r2, r2, #31
 8003432:	d539      	bpl.n	80034a8 <HAL_SPI_Receive+0x122>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003434:	68da      	ldr	r2, [r3, #12]
 8003436:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003438:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800343c:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800343e:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003440:	3b01      	subs	r3, #1
 8003442:	b29b      	uxth	r3, r3
 8003444:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8003446:	e7ee      	b.n	8003426 <HAL_SPI_Receive+0xa0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003448:	6823      	ldr	r3, [r4, #0]
 800344a:	689a      	ldr	r2, [r3, #8]
 800344c:	07d0      	lsls	r0, r2, #31
 800344e:	d518      	bpl.n	8003482 <HAL_SPI_Receive+0xfc>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003450:	7b1b      	ldrb	r3, [r3, #12]
 8003452:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003454:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003456:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8003458:	3301      	adds	r3, #1
 800345a:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 800345c:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 800345e:	3b01      	subs	r3, #1
 8003460:	b29b      	uxth	r3, r3
 8003462:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 8003464:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8003466:	b29b      	uxth	r3, r3
 8003468:	2b00      	cmp	r3, #0
 800346a:	d1ed      	bne.n	8003448 <HAL_SPI_Receive+0xc2>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800346c:	4642      	mov	r2, r8
 800346e:	4629      	mov	r1, r5
 8003470:	4620      	mov	r0, r4
 8003472:	f7ff fd3d 	bl	8002ef0 <SPI_EndRxTransaction>
 8003476:	bb18      	cbnz	r0, 80034c0 <HAL_SPI_Receive+0x13a>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003478:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 800347a:	3800      	subs	r0, #0
 800347c:	bf18      	it	ne
 800347e:	2001      	movne	r0, #1
error :
 8003480:	e008      	b.n	8003494 <HAL_SPI_Receive+0x10e>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003482:	f7fe f92f 	bl	80016e4 <HAL_GetTick>
 8003486:	eba0 0008 	sub.w	r0, r0, r8
 800348a:	42a8      	cmp	r0, r5
 800348c:	d309      	bcc.n	80034a2 <HAL_SPI_Receive+0x11c>
 800348e:	1c69      	adds	r1, r5, #1
 8003490:	d0e8      	beq.n	8003464 <HAL_SPI_Receive+0xde>
          errorcode = HAL_TIMEOUT;
 8003492:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8003494:	2301      	movs	r3, #1
 8003496:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800349a:	2300      	movs	r3, #0
 800349c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 80034a0:	e785      	b.n	80033ae <HAL_SPI_Receive+0x28>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034a2:	2d00      	cmp	r5, #0
 80034a4:	d1de      	bne.n	8003464 <HAL_SPI_Receive+0xde>
 80034a6:	e7f4      	b.n	8003492 <HAL_SPI_Receive+0x10c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80034a8:	f7fe f91c 	bl	80016e4 <HAL_GetTick>
 80034ac:	eba0 0008 	sub.w	r0, r0, r8
 80034b0:	42a8      	cmp	r0, r5
 80034b2:	d302      	bcc.n	80034ba <HAL_SPI_Receive+0x134>
 80034b4:	1c6b      	adds	r3, r5, #1
 80034b6:	d0b6      	beq.n	8003426 <HAL_SPI_Receive+0xa0>
 80034b8:	e7eb      	b.n	8003492 <HAL_SPI_Receive+0x10c>
 80034ba:	2d00      	cmp	r5, #0
 80034bc:	d1b3      	bne.n	8003426 <HAL_SPI_Receive+0xa0>
 80034be:	e7e8      	b.n	8003492 <HAL_SPI_Receive+0x10c>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80034c0:	2320      	movs	r3, #32
 80034c2:	6563      	str	r3, [r4, #84]	; 0x54
 80034c4:	e7d8      	b.n	8003478 <HAL_SPI_Receive+0xf2>
    errorcode = HAL_BUSY;
 80034c6:	2002      	movs	r0, #2
 80034c8:	e7e4      	b.n	8003494 <HAL_SPI_Receive+0x10e>
  __HAL_LOCK(hspi);
 80034ca:	2002      	movs	r0, #2
 80034cc:	e76f      	b.n	80033ae <HAL_SPI_Receive+0x28>
	...

080034d0 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034d0:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  tmpcr1 = TIMx->CR1;
 80034d4:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80034d6:	d006      	beq.n	80034e6 <TIM_Base_SetConfig+0x16>
 80034d8:	4a18      	ldr	r2, [pc, #96]	; (800353c <TIM_Base_SetConfig+0x6c>)
 80034da:	4290      	cmp	r0, r2
 80034dc:	d003      	beq.n	80034e6 <TIM_Base_SetConfig+0x16>
 80034de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80034e2:	4290      	cmp	r0, r2
 80034e4:	d10e      	bne.n	8003504 <TIM_Base_SetConfig+0x34>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80034e6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80034e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034ec:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
    tmpcr1 |= Structure->CounterMode;
 80034f0:	ea43 0302 	orr.w	r3, r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80034f4:	d011      	beq.n	800351a <TIM_Base_SetConfig+0x4a>
 80034f6:	4a11      	ldr	r2, [pc, #68]	; (800353c <TIM_Base_SetConfig+0x6c>)
 80034f8:	4290      	cmp	r0, r2
 80034fa:	d00e      	beq.n	800351a <TIM_Base_SetConfig+0x4a>
 80034fc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003500:	4290      	cmp	r0, r2
 8003502:	d00a      	beq.n	800351a <TIM_Base_SetConfig+0x4a>
 8003504:	4a0e      	ldr	r2, [pc, #56]	; (8003540 <TIM_Base_SetConfig+0x70>)
 8003506:	4290      	cmp	r0, r2
 8003508:	d007      	beq.n	800351a <TIM_Base_SetConfig+0x4a>
 800350a:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800350e:	4290      	cmp	r0, r2
 8003510:	d003      	beq.n	800351a <TIM_Base_SetConfig+0x4a>
 8003512:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003516:	4290      	cmp	r0, r2
 8003518:	d103      	bne.n	8003522 <TIM_Base_SetConfig+0x52>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800351a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800351c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003520:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003522:	690a      	ldr	r2, [r1, #16]
 8003524:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003528:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800352a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800352c:	688b      	ldr	r3, [r1, #8]
 800352e:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003530:	680b      	ldr	r3, [r1, #0]
 8003532:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003534:	2301      	movs	r3, #1
 8003536:	6143      	str	r3, [r0, #20]
}
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	40000400 	.word	0x40000400
 8003540:	40010800 	.word	0x40010800

08003544 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003544:	6a03      	ldr	r3, [r0, #32]
{
 8003546:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003548:	f023 0301 	bic.w	r3, r3, #1
 800354c:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800354e:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003550:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003552:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003554:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003556:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 800355a:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800355c:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800355e:	f023 0302 	bic.w	r3, r3, #2

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003562:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003564:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003566:	684a      	ldr	r2, [r1, #4]
  tmpccer |= OC_Config->OCPolarity;
 8003568:	432b      	orrs	r3, r5
  TIMx->CCR1 = OC_Config->Pulse;
 800356a:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800356c:	6203      	str	r3, [r0, #32]
}
 800356e:	bd30      	pop	{r4, r5, pc}

08003570 <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003570:	6a03      	ldr	r3, [r0, #32]
{
 8003572:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003574:	f023 0310 	bic.w	r3, r3, #16
 8003578:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800357a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800357c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800357e:	6982      	ldr	r2, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003580:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003582:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003586:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800358a:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 800358c:	f023 0320 	bic.w	r3, r3, #32

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003590:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003592:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003594:	684a      	ldr	r2, [r1, #4]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003596:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCR2 = OC_Config->Pulse;
 800359a:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800359c:	6203      	str	r3, [r0, #32]
}
 800359e:	bd30      	pop	{r4, r5, pc}

080035a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80035a0:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80035a2:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80035a4:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80035a6:	f001 011f 	and.w	r1, r1, #31
 80035aa:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 80035ac:	ea23 0304 	bic.w	r3, r3, r4
 80035b0:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80035b2:	6a03      	ldr	r3, [r0, #32]
 80035b4:	408a      	lsls	r2, r1
 80035b6:	431a      	orrs	r2, r3
 80035b8:	6202      	str	r2, [r0, #32]
}
 80035ba:	bd10      	pop	{r4, pc}

080035bc <HAL_TIM_Base_MspInit>:
}
 80035bc:	4770      	bx	lr

080035be <HAL_TIM_Base_Init>:
{
 80035be:	b510      	push	{r4, lr}
  if (htim == NULL)
 80035c0:	4604      	mov	r4, r0
 80035c2:	b1f0      	cbz	r0, 8003602 <HAL_TIM_Base_Init+0x44>
  if (htim->State == HAL_TIM_STATE_RESET)
 80035c4:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80035c8:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80035cc:	b91b      	cbnz	r3, 80035d6 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 80035ce:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 80035d2:	f7ff fff3 	bl	80035bc <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80035d6:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035d8:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80035da:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035de:	1d21      	adds	r1, r4, #4
 80035e0:	f7ff ff76 	bl	80034d0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035e4:	2301      	movs	r3, #1
  return HAL_OK;
 80035e6:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80035e8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035ec:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
 80035f0:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
 80035f4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80035f8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  htim->State = HAL_TIM_STATE_READY;
 80035fc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8003600:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003602:	2001      	movs	r0, #1
 8003604:	e7fc      	b.n	8003600 <HAL_TIM_Base_Init+0x42>
	...

08003608 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 8003608:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800360c:	2b01      	cmp	r3, #1
 800360e:	d120      	bne.n	8003652 <HAL_TIM_Base_Start_IT+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 8003610:	2302      	movs	r3, #2
 8003612:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003616:	6803      	ldr	r3, [r0, #0]
 8003618:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800361a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800361e:	f042 0201 	orr.w	r2, r2, #1
 8003622:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003624:	d00a      	beq.n	800363c <HAL_TIM_Base_Start_IT+0x34>
 8003626:	4a0c      	ldr	r2, [pc, #48]	; (8003658 <HAL_TIM_Base_Start_IT+0x50>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d007      	beq.n	800363c <HAL_TIM_Base_Start_IT+0x34>
 800362c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003630:	4293      	cmp	r3, r2
 8003632:	d003      	beq.n	800363c <HAL_TIM_Base_Start_IT+0x34>
 8003634:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8003638:	4293      	cmp	r3, r2
 800363a:	d104      	bne.n	8003646 <HAL_TIM_Base_Start_IT+0x3e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800363c:	689a      	ldr	r2, [r3, #8]
 800363e:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003642:	2a06      	cmp	r2, #6
 8003644:	d003      	beq.n	800364e <HAL_TIM_Base_Start_IT+0x46>
    __HAL_TIM_ENABLE(htim);
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	f042 0201 	orr.w	r2, r2, #1
 800364c:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800364e:	2000      	movs	r0, #0
}
 8003650:	4770      	bx	lr
    return HAL_ERROR;
 8003652:	2001      	movs	r0, #1
 8003654:	4770      	bx	lr
 8003656:	bf00      	nop
 8003658:	40000400 	.word	0x40000400

0800365c <HAL_TIM_OC_Start>:
{
 800365c:	b510      	push	{r4, lr}
 800365e:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003660:	b929      	cbnz	r1, 800366e <HAL_TIM_OC_Start+0x12>
 8003662:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8003666:	2b01      	cmp	r3, #1
 8003668:	d01d      	beq.n	80036a6 <HAL_TIM_OC_Start+0x4a>
    return HAL_ERROR;
 800366a:	2001      	movs	r0, #1
}
 800366c:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800366e:	2904      	cmp	r1, #4
 8003670:	d107      	bne.n	8003682 <HAL_TIM_OC_Start+0x26>
 8003672:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
 8003676:	2b01      	cmp	r3, #1
 8003678:	d1f7      	bne.n	800366a <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800367a:	2302      	movs	r3, #2
 800367c:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
 8003680:	e014      	b.n	80036ac <HAL_TIM_OC_Start+0x50>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003682:	2908      	cmp	r1, #8
 8003684:	d107      	bne.n	8003696 <HAL_TIM_OC_Start+0x3a>
 8003686:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800368a:	2b01      	cmp	r3, #1
 800368c:	d1ed      	bne.n	800366a <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800368e:	2302      	movs	r3, #2
 8003690:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8003694:	e00a      	b.n	80036ac <HAL_TIM_OC_Start+0x50>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003696:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 800369a:	2b01      	cmp	r3, #1
 800369c:	d1e5      	bne.n	800366a <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800369e:	2302      	movs	r3, #2
 80036a0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 80036a4:	e002      	b.n	80036ac <HAL_TIM_OC_Start+0x50>
 80036a6:	2302      	movs	r3, #2
 80036a8:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036ac:	2201      	movs	r2, #1
 80036ae:	6820      	ldr	r0, [r4, #0]
 80036b0:	f7ff ff76 	bl	80035a0 <TIM_CCxChannelCmd>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036b4:	6823      	ldr	r3, [r4, #0]
 80036b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036ba:	d00a      	beq.n	80036d2 <HAL_TIM_OC_Start+0x76>
 80036bc:	4a0a      	ldr	r2, [pc, #40]	; (80036e8 <HAL_TIM_OC_Start+0x8c>)
 80036be:	4293      	cmp	r3, r2
 80036c0:	d007      	beq.n	80036d2 <HAL_TIM_OC_Start+0x76>
 80036c2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d003      	beq.n	80036d2 <HAL_TIM_OC_Start+0x76>
 80036ca:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 80036ce:	4293      	cmp	r3, r2
 80036d0:	d104      	bne.n	80036dc <HAL_TIM_OC_Start+0x80>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80036d2:	689a      	ldr	r2, [r3, #8]
 80036d4:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80036d8:	2a06      	cmp	r2, #6
 80036da:	d003      	beq.n	80036e4 <HAL_TIM_OC_Start+0x88>
    __HAL_TIM_ENABLE(htim);
 80036dc:	681a      	ldr	r2, [r3, #0]
 80036de:	f042 0201 	orr.w	r2, r2, #1
 80036e2:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80036e4:	2000      	movs	r0, #0
 80036e6:	e7c1      	b.n	800366c <HAL_TIM_OC_Start+0x10>
 80036e8:	40000400 	.word	0x40000400

080036ec <HAL_TIM_OC_Stop>:
{
 80036ec:	b538      	push	{r3, r4, r5, lr}
 80036ee:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80036f0:	2200      	movs	r2, #0
 80036f2:	6800      	ldr	r0, [r0, #0]
{
 80036f4:	460d      	mov	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80036f6:	f7ff ff53 	bl	80035a0 <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE(htim);
 80036fa:	f241 1211 	movw	r2, #4369	; 0x1111
 80036fe:	6823      	ldr	r3, [r4, #0]
 8003700:	6a19      	ldr	r1, [r3, #32]
 8003702:	4211      	tst	r1, r2
 8003704:	bf02      	ittt	eq
 8003706:	681a      	ldreq	r2, [r3, #0]
 8003708:	f022 0201 	biceq.w	r2, r2, #1
 800370c:	601a      	streq	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800370e:	2301      	movs	r3, #1
 8003710:	b91d      	cbnz	r5, 800371a <HAL_TIM_OC_Stop+0x2e>
 8003712:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 8003716:	2000      	movs	r0, #0
 8003718:	bd38      	pop	{r3, r4, r5, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800371a:	2d04      	cmp	r5, #4
 800371c:	d102      	bne.n	8003724 <HAL_TIM_OC_Stop+0x38>
 800371e:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
 8003722:	e7f8      	b.n	8003716 <HAL_TIM_OC_Stop+0x2a>
 8003724:	2d08      	cmp	r5, #8
 8003726:	bf0c      	ite	eq
 8003728:	f884 303c 	strbeq.w	r3, [r4, #60]	; 0x3c
 800372c:	f884 303d 	strbne.w	r3, [r4, #61]	; 0x3d
 8003730:	e7f1      	b.n	8003716 <HAL_TIM_OC_Stop+0x2a>

08003732 <HAL_TIM_PWM_Init>:
{
 8003732:	b510      	push	{r4, lr}
  if (htim == NULL)
 8003734:	4604      	mov	r4, r0
 8003736:	b1f0      	cbz	r0, 8003776 <HAL_TIM_PWM_Init+0x44>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003738:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800373c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003740:	b91b      	cbnz	r3, 800374a <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 8003742:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 8003746:	f7fd feaf 	bl	80014a8 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800374a:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800374c:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800374e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003752:	1d21      	adds	r1, r4, #4
 8003754:	f7ff febc 	bl	80034d0 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003758:	2301      	movs	r3, #1
  return HAL_OK;
 800375a:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800375c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003760:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
 8003764:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
 8003768:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 800376c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  htim->State = HAL_TIM_STATE_READY;
 8003770:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8003774:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003776:	2001      	movs	r0, #1
 8003778:	e7fc      	b.n	8003774 <HAL_TIM_PWM_Init+0x42>

0800377a <HAL_TIM_PWM_Start>:
 800377a:	f7ff bf6f 	b.w	800365c <HAL_TIM_OC_Start>

0800377e <HAL_TIM_PWM_Stop>:
 800377e:	f7ff bfb5 	b.w	80036ec <HAL_TIM_OC_Stop>

08003782 <HAL_TIM_PWM_ConfigChannel>:
{
 8003782:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8003784:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
{
 8003788:	4605      	mov	r5, r0
  __HAL_LOCK(htim);
 800378a:	2b01      	cmp	r3, #1
{
 800378c:	460c      	mov	r4, r1
  __HAL_LOCK(htim);
 800378e:	d077      	beq.n	8003880 <HAL_TIM_PWM_ConfigChannel+0xfe>
 8003790:	2301      	movs	r3, #1
  switch (Channel)
 8003792:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8003794:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  switch (Channel)
 8003798:	d04f      	beq.n	800383a <HAL_TIM_PWM_ConfigChannel+0xb8>
 800379a:	d806      	bhi.n	80037aa <HAL_TIM_PWM_ConfigChannel+0x28>
 800379c:	b35a      	cbz	r2, 80037f6 <HAL_TIM_PWM_ConfigChannel+0x74>
 800379e:	2a04      	cmp	r2, #4
 80037a0:	d03a      	beq.n	8003818 <HAL_TIM_PWM_ConfigChannel+0x96>
  __HAL_UNLOCK(htim);
 80037a2:	2000      	movs	r0, #0
 80037a4:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
}
 80037a8:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 80037aa:	2a0c      	cmp	r2, #12
 80037ac:	d1f9      	bne.n	80037a2 <HAL_TIM_PWM_ConfigChannel+0x20>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037ae:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037b0:	6826      	ldr	r6, [r4, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80037b2:	6a1a      	ldr	r2, [r3, #32]
 80037b4:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80037b8:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80037ba:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80037bc:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 80037be:	69d9      	ldr	r1, [r3, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 80037c0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80037c4:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037c8:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80037cc:	68a6      	ldr	r6, [r4, #8]
  TIMx->CR2 = tmpcr2;
 80037ce:	6058      	str	r0, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 80037d0:	61d9      	str	r1, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 80037d2:	6861      	ldr	r1, [r4, #4]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80037d4:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCR4 = OC_Config->Pulse;
 80037d8:	6419      	str	r1, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 80037da:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037dc:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80037de:	68e1      	ldr	r1, [r4, #12]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80037e4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80037e6:	69da      	ldr	r2, [r3, #28]
 80037e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80037ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80037ee:	69da      	ldr	r2, [r3, #28]
 80037f0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80037f4:	e042      	b.n	800387c <HAL_TIM_PWM_ConfigChannel+0xfa>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80037f6:	6800      	ldr	r0, [r0, #0]
 80037f8:	f7ff fea4 	bl	8003544 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80037fc:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80037fe:	68c9      	ldr	r1, [r1, #12]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003800:	699a      	ldr	r2, [r3, #24]
 8003802:	f042 0208 	orr.w	r2, r2, #8
 8003806:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003808:	699a      	ldr	r2, [r3, #24]
 800380a:	f022 0204 	bic.w	r2, r2, #4
 800380e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003810:	699a      	ldr	r2, [r3, #24]
 8003812:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003814:	619a      	str	r2, [r3, #24]
      break;
 8003816:	e7c4      	b.n	80037a2 <HAL_TIM_PWM_ConfigChannel+0x20>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003818:	6800      	ldr	r0, [r0, #0]
 800381a:	f7ff fea9 	bl	8003570 <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800381e:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003820:	68c9      	ldr	r1, [r1, #12]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003822:	699a      	ldr	r2, [r3, #24]
 8003824:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003828:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800382a:	699a      	ldr	r2, [r3, #24]
 800382c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003830:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003832:	699a      	ldr	r2, [r3, #24]
 8003834:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003838:	e7ec      	b.n	8003814 <HAL_TIM_PWM_ConfigChannel+0x92>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800383a:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 800383c:	6826      	ldr	r6, [r4, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800383e:	6a1a      	ldr	r2, [r3, #32]
 8003840:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003844:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8003846:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003848:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800384a:	69d9      	ldr	r1, [r3, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 800384c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003850:	f021 0173 	bic.w	r1, r1, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003854:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003856:	68a6      	ldr	r6, [r4, #8]
  TIMx->CR2 = tmpcr2;
 8003858:	6058      	str	r0, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 800385a:	61d9      	str	r1, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800385c:	6861      	ldr	r1, [r4, #4]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800385e:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  TIMx->CCR3 = OC_Config->Pulse;
 8003862:	63d9      	str	r1, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8003864:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003866:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003868:	68e1      	ldr	r1, [r4, #12]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800386a:	f042 0208 	orr.w	r2, r2, #8
 800386e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003870:	69da      	ldr	r2, [r3, #28]
 8003872:	f022 0204 	bic.w	r2, r2, #4
 8003876:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003878:	69da      	ldr	r2, [r3, #28]
 800387a:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800387c:	61da      	str	r2, [r3, #28]
      break;
 800387e:	e790      	b.n	80037a2 <HAL_TIM_PWM_ConfigChannel+0x20>
  __HAL_LOCK(htim);
 8003880:	2002      	movs	r0, #2
 8003882:	e791      	b.n	80037a8 <HAL_TIM_PWM_ConfigChannel+0x26>

08003884 <HAL_TIM_OC_DelayElapsedCallback>:
 8003884:	4770      	bx	lr

08003886 <HAL_TIM_IC_CaptureCallback>:
 8003886:	4770      	bx	lr

08003888 <HAL_TIM_PWM_PulseFinishedCallback>:
 8003888:	4770      	bx	lr

0800388a <HAL_TIM_TriggerCallback>:
 800388a:	4770      	bx	lr

0800388c <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800388c:	6803      	ldr	r3, [r0, #0]
{
 800388e:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003890:	691a      	ldr	r2, [r3, #16]
{
 8003892:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003894:	0791      	lsls	r1, r2, #30
 8003896:	d50e      	bpl.n	80038b6 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003898:	68da      	ldr	r2, [r3, #12]
 800389a:	0792      	lsls	r2, r2, #30
 800389c:	d50b      	bpl.n	80038b6 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800389e:	f06f 0202 	mvn.w	r2, #2
 80038a2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038a4:	2201      	movs	r2, #1
 80038a6:	7602      	strb	r2, [r0, #24]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	0799      	lsls	r1, r3, #30
 80038ac:	d05c      	beq.n	8003968 <HAL_TIM_IRQHandler+0xdc>
          HAL_TIM_IC_CaptureCallback(htim);
 80038ae:	f7ff ffea 	bl	8003886 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038b2:	2300      	movs	r3, #0
 80038b4:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80038b6:	6823      	ldr	r3, [r4, #0]
 80038b8:	691a      	ldr	r2, [r3, #16]
 80038ba:	0752      	lsls	r2, r2, #29
 80038bc:	d510      	bpl.n	80038e0 <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80038be:	68da      	ldr	r2, [r3, #12]
 80038c0:	0750      	lsls	r0, r2, #29
 80038c2:	d50d      	bpl.n	80038e0 <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80038c4:	f06f 0204 	mvn.w	r2, #4
 80038c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80038ca:	2202      	movs	r2, #2
 80038cc:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038ce:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 80038d0:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80038d2:	f413 7f40 	tst.w	r3, #768	; 0x300
 80038d6:	d04d      	beq.n	8003974 <HAL_TIM_IRQHandler+0xe8>
        HAL_TIM_IC_CaptureCallback(htim);
 80038d8:	f7ff ffd5 	bl	8003886 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038dc:	2300      	movs	r3, #0
 80038de:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80038e0:	6823      	ldr	r3, [r4, #0]
 80038e2:	691a      	ldr	r2, [r3, #16]
 80038e4:	0711      	lsls	r1, r2, #28
 80038e6:	d50f      	bpl.n	8003908 <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80038e8:	68da      	ldr	r2, [r3, #12]
 80038ea:	0712      	lsls	r2, r2, #28
 80038ec:	d50c      	bpl.n	8003908 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80038ee:	f06f 0208 	mvn.w	r2, #8
 80038f2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80038f4:	2204      	movs	r2, #4
 80038f6:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038f8:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80038fa:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80038fc:	079b      	lsls	r3, r3, #30
 80038fe:	d03f      	beq.n	8003980 <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 8003900:	f7ff ffc1 	bl	8003886 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003904:	2300      	movs	r3, #0
 8003906:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003908:	6823      	ldr	r3, [r4, #0]
 800390a:	691a      	ldr	r2, [r3, #16]
 800390c:	06d0      	lsls	r0, r2, #27
 800390e:	d510      	bpl.n	8003932 <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003910:	68da      	ldr	r2, [r3, #12]
 8003912:	06d1      	lsls	r1, r2, #27
 8003914:	d50d      	bpl.n	8003932 <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003916:	f06f 0210 	mvn.w	r2, #16
 800391a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800391c:	2208      	movs	r2, #8
 800391e:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003920:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 8003922:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003924:	f413 7f40 	tst.w	r3, #768	; 0x300
 8003928:	d030      	beq.n	800398c <HAL_TIM_IRQHandler+0x100>
        HAL_TIM_IC_CaptureCallback(htim);
 800392a:	f7ff ffac 	bl	8003886 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800392e:	2300      	movs	r3, #0
 8003930:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003932:	6823      	ldr	r3, [r4, #0]
 8003934:	691a      	ldr	r2, [r3, #16]
 8003936:	07d2      	lsls	r2, r2, #31
 8003938:	d508      	bpl.n	800394c <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800393a:	68da      	ldr	r2, [r3, #12]
 800393c:	07d0      	lsls	r0, r2, #31
 800393e:	d505      	bpl.n	800394c <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003940:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8003944:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003946:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003948:	f7fd fc88 	bl	800125c <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800394c:	6823      	ldr	r3, [r4, #0]
 800394e:	691a      	ldr	r2, [r3, #16]
 8003950:	0651      	lsls	r1, r2, #25
 8003952:	d508      	bpl.n	8003966 <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003954:	68da      	ldr	r2, [r3, #12]
 8003956:	0652      	lsls	r2, r2, #25
 8003958:	d505      	bpl.n	8003966 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800395a:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800395e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003960:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8003962:	f7ff ff92 	bl	800388a <HAL_TIM_TriggerCallback>
}
 8003966:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003968:	f7ff ff8c 	bl	8003884 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800396c:	4620      	mov	r0, r4
 800396e:	f7ff ff8b 	bl	8003888 <HAL_TIM_PWM_PulseFinishedCallback>
 8003972:	e79e      	b.n	80038b2 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003974:	f7ff ff86 	bl	8003884 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003978:	4620      	mov	r0, r4
 800397a:	f7ff ff85 	bl	8003888 <HAL_TIM_PWM_PulseFinishedCallback>
 800397e:	e7ad      	b.n	80038dc <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003980:	f7ff ff80 	bl	8003884 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003984:	4620      	mov	r0, r4
 8003986:	f7ff ff7f 	bl	8003888 <HAL_TIM_PWM_PulseFinishedCallback>
 800398a:	e7bb      	b.n	8003904 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800398c:	f7ff ff7a 	bl	8003884 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003990:	4620      	mov	r0, r4
 8003992:	f7ff ff79 	bl	8003888 <HAL_TIM_PWM_PulseFinishedCallback>
 8003996:	e7ca      	b.n	800392e <HAL_TIM_IRQHandler+0xa2>

08003998 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003998:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800399a:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
{
 800399e:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	f04f 0002 	mov.w	r0, #2
 80039a6:	d022      	beq.n	80039ee <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039a8:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80039aa:	f882 0039 	strb.w	r0, [r2, #57]	; 0x39
  tmpcr2 = htim->Instance->CR2;
 80039ae:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039b0:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 80039b2:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039b6:	432c      	orrs	r4, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  tmpsmcr = htim->Instance->SMCR;
 80039bc:	6898      	ldr	r0, [r3, #8]
  htim->Instance->CR2 = tmpcr2;
 80039be:	605c      	str	r4, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80039c0:	d00a      	beq.n	80039d8 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 80039c2:	4c0b      	ldr	r4, [pc, #44]	; (80039f0 <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 80039c4:	42a3      	cmp	r3, r4
 80039c6:	d007      	beq.n	80039d8 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 80039c8:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 80039cc:	42a3      	cmp	r3, r4
 80039ce:	d003      	beq.n	80039d8 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 80039d0:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 80039d4:	42a3      	cmp	r3, r4
 80039d6:	d104      	bne.n	80039e2 <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039d8:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80039da:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80039de:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80039e0:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80039e2:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 80039e4:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80039e6:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
  __HAL_UNLOCK(htim);
 80039ea:	f882 0038 	strb.w	r0, [r2, #56]	; 0x38

  return HAL_OK;
}
 80039ee:	bd30      	pop	{r4, r5, pc}
 80039f0:	40000400 	.word	0x40000400

080039f4 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80039f4:	6803      	ldr	r3, [r0, #0]
 80039f6:	68da      	ldr	r2, [r3, #12]
 80039f8:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80039fc:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039fe:	695a      	ldr	r2, [r3, #20]
 8003a00:	f022 0201 	bic.w	r2, r2, #1
 8003a04:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003a06:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8003a08:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a0a:	bf02      	ittt	eq
 8003a0c:	68da      	ldreq	r2, [r3, #12]
 8003a0e:	f022 0210 	biceq.w	r2, r2, #16
 8003a12:	60da      	streq	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003a14:	2320      	movs	r3, #32
 8003a16:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	6303      	str	r3, [r0, #48]	; 0x30
}
 8003a1e:	4770      	bx	lr

08003a20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003a20:	b510      	push	{r4, lr}
 8003a22:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003a24:	6802      	ldr	r2, [r0, #0]
 8003a26:	68c1      	ldr	r1, [r0, #12]
 8003a28:	6913      	ldr	r3, [r2, #16]
 8003a2a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003a2e:	430b      	orrs	r3, r1
 8003a30:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a32:	6883      	ldr	r3, [r0, #8]
 8003a34:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8003a36:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a38:	4303      	orrs	r3, r0
 8003a3a:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8003a3c:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a40:	4303      	orrs	r3, r0
 8003a42:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 8003a44:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003a48:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8003a4a:	430b      	orrs	r3, r1
 8003a4c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003a4e:	6953      	ldr	r3, [r2, #20]
 8003a50:	69a1      	ldr	r1, [r4, #24]
 8003a52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a56:	430b      	orrs	r3, r1
 8003a58:	6153      	str	r3, [r2, #20]


  if((huart->Instance == USART1))
 8003a5a:	4b1a      	ldr	r3, [pc, #104]	; (8003ac4 <UART_SetConfig+0xa4>)
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d120      	bne.n	8003aa2 <UART_SetConfig+0x82>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003a60:	f7ff f9c2 	bl	8002de8 <HAL_RCC_GetPCLK2Freq>
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a64:	2319      	movs	r3, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a66:	69e1      	ldr	r1, [r4, #28]
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a68:	4343      	muls	r3, r0
 8003a6a:	e9d4 2000 	ldrd	r2, r0, [r4]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003a6e:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 8003a72:	f04f 0164 	mov.w	r1, #100	; 0x64
 8003a76:	d117      	bne.n	8003aa8 <UART_SetConfig+0x88>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003a78:	0040      	lsls	r0, r0, #1
 8003a7a:	fbb3 f0f0 	udiv	r0, r3, r0
 8003a7e:	fbb0 f4f1 	udiv	r4, r0, r1
 8003a82:	fb01 0314 	mls	r3, r1, r4, r0
 8003a86:	00db      	lsls	r3, r3, #3
 8003a88:	3332      	adds	r3, #50	; 0x32
 8003a8a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a8e:	f003 0107 	and.w	r1, r3, #7
 8003a92:	005b      	lsls	r3, r3, #1
 8003a94:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 8003a98:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003a9c:	440b      	add	r3, r1
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003a9e:	6093      	str	r3, [r2, #8]
  }
}
 8003aa0:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 8003aa2:	f7ff f991 	bl	8002dc8 <HAL_RCC_GetPCLK1Freq>
 8003aa6:	e7dd      	b.n	8003a64 <UART_SetConfig+0x44>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003aa8:	0080      	lsls	r0, r0, #2
 8003aaa:	fbb3 f0f0 	udiv	r0, r3, r0
 8003aae:	fbb0 f4f1 	udiv	r4, r0, r1
 8003ab2:	fb01 0314 	mls	r3, r1, r4, r0
 8003ab6:	011b      	lsls	r3, r3, #4
 8003ab8:	3332      	adds	r3, #50	; 0x32
 8003aba:	fbb3 f3f1 	udiv	r3, r3, r1
 8003abe:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8003ac2:	e7ec      	b.n	8003a9e <UART_SetConfig+0x7e>
 8003ac4:	40013800 	.word	0x40013800

08003ac8 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8003ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aca:	4604      	mov	r4, r0
 8003acc:	460e      	mov	r6, r1
 8003ace:	4617      	mov	r7, r2
 8003ad0:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ad2:	6822      	ldr	r2, [r4, #0]
 8003ad4:	6813      	ldr	r3, [r2, #0]
 8003ad6:	ea36 0303 	bics.w	r3, r6, r3
 8003ada:	d101      	bne.n	8003ae0 <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 8003adc:	2000      	movs	r0, #0
 8003ade:	e014      	b.n	8003b0a <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
    if (Timeout != HAL_MAX_DELAY)
 8003ae0:	1c6b      	adds	r3, r5, #1
 8003ae2:	d0f7      	beq.n	8003ad4 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003ae4:	b995      	cbnz	r5, 8003b0c <UART_WaitOnFlagUntilTimeout.constprop.0+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ae6:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 8003ae8:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003aea:	68da      	ldr	r2, [r3, #12]
 8003aec:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003af0:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003af2:	695a      	ldr	r2, [r3, #20]
 8003af4:	f022 0201 	bic.w	r2, r2, #1
 8003af8:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8003afa:	2320      	movs	r3, #32
 8003afc:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003b00:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 8003b04:	2300      	movs	r3, #0
 8003b06:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8003b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003b0c:	f7fd fdea 	bl	80016e4 <HAL_GetTick>
 8003b10:	1bc0      	subs	r0, r0, r7
 8003b12:	4285      	cmp	r5, r0
 8003b14:	d2dd      	bcs.n	8003ad2 <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 8003b16:	e7e6      	b.n	8003ae6 <UART_WaitOnFlagUntilTimeout.constprop.0+0x1e>

08003b18 <HAL_UART_Init>:
{
 8003b18:	b510      	push	{r4, lr}
  if (huart == NULL)
 8003b1a:	4604      	mov	r4, r0
 8003b1c:	b340      	cbz	r0, 8003b70 <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 8003b1e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003b22:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003b26:	b91b      	cbnz	r3, 8003b30 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8003b28:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8003b2c:	f7fd fd4c 	bl	80015c8 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 8003b30:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 8003b32:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003b34:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8003b38:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8003b3a:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8003b3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003b40:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 8003b42:	f7ff ff6d 	bl	8003a20 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b46:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b48:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b4a:	691a      	ldr	r2, [r3, #16]
 8003b4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b52:	695a      	ldr	r2, [r3, #20]
 8003b54:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b58:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8003b5a:	68da      	ldr	r2, [r3, #12]
 8003b5c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b60:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003b62:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b64:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b66:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b6a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 8003b6e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003b70:	2001      	movs	r0, #1
 8003b72:	e7fc      	b.n	8003b6e <HAL_UART_Init+0x56>

08003b74 <HAL_UART_Transmit>:
{
 8003b74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003b78:	4699      	mov	r9, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8003b7a:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 8003b7e:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 8003b80:	2b20      	cmp	r3, #32
{
 8003b82:	460e      	mov	r6, r1
 8003b84:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8003b86:	d148      	bne.n	8003c1a <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 8003b88:	2900      	cmp	r1, #0
 8003b8a:	d044      	beq.n	8003c16 <HAL_UART_Transmit+0xa2>
 8003b8c:	2a00      	cmp	r2, #0
 8003b8e:	d042      	beq.n	8003c16 <HAL_UART_Transmit+0xa2>
    __HAL_LOCK(huart);
 8003b90:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d040      	beq.n	8003c1a <HAL_UART_Transmit+0xa6>
 8003b98:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b9a:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8003b9c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ba0:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ba2:	6405      	str	r5, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003ba4:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8003ba8:	f7fd fd9c 	bl	80016e4 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bac:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8003bae:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize = Size;
 8003bb4:	84a7      	strh	r7, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8003bb6:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003bb8:	d103      	bne.n	8003bc2 <HAL_UART_Transmit+0x4e>
 8003bba:	6923      	ldr	r3, [r4, #16]
 8003bbc:	b90b      	cbnz	r3, 8003bc2 <HAL_UART_Transmit+0x4e>
 8003bbe:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 8003bc0:	461e      	mov	r6, r3
    __HAL_UNLOCK(huart);
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8003bc8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003bca:	b29b      	uxth	r3, r3
 8003bcc:	b953      	cbnz	r3, 8003be4 <HAL_UART_Transmit+0x70>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003bce:	464b      	mov	r3, r9
 8003bd0:	4642      	mov	r2, r8
 8003bd2:	2140      	movs	r1, #64	; 0x40
 8003bd4:	4620      	mov	r0, r4
 8003bd6:	f7ff ff77 	bl	8003ac8 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8003bda:	b950      	cbnz	r0, 8003bf2 <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 8003bdc:	2320      	movs	r3, #32
 8003bde:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 8003be2:	e007      	b.n	8003bf4 <HAL_UART_Transmit+0x80>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003be4:	464b      	mov	r3, r9
 8003be6:	4642      	mov	r2, r8
 8003be8:	2180      	movs	r1, #128	; 0x80
 8003bea:	4620      	mov	r0, r4
 8003bec:	f7ff ff6c 	bl	8003ac8 <UART_WaitOnFlagUntilTimeout.constprop.0>
 8003bf0:	b110      	cbz	r0, 8003bf8 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 8003bf2:	2003      	movs	r0, #3
}
 8003bf4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bf8:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 8003bfa:	b94e      	cbnz	r6, 8003c10 <HAL_UART_Transmit+0x9c>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003bfc:	f835 3b02 	ldrh.w	r3, [r5], #2
 8003c00:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c04:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 8003c06:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 8003c08:	3901      	subs	r1, #1
 8003c0a:	b289      	uxth	r1, r1
 8003c0c:	84e1      	strh	r1, [r4, #38]	; 0x26
 8003c0e:	e7db      	b.n	8003bc8 <HAL_UART_Transmit+0x54>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003c10:	f816 3b01 	ldrb.w	r3, [r6], #1
 8003c14:	e7f6      	b.n	8003c04 <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 8003c16:	2001      	movs	r0, #1
 8003c18:	e7ec      	b.n	8003bf4 <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 8003c1a:	2002      	movs	r0, #2
 8003c1c:	e7ea      	b.n	8003bf4 <HAL_UART_Transmit+0x80>

08003c1e <HAL_UART_RxHalfCpltCallback>:
 8003c1e:	4770      	bx	lr

08003c20 <HAL_UART_ErrorCallback>:
 8003c20:	4770      	bx	lr

08003c22 <UART_DMAError>:
{
 8003c22:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c24:	6a40      	ldr	r0, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8003c26:	6803      	ldr	r3, [r0, #0]
 8003c28:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8003c2a:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 8003c2e:	2921      	cmp	r1, #33	; 0x21
 8003c30:	d10a      	bne.n	8003c48 <UART_DMAError+0x26>
 8003c32:	0612      	lsls	r2, r2, #24
 8003c34:	d508      	bpl.n	8003c48 <UART_DMAError+0x26>
    huart->TxXferCount = 0x00U;
 8003c36:	2200      	movs	r2, #0
 8003c38:	84c2      	strh	r2, [r0, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003c3a:	68da      	ldr	r2, [r3, #12]
 8003c3c:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8003c40:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 8003c42:	2220      	movs	r2, #32
 8003c44:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003c48:	695b      	ldr	r3, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003c4a:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8003c4e:	2a22      	cmp	r2, #34	; 0x22
 8003c50:	d105      	bne.n	8003c5e <UART_DMAError+0x3c>
 8003c52:	065b      	lsls	r3, r3, #25
 8003c54:	d503      	bpl.n	8003c5e <UART_DMAError+0x3c>
    huart->RxXferCount = 0x00U;
 8003c56:	2300      	movs	r3, #0
 8003c58:	85c3      	strh	r3, [r0, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003c5a:	f7ff fecb 	bl	80039f4 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8003c5e:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8003c60:	f043 0310 	orr.w	r3, r3, #16
 8003c64:	6403      	str	r3, [r0, #64]	; 0x40
  HAL_UART_ErrorCallback(huart);
 8003c66:	f7ff ffdb 	bl	8003c20 <HAL_UART_ErrorCallback>
}
 8003c6a:	bd08      	pop	{r3, pc}

08003c6c <HAL_UARTEx_RxEventCallback>:
}
 8003c6c:	4770      	bx	lr

08003c6e <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c6e:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 8003c70:	b508      	push	{r3, lr}
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c72:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003c74:	2b01      	cmp	r3, #1
 8003c76:	d104      	bne.n	8003c82 <UART_DMARxHalfCplt+0x14>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8003c78:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8003c7a:	0849      	lsrs	r1, r1, #1
 8003c7c:	f7ff fff6 	bl	8003c6c <HAL_UARTEx_RxEventCallback>
}
 8003c80:	bd08      	pop	{r3, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 8003c82:	f7ff ffcc 	bl	8003c1e <HAL_UART_RxHalfCpltCallback>
}
 8003c86:	e7fb      	b.n	8003c80 <UART_DMARxHalfCplt+0x12>

08003c88 <UART_DMAReceiveCplt>:
{
 8003c88:	b508      	push	{r3, lr}
 8003c8a:	4603      	mov	r3, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c8c:	681b      	ldr	r3, [r3, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c8e:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f013 0320 	ands.w	r3, r3, #32
 8003c96:	d117      	bne.n	8003cc8 <UART_DMAReceiveCplt+0x40>
    huart->RxXferCount = 0U;
 8003c98:	85c3      	strh	r3, [r0, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003c9a:	6803      	ldr	r3, [r0, #0]
 8003c9c:	68da      	ldr	r2, [r3, #12]
 8003c9e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003ca2:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ca4:	695a      	ldr	r2, [r3, #20]
 8003ca6:	f022 0201 	bic.w	r2, r2, #1
 8003caa:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003cac:	695a      	ldr	r2, [r3, #20]
 8003cae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cb2:	615a      	str	r2, [r3, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8003cb4:	2220      	movs	r2, #32
 8003cb6:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cba:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8003cbc:	2a01      	cmp	r2, #1
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003cbe:	bf02      	ittt	eq
 8003cc0:	68da      	ldreq	r2, [r3, #12]
 8003cc2:	f022 0210 	biceq.w	r2, r2, #16
 8003cc6:	60da      	streq	r2, [r3, #12]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003cc8:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003cca:	2b01      	cmp	r3, #1
 8003ccc:	d103      	bne.n	8003cd6 <UART_DMAReceiveCplt+0x4e>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003cce:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8003cd0:	f7ff ffcc 	bl	8003c6c <HAL_UARTEx_RxEventCallback>
}
 8003cd4:	bd08      	pop	{r3, pc}
    HAL_UART_RxCpltCallback(huart);
 8003cd6:	f002 f8d3 	bl	8005e80 <HAL_UART_RxCpltCallback>
}
 8003cda:	e7fb      	b.n	8003cd4 <UART_DMAReceiveCplt+0x4c>

08003cdc <UART_Start_Receive_DMA>:
{
 8003cdc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8003cde:	4613      	mov	r3, r2
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ce0:	2500      	movs	r5, #0
  huart->RxXferSize = Size;
 8003ce2:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ce4:	2222      	movs	r2, #34	; 0x22
{
 8003ce6:	4604      	mov	r4, r0
  huart->pRxBuffPtr = pData;
 8003ce8:	6281      	str	r1, [r0, #40]	; 0x28
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cea:	6405      	str	r5, [r0, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003cec:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003cf0:	6b80      	ldr	r0, [r0, #56]	; 0x38
 8003cf2:	4a12      	ldr	r2, [pc, #72]	; (8003d3c <UART_Start_Receive_DMA+0x60>)
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003cf4:	6826      	ldr	r6, [r4, #0]
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8003cf6:	6282      	str	r2, [r0, #40]	; 0x28
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8003cf8:	4a11      	ldr	r2, [pc, #68]	; (8003d40 <UART_Start_Receive_DMA+0x64>)
 8003cfa:	62c2      	str	r2, [r0, #44]	; 0x2c
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8003cfc:	4a11      	ldr	r2, [pc, #68]	; (8003d44 <UART_Start_Receive_DMA+0x68>)
  huart->hdmarx->XferAbortCallback = NULL;
 8003cfe:	e9c0 250c 	strd	r2, r5, [r0, #48]	; 0x30
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8003d02:	460a      	mov	r2, r1
 8003d04:	1d31      	adds	r1, r6, #4
 8003d06:	f7fd ffb3 	bl	8001c70 <HAL_DMA_Start_IT>
}
 8003d0a:	4628      	mov	r0, r5
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003d0c:	6823      	ldr	r3, [r4, #0]
 8003d0e:	9501      	str	r5, [sp, #4]
 8003d10:	681a      	ldr	r2, [r3, #0]
 8003d12:	9201      	str	r2, [sp, #4]
 8003d14:	685a      	ldr	r2, [r3, #4]
  __HAL_UNLOCK(huart);
 8003d16:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  __HAL_UART_CLEAR_OREFLAG(huart);
 8003d1a:	9201      	str	r2, [sp, #4]
 8003d1c:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d1e:	68da      	ldr	r2, [r3, #12]
 8003d20:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003d24:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d26:	695a      	ldr	r2, [r3, #20]
 8003d28:	f042 0201 	orr.w	r2, r2, #1
 8003d2c:	615a      	str	r2, [r3, #20]
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d2e:	695a      	ldr	r2, [r3, #20]
 8003d30:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d34:	615a      	str	r2, [r3, #20]
}
 8003d36:	b002      	add	sp, #8
 8003d38:	bd70      	pop	{r4, r5, r6, pc}
 8003d3a:	bf00      	nop
 8003d3c:	08003c89 	.word	0x08003c89
 8003d40:	08003c6f 	.word	0x08003c6f
 8003d44:	08003c23 	.word	0x08003c23

08003d48 <HAL_UART_Receive_DMA>:
{
 8003d48:	b470      	push	{r4, r5, r6}
  if (huart->RxState == HAL_UART_STATE_READY)
 8003d4a:	f890 603e 	ldrb.w	r6, [r0, #62]	; 0x3e
 8003d4e:	2e20      	cmp	r6, #32
 8003d50:	d110      	bne.n	8003d74 <HAL_UART_Receive_DMA+0x2c>
    if ((pData == NULL) || (Size == 0U))
 8003d52:	b161      	cbz	r1, 8003d6e <HAL_UART_Receive_DMA+0x26>
 8003d54:	b15a      	cbz	r2, 8003d6e <HAL_UART_Receive_DMA+0x26>
    __HAL_LOCK(huart);
 8003d56:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 8003d5a:	2c01      	cmp	r4, #1
 8003d5c:	d00a      	beq.n	8003d74 <HAL_UART_Receive_DMA+0x2c>
 8003d5e:	2401      	movs	r4, #1
 8003d60:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003d64:	2400      	movs	r4, #0
 8003d66:	6304      	str	r4, [r0, #48]	; 0x30
}
 8003d68:	bc70      	pop	{r4, r5, r6}
    return(UART_Start_Receive_DMA(huart, pData, Size));
 8003d6a:	f7ff bfb7 	b.w	8003cdc <UART_Start_Receive_DMA>
      return HAL_ERROR;
 8003d6e:	2001      	movs	r0, #1
}
 8003d70:	bc70      	pop	{r4, r5, r6}
 8003d72:	4770      	bx	lr
    return HAL_BUSY;
 8003d74:	2002      	movs	r0, #2
 8003d76:	e7fb      	b.n	8003d70 <HAL_UART_Receive_DMA+0x28>

08003d78 <vListInitialise>:
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003d78:	f04f 32ff 	mov.w	r2, #4294967295
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d7c:	f100 0308 	add.w	r3, r0, #8

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d80:	e9c0 2302 	strd	r2, r3, [r0, #8]
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d84:	6043      	str	r3, [r0, #4]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003d86:	6103      	str	r3, [r0, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003d88:	2300      	movs	r3, #0
 8003d8a:	6003      	str	r3, [r0, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003d8c:	4770      	bx	lr

08003d8e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 8003d8e:	2300      	movs	r3, #0
 8003d90:	6103      	str	r3, [r0, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003d92:	4770      	bx	lr

08003d94 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
    ListItem_t * const pxIndex = pxList->pxIndex;
 8003d94:	6843      	ldr	r3, [r0, #4]

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003d96:	689a      	ldr	r2, [r3, #8]
    pxNewListItem->pxNext = pxIndex;
 8003d98:	604b      	str	r3, [r1, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003d9a:	608a      	str	r2, [r1, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003d9c:	689a      	ldr	r2, [r3, #8]
 8003d9e:	6051      	str	r1, [r2, #4]
    pxIndex->pxPrevious = pxNewListItem;
 8003da0:	6099      	str	r1, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
 8003da2:	6803      	ldr	r3, [r0, #0]
    pxNewListItem->pxContainer = pxList;
 8003da4:	6108      	str	r0, [r1, #16]
    ( pxList->uxNumberOfItems )++;
 8003da6:	3301      	adds	r3, #1
 8003da8:	6003      	str	r3, [r0, #0]
}
 8003daa:	4770      	bx	lr

08003dac <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003dac:	b530      	push	{r4, r5, lr}
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003dae:	680c      	ldr	r4, [r1, #0]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 8003db0:	1c63      	adds	r3, r4, #1
 8003db2:	d10a      	bne.n	8003dca <vListInsert+0x1e>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003db4:	6903      	ldr	r3, [r0, #16]
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	604a      	str	r2, [r1, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003dba:	6091      	str	r1, [r2, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003dbc:	608b      	str	r3, [r1, #8]
    pxIterator->pxNext = pxNewListItem;
 8003dbe:	6059      	str	r1, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
 8003dc0:	6803      	ldr	r3, [r0, #0]
    pxNewListItem->pxContainer = pxList;
 8003dc2:	6108      	str	r0, [r1, #16]
    ( pxList->uxNumberOfItems )++;
 8003dc4:	3301      	adds	r3, #1
 8003dc6:	6003      	str	r3, [r0, #0]
}
 8003dc8:	bd30      	pop	{r4, r5, pc}
        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003dca:	f100 0208 	add.w	r2, r0, #8
 8003dce:	4613      	mov	r3, r2
 8003dd0:	6852      	ldr	r2, [r2, #4]
 8003dd2:	6815      	ldr	r5, [r2, #0]
 8003dd4:	42a5      	cmp	r5, r4
 8003dd6:	d9fa      	bls.n	8003dce <vListInsert+0x22>
 8003dd8:	e7ed      	b.n	8003db6 <vListInsert+0xa>

08003dda <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 8003dda:	6903      	ldr	r3, [r0, #16]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003ddc:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 8003de0:	608a      	str	r2, [r1, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003de2:	6051      	str	r1, [r2, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 8003de4:	6859      	ldr	r1, [r3, #4]
 8003de6:	4281      	cmp	r1, r0
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003de8:	bf08      	it	eq
 8003dea:	605a      	streq	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 8003dec:	2200      	movs	r2, #0
 8003dee:	6102      	str	r2, [r0, #16]
    ( pxList->uxNumberOfItems )--;
 8003df0:	681a      	ldr	r2, [r3, #0]
 8003df2:	3a01      	subs	r2, #1
 8003df4:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 8003df6:	6818      	ldr	r0, [r3, #0]
}
 8003df8:	4770      	bx	lr

08003dfa <prvIsQueueEmpty>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 8003dfa:	b510      	push	{r4, lr}
 8003dfc:	4604      	mov	r4, r0
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003dfe:	f000 fff9 	bl	8004df4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 8003e02:	6ba4      	ldr	r4, [r4, #56]	; 0x38
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
 8003e04:	f001 f806 	bl	8004e14 <vPortExitCritical>

    return xReturn;
}
 8003e08:	fab4 f084 	clz	r0, r4
 8003e0c:	0940      	lsrs	r0, r0, #5
 8003e0e:	bd10      	pop	{r4, pc}

08003e10 <prvCopyDataToQueue>:
{
 8003e10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003e12:	4615      	mov	r5, r2
    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003e14:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 8003e16:	4604      	mov	r4, r0
    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e18:	6b86      	ldr	r6, [r0, #56]	; 0x38
    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003e1a:	b952      	cbnz	r2, 8003e32 <prvCopyDataToQueue+0x22>
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e1c:	6807      	ldr	r7, [r0, #0]
 8003e1e:	bb47      	cbnz	r7, 8003e72 <prvCopyDataToQueue+0x62>
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003e20:	6880      	ldr	r0, [r0, #8]
 8003e22:	f000 ff1b 	bl	8004c5c <xTaskPriorityDisinherit>
 8003e26:	4605      	mov	r5, r0
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003e28:	60a7      	str	r7, [r4, #8]
    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003e2a:	3601      	adds	r6, #1
}
 8003e2c:	4628      	mov	r0, r5
    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003e2e:	63a6      	str	r6, [r4, #56]	; 0x38
}
 8003e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if( xPosition == queueSEND_TO_BACK )
 8003e32:	b965      	cbnz	r5, 8003e4e <prvCopyDataToQueue+0x3e>
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e34:	6840      	ldr	r0, [r0, #4]
 8003e36:	f002 fabd 	bl	80063b4 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e3a:	6863      	ldr	r3, [r4, #4]
 8003e3c:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003e3e:	4413      	add	r3, r2
        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e40:	68a2      	ldr	r2, [r4, #8]
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e42:	6063      	str	r3, [r4, #4]
        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d3f0      	bcc.n	8003e2a <prvCopyDataToQueue+0x1a>
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003e48:	6823      	ldr	r3, [r4, #0]
 8003e4a:	6063      	str	r3, [r4, #4]
 8003e4c:	e7ed      	b.n	8003e2a <prvCopyDataToQueue+0x1a>
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003e4e:	68c0      	ldr	r0, [r0, #12]
 8003e50:	f002 fab0 	bl	80063b4 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003e54:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003e56:	68e3      	ldr	r3, [r4, #12]
 8003e58:	4251      	negs	r1, r2
 8003e5a:	1a9b      	subs	r3, r3, r2
        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e5c:	6822      	ldr	r2, [r4, #0]
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003e5e:	60e3      	str	r3, [r4, #12]
        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003e60:	4293      	cmp	r3, r2
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003e62:	bf3e      	ittt	cc
 8003e64:	68a3      	ldrcc	r3, [r4, #8]
 8003e66:	185b      	addcc	r3, r3, r1
 8003e68:	60e3      	strcc	r3, [r4, #12]
        if( xPosition == queueOVERWRITE )
 8003e6a:	2d02      	cmp	r5, #2
 8003e6c:	d101      	bne.n	8003e72 <prvCopyDataToQueue+0x62>
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e6e:	b116      	cbz	r6, 8003e76 <prvCopyDataToQueue+0x66>
                --uxMessagesWaiting;
 8003e70:	3e01      	subs	r6, #1
    BaseType_t xReturn = pdFALSE;
 8003e72:	2500      	movs	r5, #0
 8003e74:	e7d9      	b.n	8003e2a <prvCopyDataToQueue+0x1a>
 8003e76:	4635      	mov	r5, r6
 8003e78:	e7d7      	b.n	8003e2a <prvCopyDataToQueue+0x1a>

08003e7a <prvCopyDataFromQueue>:
{
 8003e7a:	4603      	mov	r3, r0
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003e7c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8003e7e:	4608      	mov	r0, r1
 8003e80:	b410      	push	{r4}
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003e82:	b162      	cbz	r2, 8003e9e <prvCopyDataFromQueue+0x24>
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e84:	68dc      	ldr	r4, [r3, #12]
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003e86:	6899      	ldr	r1, [r3, #8]
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e88:	4414      	add	r4, r2
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003e8a:	428c      	cmp	r4, r1
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003e8c:	bf28      	it	cs
 8003e8e:	6819      	ldrcs	r1, [r3, #0]
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003e90:	60dc      	str	r4, [r3, #12]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003e92:	bf28      	it	cs
 8003e94:	60d9      	strcs	r1, [r3, #12]
        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e96:	68d9      	ldr	r1, [r3, #12]
}
 8003e98:	bc10      	pop	{r4}
        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003e9a:	f002 ba8b 	b.w	80063b4 <memcpy>
}
 8003e9e:	bc10      	pop	{r4}
 8003ea0:	4770      	bx	lr

08003ea2 <prvUnlockQueue>:
{
 8003ea2:	b570      	push	{r4, r5, r6, lr}
 8003ea4:	4604      	mov	r4, r0
    taskENTER_CRITICAL();
 8003ea6:	f000 ffa5 	bl	8004df4 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 8003eaa:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003eae:	f104 0624 	add.w	r6, r4, #36	; 0x24
        int8_t cTxLock = pxQueue->cTxLock;
 8003eb2:	b26d      	sxtb	r5, r5
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003eb4:	2d00      	cmp	r5, #0
 8003eb6:	dc14      	bgt.n	8003ee2 <prvUnlockQueue+0x40>
        pxQueue->cTxLock = queueUNLOCKED;
 8003eb8:	23ff      	movs	r3, #255	; 0xff
 8003eba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    taskEXIT_CRITICAL();
 8003ebe:	f000 ffa9 	bl	8004e14 <vPortExitCritical>
    taskENTER_CRITICAL();
 8003ec2:	f000 ff97 	bl	8004df4 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 8003ec6:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003eca:	f104 0610 	add.w	r6, r4, #16
        int8_t cRxLock = pxQueue->cRxLock;
 8003ece:	b26d      	sxtb	r5, r5
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003ed0:	2d00      	cmp	r5, #0
 8003ed2:	dc12      	bgt.n	8003efa <prvUnlockQueue+0x58>
        pxQueue->cRxLock = queueUNLOCKED;
 8003ed4:	23ff      	movs	r3, #255	; 0xff
 8003ed6:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8003eda:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    taskEXIT_CRITICAL();
 8003ede:	f000 bf99 	b.w	8004e14 <vPortExitCritical>
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ee2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d0e7      	beq.n	8003eb8 <prvUnlockQueue+0x16>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ee8:	4630      	mov	r0, r6
 8003eea:	f000 fdcd 	bl	8004a88 <xTaskRemoveFromEventList>
 8003eee:	b108      	cbz	r0, 8003ef4 <prvUnlockQueue+0x52>
                            vTaskMissedYield();
 8003ef0:	f000 fe5c 	bl	8004bac <vTaskMissedYield>
            --cTxLock;
 8003ef4:	3d01      	subs	r5, #1
 8003ef6:	b26d      	sxtb	r5, r5
 8003ef8:	e7dc      	b.n	8003eb4 <prvUnlockQueue+0x12>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003efa:	6923      	ldr	r3, [r4, #16]
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d0e9      	beq.n	8003ed4 <prvUnlockQueue+0x32>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f00:	4630      	mov	r0, r6
 8003f02:	f000 fdc1 	bl	8004a88 <xTaskRemoveFromEventList>
 8003f06:	b108      	cbz	r0, 8003f0c <prvUnlockQueue+0x6a>
                    vTaskMissedYield();
 8003f08:	f000 fe50 	bl	8004bac <vTaskMissedYield>
                --cRxLock;
 8003f0c:	3d01      	subs	r5, #1
 8003f0e:	b26d      	sxtb	r5, r5
 8003f10:	e7de      	b.n	8003ed0 <prvUnlockQueue+0x2e>

08003f12 <xQueueGenericReset>:
{
 8003f12:	b570      	push	{r4, r5, r6, lr}
 8003f14:	460e      	mov	r6, r1
    if( ( pxQueue != NULL ) &&
 8003f16:	4604      	mov	r4, r0
 8003f18:	b310      	cbz	r0, 8003f60 <xQueueGenericReset+0x4e>
        ( pxQueue->uxLength >= 1U ) &&
 8003f1a:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8003f1c:	b300      	cbz	r0, 8003f60 <xQueueGenericReset+0x4e>
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8003f1e:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8003f20:	fba5 3500 	umull	r3, r5, r5, r0
 8003f24:	b9dd      	cbnz	r5, 8003f5e <xQueueGenericReset+0x4c>
        taskENTER_CRITICAL();
 8003f26:	f000 ff65 	bl	8004df4 <vPortEnterCritical>
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f2a:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
 8003f2e:	434b      	muls	r3, r1
 8003f30:	6822      	ldr	r2, [r4, #0]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003f32:	63a5      	str	r5, [r4, #56]	; 0x38
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f34:	18d0      	adds	r0, r2, r3
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f36:	1a5b      	subs	r3, r3, r1
 8003f38:	4413      	add	r3, r2
 8003f3a:	60e3      	str	r3, [r4, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8003f3c:	23ff      	movs	r3, #255	; 0xff
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003f3e:	60a0      	str	r0, [r4, #8]
            pxQueue->cRxLock = queueUNLOCKED;
 8003f40:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f44:	6062      	str	r2, [r4, #4]
            pxQueue->cTxLock = queueUNLOCKED;
 8003f46:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
            if( xNewQueue == pdFALSE )
 8003f4a:	b156      	cbz	r6, 8003f62 <xQueueGenericReset+0x50>
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003f4c:	f104 0010 	add.w	r0, r4, #16
 8003f50:	f7ff ff12 	bl	8003d78 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003f54:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003f58:	f7ff ff0e 	bl	8003d78 <vListInitialise>
 8003f5c:	e012      	b.n	8003f84 <xQueueGenericReset+0x72>
        xReturn = pdFAIL;
 8003f5e:	2000      	movs	r0, #0
}
 8003f60:	bd70      	pop	{r4, r5, r6, pc}
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f62:	6923      	ldr	r3, [r4, #16]
 8003f64:	b173      	cbz	r3, 8003f84 <xQueueGenericReset+0x72>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f66:	f104 0010 	add.w	r0, r4, #16
 8003f6a:	f000 fd8d 	bl	8004a88 <xTaskRemoveFromEventList>
 8003f6e:	b148      	cbz	r0, 8003f84 <xQueueGenericReset+0x72>
                        queueYIELD_IF_USING_PREEMPTION();
 8003f70:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003f74:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f78:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003f7c:	f3bf 8f4f 	dsb	sy
 8003f80:	f3bf 8f6f 	isb	sy
        taskEXIT_CRITICAL();
 8003f84:	f000 ff46 	bl	8004e14 <vPortExitCritical>
 8003f88:	2001      	movs	r0, #1
 8003f8a:	e7e9      	b.n	8003f60 <xQueueGenericReset+0x4e>

08003f8c <xQueueGenericCreate>:
    {
 8003f8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003f8e:	460d      	mov	r5, r1
 8003f90:	4617      	mov	r7, r2
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003f92:	4606      	mov	r6, r0
 8003f94:	b910      	cbnz	r0, 8003f9c <xQueueGenericCreate+0x10>
        Queue_t * pxNewQueue = NULL;
 8003f96:	2400      	movs	r4, #0
    }
 8003f98:	4620      	mov	r0, r4
 8003f9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003f9c:	fba0 2301 	umull	r2, r3, r0, r1
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d1f8      	bne.n	8003f96 <xQueueGenericCreate+0xa>
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8003fa4:	4348      	muls	r0, r1
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003fa6:	f110 0f51 	cmn.w	r0, #81	; 0x51
 8003faa:	d8f4      	bhi.n	8003f96 <xQueueGenericCreate+0xa>
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003fac:	3050      	adds	r0, #80	; 0x50
 8003fae:	f000 ffcb 	bl	8004f48 <pvPortMalloc>
            if( pxNewQueue != NULL )
 8003fb2:	4604      	mov	r4, r0
 8003fb4:	2800      	cmp	r0, #0
 8003fb6:	d0ee      	beq.n	8003f96 <xQueueGenericCreate+0xa>
    if( uxItemSize == ( UBaseType_t ) 0 )
 8003fb8:	b15d      	cbz	r5, 8003fd2 <xQueueGenericCreate+0x46>
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003fba:	f100 0350 	add.w	r3, r0, #80	; 0x50
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003fbe:	2101      	movs	r1, #1
 8003fc0:	4620      	mov	r0, r4
    pxNewQueue->uxItemSize = uxItemSize;
 8003fc2:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
 8003fc6:	6023      	str	r3, [r4, #0]
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003fc8:	f7ff ffa3 	bl	8003f12 <xQueueGenericReset>
            pxNewQueue->ucQueueType = ucQueueType;
 8003fcc:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
        return pxNewQueue;
 8003fd0:	e7e2      	b.n	8003f98 <xQueueGenericCreate+0xc>
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	e7f3      	b.n	8003fbe <xQueueGenericCreate+0x32>

08003fd6 <xQueueGenericSend>:
{
 8003fd6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003fda:	f04f 0800 	mov.w	r8, #0
{
 8003fde:	4604      	mov	r4, r0
 8003fe0:	460f      	mov	r7, r1
 8003fe2:	461e      	mov	r6, r3
        prvLockQueue( pxQueue );
 8003fe4:	46c1      	mov	r9, r8
{
 8003fe6:	b085      	sub	sp, #20
 8003fe8:	9201      	str	r2, [sp, #4]
        taskENTER_CRITICAL();
 8003fea:	f000 ff03 	bl	8004df4 <vPortEnterCritical>
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003fee:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003ff0:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003ff2:	429a      	cmp	r2, r3
 8003ff4:	d301      	bcc.n	8003ffa <xQueueGenericSend+0x24>
 8003ff6:	2e02      	cmp	r6, #2
 8003ff8:	d11b      	bne.n	8004032 <xQueueGenericSend+0x5c>
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ffa:	4632      	mov	r2, r6
 8003ffc:	4639      	mov	r1, r7
 8003ffe:	4620      	mov	r0, r4
 8004000:	f7ff ff06 	bl	8003e10 <prvCopyDataToQueue>
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004004:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004006:	b11b      	cbz	r3, 8004010 <xQueueGenericSend+0x3a>
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004008:	f104 0024 	add.w	r0, r4, #36	; 0x24
 800400c:	f000 fd3c 	bl	8004a88 <xTaskRemoveFromEventList>
                        else if( xYieldRequired != pdFALSE )
 8004010:	b148      	cbz	r0, 8004026 <xQueueGenericSend+0x50>
                            queueYIELD_IF_USING_PREEMPTION();
 8004012:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004016:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800401a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800401e:	f3bf 8f4f 	dsb	sy
 8004022:	f3bf 8f6f 	isb	sy
                taskEXIT_CRITICAL();
 8004026:	f000 fef5 	bl	8004e14 <vPortExitCritical>
                return pdPASS;
 800402a:	2001      	movs	r0, #1
}
 800402c:	b005      	add	sp, #20
 800402e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                if( xTicksToWait == ( TickType_t ) 0 )
 8004032:	9d01      	ldr	r5, [sp, #4]
 8004034:	b91d      	cbnz	r5, 800403e <xQueueGenericSend+0x68>
                    taskEXIT_CRITICAL();
 8004036:	f000 feed 	bl	8004e14 <vPortExitCritical>
            return errQUEUE_FULL;
 800403a:	2000      	movs	r0, #0
 800403c:	e7f6      	b.n	800402c <xQueueGenericSend+0x56>
                else if( xEntryTimeSet == pdFALSE )
 800403e:	f1b8 0f00 	cmp.w	r8, #0
 8004042:	d102      	bne.n	800404a <xQueueGenericSend+0x74>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004044:	a802      	add	r0, sp, #8
 8004046:	f000 fd7d 	bl	8004b44 <vTaskInternalSetTimeOutState>
        taskEXIT_CRITICAL();
 800404a:	f000 fee3 	bl	8004e14 <vPortExitCritical>
        vTaskSuspendAll();
 800404e:	f000 fb77 	bl	8004740 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004052:	f000 fecf 	bl	8004df4 <vPortEnterCritical>
 8004056:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800405a:	2bff      	cmp	r3, #255	; 0xff
 800405c:	bf08      	it	eq
 800405e:	f884 9044 	strbeq.w	r9, [r4, #68]	; 0x44
 8004062:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004066:	2bff      	cmp	r3, #255	; 0xff
 8004068:	bf08      	it	eq
 800406a:	f884 9045 	strbeq.w	r9, [r4, #69]	; 0x45
 800406e:	f000 fed1 	bl	8004e14 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004072:	a901      	add	r1, sp, #4
 8004074:	a802      	add	r0, sp, #8
 8004076:	f000 fd71 	bl	8004b5c <xTaskCheckForTimeOut>
 800407a:	bb40      	cbnz	r0, 80040ce <xQueueGenericSend+0xf8>

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 800407c:	f000 feba 	bl	8004df4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004080:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8004082:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8004084:	429a      	cmp	r2, r3
 8004086:	d10f      	bne.n	80040a8 <xQueueGenericSend+0xd2>
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
 8004088:	f000 fec4 	bl	8004e14 <vPortExitCritical>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800408c:	9901      	ldr	r1, [sp, #4]
 800408e:	f104 0010 	add.w	r0, r4, #16
 8004092:	f000 fce9 	bl	8004a68 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8004096:	4620      	mov	r0, r4
 8004098:	f7ff ff03 	bl	8003ea2 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 800409c:	f000 fc08 	bl	80048b0 <xTaskResumeAll>
 80040a0:	b150      	cbz	r0, 80040b8 <xQueueGenericSend+0xe2>
{
 80040a2:	f04f 0801 	mov.w	r8, #1
 80040a6:	e7a0      	b.n	8003fea <xQueueGenericSend+0x14>
    taskEXIT_CRITICAL();
 80040a8:	f000 feb4 	bl	8004e14 <vPortExitCritical>
                prvUnlockQueue( pxQueue );
 80040ac:	4620      	mov	r0, r4
 80040ae:	f7ff fef8 	bl	8003ea2 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80040b2:	f000 fbfd 	bl	80048b0 <xTaskResumeAll>
 80040b6:	e7f4      	b.n	80040a2 <xQueueGenericSend+0xcc>
                    portYIELD_WITHIN_API();
 80040b8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80040bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040c0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80040c4:	f3bf 8f4f 	dsb	sy
 80040c8:	f3bf 8f6f 	isb	sy
 80040cc:	e7e9      	b.n	80040a2 <xQueueGenericSend+0xcc>
            prvUnlockQueue( pxQueue );
 80040ce:	4620      	mov	r0, r4
 80040d0:	f7ff fee7 	bl	8003ea2 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80040d4:	f000 fbec 	bl	80048b0 <xTaskResumeAll>
 80040d8:	e7af      	b.n	800403a <xQueueGenericSend+0x64>

080040da <xQueueCreateMutex>:
    {
 80040da:	b570      	push	{r4, r5, r6, lr}
 80040dc:	4606      	mov	r6, r0
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80040de:	2050      	movs	r0, #80	; 0x50
 80040e0:	f000 ff32 	bl	8004f48 <pvPortMalloc>
            if( pxNewQueue != NULL )
 80040e4:	4604      	mov	r4, r0
 80040e6:	b188      	cbz	r0, 800410c <xQueueCreateMutex+0x32>
    pxNewQueue->uxItemSize = uxItemSize;
 80040e8:	2500      	movs	r5, #0
 80040ea:	2101      	movs	r1, #1
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80040ec:	6000      	str	r0, [r0, #0]
    pxNewQueue->uxItemSize = uxItemSize;
 80040ee:	e9c0 150f 	strd	r1, r5, [r0, #60]	; 0x3c
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80040f2:	f7ff ff0e 	bl	8003f12 <xQueueGenericReset>
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80040f6:	462b      	mov	r3, r5
 80040f8:	462a      	mov	r2, r5
 80040fa:	4629      	mov	r1, r5
 80040fc:	4620      	mov	r0, r4
            pxNewQueue->ucQueueType = ucQueueType;
 80040fe:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8004102:	60a5      	str	r5, [r4, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8004104:	6025      	str	r5, [r4, #0]
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8004106:	60e5      	str	r5, [r4, #12]
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8004108:	f7ff ff65 	bl	8003fd6 <xQueueGenericSend>
    }
 800410c:	4620      	mov	r0, r4
 800410e:	bd70      	pop	{r4, r5, r6, pc}

08004110 <xQueueReceive>:
{
 8004110:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    BaseType_t xEntryTimeSet = pdFALSE;
 8004114:	2700      	movs	r7, #0
{
 8004116:	4604      	mov	r4, r0
 8004118:	460e      	mov	r6, r1
        prvLockQueue( pxQueue );
 800411a:	46b8      	mov	r8, r7
{
 800411c:	9201      	str	r2, [sp, #4]
        taskENTER_CRITICAL();
 800411e:	f000 fe69 	bl	8004df4 <vPortEnterCritical>
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004122:	6ba5      	ldr	r5, [r4, #56]	; 0x38
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004124:	b1e5      	cbz	r5, 8004160 <xQueueReceive+0x50>
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004126:	4631      	mov	r1, r6
 8004128:	4620      	mov	r0, r4
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800412a:	3d01      	subs	r5, #1
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 800412c:	f7ff fea5 	bl	8003e7a <prvCopyDataFromQueue>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004130:	63a5      	str	r5, [r4, #56]	; 0x38
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004132:	6923      	ldr	r3, [r4, #16]
 8004134:	b173      	cbz	r3, 8004154 <xQueueReceive+0x44>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004136:	f104 0010 	add.w	r0, r4, #16
 800413a:	f000 fca5 	bl	8004a88 <xTaskRemoveFromEventList>
 800413e:	b148      	cbz	r0, 8004154 <xQueueReceive+0x44>
                        queueYIELD_IF_USING_PREEMPTION();
 8004140:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004144:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004148:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800414c:	f3bf 8f4f 	dsb	sy
 8004150:	f3bf 8f6f 	isb	sy
                taskEXIT_CRITICAL();
 8004154:	f000 fe5e 	bl	8004e14 <vPortExitCritical>
                return pdPASS;
 8004158:	2001      	movs	r0, #1
}
 800415a:	b004      	add	sp, #16
 800415c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if( xTicksToWait == ( TickType_t ) 0 )
 8004160:	9d01      	ldr	r5, [sp, #4]
 8004162:	b91d      	cbnz	r5, 800416c <xQueueReceive+0x5c>
                    taskEXIT_CRITICAL();
 8004164:	f000 fe56 	bl	8004e14 <vPortExitCritical>
                return errQUEUE_EMPTY;
 8004168:	2000      	movs	r0, #0
 800416a:	e7f6      	b.n	800415a <xQueueReceive+0x4a>
                else if( xEntryTimeSet == pdFALSE )
 800416c:	b917      	cbnz	r7, 8004174 <xQueueReceive+0x64>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 800416e:	a802      	add	r0, sp, #8
 8004170:	f000 fce8 	bl	8004b44 <vTaskInternalSetTimeOutState>
        taskEXIT_CRITICAL();
 8004174:	f000 fe4e 	bl	8004e14 <vPortExitCritical>
        vTaskSuspendAll();
 8004178:	f000 fae2 	bl	8004740 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 800417c:	f000 fe3a 	bl	8004df4 <vPortEnterCritical>
 8004180:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8004184:	2bff      	cmp	r3, #255	; 0xff
 8004186:	bf08      	it	eq
 8004188:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 800418c:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004190:	2bff      	cmp	r3, #255	; 0xff
 8004192:	bf08      	it	eq
 8004194:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8004198:	f000 fe3c 	bl	8004e14 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800419c:	a901      	add	r1, sp, #4
 800419e:	a802      	add	r0, sp, #8
 80041a0:	f000 fcdc 	bl	8004b5c <xTaskCheckForTimeOut>
 80041a4:	bb00      	cbnz	r0, 80041e8 <xQueueReceive+0xd8>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80041a6:	4620      	mov	r0, r4
 80041a8:	f7ff fe27 	bl	8003dfa <prvIsQueueEmpty>
 80041ac:	b1b0      	cbz	r0, 80041dc <xQueueReceive+0xcc>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80041ae:	9901      	ldr	r1, [sp, #4]
 80041b0:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80041b4:	f000 fc58 	bl	8004a68 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80041b8:	4620      	mov	r0, r4
 80041ba:	f7ff fe72 	bl	8003ea2 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 80041be:	f000 fb77 	bl	80048b0 <xTaskResumeAll>
 80041c2:	b948      	cbnz	r0, 80041d8 <xQueueReceive+0xc8>
                    portYIELD_WITHIN_API();
 80041c4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80041c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041cc:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80041d0:	f3bf 8f4f 	dsb	sy
 80041d4:	f3bf 8f6f 	isb	sy
{
 80041d8:	2701      	movs	r7, #1
 80041da:	e7a0      	b.n	800411e <xQueueReceive+0xe>
                prvUnlockQueue( pxQueue );
 80041dc:	4620      	mov	r0, r4
 80041de:	f7ff fe60 	bl	8003ea2 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80041e2:	f000 fb65 	bl	80048b0 <xTaskResumeAll>
 80041e6:	e7f7      	b.n	80041d8 <xQueueReceive+0xc8>
            prvUnlockQueue( pxQueue );
 80041e8:	4620      	mov	r0, r4
 80041ea:	f7ff fe5a 	bl	8003ea2 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80041ee:	f000 fb5f 	bl	80048b0 <xTaskResumeAll>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80041f2:	4620      	mov	r0, r4
 80041f4:	f7ff fe01 	bl	8003dfa <prvIsQueueEmpty>
 80041f8:	2800      	cmp	r0, #0
 80041fa:	d0ed      	beq.n	80041d8 <xQueueReceive+0xc8>
 80041fc:	e7b4      	b.n	8004168 <xQueueReceive+0x58>

080041fe <xQueueSemaphoreTake>:
{
 80041fe:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
        BaseType_t xInheritanceOccurred = pdFALSE;
 8004202:	2500      	movs	r5, #0
{
 8004204:	4604      	mov	r4, r0
    BaseType_t xEntryTimeSet = pdFALSE;
 8004206:	462f      	mov	r7, r5
        prvLockQueue( pxQueue );
 8004208:	462e      	mov	r6, r5
{
 800420a:	9101      	str	r1, [sp, #4]
        taskENTER_CRITICAL();
 800420c:	f000 fdf2 	bl	8004df4 <vPortEnterCritical>
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004210:	6ba3      	ldr	r3, [r4, #56]	; 0x38
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004212:	b1f3      	cbz	r3, 8004252 <xQueueSemaphoreTake+0x54>
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004214:	3b01      	subs	r3, #1
 8004216:	63a3      	str	r3, [r4, #56]	; 0x38
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004218:	6823      	ldr	r3, [r4, #0]
 800421a:	b913      	cbnz	r3, 8004222 <xQueueSemaphoreTake+0x24>
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800421c:	f000 fd9a 	bl	8004d54 <pvTaskIncrementMutexHeldCount>
 8004220:	60a0      	str	r0, [r4, #8]
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004222:	6923      	ldr	r3, [r4, #16]
 8004224:	b173      	cbz	r3, 8004244 <xQueueSemaphoreTake+0x46>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004226:	f104 0010 	add.w	r0, r4, #16
 800422a:	f000 fc2d 	bl	8004a88 <xTaskRemoveFromEventList>
 800422e:	b148      	cbz	r0, 8004244 <xQueueSemaphoreTake+0x46>
                        queueYIELD_IF_USING_PREEMPTION();
 8004230:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004234:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004238:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800423c:	f3bf 8f4f 	dsb	sy
 8004240:	f3bf 8f6f 	isb	sy
                taskEXIT_CRITICAL();
 8004244:	f000 fde6 	bl	8004e14 <vPortExitCritical>
                return pdPASS;
 8004248:	2501      	movs	r5, #1
}
 800424a:	4628      	mov	r0, r5
 800424c:	b004      	add	sp, #16
 800424e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if( xTicksToWait == ( TickType_t ) 0 )
 8004252:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004256:	f1b8 0f00 	cmp.w	r8, #0
 800425a:	d103      	bne.n	8004264 <xQueueSemaphoreTake+0x66>
                            taskEXIT_CRITICAL();
 800425c:	f000 fdda 	bl	8004e14 <vPortExitCritical>
                return errQUEUE_EMPTY;
 8004260:	2500      	movs	r5, #0
 8004262:	e7f2      	b.n	800424a <xQueueSemaphoreTake+0x4c>
                else if( xEntryTimeSet == pdFALSE )
 8004264:	b917      	cbnz	r7, 800426c <xQueueSemaphoreTake+0x6e>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8004266:	a802      	add	r0, sp, #8
 8004268:	f000 fc6c 	bl	8004b44 <vTaskInternalSetTimeOutState>
        taskEXIT_CRITICAL();
 800426c:	f000 fdd2 	bl	8004e14 <vPortExitCritical>
        vTaskSuspendAll();
 8004270:	f000 fa66 	bl	8004740 <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8004274:	f000 fdbe 	bl	8004df4 <vPortEnterCritical>
 8004278:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800427c:	2bff      	cmp	r3, #255	; 0xff
 800427e:	bf08      	it	eq
 8004280:	f884 6044 	strbeq.w	r6, [r4, #68]	; 0x44
 8004284:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8004288:	2bff      	cmp	r3, #255	; 0xff
 800428a:	bf08      	it	eq
 800428c:	f884 6045 	strbeq.w	r6, [r4, #69]	; 0x45
 8004290:	f000 fdc0 	bl	8004e14 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004294:	a901      	add	r1, sp, #4
 8004296:	a802      	add	r0, sp, #8
 8004298:	f000 fc60 	bl	8004b5c <xTaskCheckForTimeOut>
 800429c:	bb50      	cbnz	r0, 80042f4 <xQueueSemaphoreTake+0xf6>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800429e:	4620      	mov	r0, r4
 80042a0:	f7ff fdab 	bl	8003dfa <prvIsQueueEmpty>
 80042a4:	b300      	cbz	r0, 80042e8 <xQueueSemaphoreTake+0xea>
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80042a6:	6823      	ldr	r3, [r4, #0]
 80042a8:	b93b      	cbnz	r3, 80042ba <xQueueSemaphoreTake+0xbc>
                            taskENTER_CRITICAL();
 80042aa:	f000 fda3 	bl	8004df4 <vPortEnterCritical>
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80042ae:	68a0      	ldr	r0, [r4, #8]
 80042b0:	f000 fc82 	bl	8004bb8 <xTaskPriorityInherit>
 80042b4:	4605      	mov	r5, r0
                            taskEXIT_CRITICAL();
 80042b6:	f000 fdad 	bl	8004e14 <vPortExitCritical>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80042ba:	9901      	ldr	r1, [sp, #4]
 80042bc:	f104 0024 	add.w	r0, r4, #36	; 0x24
 80042c0:	f000 fbd2 	bl	8004a68 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 80042c4:	4620      	mov	r0, r4
 80042c6:	f7ff fdec 	bl	8003ea2 <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 80042ca:	f000 faf1 	bl	80048b0 <xTaskResumeAll>
 80042ce:	b948      	cbnz	r0, 80042e4 <xQueueSemaphoreTake+0xe6>
                    portYIELD_WITHIN_API();
 80042d0:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80042d4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042d8:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80042dc:	f3bf 8f4f 	dsb	sy
 80042e0:	f3bf 8f6f 	isb	sy
{
 80042e4:	2701      	movs	r7, #1
 80042e6:	e791      	b.n	800420c <xQueueSemaphoreTake+0xe>
                prvUnlockQueue( pxQueue );
 80042e8:	4620      	mov	r0, r4
 80042ea:	f7ff fdda 	bl	8003ea2 <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 80042ee:	f000 fadf 	bl	80048b0 <xTaskResumeAll>
 80042f2:	e7f7      	b.n	80042e4 <xQueueSemaphoreTake+0xe6>
            prvUnlockQueue( pxQueue );
 80042f4:	4620      	mov	r0, r4
 80042f6:	f7ff fdd4 	bl	8003ea2 <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 80042fa:	f000 fad9 	bl	80048b0 <xTaskResumeAll>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80042fe:	4620      	mov	r0, r4
 8004300:	f7ff fd7b 	bl	8003dfa <prvIsQueueEmpty>
 8004304:	2800      	cmp	r0, #0
 8004306:	d0ed      	beq.n	80042e4 <xQueueSemaphoreTake+0xe6>
                        if( xInheritanceOccurred != pdFALSE )
 8004308:	2d00      	cmp	r5, #0
 800430a:	d09e      	beq.n	800424a <xQueueSemaphoreTake+0x4c>
                            taskENTER_CRITICAL();
 800430c:	f000 fd72 	bl	8004df4 <vPortEnterCritical>
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004310:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004312:	b119      	cbz	r1, 800431c <xQueueSemaphoreTake+0x11e>
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004314:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8004316:	6819      	ldr	r1, [r3, #0]
 8004318:	f1c1 0105 	rsb	r1, r1, #5
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800431c:	68a0      	ldr	r0, [r4, #8]
 800431e:	f000 fcd7 	bl	8004cd0 <vTaskPriorityDisinheritAfterTimeout>
 8004322:	e79b      	b.n	800425c <xQueueSemaphoreTake+0x5e>

08004324 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8004324:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8004326:	4b21      	ldr	r3, [pc, #132]	; (80043ac <prvAddCurrentTaskToDelayedList+0x88>)
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004328:	4c21      	ldr	r4, [pc, #132]	; (80043b0 <prvAddCurrentTaskToDelayedList+0x8c>)
{
 800432a:	4606      	mov	r6, r0
    const TickType_t xConstTickCount = xTickCount;
 800432c:	681d      	ldr	r5, [r3, #0]
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800432e:	6820      	ldr	r0, [r4, #0]
{
 8004330:	460f      	mov	r7, r1
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004332:	3004      	adds	r0, #4
 8004334:	f7ff fd51 	bl	8003dda <uxListRemove>
 8004338:	b940      	cbnz	r0, 800434c <prvAddCurrentTaskToDelayedList+0x28>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800433a:	6822      	ldr	r2, [r4, #0]
 800433c:	491d      	ldr	r1, [pc, #116]	; (80043b4 <prvAddCurrentTaskToDelayedList+0x90>)
 800433e:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8004340:	2201      	movs	r2, #1
 8004342:	680b      	ldr	r3, [r1, #0]
 8004344:	4082      	lsls	r2, r0
 8004346:	ea23 0302 	bic.w	r3, r3, r2
 800434a:	600b      	str	r3, [r1, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800434c:	1c73      	adds	r3, r6, #1
 800434e:	d114      	bne.n	800437a <prvAddCurrentTaskToDelayedList+0x56>
 8004350:	b19f      	cbz	r7, 800437a <prvAddCurrentTaskToDelayedList+0x56>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004352:	4b19      	ldr	r3, [pc, #100]	; (80043b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8004354:	6821      	ldr	r1, [r4, #0]
 8004356:	685a      	ldr	r2, [r3, #4]
 8004358:	6890      	ldr	r0, [r2, #8]
 800435a:	608a      	str	r2, [r1, #8]
 800435c:	6821      	ldr	r1, [r4, #0]
 800435e:	60c8      	str	r0, [r1, #12]
 8004360:	6821      	ldr	r1, [r4, #0]
 8004362:	6890      	ldr	r0, [r2, #8]
 8004364:	3104      	adds	r1, #4
 8004366:	6041      	str	r1, [r0, #4]
 8004368:	6821      	ldr	r1, [r4, #0]
 800436a:	3104      	adds	r1, #4
 800436c:	6091      	str	r1, [r2, #8]
 800436e:	6822      	ldr	r2, [r4, #0]
 8004370:	6153      	str	r3, [r2, #20]
 8004372:	681a      	ldr	r2, [r3, #0]
 8004374:	3201      	adds	r2, #1
 8004376:	601a      	str	r2, [r3, #0]

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8004378:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800437a:	6823      	ldr	r3, [r4, #0]
 800437c:	19ad      	adds	r5, r5, r6
 800437e:	605d      	str	r5, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8004380:	d307      	bcc.n	8004392 <prvAddCurrentTaskToDelayedList+0x6e>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004382:	4b0e      	ldr	r3, [pc, #56]	; (80043bc <prvAddCurrentTaskToDelayedList+0x98>)
 8004384:	6818      	ldr	r0, [r3, #0]
 8004386:	6821      	ldr	r1, [r4, #0]
}
 8004388:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800438c:	3104      	adds	r1, #4
 800438e:	f7ff bd0d 	b.w	8003dac <vListInsert>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004392:	4b0b      	ldr	r3, [pc, #44]	; (80043c0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004394:	6818      	ldr	r0, [r3, #0]
 8004396:	6821      	ldr	r1, [r4, #0]
 8004398:	3104      	adds	r1, #4
 800439a:	f7ff fd07 	bl	8003dac <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 800439e:	4b09      	ldr	r3, [pc, #36]	; (80043c4 <prvAddCurrentTaskToDelayedList+0xa0>)
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	42aa      	cmp	r2, r5
                        xNextTaskUnblockTime = xTimeToWake;
 80043a4:	bf88      	it	hi
 80043a6:	601d      	strhi	r5, [r3, #0]
}
 80043a8:	e7e6      	b.n	8004378 <prvAddCurrentTaskToDelayedList+0x54>
 80043aa:	bf00      	nop
 80043ac:	20000430 	.word	0x20000430
 80043b0:	20000334 	.word	0x20000334
 80043b4:	200003b4 	.word	0x200003b4
 80043b8:	20000408 	.word	0x20000408
 80043bc:	2000033c 	.word	0x2000033c
 80043c0:	20000338 	.word	0x20000338
 80043c4:	200003e4 	.word	0x200003e4

080043c8 <prvResetNextTaskUnblockTime>:
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80043c8:	4a06      	ldr	r2, [pc, #24]	; (80043e4 <prvResetNextTaskUnblockTime+0x1c>)
 80043ca:	6813      	ldr	r3, [r2, #0]
 80043cc:	6819      	ldr	r1, [r3, #0]
 80043ce:	4b06      	ldr	r3, [pc, #24]	; (80043e8 <prvResetNextTaskUnblockTime+0x20>)
 80043d0:	b919      	cbnz	r1, 80043da <prvResetNextTaskUnblockTime+0x12>
        xNextTaskUnblockTime = portMAX_DELAY;
 80043d2:	f04f 32ff 	mov.w	r2, #4294967295
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80043d6:	601a      	str	r2, [r3, #0]
}
 80043d8:	4770      	bx	lr
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 80043da:	6812      	ldr	r2, [r2, #0]
 80043dc:	68d2      	ldr	r2, [r2, #12]
 80043de:	6812      	ldr	r2, [r2, #0]
 80043e0:	e7f9      	b.n	80043d6 <prvResetNextTaskUnblockTime+0xe>
 80043e2:	bf00      	nop
 80043e4:	20000338 	.word	0x20000338
 80043e8:	200003e4 	.word	0x200003e4

080043ec <prvIdleTask>:
{
 80043ec:	b580      	push	{r7, lr}
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043ee:	4c15      	ldr	r4, [pc, #84]	; (8004444 <prvIdleTask+0x58>)
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80043f0:	4f15      	ldr	r7, [pc, #84]	; (8004448 <prvIdleTask+0x5c>)
                    --uxCurrentNumberOfTasks;
 80043f2:	4e16      	ldr	r6, [pc, #88]	; (800444c <prvIdleTask+0x60>)
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80043f4:	6823      	ldr	r3, [r4, #0]
 80043f6:	b973      	cbnz	r3, 8004416 <prvIdleTask+0x2a>
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80043f8:	4b15      	ldr	r3, [pc, #84]	; (8004450 <prvIdleTask+0x64>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	2b01      	cmp	r3, #1
 80043fe:	d9f8      	bls.n	80043f2 <prvIdleTask+0x6>
                    taskYIELD();
 8004400:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004404:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004408:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800440c:	f3bf 8f4f 	dsb	sy
 8004410:	f3bf 8f6f 	isb	sy
 8004414:	e7ed      	b.n	80043f2 <prvIdleTask+0x6>
                taskENTER_CRITICAL();
 8004416:	f000 fced 	bl	8004df4 <vPortEnterCritical>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	68dd      	ldr	r5, [r3, #12]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800441e:	1d28      	adds	r0, r5, #4
 8004420:	f7ff fcdb 	bl	8003dda <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8004424:	6833      	ldr	r3, [r6, #0]
 8004426:	3b01      	subs	r3, #1
 8004428:	6033      	str	r3, [r6, #0]
                    --uxDeletedTasksWaitingCleanUp;
 800442a:	6823      	ldr	r3, [r4, #0]
 800442c:	3b01      	subs	r3, #1
 800442e:	6023      	str	r3, [r4, #0]
                taskEXIT_CRITICAL();
 8004430:	f000 fcf0 	bl	8004e14 <vPortExitCritical>
                vPortFreeStack( pxTCB->pxStack );
 8004434:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8004436:	f000 fe0b 	bl	8005050 <vPortFree>
                vPortFree( pxTCB );
 800443a:	4628      	mov	r0, r5
 800443c:	f000 fe08 	bl	8005050 <vPortFree>
    }
 8004440:	e7d8      	b.n	80043f4 <prvIdleTask+0x8>
 8004442:	bf00      	nop
 8004444:	200003a8 	.word	0x200003a8
 8004448:	2000041c 	.word	0x2000041c
 800444c:	200003a4 	.word	0x200003a4
 8004450:	20000340 	.word	0x20000340

08004454 <xTaskCreate>:
    {
 8004454:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004458:	0096      	lsls	r6, r2, #2
    {
 800445a:	4607      	mov	r7, r0
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800445c:	4630      	mov	r0, r6
    {
 800445e:	460d      	mov	r5, r1
 8004460:	4698      	mov	r8, r3
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004462:	f000 fd71 	bl	8004f48 <pvPortMalloc>
                if( pxStack != NULL )
 8004466:	4682      	mov	sl, r0
 8004468:	b1a0      	cbz	r0, 8004494 <xTaskCreate+0x40>
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800446a:	205c      	movs	r0, #92	; 0x5c
 800446c:	f000 fd6c 	bl	8004f48 <pvPortMalloc>
                    if( pxNewTCB != NULL )
 8004470:	4604      	mov	r4, r0
 8004472:	b160      	cbz	r0, 800448e <xTaskCreate+0x3a>
                        pxNewTCB->pxStack = pxStack;
 8004474:	f8c0 a030 	str.w	sl, [r0, #48]	; 0x30
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004478:	4632      	mov	r2, r6
 800447a:	21a5      	movs	r1, #165	; 0xa5
 800447c:	4650      	mov	r0, sl
 800447e:	f001 ffa7 	bl	80063d0 <memset>
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004482:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
    if( pcName != NULL )
 8004486:	b945      	cbnz	r5, 800449a <xTaskCreate+0x46>
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004488:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 800448c:	e013      	b.n	80044b6 <xTaskCreate+0x62>
                        vPortFreeStack( pxStack );
 800448e:	4650      	mov	r0, sl
 8004490:	f000 fdde 	bl	8005050 <vPortFree>
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004494:	f04f 35ff 	mov.w	r5, #4294967295
 8004498:	e095      	b.n	80045c6 <xTaskCreate+0x172>
 800449a:	1e6b      	subs	r3, r5, #1
 800449c:	f104 0234 	add.w	r2, r4, #52	; 0x34
 80044a0:	350f      	adds	r5, #15
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80044a2:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 80044a6:	f802 0b01 	strb.w	r0, [r2], #1
            if( pcName[ x ] == ( char ) 0x00 )
 80044aa:	b108      	cbz	r0, 80044b0 <xTaskCreate+0x5c>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80044ac:	42ab      	cmp	r3, r5
 80044ae:	d1f8      	bne.n	80044a2 <xTaskCreate+0x4e>
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80044b0:	2300      	movs	r3, #0
 80044b2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80044b6:	9d0a      	ldr	r5, [sp, #40]	; 0x28
            pxNewTCB->uxMutexesHeld = 0;
 80044b8:	f04f 0900 	mov.w	r9, #0
 80044bc:	2d04      	cmp	r5, #4
 80044be:	bf28      	it	cs
 80044c0:	2504      	movcs	r5, #4
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80044c2:	f104 0a04 	add.w	sl, r4, #4
 80044c6:	4650      	mov	r0, sl
    pxNewTCB->uxPriority = uxPriority;
 80044c8:	62e5      	str	r5, [r4, #44]	; 0x2c
            pxNewTCB->uxBasePriority = uxPriority;
 80044ca:	64e5      	str	r5, [r4, #76]	; 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 80044cc:	f8c4 9050 	str.w	r9, [r4, #80]	; 0x50
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80044d0:	3e04      	subs	r6, #4
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80044d2:	f7ff fc5c 	bl	8003d8e <vListInitialiseItem>
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044d6:	f1c5 0505 	rsb	r5, r5, #5
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80044da:	f104 0018 	add.w	r0, r4, #24
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80044de:	445e      	add	r6, fp
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80044e0:	f7ff fc55 	bl	8003d8e <vListInitialiseItem>
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80044e4:	4642      	mov	r2, r8
 80044e6:	4639      	mov	r1, r7
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80044e8:	6124      	str	r4, [r4, #16]
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044ea:	61a5      	str	r5, [r4, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80044ec:	6264      	str	r4, [r4, #36]	; 0x24
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80044ee:	f8c4 9054 	str.w	r9, [r4, #84]	; 0x54
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80044f2:	f884 9058 	strb.w	r9, [r4, #88]	; 0x58
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80044f6:	f026 0007 	bic.w	r0, r6, #7
 80044fa:	f000 fc57 	bl	8004dac <pxPortInitialiseStack>
    if( pxCreatedTask != NULL )
 80044fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004500:	6020      	str	r0, [r4, #0]
    if( pxCreatedTask != NULL )
 8004502:	b103      	cbz	r3, 8004506 <xTaskCreate+0xb2>
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004504:	601c      	str	r4, [r3, #0]
    taskENTER_CRITICAL();
 8004506:	f000 fc75 	bl	8004df4 <vPortEnterCritical>
        uxCurrentNumberOfTasks++;
 800450a:	4b36      	ldr	r3, [pc, #216]	; (80045e4 <xTaskCreate+0x190>)
        if( pxCurrentTCB == NULL )
 800450c:	4e36      	ldr	r6, [pc, #216]	; (80045e8 <xTaskCreate+0x194>)
        uxCurrentNumberOfTasks++;
 800450e:	681a      	ldr	r2, [r3, #0]
 8004510:	4f36      	ldr	r7, [pc, #216]	; (80045ec <xTaskCreate+0x198>)
 8004512:	3201      	adds	r2, #1
 8004514:	601a      	str	r2, [r3, #0]
        if( pxCurrentTCB == NULL )
 8004516:	6835      	ldr	r5, [r6, #0]
 8004518:	2d00      	cmp	r5, #0
 800451a:	d157      	bne.n	80045cc <xTaskCreate+0x178>
            pxCurrentTCB = pxNewTCB;
 800451c:	6034      	str	r4, [r6, #0]
            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	2b01      	cmp	r3, #1
 8004522:	d11f      	bne.n	8004564 <xTaskCreate+0x110>
 8004524:	46b8      	mov	r8, r7
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004526:	4640      	mov	r0, r8
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004528:	3501      	adds	r5, #1
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800452a:	f7ff fc25 	bl	8003d78 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800452e:	2d05      	cmp	r5, #5
 8004530:	f108 0814 	add.w	r8, r8, #20
 8004534:	d1f7      	bne.n	8004526 <xTaskCreate+0xd2>
    vListInitialise( &xDelayedTaskList1 );
 8004536:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80045f0 <xTaskCreate+0x19c>
    vListInitialise( &xDelayedTaskList2 );
 800453a:	4d2e      	ldr	r5, [pc, #184]	; (80045f4 <xTaskCreate+0x1a0>)
    vListInitialise( &xDelayedTaskList1 );
 800453c:	4640      	mov	r0, r8
 800453e:	f7ff fc1b 	bl	8003d78 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 8004542:	4628      	mov	r0, r5
 8004544:	f7ff fc18 	bl	8003d78 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004548:	482b      	ldr	r0, [pc, #172]	; (80045f8 <xTaskCreate+0x1a4>)
 800454a:	f7ff fc15 	bl	8003d78 <vListInitialise>
            vListInitialise( &xTasksWaitingTermination );
 800454e:	482b      	ldr	r0, [pc, #172]	; (80045fc <xTaskCreate+0x1a8>)
 8004550:	f7ff fc12 	bl	8003d78 <vListInitialise>
            vListInitialise( &xSuspendedTaskList );
 8004554:	482a      	ldr	r0, [pc, #168]	; (8004600 <xTaskCreate+0x1ac>)
 8004556:	f7ff fc0f 	bl	8003d78 <vListInitialise>
    pxDelayedTaskList = &xDelayedTaskList1;
 800455a:	4b2a      	ldr	r3, [pc, #168]	; (8004604 <xTaskCreate+0x1b0>)
 800455c:	f8c3 8000 	str.w	r8, [r3]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004560:	4b29      	ldr	r3, [pc, #164]	; (8004608 <xTaskCreate+0x1b4>)
 8004562:	601d      	str	r5, [r3, #0]
        prvAddTaskToReadyList( pxNewTCB );
 8004564:	2501      	movs	r5, #1
        uxTaskNumber++;
 8004566:	4a29      	ldr	r2, [pc, #164]	; (800460c <xTaskCreate+0x1b8>)
        prvAddTaskToReadyList( pxNewTCB );
 8004568:	4929      	ldr	r1, [pc, #164]	; (8004610 <xTaskCreate+0x1bc>)
        uxTaskNumber++;
 800456a:	6813      	ldr	r3, [r2, #0]
        prvAddTaskToReadyList( pxNewTCB );
 800456c:	6808      	ldr	r0, [r1, #0]
        uxTaskNumber++;
 800456e:	3301      	adds	r3, #1
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004570:	6463      	str	r3, [r4, #68]	; 0x44
        uxTaskNumber++;
 8004572:	6013      	str	r3, [r2, #0]
        prvAddTaskToReadyList( pxNewTCB );
 8004574:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004576:	fa05 f203 	lsl.w	r2, r5, r3
 800457a:	4302      	orrs	r2, r0
 800457c:	600a      	str	r2, [r1, #0]
 800457e:	2214      	movs	r2, #20
 8004580:	4353      	muls	r3, r2
 8004582:	18f8      	adds	r0, r7, r3
 8004584:	6842      	ldr	r2, [r0, #4]
 8004586:	6891      	ldr	r1, [r2, #8]
 8004588:	60a2      	str	r2, [r4, #8]
 800458a:	60e1      	str	r1, [r4, #12]
 800458c:	6891      	ldr	r1, [r2, #8]
 800458e:	f8c1 a004 	str.w	sl, [r1, #4]
 8004592:	f8c2 a008 	str.w	sl, [r2, #8]
 8004596:	58fa      	ldr	r2, [r7, r3]
 8004598:	6160      	str	r0, [r4, #20]
 800459a:	442a      	add	r2, r5
 800459c:	50fa      	str	r2, [r7, r3]
    taskEXIT_CRITICAL();
 800459e:	f000 fc39 	bl	8004e14 <vPortExitCritical>
    if( xSchedulerRunning != pdFALSE )
 80045a2:	4b1c      	ldr	r3, [pc, #112]	; (8004614 <xTaskCreate+0x1c0>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	b173      	cbz	r3, 80045c6 <xTaskCreate+0x172>
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80045a8:	6833      	ldr	r3, [r6, #0]
 80045aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045ac:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80045ae:	429a      	cmp	r2, r3
 80045b0:	d209      	bcs.n	80045c6 <xTaskCreate+0x172>
            taskYIELD_IF_USING_PREEMPTION();
 80045b2:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80045b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045ba:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80045be:	f3bf 8f4f 	dsb	sy
 80045c2:	f3bf 8f6f 	isb	sy
    }
 80045c6:	4628      	mov	r0, r5
 80045c8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if( xSchedulerRunning == pdFALSE )
 80045cc:	4b11      	ldr	r3, [pc, #68]	; (8004614 <xTaskCreate+0x1c0>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1c7      	bne.n	8004564 <xTaskCreate+0x110>
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80045d4:	6833      	ldr	r3, [r6, #0]
 80045d6:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80045d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045da:	429a      	cmp	r2, r3
                    pxCurrentTCB = pxNewTCB;
 80045dc:	bf28      	it	cs
 80045de:	6034      	strcs	r4, [r6, #0]
 80045e0:	e7c0      	b.n	8004564 <xTaskCreate+0x110>
 80045e2:	bf00      	nop
 80045e4:	200003a4 	.word	0x200003a4
 80045e8:	20000334 	.word	0x20000334
 80045ec:	20000340 	.word	0x20000340
 80045f0:	200003b8 	.word	0x200003b8
 80045f4:	200003cc 	.word	0x200003cc
 80045f8:	200003f0 	.word	0x200003f0
 80045fc:	2000041c 	.word	0x2000041c
 8004600:	20000408 	.word	0x20000408
 8004604:	20000338 	.word	0x20000338
 8004608:	2000033c 	.word	0x2000033c
 800460c:	200003b0 	.word	0x200003b0
 8004610:	200003b4 	.word	0x200003b4
 8004614:	20000404 	.word	0x20000404

08004618 <vTaskDelete>:
    {
 8004618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800461a:	4604      	mov	r4, r0
 800461c:	4d27      	ldr	r5, [pc, #156]	; (80046bc <vTaskDelete+0xa4>)
        taskENTER_CRITICAL();
 800461e:	f000 fbe9 	bl	8004df4 <vPortEnterCritical>
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8004622:	b904      	cbnz	r4, 8004626 <vTaskDelete+0xe>
 8004624:	682c      	ldr	r4, [r5, #0]
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004626:	1d26      	adds	r6, r4, #4
 8004628:	4630      	mov	r0, r6
 800462a:	f7ff fbd6 	bl	8003dda <uxListRemove>
 800462e:	b960      	cbnz	r0, 800464a <vTaskDelete+0x32>
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004630:	2014      	movs	r0, #20
 8004632:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004634:	4b22      	ldr	r3, [pc, #136]	; (80046c0 <vTaskDelete+0xa8>)
 8004636:	4378      	muls	r0, r7
 8004638:	581b      	ldr	r3, [r3, r0]
 800463a:	b933      	cbnz	r3, 800464a <vTaskDelete+0x32>
 800463c:	2201      	movs	r2, #1
 800463e:	4921      	ldr	r1, [pc, #132]	; (80046c4 <vTaskDelete+0xac>)
 8004640:	40ba      	lsls	r2, r7
 8004642:	680b      	ldr	r3, [r1, #0]
 8004644:	ea23 0302 	bic.w	r3, r3, r2
 8004648:	600b      	str	r3, [r1, #0]
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800464a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800464c:	b11b      	cbz	r3, 8004656 <vTaskDelete+0x3e>
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800464e:	f104 0018 	add.w	r0, r4, #24
 8004652:	f7ff fbc2 	bl	8003dda <uxListRemove>
            uxTaskNumber++;
 8004656:	4a1c      	ldr	r2, [pc, #112]	; (80046c8 <vTaskDelete+0xb0>)
 8004658:	6813      	ldr	r3, [r2, #0]
 800465a:	3301      	adds	r3, #1
 800465c:	6013      	str	r3, [r2, #0]
            if( pxTCB == pxCurrentTCB )
 800465e:	682b      	ldr	r3, [r5, #0]
 8004660:	42a3      	cmp	r3, r4
 8004662:	d123      	bne.n	80046ac <vTaskDelete+0x94>
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8004664:	4631      	mov	r1, r6
 8004666:	4819      	ldr	r0, [pc, #100]	; (80046cc <vTaskDelete+0xb4>)
 8004668:	f7ff fb94 	bl	8003d94 <vListInsertEnd>
                ++uxDeletedTasksWaitingCleanUp;
 800466c:	4a18      	ldr	r2, [pc, #96]	; (80046d0 <vTaskDelete+0xb8>)
 800466e:	6813      	ldr	r3, [r2, #0]
 8004670:	3301      	adds	r3, #1
 8004672:	6013      	str	r3, [r2, #0]
        taskEXIT_CRITICAL();
 8004674:	f000 fbce 	bl	8004e14 <vPortExitCritical>
        if( pxTCB != pxCurrentTCB )
 8004678:	682b      	ldr	r3, [r5, #0]
 800467a:	42a3      	cmp	r3, r4
 800467c:	d005      	beq.n	800468a <vTaskDelete+0x72>
                vPortFreeStack( pxTCB->pxStack );
 800467e:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8004680:	f000 fce6 	bl	8005050 <vPortFree>
                vPortFree( pxTCB );
 8004684:	4620      	mov	r0, r4
 8004686:	f000 fce3 	bl	8005050 <vPortFree>
        if( xSchedulerRunning != pdFALSE )
 800468a:	4b12      	ldr	r3, [pc, #72]	; (80046d4 <vTaskDelete+0xbc>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	b163      	cbz	r3, 80046aa <vTaskDelete+0x92>
            if( pxTCB == pxCurrentTCB )
 8004690:	682b      	ldr	r3, [r5, #0]
 8004692:	42a3      	cmp	r3, r4
 8004694:	d109      	bne.n	80046aa <vTaskDelete+0x92>
                portYIELD_WITHIN_API();
 8004696:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800469a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800469e:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80046a2:	f3bf 8f4f 	dsb	sy
 80046a6:	f3bf 8f6f 	isb	sy
    }
 80046aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                --uxCurrentNumberOfTasks;
 80046ac:	4a0a      	ldr	r2, [pc, #40]	; (80046d8 <vTaskDelete+0xc0>)
 80046ae:	6813      	ldr	r3, [r2, #0]
 80046b0:	3b01      	subs	r3, #1
 80046b2:	6013      	str	r3, [r2, #0]
                prvResetNextTaskUnblockTime();
 80046b4:	f7ff fe88 	bl	80043c8 <prvResetNextTaskUnblockTime>
 80046b8:	e7dc      	b.n	8004674 <vTaskDelete+0x5c>
 80046ba:	bf00      	nop
 80046bc:	20000334 	.word	0x20000334
 80046c0:	20000340 	.word	0x20000340
 80046c4:	200003b4 	.word	0x200003b4
 80046c8:	200003b0 	.word	0x200003b0
 80046cc:	2000041c 	.word	0x2000041c
 80046d0:	200003a8 	.word	0x200003a8
 80046d4:	20000404 	.word	0x20000404
 80046d8:	200003a4 	.word	0x200003a4

080046dc <vTaskStartScheduler>:
{
 80046dc:	b513      	push	{r0, r1, r4, lr}
            xReturn = xTaskCreate( prvIdleTask,
 80046de:	2400      	movs	r4, #0
 80046e0:	4b10      	ldr	r3, [pc, #64]	; (8004724 <vTaskStartScheduler+0x48>)
 80046e2:	2246      	movs	r2, #70	; 0x46
 80046e4:	9301      	str	r3, [sp, #4]
 80046e6:	4910      	ldr	r1, [pc, #64]	; (8004728 <vTaskStartScheduler+0x4c>)
 80046e8:	4623      	mov	r3, r4
 80046ea:	4810      	ldr	r0, [pc, #64]	; (800472c <vTaskStartScheduler+0x50>)
 80046ec:	9400      	str	r4, [sp, #0]
 80046ee:	f7ff feb1 	bl	8004454 <xTaskCreate>
    if( xReturn == pdPASS )
 80046f2:	2801      	cmp	r0, #1
 80046f4:	d111      	bne.n	800471a <vTaskStartScheduler+0x3e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80046f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fa:	f383 8811 	msr	BASEPRI, r3
 80046fe:	f3bf 8f6f 	isb	sy
 8004702:	f3bf 8f4f 	dsb	sy
        xNextTaskUnblockTime = portMAX_DELAY;
 8004706:	f04f 32ff 	mov.w	r2, #4294967295
 800470a:	4b09      	ldr	r3, [pc, #36]	; (8004730 <vTaskStartScheduler+0x54>)
 800470c:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 800470e:	4b09      	ldr	r3, [pc, #36]	; (8004734 <vTaskStartScheduler+0x58>)
 8004710:	6018      	str	r0, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004712:	4b09      	ldr	r3, [pc, #36]	; (8004738 <vTaskStartScheduler+0x5c>)
 8004714:	601c      	str	r4, [r3, #0]
        if( xPortStartScheduler() != pdFALSE )
 8004716:	f000 fbd5 	bl	8004ec4 <xPortStartScheduler>
    ( void ) uxTopUsedPriority;
 800471a:	4b08      	ldr	r3, [pc, #32]	; (800473c <vTaskStartScheduler+0x60>)
 800471c:	681b      	ldr	r3, [r3, #0]
}
 800471e:	b002      	add	sp, #8
 8004720:	bd10      	pop	{r4, pc}
 8004722:	bf00      	nop
 8004724:	200003e0 	.word	0x200003e0
 8004728:	08007675 	.word	0x08007675
 800472c:	080043ed 	.word	0x080043ed
 8004730:	200003e4 	.word	0x200003e4
 8004734:	20000404 	.word	0x20000404
 8004738:	20000430 	.word	0x20000430
 800473c:	2000000c 	.word	0x2000000c

08004740 <vTaskSuspendAll>:
    ++uxSchedulerSuspended;
 8004740:	4a02      	ldr	r2, [pc, #8]	; (800474c <vTaskSuspendAll+0xc>)
 8004742:	6813      	ldr	r3, [r2, #0]
 8004744:	3301      	adds	r3, #1
 8004746:	6013      	str	r3, [r2, #0]
}
 8004748:	4770      	bx	lr
 800474a:	bf00      	nop
 800474c:	200003ac 	.word	0x200003ac

08004750 <xTaskIncrementTick>:
{
 8004750:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004754:	4b4b      	ldr	r3, [pc, #300]	; (8004884 <xTaskIncrementTick+0x134>)
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2b00      	cmp	r3, #0
 800475a:	f040 808c 	bne.w	8004876 <xTaskIncrementTick+0x126>
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800475e:	4b4a      	ldr	r3, [pc, #296]	; (8004888 <xTaskIncrementTick+0x138>)
 8004760:	681c      	ldr	r4, [r3, #0]
 8004762:	3401      	adds	r4, #1
        xTickCount = xConstTickCount;
 8004764:	601c      	str	r4, [r3, #0]
        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004766:	b95c      	cbnz	r4, 8004780 <xTaskIncrementTick+0x30>
            taskSWITCH_DELAYED_LISTS();
 8004768:	4a48      	ldr	r2, [pc, #288]	; (800488c <xTaskIncrementTick+0x13c>)
 800476a:	4b49      	ldr	r3, [pc, #292]	; (8004890 <xTaskIncrementTick+0x140>)
 800476c:	6811      	ldr	r1, [r2, #0]
 800476e:	6818      	ldr	r0, [r3, #0]
 8004770:	6010      	str	r0, [r2, #0]
 8004772:	4a48      	ldr	r2, [pc, #288]	; (8004894 <xTaskIncrementTick+0x144>)
 8004774:	6019      	str	r1, [r3, #0]
 8004776:	6813      	ldr	r3, [r2, #0]
 8004778:	3301      	adds	r3, #1
 800477a:	6013      	str	r3, [r2, #0]
 800477c:	f7ff fe24 	bl	80043c8 <prvResetNextTaskUnblockTime>
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004780:	f8df c114 	ldr.w	ip, [pc, #276]	; 8004898 <xTaskIncrementTick+0x148>
    BaseType_t xSwitchRequired = pdFALSE;
 8004784:	2000      	movs	r0, #0
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004786:	f8dc 3000 	ldr.w	r3, [ip]
 800478a:	4a44      	ldr	r2, [pc, #272]	; (800489c <xTaskIncrementTick+0x14c>)
 800478c:	429c      	cmp	r4, r3
 800478e:	f8df 9110 	ldr.w	r9, [pc, #272]	; 80048a0 <xTaskIncrementTick+0x150>
 8004792:	d20f      	bcs.n	80047b4 <xTaskIncrementTick+0x64>
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004794:	2114      	movs	r1, #20
 8004796:	f8d9 3000 	ldr.w	r3, [r9]
 800479a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800479c:	434b      	muls	r3, r1
 800479e:	58d3      	ldr	r3, [r2, r3]
                    xSwitchRequired = pdTRUE;
 80047a0:	2b02      	cmp	r3, #2
                if( xYieldPending != pdFALSE )
 80047a2:	4b40      	ldr	r3, [pc, #256]	; (80048a4 <xTaskIncrementTick+0x154>)
                    xSwitchRequired = pdTRUE;
 80047a4:	bf28      	it	cs
 80047a6:	2001      	movcs	r0, #1
                if( xYieldPending != pdFALSE )
 80047a8:	681b      	ldr	r3, [r3, #0]
                    xSwitchRequired = pdTRUE;
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	bf18      	it	ne
 80047ae:	2001      	movne	r0, #1
}
 80047b0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80047b4:	4683      	mov	fp, r0
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80047b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 800488c <xTaskIncrementTick+0x13c>
 80047ba:	f8d8 3000 	ldr.w	r3, [r8]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	b923      	cbnz	r3, 80047cc <xTaskIncrementTick+0x7c>
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80047c2:	f04f 33ff 	mov.w	r3, #4294967295
 80047c6:	f8cc 3000 	str.w	r3, [ip]
                    break;
 80047ca:	e7e3      	b.n	8004794 <xTaskIncrementTick+0x44>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047cc:	f8d8 3000 	ldr.w	r3, [r8]
 80047d0:	68db      	ldr	r3, [r3, #12]
 80047d2:	68db      	ldr	r3, [r3, #12]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80047d4:	6859      	ldr	r1, [r3, #4]
                    if( xConstTickCount < xItemValue )
 80047d6:	428c      	cmp	r4, r1
 80047d8:	d202      	bcs.n	80047e0 <xTaskIncrementTick+0x90>
                        xNextTaskUnblockTime = xItemValue;
 80047da:	f8cc 1000 	str.w	r1, [ip]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80047de:	e7d9      	b.n	8004794 <xTaskIncrementTick+0x44>
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80047e0:	695d      	ldr	r5, [r3, #20]
 80047e2:	e9d3 1702 	ldrd	r1, r7, [r3, #8]
 80047e6:	608f      	str	r7, [r1, #8]
 80047e8:	6079      	str	r1, [r7, #4]
 80047ea:	6869      	ldr	r1, [r5, #4]
 80047ec:	1d1e      	adds	r6, r3, #4
 80047ee:	42b1      	cmp	r1, r6
 80047f0:	6829      	ldr	r1, [r5, #0]
 80047f2:	bf08      	it	eq
 80047f4:	606f      	streq	r7, [r5, #4]
 80047f6:	3901      	subs	r1, #1
 80047f8:	f8c3 b014 	str.w	fp, [r3, #20]
 80047fc:	6029      	str	r1, [r5, #0]
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80047fe:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 8004800:	b195      	cbz	r5, 8004828 <xTaskIncrementTick+0xd8>
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 8004802:	e9d3 1707 	ldrd	r1, r7, [r3, #28]
 8004806:	608f      	str	r7, [r1, #8]
 8004808:	f8d3 a020 	ldr.w	sl, [r3, #32]
 800480c:	f103 0718 	add.w	r7, r3, #24
 8004810:	f8ca 1004 	str.w	r1, [sl, #4]
 8004814:	6869      	ldr	r1, [r5, #4]
 8004816:	42b9      	cmp	r1, r7
 8004818:	6829      	ldr	r1, [r5, #0]
 800481a:	bf08      	it	eq
 800481c:	f8c5 a004 	streq.w	sl, [r5, #4]
 8004820:	3901      	subs	r1, #1
 8004822:	f8c3 b028 	str.w	fp, [r3, #40]	; 0x28
 8004826:	6029      	str	r1, [r5, #0]
                    prvAddTaskToReadyList( pxTCB );
 8004828:	2101      	movs	r1, #1
 800482a:	f8df e07c 	ldr.w	lr, [pc, #124]	; 80048a8 <xTaskIncrementTick+0x158>
 800482e:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8004830:	f8de 7000 	ldr.w	r7, [lr]
 8004834:	40a9      	lsls	r1, r5
 8004836:	4339      	orrs	r1, r7
 8004838:	f8ce 1000 	str.w	r1, [lr]
 800483c:	2114      	movs	r1, #20
 800483e:	fb01 fa05 	mul.w	sl, r1, r5
 8004842:	eb02 070a 	add.w	r7, r2, sl
 8004846:	6879      	ldr	r1, [r7, #4]
 8004848:	f8d1 e008 	ldr.w	lr, [r1, #8]
 800484c:	6099      	str	r1, [r3, #8]
 800484e:	f8c3 e00c 	str.w	lr, [r3, #12]
 8004852:	f8d1 e008 	ldr.w	lr, [r1, #8]
 8004856:	f8ce 6004 	str.w	r6, [lr, #4]
 800485a:	608e      	str	r6, [r1, #8]
 800485c:	615f      	str	r7, [r3, #20]
 800485e:	f852 300a 	ldr.w	r3, [r2, sl]
 8004862:	3301      	adds	r3, #1
 8004864:	f842 300a 	str.w	r3, [r2, sl]
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004868:	f8d9 3000 	ldr.w	r3, [r9]
 800486c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                                xSwitchRequired = pdTRUE;
 800486e:	429d      	cmp	r5, r3
 8004870:	bf28      	it	cs
 8004872:	2001      	movcs	r0, #1
 8004874:	e7a1      	b.n	80047ba <xTaskIncrementTick+0x6a>
        ++xPendedTicks;
 8004876:	4a0d      	ldr	r2, [pc, #52]	; (80048ac <xTaskIncrementTick+0x15c>)
    BaseType_t xSwitchRequired = pdFALSE;
 8004878:	2000      	movs	r0, #0
        ++xPendedTicks;
 800487a:	6813      	ldr	r3, [r2, #0]
 800487c:	3301      	adds	r3, #1
 800487e:	6013      	str	r3, [r2, #0]
    return xSwitchRequired;
 8004880:	e796      	b.n	80047b0 <xTaskIncrementTick+0x60>
 8004882:	bf00      	nop
 8004884:	200003ac 	.word	0x200003ac
 8004888:	20000430 	.word	0x20000430
 800488c:	20000338 	.word	0x20000338
 8004890:	2000033c 	.word	0x2000033c
 8004894:	200003e8 	.word	0x200003e8
 8004898:	200003e4 	.word	0x200003e4
 800489c:	20000340 	.word	0x20000340
 80048a0:	20000334 	.word	0x20000334
 80048a4:	20000434 	.word	0x20000434
 80048a8:	200003b4 	.word	0x200003b4
 80048ac:	200003ec 	.word	0x200003ec

080048b0 <xTaskResumeAll>:
{
 80048b0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    taskENTER_CRITICAL();
 80048b4:	f000 fa9e 	bl	8004df4 <vPortEnterCritical>
        --uxSchedulerSuspended;
 80048b8:	4b3f      	ldr	r3, [pc, #252]	; (80049b8 <xTaskResumeAll+0x108>)
 80048ba:	681a      	ldr	r2, [r3, #0]
 80048bc:	3a01      	subs	r2, #1
 80048be:	601a      	str	r2, [r3, #0]
        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	b12b      	cbz	r3, 80048d0 <xTaskResumeAll+0x20>
    BaseType_t xAlreadyYielded = pdFALSE;
 80048c4:	2400      	movs	r4, #0
    taskEXIT_CRITICAL();
 80048c6:	f000 faa5 	bl	8004e14 <vPortExitCritical>
}
 80048ca:	4620      	mov	r0, r4
 80048cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80048d0:	4a3a      	ldr	r2, [pc, #232]	; (80049bc <xTaskResumeAll+0x10c>)
 80048d2:	6812      	ldr	r2, [r2, #0]
 80048d4:	2a00      	cmp	r2, #0
 80048d6:	d0f5      	beq.n	80048c4 <xTaskResumeAll+0x14>
                    prvAddTaskToReadyList( pxTCB );
 80048d8:	f04f 0c01 	mov.w	ip, #1
 80048dc:	f04f 0e14 	mov.w	lr, #20
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80048e0:	4d37      	ldr	r5, [pc, #220]	; (80049c0 <xTaskResumeAll+0x110>)
                    prvAddTaskToReadyList( pxTCB );
 80048e2:	4e38      	ldr	r6, [pc, #224]	; (80049c4 <xTaskResumeAll+0x114>)
 80048e4:	4938      	ldr	r1, [pc, #224]	; (80049c8 <xTaskResumeAll+0x118>)
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048e6:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 80049cc <xTaskResumeAll+0x11c>
                        xYieldPending = pdTRUE;
 80048ea:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 80049d0 <xTaskResumeAll+0x120>
 80048ee:	e040      	b.n	8004972 <xTaskResumeAll+0xc2>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048f0:	68eb      	ldr	r3, [r5, #12]
 80048f2:	68db      	ldr	r3, [r3, #12]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80048f4:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80048f6:	e9d3 2407 	ldrd	r2, r4, [r3, #28]
 80048fa:	6094      	str	r4, [r2, #8]
 80048fc:	6062      	str	r2, [r4, #4]
 80048fe:	6842      	ldr	r2, [r0, #4]
 8004900:	f103 0718 	add.w	r7, r3, #24
 8004904:	42ba      	cmp	r2, r7
 8004906:	f04f 0200 	mov.w	r2, #0
 800490a:	bf08      	it	eq
 800490c:	6044      	streq	r4, [r0, #4]
 800490e:	629a      	str	r2, [r3, #40]	; 0x28
 8004910:	6802      	ldr	r2, [r0, #0]
 8004912:	3a01      	subs	r2, #1
 8004914:	6002      	str	r2, [r0, #0]
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004916:	6958      	ldr	r0, [r3, #20]
 8004918:	e9d3 2402 	ldrd	r2, r4, [r3, #8]
 800491c:	6094      	str	r4, [r2, #8]
 800491e:	6062      	str	r2, [r4, #4]
 8004920:	6842      	ldr	r2, [r0, #4]
 8004922:	f103 0a04 	add.w	sl, r3, #4
 8004926:	4552      	cmp	r2, sl
 8004928:	6802      	ldr	r2, [r0, #0]
 800492a:	bf08      	it	eq
 800492c:	6044      	streq	r4, [r0, #4]
 800492e:	3a01      	subs	r2, #1
 8004930:	6002      	str	r2, [r0, #0]
                    prvAddTaskToReadyList( pxTCB );
 8004932:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004934:	6834      	ldr	r4, [r6, #0]
 8004936:	fa0c f200 	lsl.w	r2, ip, r0
 800493a:	4322      	orrs	r2, r4
 800493c:	fb0e f400 	mul.w	r4, lr, r0
 8004940:	190f      	adds	r7, r1, r4
 8004942:	6032      	str	r2, [r6, #0]
 8004944:	687a      	ldr	r2, [r7, #4]
 8004946:	f8d2 b008 	ldr.w	fp, [r2, #8]
 800494a:	609a      	str	r2, [r3, #8]
 800494c:	f8c3 b00c 	str.w	fp, [r3, #12]
 8004950:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8004954:	f8cb a004 	str.w	sl, [fp, #4]
 8004958:	f8c2 a008 	str.w	sl, [r2, #8]
 800495c:	590a      	ldr	r2, [r1, r4]
 800495e:	615f      	str	r7, [r3, #20]
 8004960:	3201      	adds	r2, #1
 8004962:	510a      	str	r2, [r1, r4]
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004964:	f8d8 2000 	ldr.w	r2, [r8]
 8004968:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 800496a:	4290      	cmp	r0, r2
 800496c:	d301      	bcc.n	8004972 <xTaskResumeAll+0xc2>
                        xYieldPending = pdTRUE;
 800496e:	f8c9 c000 	str.w	ip, [r9]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004972:	682a      	ldr	r2, [r5, #0]
 8004974:	2a00      	cmp	r2, #0
 8004976:	d1bb      	bne.n	80048f0 <xTaskResumeAll+0x40>
                if( pxTCB != NULL )
 8004978:	b10b      	cbz	r3, 800497e <xTaskResumeAll+0xce>
                    prvResetNextTaskUnblockTime();
 800497a:	f7ff fd25 	bl	80043c8 <prvResetNextTaskUnblockTime>
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800497e:	4d15      	ldr	r5, [pc, #84]	; (80049d4 <xTaskResumeAll+0x124>)
 8004980:	682c      	ldr	r4, [r5, #0]
                    if( xPendedCounts > ( TickType_t ) 0U )
 8004982:	b144      	cbz	r4, 8004996 <xTaskResumeAll+0xe6>
                                xYieldPending = pdTRUE;
 8004984:	2701      	movs	r7, #1
 8004986:	4e12      	ldr	r6, [pc, #72]	; (80049d0 <xTaskResumeAll+0x120>)
                            if( xTaskIncrementTick() != pdFALSE )
 8004988:	f7ff fee2 	bl	8004750 <xTaskIncrementTick>
 800498c:	b100      	cbz	r0, 8004990 <xTaskResumeAll+0xe0>
                                xYieldPending = pdTRUE;
 800498e:	6037      	str	r7, [r6, #0]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 8004990:	3c01      	subs	r4, #1
 8004992:	d1f9      	bne.n	8004988 <xTaskResumeAll+0xd8>
                        xPendedTicks = 0;
 8004994:	602c      	str	r4, [r5, #0]
                if( xYieldPending != pdFALSE )
 8004996:	4b0e      	ldr	r3, [pc, #56]	; (80049d0 <xTaskResumeAll+0x120>)
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	2b00      	cmp	r3, #0
 800499c:	d092      	beq.n	80048c4 <xTaskResumeAll+0x14>
                    taskYIELD_IF_USING_PREEMPTION();
 800499e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80049a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049a6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80049aa:	f3bf 8f4f 	dsb	sy
 80049ae:	f3bf 8f6f 	isb	sy
                            xAlreadyYielded = pdTRUE;
 80049b2:	2401      	movs	r4, #1
 80049b4:	e787      	b.n	80048c6 <xTaskResumeAll+0x16>
 80049b6:	bf00      	nop
 80049b8:	200003ac 	.word	0x200003ac
 80049bc:	200003a4 	.word	0x200003a4
 80049c0:	200003f0 	.word	0x200003f0
 80049c4:	200003b4 	.word	0x200003b4
 80049c8:	20000340 	.word	0x20000340
 80049cc:	20000334 	.word	0x20000334
 80049d0:	20000434 	.word	0x20000434
 80049d4:	200003ec 	.word	0x200003ec

080049d8 <vTaskDelay>:
    {
 80049d8:	b508      	push	{r3, lr}
        if( xTicksToDelay > ( TickType_t ) 0U )
 80049da:	b950      	cbnz	r0, 80049f2 <vTaskDelay+0x1a>
            portYIELD_WITHIN_API();
 80049dc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80049e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049e4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80049e8:	f3bf 8f4f 	dsb	sy
 80049ec:	f3bf 8f6f 	isb	sy
    }
 80049f0:	bd08      	pop	{r3, pc}
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80049f2:	2100      	movs	r1, #0
            vTaskSuspendAll();
 80049f4:	f7ff fea4 	bl	8004740 <vTaskSuspendAll>
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80049f8:	f7ff fc94 	bl	8004324 <prvAddCurrentTaskToDelayedList>
            xAlreadyYielded = xTaskResumeAll();
 80049fc:	f7ff ff58 	bl	80048b0 <xTaskResumeAll>
        if( xAlreadyYielded == pdFALSE )
 8004a00:	2800      	cmp	r0, #0
 8004a02:	d0eb      	beq.n	80049dc <vTaskDelay+0x4>
 8004a04:	e7f4      	b.n	80049f0 <vTaskDelay+0x18>
	...

08004a08 <vTaskSwitchContext>:
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004a08:	4b12      	ldr	r3, [pc, #72]	; (8004a54 <vTaskSwitchContext+0x4c>)
{
 8004a0a:	b530      	push	{r4, r5, lr}
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004a0c:	681a      	ldr	r2, [r3, #0]
 8004a0e:	4b12      	ldr	r3, [pc, #72]	; (8004a58 <vTaskSwitchContext+0x50>)
 8004a10:	b112      	cbz	r2, 8004a18 <vTaskSwitchContext+0x10>
        xYieldPending = pdTRUE;
 8004a12:	2201      	movs	r2, #1
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a14:	601a      	str	r2, [r3, #0]
}
 8004a16:	bd30      	pop	{r4, r5, pc}
        xYieldPending = pdFALSE;
 8004a18:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a1a:	4b10      	ldr	r3, [pc, #64]	; (8004a5c <vTaskSwitchContext+0x54>)
 8004a1c:	681b      	ldr	r3, [r3, #0]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8004a1e:	fab3 f383 	clz	r3, r3
 8004a22:	2514      	movs	r5, #20
 8004a24:	b2db      	uxtb	r3, r3
 8004a26:	f1c3 031f 	rsb	r3, r3, #31
 8004a2a:	fb05 f203 	mul.w	r2, r5, r3
 8004a2e:	490c      	ldr	r1, [pc, #48]	; (8004a60 <vTaskSwitchContext+0x58>)
 8004a30:	1888      	adds	r0, r1, r2
 8004a32:	6844      	ldr	r4, [r0, #4]
 8004a34:	3208      	adds	r2, #8
 8004a36:	6864      	ldr	r4, [r4, #4]
 8004a38:	440a      	add	r2, r1
 8004a3a:	4294      	cmp	r4, r2
 8004a3c:	fb05 1303 	mla	r3, r5, r3, r1
 8004a40:	bf08      	it	eq
 8004a42:	6862      	ldreq	r2, [r4, #4]
 8004a44:	6044      	str	r4, [r0, #4]
 8004a46:	bf08      	it	eq
 8004a48:	6042      	streq	r2, [r0, #4]
 8004a4a:	685b      	ldr	r3, [r3, #4]
 8004a4c:	68da      	ldr	r2, [r3, #12]
 8004a4e:	4b05      	ldr	r3, [pc, #20]	; (8004a64 <vTaskSwitchContext+0x5c>)
 8004a50:	e7e0      	b.n	8004a14 <vTaskSwitchContext+0xc>
 8004a52:	bf00      	nop
 8004a54:	200003ac 	.word	0x200003ac
 8004a58:	20000434 	.word	0x20000434
 8004a5c:	200003b4 	.word	0x200003b4
 8004a60:	20000340 	.word	0x20000340
 8004a64:	20000334 	.word	0x20000334

08004a68 <vTaskPlaceOnEventList>:
{
 8004a68:	b510      	push	{r4, lr}
 8004a6a:	460c      	mov	r4, r1
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004a6c:	4b05      	ldr	r3, [pc, #20]	; (8004a84 <vTaskPlaceOnEventList+0x1c>)
 8004a6e:	6819      	ldr	r1, [r3, #0]
 8004a70:	3118      	adds	r1, #24
 8004a72:	f7ff f99b 	bl	8003dac <vListInsert>
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004a76:	4620      	mov	r0, r4
}
 8004a78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004a7c:	2101      	movs	r1, #1
 8004a7e:	f7ff bc51 	b.w	8004324 <prvAddCurrentTaskToDelayedList>
 8004a82:	bf00      	nop
 8004a84:	20000334 	.word	0x20000334

08004a88 <xTaskRemoveFromEventList>:
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a88:	68c3      	ldr	r3, [r0, #12]
{
 8004a8a:	b5f0      	push	{r4, r5, r6, r7, lr}
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a8c:	68db      	ldr	r3, [r3, #12]
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 8004a8e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004a90:	e9d3 0107 	ldrd	r0, r1, [r3, #28]
 8004a94:	6081      	str	r1, [r0, #8]
 8004a96:	6048      	str	r0, [r1, #4]
 8004a98:	6850      	ldr	r0, [r2, #4]
 8004a9a:	f103 0418 	add.w	r4, r3, #24
 8004a9e:	42a0      	cmp	r0, r4
 8004aa0:	bf08      	it	eq
 8004aa2:	6051      	streq	r1, [r2, #4]
 8004aa4:	2100      	movs	r1, #0
 8004aa6:	6299      	str	r1, [r3, #40]	; 0x28
 8004aa8:	6811      	ldr	r1, [r2, #0]
 8004aaa:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004aac:	3901      	subs	r1, #1
 8004aae:	6011      	str	r1, [r2, #0]
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ab0:	4a1e      	ldr	r2, [pc, #120]	; (8004b2c <xTaskRemoveFromEventList+0xa4>)
 8004ab2:	6812      	ldr	r2, [r2, #0]
 8004ab4:	2a00      	cmp	r2, #0
 8004ab6:	d12c      	bne.n	8004b12 <xTaskRemoveFromEventList+0x8a>
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8004ab8:	e9d3 4102 	ldrd	r4, r1, [r3, #8]
 8004abc:	695a      	ldr	r2, [r3, #20]
 8004abe:	60a1      	str	r1, [r4, #8]
 8004ac0:	68d9      	ldr	r1, [r3, #12]
 8004ac2:	1d1d      	adds	r5, r3, #4
 8004ac4:	604c      	str	r4, [r1, #4]
 8004ac6:	6854      	ldr	r4, [r2, #4]
 8004ac8:	42ac      	cmp	r4, r5
 8004aca:	bf08      	it	eq
 8004acc:	6051      	streq	r1, [r2, #4]
 8004ace:	6811      	ldr	r1, [r2, #0]
 8004ad0:	3901      	subs	r1, #1
 8004ad2:	6011      	str	r1, [r2, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 8004ad4:	2201      	movs	r2, #1
 8004ad6:	4916      	ldr	r1, [pc, #88]	; (8004b30 <xTaskRemoveFromEventList+0xa8>)
 8004ad8:	4082      	lsls	r2, r0
 8004ada:	680c      	ldr	r4, [r1, #0]
 8004adc:	4322      	orrs	r2, r4
 8004ade:	600a      	str	r2, [r1, #0]
 8004ae0:	2214      	movs	r2, #20
 8004ae2:	4342      	muls	r2, r0
 8004ae4:	4c13      	ldr	r4, [pc, #76]	; (8004b34 <xTaskRemoveFromEventList+0xac>)
 8004ae6:	18a6      	adds	r6, r4, r2
 8004ae8:	6871      	ldr	r1, [r6, #4]
 8004aea:	688f      	ldr	r7, [r1, #8]
 8004aec:	6099      	str	r1, [r3, #8]
 8004aee:	60df      	str	r7, [r3, #12]
 8004af0:	688f      	ldr	r7, [r1, #8]
 8004af2:	607d      	str	r5, [r7, #4]
 8004af4:	608d      	str	r5, [r1, #8]
 8004af6:	615e      	str	r6, [r3, #20]
 8004af8:	58a3      	ldr	r3, [r4, r2]
 8004afa:	3301      	adds	r3, #1
 8004afc:	50a3      	str	r3, [r4, r2]
    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004afe:	4b0e      	ldr	r3, [pc, #56]	; (8004b38 <xTaskRemoveFromEventList+0xb0>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b04:	4298      	cmp	r0, r3
        xYieldPending = pdTRUE;
 8004b06:	bf85      	ittet	hi
 8004b08:	2001      	movhi	r0, #1
 8004b0a:	4b0c      	ldrhi	r3, [pc, #48]	; (8004b3c <xTaskRemoveFromEventList+0xb4>)
        xReturn = pdFALSE;
 8004b0c:	2000      	movls	r0, #0
        xYieldPending = pdTRUE;
 8004b0e:	6018      	strhi	r0, [r3, #0]
}
 8004b10:	bdf0      	pop	{r4, r5, r6, r7, pc}
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004b12:	4a0b      	ldr	r2, [pc, #44]	; (8004b40 <xTaskRemoveFromEventList+0xb8>)
 8004b14:	6851      	ldr	r1, [r2, #4]
 8004b16:	688d      	ldr	r5, [r1, #8]
 8004b18:	61d9      	str	r1, [r3, #28]
 8004b1a:	621d      	str	r5, [r3, #32]
 8004b1c:	688d      	ldr	r5, [r1, #8]
 8004b1e:	606c      	str	r4, [r5, #4]
 8004b20:	608c      	str	r4, [r1, #8]
 8004b22:	629a      	str	r2, [r3, #40]	; 0x28
 8004b24:	6813      	ldr	r3, [r2, #0]
 8004b26:	3301      	adds	r3, #1
 8004b28:	6013      	str	r3, [r2, #0]
 8004b2a:	e7e8      	b.n	8004afe <xTaskRemoveFromEventList+0x76>
 8004b2c:	200003ac 	.word	0x200003ac
 8004b30:	200003b4 	.word	0x200003b4
 8004b34:	20000340 	.word	0x20000340
 8004b38:	20000334 	.word	0x20000334
 8004b3c:	20000434 	.word	0x20000434
 8004b40:	200003f0 	.word	0x200003f0

08004b44 <vTaskInternalSetTimeOutState>:
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004b44:	4b03      	ldr	r3, [pc, #12]	; (8004b54 <vTaskInternalSetTimeOutState+0x10>)
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	6003      	str	r3, [r0, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004b4a:	4b03      	ldr	r3, [pc, #12]	; (8004b58 <vTaskInternalSetTimeOutState+0x14>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	6043      	str	r3, [r0, #4]
}
 8004b50:	4770      	bx	lr
 8004b52:	bf00      	nop
 8004b54:	200003e8 	.word	0x200003e8
 8004b58:	20000430 	.word	0x20000430

08004b5c <xTaskCheckForTimeOut>:
{
 8004b5c:	b570      	push	{r4, r5, r6, lr}
 8004b5e:	460d      	mov	r5, r1
 8004b60:	4604      	mov	r4, r0
    taskENTER_CRITICAL();
 8004b62:	f000 f947 	bl	8004df4 <vPortEnterCritical>
        const TickType_t xConstTickCount = xTickCount;
 8004b66:	4b0f      	ldr	r3, [pc, #60]	; (8004ba4 <xTaskCheckForTimeOut+0x48>)
 8004b68:	6819      	ldr	r1, [r3, #0]
            if( *pxTicksToWait == portMAX_DELAY )
 8004b6a:	682b      	ldr	r3, [r5, #0]
 8004b6c:	1c5a      	adds	r2, r3, #1
 8004b6e:	d017      	beq.n	8004ba0 <xTaskCheckForTimeOut+0x44>
        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004b70:	480d      	ldr	r0, [pc, #52]	; (8004ba8 <xTaskCheckForTimeOut+0x4c>)
 8004b72:	6826      	ldr	r6, [r4, #0]
 8004b74:	6800      	ldr	r0, [r0, #0]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004b76:	6862      	ldr	r2, [r4, #4]
        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004b78:	4286      	cmp	r6, r0
 8004b7a:	d008      	beq.n	8004b8e <xTaskCheckForTimeOut+0x32>
 8004b7c:	428a      	cmp	r2, r1
 8004b7e:	d806      	bhi.n	8004b8e <xTaskCheckForTimeOut+0x32>
            *pxTicksToWait = ( TickType_t ) 0;
 8004b80:	2300      	movs	r3, #0
            xReturn = pdTRUE;
 8004b82:	2401      	movs	r4, #1
            *pxTicksToWait = ( TickType_t ) 0;
 8004b84:	602b      	str	r3, [r5, #0]
    taskEXIT_CRITICAL();
 8004b86:	f000 f945 	bl	8004e14 <vPortExitCritical>
}
 8004b8a:	4620      	mov	r0, r4
 8004b8c:	bd70      	pop	{r4, r5, r6, pc}
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004b8e:	1a88      	subs	r0, r1, r2
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004b90:	4283      	cmp	r3, r0
 8004b92:	d9f5      	bls.n	8004b80 <xTaskCheckForTimeOut+0x24>
            *pxTicksToWait -= xElapsedTime;
 8004b94:	1a5b      	subs	r3, r3, r1
 8004b96:	4413      	add	r3, r2
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004b98:	4620      	mov	r0, r4
            *pxTicksToWait -= xElapsedTime;
 8004b9a:	602b      	str	r3, [r5, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004b9c:	f7ff ffd2 	bl	8004b44 <vTaskInternalSetTimeOutState>
                xReturn = pdFALSE;
 8004ba0:	2400      	movs	r4, #0
 8004ba2:	e7f0      	b.n	8004b86 <xTaskCheckForTimeOut+0x2a>
 8004ba4:	20000430 	.word	0x20000430
 8004ba8:	200003e8 	.word	0x200003e8

08004bac <vTaskMissedYield>:
    xYieldPending = pdTRUE;
 8004bac:	2201      	movs	r2, #1
 8004bae:	4b01      	ldr	r3, [pc, #4]	; (8004bb4 <vTaskMissedYield+0x8>)
 8004bb0:	601a      	str	r2, [r3, #0]
}
 8004bb2:	4770      	bx	lr
 8004bb4:	20000434 	.word	0x20000434

08004bb8 <xTaskPriorityInherit>:
    {
 8004bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if( pxMutexHolder != NULL )
 8004bba:	4604      	mov	r4, r0
 8004bbc:	2800      	cmp	r0, #0
 8004bbe:	d038      	beq.n	8004c32 <xTaskPriorityInherit+0x7a>
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004bc0:	4d23      	ldr	r5, [pc, #140]	; (8004c50 <xTaskPriorityInherit+0x98>)
 8004bc2:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004bc4:	682a      	ldr	r2, [r5, #0]
 8004bc6:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004bc8:	4293      	cmp	r3, r2
 8004bca:	d238      	bcs.n	8004c3e <xTaskPriorityInherit+0x86>
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004bcc:	6982      	ldr	r2, [r0, #24]
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004bce:	4e21      	ldr	r6, [pc, #132]	; (8004c54 <xTaskPriorityInherit+0x9c>)
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004bd0:	2a00      	cmp	r2, #0
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004bd2:	bfa1      	itttt	ge
 8004bd4:	682a      	ldrge	r2, [r5, #0]
 8004bd6:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 8004bd8:	f1c2 0205 	rsbge	r2, r2, #5
 8004bdc:	6182      	strge	r2, [r0, #24]
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004bde:	2214      	movs	r2, #20
 8004be0:	fb02 6303 	mla	r3, r2, r3, r6
 8004be4:	6942      	ldr	r2, [r0, #20]
 8004be6:	429a      	cmp	r2, r3
 8004be8:	d124      	bne.n	8004c34 <xTaskPriorityInherit+0x7c>
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004bea:	1d07      	adds	r7, r0, #4
 8004bec:	4638      	mov	r0, r7
 8004bee:	f7ff f8f4 	bl	8003dda <uxListRemove>
 8004bf2:	4a19      	ldr	r2, [pc, #100]	; (8004c58 <xTaskPriorityInherit+0xa0>)
 8004bf4:	b930      	cbnz	r0, 8004c04 <xTaskPriorityInherit+0x4c>
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8004bf6:	2101      	movs	r1, #1
 8004bf8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004bfa:	6813      	ldr	r3, [r2, #0]
 8004bfc:	4081      	lsls	r1, r0
 8004bfe:	ea23 0301 	bic.w	r3, r3, r1
 8004c02:	6013      	str	r3, [r2, #0]
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8004c04:	2001      	movs	r0, #1
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004c06:	682b      	ldr	r3, [r5, #0]
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8004c08:	6815      	ldr	r5, [r2, #0]
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8004c0c:	fa00 f103 	lsl.w	r1, r0, r3
 8004c10:	4329      	orrs	r1, r5
 8004c12:	6011      	str	r1, [r2, #0]
 8004c14:	2214      	movs	r2, #20
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004c16:	62e3      	str	r3, [r4, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 8004c18:	4353      	muls	r3, r2
 8004c1a:	18f1      	adds	r1, r6, r3
 8004c1c:	684a      	ldr	r2, [r1, #4]
 8004c1e:	6895      	ldr	r5, [r2, #8]
 8004c20:	60a2      	str	r2, [r4, #8]
 8004c22:	60e5      	str	r5, [r4, #12]
 8004c24:	6895      	ldr	r5, [r2, #8]
 8004c26:	606f      	str	r7, [r5, #4]
 8004c28:	6097      	str	r7, [r2, #8]
 8004c2a:	58f2      	ldr	r2, [r6, r3]
 8004c2c:	6161      	str	r1, [r4, #20]
 8004c2e:	4402      	add	r2, r0
 8004c30:	50f2      	str	r2, [r6, r3]
    }
 8004c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004c34:	682b      	ldr	r3, [r5, #0]
 8004c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c38:	62c3      	str	r3, [r0, #44]	; 0x2c
                xReturn = pdTRUE;
 8004c3a:	2001      	movs	r0, #1
 8004c3c:	e7f9      	b.n	8004c32 <xTaskPriorityInherit+0x7a>
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004c3e:	682b      	ldr	r3, [r5, #0]
 8004c40:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 8004c42:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8004c44:	42a0      	cmp	r0, r4
 8004c46:	bf2c      	ite	cs
 8004c48:	2000      	movcs	r0, #0
 8004c4a:	2001      	movcc	r0, #1
 8004c4c:	e7f1      	b.n	8004c32 <xTaskPriorityInherit+0x7a>
 8004c4e:	bf00      	nop
 8004c50:	20000334 	.word	0x20000334
 8004c54:	20000340 	.word	0x20000340
 8004c58:	200003b4 	.word	0x200003b4

08004c5c <xTaskPriorityDisinherit>:
    {
 8004c5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if( pxMutexHolder != NULL )
 8004c5e:	4604      	mov	r4, r0
 8004c60:	b908      	cbnz	r0, 8004c66 <xTaskPriorityDisinherit+0xa>
        BaseType_t xReturn = pdFALSE;
 8004c62:	2000      	movs	r0, #0
    }
 8004c64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            ( pxTCB->uxMutexesHeld )--;
 8004c66:	6d03      	ldr	r3, [r0, #80]	; 0x50
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004c68:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004c6a:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
            ( pxTCB->uxMutexesHeld )--;
 8004c6c:	3b01      	subs	r3, #1
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004c6e:	4291      	cmp	r1, r2
            ( pxTCB->uxMutexesHeld )--;
 8004c70:	6503      	str	r3, [r0, #80]	; 0x50
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004c72:	d0f6      	beq.n	8004c62 <xTaskPriorityDisinherit+0x6>
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d1f4      	bne.n	8004c62 <xTaskPriorityDisinherit+0x6>
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004c78:	1d05      	adds	r5, r0, #4
 8004c7a:	4628      	mov	r0, r5
 8004c7c:	f7ff f8ad 	bl	8003dda <uxListRemove>
 8004c80:	4a11      	ldr	r2, [pc, #68]	; (8004cc8 <xTaskPriorityDisinherit+0x6c>)
 8004c82:	b930      	cbnz	r0, 8004c92 <xTaskPriorityDisinherit+0x36>
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004c84:	2101      	movs	r1, #1
 8004c86:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004c88:	6813      	ldr	r3, [r2, #0]
 8004c8a:	4081      	lsls	r1, r0
 8004c8c:	ea23 0301 	bic.w	r3, r3, r1
 8004c90:	6013      	str	r3, [r2, #0]
                    prvAddTaskToReadyList( pxTCB );
 8004c92:	2001      	movs	r0, #1
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004c94:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
                    prvAddTaskToReadyList( pxTCB );
 8004c96:	6816      	ldr	r6, [r2, #0]
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004c98:	f1c3 0105 	rsb	r1, r3, #5
 8004c9c:	61a1      	str	r1, [r4, #24]
                    prvAddTaskToReadyList( pxTCB );
 8004c9e:	fa00 f103 	lsl.w	r1, r0, r3
 8004ca2:	4331      	orrs	r1, r6
 8004ca4:	6011      	str	r1, [r2, #0]
 8004ca6:	2214      	movs	r2, #20
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004ca8:	62e3      	str	r3, [r4, #44]	; 0x2c
                    prvAddTaskToReadyList( pxTCB );
 8004caa:	4353      	muls	r3, r2
 8004cac:	4907      	ldr	r1, [pc, #28]	; (8004ccc <xTaskPriorityDisinherit+0x70>)
 8004cae:	18ce      	adds	r6, r1, r3
 8004cb0:	6872      	ldr	r2, [r6, #4]
 8004cb2:	6897      	ldr	r7, [r2, #8]
 8004cb4:	60a2      	str	r2, [r4, #8]
 8004cb6:	60e7      	str	r7, [r4, #12]
 8004cb8:	6897      	ldr	r7, [r2, #8]
 8004cba:	607d      	str	r5, [r7, #4]
 8004cbc:	6095      	str	r5, [r2, #8]
 8004cbe:	58ca      	ldr	r2, [r1, r3]
 8004cc0:	6166      	str	r6, [r4, #20]
 8004cc2:	4402      	add	r2, r0
 8004cc4:	50ca      	str	r2, [r1, r3]
        return xReturn;
 8004cc6:	e7cd      	b.n	8004c64 <xTaskPriorityDisinherit+0x8>
 8004cc8:	200003b4 	.word	0x200003b4
 8004ccc:	20000340 	.word	0x20000340

08004cd0 <vTaskPriorityDisinheritAfterTimeout>:
    {
 8004cd0:	b570      	push	{r4, r5, r6, lr}
        if( pxMutexHolder != NULL )
 8004cd2:	4604      	mov	r4, r0
 8004cd4:	2800      	cmp	r0, #0
 8004cd6:	d038      	beq.n	8004d4a <vTaskPriorityDisinheritAfterTimeout+0x7a>
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004cd8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 8004cda:	4299      	cmp	r1, r3
 8004cdc:	bf38      	it	cc
 8004cde:	4619      	movcc	r1, r3
            if( pxTCB->uxPriority != uxPriorityToUse )
 8004ce0:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004ce2:	428b      	cmp	r3, r1
 8004ce4:	d031      	beq.n	8004d4a <vTaskPriorityDisinheritAfterTimeout+0x7a>
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004ce6:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8004ce8:	2a01      	cmp	r2, #1
 8004cea:	d12e      	bne.n	8004d4a <vTaskPriorityDisinheritAfterTimeout+0x7a>
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004cec:	6982      	ldr	r2, [r0, #24]
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004cee:	4d17      	ldr	r5, [pc, #92]	; (8004d4c <vTaskPriorityDisinheritAfterTimeout+0x7c>)
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004cf0:	2a00      	cmp	r2, #0
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004cf2:	f04f 0214 	mov.w	r2, #20
 8004cf6:	fb02 5303 	mla	r3, r2, r3, r5
 8004cfa:	6942      	ldr	r2, [r0, #20]
                    pxTCB->uxPriority = uxPriorityToUse;
 8004cfc:	62c1      	str	r1, [r0, #44]	; 0x2c
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004cfe:	bfa4      	itt	ge
 8004d00:	f1c1 0105 	rsbge	r1, r1, #5
 8004d04:	6181      	strge	r1, [r0, #24]
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d11f      	bne.n	8004d4a <vTaskPriorityDisinheritAfterTimeout+0x7a>
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004d0a:	1d06      	adds	r6, r0, #4
 8004d0c:	4630      	mov	r0, r6
 8004d0e:	f7ff f864 	bl	8003dda <uxListRemove>
 8004d12:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004d14:	490e      	ldr	r1, [pc, #56]	; (8004d50 <vTaskPriorityDisinheritAfterTimeout+0x80>)
 8004d16:	b928      	cbnz	r0, 8004d24 <vTaskPriorityDisinheritAfterTimeout+0x54>
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004d18:	2001      	movs	r0, #1
 8004d1a:	680a      	ldr	r2, [r1, #0]
 8004d1c:	4098      	lsls	r0, r3
 8004d1e:	ea22 0200 	bic.w	r2, r2, r0
 8004d22:	600a      	str	r2, [r1, #0]
                        prvAddTaskToReadyList( pxTCB );
 8004d24:	2201      	movs	r2, #1
 8004d26:	6808      	ldr	r0, [r1, #0]
 8004d28:	409a      	lsls	r2, r3
 8004d2a:	4302      	orrs	r2, r0
 8004d2c:	600a      	str	r2, [r1, #0]
 8004d2e:	2214      	movs	r2, #20
 8004d30:	4353      	muls	r3, r2
 8004d32:	18e9      	adds	r1, r5, r3
 8004d34:	684a      	ldr	r2, [r1, #4]
 8004d36:	6890      	ldr	r0, [r2, #8]
 8004d38:	60a2      	str	r2, [r4, #8]
 8004d3a:	60e0      	str	r0, [r4, #12]
 8004d3c:	6890      	ldr	r0, [r2, #8]
 8004d3e:	6046      	str	r6, [r0, #4]
 8004d40:	6096      	str	r6, [r2, #8]
 8004d42:	58ea      	ldr	r2, [r5, r3]
 8004d44:	6161      	str	r1, [r4, #20]
 8004d46:	3201      	adds	r2, #1
 8004d48:	50ea      	str	r2, [r5, r3]
    }
 8004d4a:	bd70      	pop	{r4, r5, r6, pc}
 8004d4c:	20000340 	.word	0x20000340
 8004d50:	200003b4 	.word	0x200003b4

08004d54 <pvTaskIncrementMutexHeldCount>:
        if( pxCurrentTCB != NULL )
 8004d54:	4b04      	ldr	r3, [pc, #16]	; (8004d68 <pvTaskIncrementMutexHeldCount+0x14>)
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	b11a      	cbz	r2, 8004d62 <pvTaskIncrementMutexHeldCount+0xe>
            ( pxCurrentTCB->uxMutexesHeld )++;
 8004d5a:	6819      	ldr	r1, [r3, #0]
 8004d5c:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 8004d5e:	3201      	adds	r2, #1
 8004d60:	650a      	str	r2, [r1, #80]	; 0x50
        return pxCurrentTCB;
 8004d62:	6818      	ldr	r0, [r3, #0]
    }
 8004d64:	4770      	bx	lr
 8004d66:	bf00      	nop
 8004d68:	20000334 	.word	0x20000334

08004d6c <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
    volatile uint32_t ulDummy = 0UL;
 8004d6c:	2300      	movs	r3, #0
{
 8004d6e:	b082      	sub	sp, #8
    volatile uint32_t ulDummy = 0UL;
 8004d70:	9301      	str	r3, [sp, #4]
        __asm volatile
 8004d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d76:	f383 8811 	msr	BASEPRI, r3
 8004d7a:	f3bf 8f6f 	isb	sy
 8004d7e:	f3bf 8f4f 	dsb	sy
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 8004d82:	9b01      	ldr	r3, [sp, #4]
 8004d84:	2b00      	cmp	r3, #0
 8004d86:	d0fc      	beq.n	8004d82 <prvTaskExitError+0x16>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004d88:	b002      	add	sp, #8
 8004d8a:	4770      	bx	lr

08004d8c <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8004d8c:	4806      	ldr	r0, [pc, #24]	; (8004da8 <prvPortStartFirstTask+0x1c>)
 8004d8e:	6800      	ldr	r0, [r0, #0]
 8004d90:	6800      	ldr	r0, [r0, #0]
 8004d92:	f380 8808 	msr	MSP, r0
 8004d96:	b662      	cpsie	i
 8004d98:	b661      	cpsie	f
 8004d9a:	f3bf 8f4f 	dsb	sy
 8004d9e:	f3bf 8f6f 	isb	sy
 8004da2:	df00      	svc	0
 8004da4:	bf00      	nop
 8004da6:	0000      	.short	0x0000
 8004da8:	e000ed08 	.word	0xe000ed08

08004dac <pxPortInitialiseStack>:
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004dac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004db0:	f840 3c04 	str.w	r3, [r0, #-4]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004db4:	4b05      	ldr	r3, [pc, #20]	; (8004dcc <pxPortInitialiseStack+0x20>)
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004db6:	f021 0101 	bic.w	r1, r1, #1
 8004dba:	f840 1c08 	str.w	r1, [r0, #-8]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004dbe:	f840 3c0c 	str.w	r3, [r0, #-12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 8004dc2:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8004dc6:	3840      	subs	r0, #64	; 0x40
 8004dc8:	4770      	bx	lr
 8004dca:	bf00      	nop
 8004dcc:	08004d6d 	.word	0x08004d6d

08004dd0 <SVC_Handler>:
    __asm volatile (
 8004dd0:	4b07      	ldr	r3, [pc, #28]	; (8004df0 <pxCurrentTCBConst2>)
 8004dd2:	6819      	ldr	r1, [r3, #0]
 8004dd4:	6808      	ldr	r0, [r1, #0]
 8004dd6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004dda:	f380 8809 	msr	PSP, r0
 8004dde:	f3bf 8f6f 	isb	sy
 8004de2:	f04f 0000 	mov.w	r0, #0
 8004de6:	f380 8811 	msr	BASEPRI, r0
 8004dea:	f04e 0e0d 	orr.w	lr, lr, #13
 8004dee:	4770      	bx	lr

08004df0 <pxCurrentTCBConst2>:
 8004df0:	20000334 	.word	0x20000334

08004df4 <vPortEnterCritical>:
 8004df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df8:	f383 8811 	msr	BASEPRI, r3
 8004dfc:	f3bf 8f6f 	isb	sy
 8004e00:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 8004e04:	4a02      	ldr	r2, [pc, #8]	; (8004e10 <vPortEnterCritical+0x1c>)
 8004e06:	6813      	ldr	r3, [r2, #0]
 8004e08:	3301      	adds	r3, #1
 8004e0a:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 8004e0c:	4770      	bx	lr
 8004e0e:	bf00      	nop
 8004e10:	20000010 	.word	0x20000010

08004e14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 8004e14:	4a03      	ldr	r2, [pc, #12]	; (8004e24 <vPortExitCritical+0x10>)
 8004e16:	6813      	ldr	r3, [r2, #0]
 8004e18:	3b01      	subs	r3, #1
 8004e1a:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 8004e1c:	b90b      	cbnz	r3, 8004e22 <vPortExitCritical+0xe>
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 8004e1e:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 8004e22:	4770      	bx	lr
 8004e24:	20000010 	.word	0x20000010
	...

08004e30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004e30:	f3ef 8009 	mrs	r0, PSP
 8004e34:	f3bf 8f6f 	isb	sy
 8004e38:	4b0d      	ldr	r3, [pc, #52]	; (8004e70 <pxCurrentTCBConst>)
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004e40:	6010      	str	r0, [r2, #0]
 8004e42:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004e46:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004e4a:	f380 8811 	msr	BASEPRI, r0
 8004e4e:	f7ff fddb 	bl	8004a08 <vTaskSwitchContext>
 8004e52:	f04f 0000 	mov.w	r0, #0
 8004e56:	f380 8811 	msr	BASEPRI, r0
 8004e5a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004e5e:	6819      	ldr	r1, [r3, #0]
 8004e60:	6808      	ldr	r0, [r1, #0]
 8004e62:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004e66:	f380 8809 	msr	PSP, r0
 8004e6a:	f3bf 8f6f 	isb	sy
 8004e6e:	4770      	bx	lr

08004e70 <pxCurrentTCBConst>:
 8004e70:	20000334 	.word	0x20000334

08004e74 <SysTick_Handler>:
    );
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004e74:	b508      	push	{r3, lr}
        __asm volatile
 8004e76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e7a:	f383 8811 	msr	BASEPRI, r3
 8004e7e:	f3bf 8f6f 	isb	sy
 8004e82:	f3bf 8f4f 	dsb	sy
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004e86:	f7ff fc63 	bl	8004750 <xTaskIncrementTick>
 8004e8a:	b128      	cbz	r0, 8004e98 <SysTick_Handler+0x24>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004e8c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004e90:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004e94:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
        __asm volatile
 8004e98:	2300      	movs	r3, #0
 8004e9a:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 8004e9e:	bd08      	pop	{r3, pc}

08004ea0 <vPortSetupTimerInterrupt>:
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004ea0:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8004ea4:	2300      	movs	r3, #0
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004ea6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004eaa:	6113      	str	r3, [r2, #16]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004eac:	6193      	str	r3, [r2, #24]
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004eae:	4b04      	ldr	r3, [pc, #16]	; (8004ec0 <vPortSetupTimerInterrupt+0x20>)
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	fbb3 f3f1 	udiv	r3, r3, r1
 8004eb6:	3b01      	subs	r3, #1
 8004eb8:	6153      	str	r3, [r2, #20]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004eba:	2307      	movs	r3, #7
 8004ebc:	6113      	str	r3, [r2, #16]
}
 8004ebe:	4770      	bx	lr
 8004ec0:	20000000 	.word	0x20000000

08004ec4 <xPortStartScheduler>:
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004ec4:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
{
 8004ec8:	b510      	push	{r4, lr}
    uxCriticalNesting = 0;
 8004eca:	2400      	movs	r4, #0
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004ecc:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8004ed0:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8004ed4:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004ed8:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8004edc:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8004ee0:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
    vPortSetupTimerInterrupt();
 8004ee4:	f7ff ffdc 	bl	8004ea0 <vPortSetupTimerInterrupt>
    uxCriticalNesting = 0;
 8004ee8:	4b04      	ldr	r3, [pc, #16]	; (8004efc <xPortStartScheduler+0x38>)
 8004eea:	601c      	str	r4, [r3, #0]
    prvPortStartFirstTask();
 8004eec:	f7ff ff4e 	bl	8004d8c <prvPortStartFirstTask>
    vTaskSwitchContext();
 8004ef0:	f7ff fd8a 	bl	8004a08 <vTaskSwitchContext>
    prvTaskExitError();
 8004ef4:	f7ff ff3a 	bl	8004d6c <prvTaskExitError>
}
 8004ef8:	4620      	mov	r0, r4
 8004efa:	bd10      	pop	{r4, pc}
 8004efc:	20000010 	.word	0x20000010

08004f00 <prvInsertBlockIntoFreeList>:
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004f00:	b510      	push	{r4, lr}
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004f02:	4b0f      	ldr	r3, [pc, #60]	; (8004f40 <prvInsertBlockIntoFreeList+0x40>)
 8004f04:	461a      	mov	r2, r3
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4283      	cmp	r3, r0
 8004f0a:	d3fb      	bcc.n	8004f04 <prvInsertBlockIntoFreeList+0x4>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004f0c:	6854      	ldr	r4, [r2, #4]
 8004f0e:	1911      	adds	r1, r2, r4
 8004f10:	4288      	cmp	r0, r1
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004f12:	bf01      	itttt	eq
 8004f14:	6841      	ldreq	r1, [r0, #4]
 8004f16:	4610      	moveq	r0, r2
 8004f18:	1909      	addeq	r1, r1, r4
 8004f1a:	6051      	streq	r1, [r2, #4]

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004f1c:	6844      	ldr	r4, [r0, #4]
 8004f1e:	1901      	adds	r1, r0, r4
 8004f20:	428b      	cmp	r3, r1
 8004f22:	d107      	bne.n	8004f34 <prvInsertBlockIntoFreeList+0x34>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004f24:	4907      	ldr	r1, [pc, #28]	; (8004f44 <prvInsertBlockIntoFreeList+0x44>)
 8004f26:	6809      	ldr	r1, [r1, #0]
 8004f28:	428b      	cmp	r3, r1
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004f2a:	bf1f      	itttt	ne
 8004f2c:	6859      	ldrne	r1, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004f2e:	681b      	ldrne	r3, [r3, #0]
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004f30:	1909      	addne	r1, r1, r4
 8004f32:	6041      	strne	r1, [r0, #4]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004f34:	4290      	cmp	r0, r2
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004f36:	6003      	str	r3, [r0, #0]
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004f38:	bf18      	it	ne
 8004f3a:	6010      	strne	r0, [r2, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004f3c:	bd10      	pop	{r4, pc}
 8004f3e:	bf00      	nop
 8004f40:	20002c50 	.word	0x20002c50
 8004f44:	20000438 	.word	0x20000438

08004f48 <pvPortMalloc>:
{
 8004f48:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f4c:	4605      	mov	r5, r0
    vTaskSuspendAll();
 8004f4e:	f7ff fbf7 	bl	8004740 <vTaskSuspendAll>
        if( pxEnd == NULL )
 8004f52:	4938      	ldr	r1, [pc, #224]	; (8005034 <pvPortMalloc+0xec>)
 8004f54:	4c38      	ldr	r4, [pc, #224]	; (8005038 <pvPortMalloc+0xf0>)
 8004f56:	680b      	ldr	r3, [r1, #0]
 8004f58:	bb0b      	cbnz	r3, 8004f9e <pvPortMalloc+0x56>
    uxAddress = ( size_t ) ucHeap;
 8004f5a:	4a38      	ldr	r2, [pc, #224]	; (800503c <pvPortMalloc+0xf4>)
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004f5c:	4e38      	ldr	r6, [pc, #224]	; (8005040 <pvPortMalloc+0xf8>)
    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004f5e:	0750      	lsls	r0, r2, #29
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004f60:	bf1d      	ittte	ne
 8004f62:	1dd0      	addne	r0, r2, #7
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f64:	f020 0007 	bicne.w	r0, r0, #7
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004f68:	f502 5320 	addne.w	r3, r2, #10240	; 0x2800
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004f6c:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f70:	bf1c      	itt	ne
 8004f72:	4602      	movne	r2, r0
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004f74:	1a1b      	subne	r3, r3, r0
    xStart.xBlockSize = ( size_t ) 0;
 8004f76:	2000      	movs	r0, #0
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004f78:	4413      	add	r3, r2
    uxAddress -= xHeapStructSize;
 8004f7a:	3b08      	subs	r3, #8
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004f7c:	f023 0307 	bic.w	r3, r3, #7
    xStart.xBlockSize = ( size_t ) 0;
 8004f80:	6070      	str	r0, [r6, #4]
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004f82:	6032      	str	r2, [r6, #0]
    pxEnd->pxNextFreeBlock = NULL;
 8004f84:	e9c3 0000 	strd	r0, r0, [r3]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004f88:	1a98      	subs	r0, r3, r2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004f8a:	e9c2 3000 	strd	r3, r0, [r2]
    pxEnd = ( void * ) uxAddress;
 8004f8e:	600b      	str	r3, [r1, #0]
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f90:	4b2c      	ldr	r3, [pc, #176]	; (8005044 <pvPortMalloc+0xfc>)
 8004f92:	6018      	str	r0, [r3, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004f94:	4b2c      	ldr	r3, [pc, #176]	; (8005048 <pvPortMalloc+0x100>)
 8004f96:	6018      	str	r0, [r3, #0]
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004f98:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004f9c:	6023      	str	r3, [r4, #0]
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004f9e:	6827      	ldr	r7, [r4, #0]
 8004fa0:	ea17 0405 	ands.w	r4, r7, r5
 8004fa4:	d143      	bne.n	800502e <pvPortMalloc+0xe6>
            if( ( xWantedSize > 0 ) &&
 8004fa6:	1e6b      	subs	r3, r5, #1
 8004fa8:	330a      	adds	r3, #10
 8004faa:	d808      	bhi.n	8004fbe <pvPortMalloc+0x76>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004fac:	076a      	lsls	r2, r5, #29
                xWantedSize += xHeapStructSize;
 8004fae:	f105 0308 	add.w	r3, r5, #8
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004fb2:	d036      	beq.n	8005022 <pvPortMalloc+0xda>
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 8004fb4:	f023 0207 	bic.w	r2, r3, #7
 8004fb8:	3208      	adds	r2, #8
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d830      	bhi.n	8005020 <pvPortMalloc+0xd8>
    ( void ) xTaskResumeAll();
 8004fbe:	f7ff fc77 	bl	80048b0 <xTaskResumeAll>
}
 8004fc2:	4620      	mov	r0, r4
 8004fc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                pxBlock = xStart.pxNextFreeBlock;
 8004fc8:	4a1d      	ldr	r2, [pc, #116]	; (8005040 <pvPortMalloc+0xf8>)
 8004fca:	6815      	ldr	r5, [r2, #0]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004fcc:	6868      	ldr	r0, [r5, #4]
 8004fce:	4298      	cmp	r0, r3
 8004fd0:	d201      	bcs.n	8004fd6 <pvPortMalloc+0x8e>
 8004fd2:	682c      	ldr	r4, [r5, #0]
 8004fd4:	bb0c      	cbnz	r4, 800501a <pvPortMalloc+0xd2>
                if( pxBlock != pxEnd )
 8004fd6:	6809      	ldr	r1, [r1, #0]
 8004fd8:	42a9      	cmp	r1, r5
 8004fda:	d028      	beq.n	800502e <pvPortMalloc+0xe6>
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004fdc:	6829      	ldr	r1, [r5, #0]
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004fde:	6814      	ldr	r4, [r2, #0]
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004fe0:	6011      	str	r1, [r2, #0]
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004fe2:	1ac2      	subs	r2, r0, r3
 8004fe4:	2a10      	cmp	r2, #16
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004fe6:	f104 0408 	add.w	r4, r4, #8
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004fea:	d904      	bls.n	8004ff6 <pvPortMalloc+0xae>
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004fec:	18e8      	adds	r0, r5, r3
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004fee:	6042      	str	r2, [r0, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004ff0:	606b      	str	r3, [r5, #4]
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004ff2:	f7ff ff85 	bl	8004f00 <prvInsertBlockIntoFreeList>
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004ff6:	686b      	ldr	r3, [r5, #4]
                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004ff8:	4a12      	ldr	r2, [pc, #72]	; (8005044 <pvPortMalloc+0xfc>)
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004ffa:	1af6      	subs	r6, r6, r3
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004ffc:	433b      	orrs	r3, r7
 8004ffe:	606b      	str	r3, [r5, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8005000:	2300      	movs	r3, #0
                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005002:	6811      	ldr	r1, [r2, #0]
                    pxBlock->pxNextFreeBlock = NULL;
 8005004:	602b      	str	r3, [r5, #0]
                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005006:	428e      	cmp	r6, r1
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005008:	bf38      	it	cc
 800500a:	6016      	strcc	r6, [r2, #0]
                    xNumberOfSuccessfulAllocations++;
 800500c:	4a0f      	ldr	r2, [pc, #60]	; (800504c <pvPortMalloc+0x104>)
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 800500e:	f8c8 6000 	str.w	r6, [r8]
                    xNumberOfSuccessfulAllocations++;
 8005012:	6813      	ldr	r3, [r2, #0]
 8005014:	3301      	adds	r3, #1
 8005016:	6013      	str	r3, [r2, #0]
 8005018:	e7d1      	b.n	8004fbe <pvPortMalloc+0x76>
 800501a:	462a      	mov	r2, r5
 800501c:	4625      	mov	r5, r4
 800501e:	e7d5      	b.n	8004fcc <pvPortMalloc+0x84>
 8005020:	4613      	mov	r3, r2
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005022:	f8df 8024 	ldr.w	r8, [pc, #36]	; 8005048 <pvPortMalloc+0x100>
 8005026:	f8d8 6000 	ldr.w	r6, [r8]
 800502a:	429e      	cmp	r6, r3
 800502c:	d2cc      	bcs.n	8004fc8 <pvPortMalloc+0x80>
    void * pvReturn = NULL;
 800502e:	2400      	movs	r4, #0
 8005030:	e7c5      	b.n	8004fbe <pvPortMalloc+0x76>
 8005032:	bf00      	nop
 8005034:	20000438 	.word	0x20000438
 8005038:	20002c3c 	.word	0x20002c3c
 800503c:	2000043c 	.word	0x2000043c
 8005040:	20002c50 	.word	0x20002c50
 8005044:	20002c44 	.word	0x20002c44
 8005048:	20002c40 	.word	0x20002c40
 800504c:	20002c48 	.word	0x20002c48

08005050 <vPortFree>:
{
 8005050:	b510      	push	{r4, lr}
    if( pv != NULL )
 8005052:	4604      	mov	r4, r0
 8005054:	b300      	cbz	r0, 8005098 <vPortFree+0x48>
        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005056:	4a11      	ldr	r2, [pc, #68]	; (800509c <vPortFree+0x4c>)
 8005058:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800505c:	6812      	ldr	r2, [r2, #0]
 800505e:	4213      	tst	r3, r2
 8005060:	d01a      	beq.n	8005098 <vPortFree+0x48>
            if( pxLink->pxNextFreeBlock == NULL )
 8005062:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8005066:	b9b9      	cbnz	r1, 8005098 <vPortFree+0x48>
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005068:	ea23 0302 	bic.w	r3, r3, r2
 800506c:	f840 3c04 	str.w	r3, [r0, #-4]
                vTaskSuspendAll();
 8005070:	f7ff fb66 	bl	8004740 <vTaskSuspendAll>
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005074:	4a0a      	ldr	r2, [pc, #40]	; (80050a0 <vPortFree+0x50>)
 8005076:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800507a:	6811      	ldr	r1, [r2, #0]
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800507c:	f1a4 0008 	sub.w	r0, r4, #8
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8005080:	440b      	add	r3, r1
 8005082:	6013      	str	r3, [r2, #0]
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005084:	f7ff ff3c 	bl	8004f00 <prvInsertBlockIntoFreeList>
}
 8005088:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                    xNumberOfSuccessfulFrees++;
 800508c:	4a05      	ldr	r2, [pc, #20]	; (80050a4 <vPortFree+0x54>)
 800508e:	6813      	ldr	r3, [r2, #0]
 8005090:	3301      	adds	r3, #1
 8005092:	6013      	str	r3, [r2, #0]
                ( void ) xTaskResumeAll();
 8005094:	f7ff bc0c 	b.w	80048b0 <xTaskResumeAll>
}
 8005098:	bd10      	pop	{r4, pc}
 800509a:	bf00      	nop
 800509c:	20002c3c 	.word	0x20002c3c
 80050a0:	20002c40 	.word	0x20002c40
 80050a4:	20002c4c 	.word	0x20002c4c

080050a8 <app_main>:
#include "init_task.h"
#include "config.h"
#include "stm32l1xx.h"

void app_main()
{
 80050a8:	b508      	push	{r3, lr}

	spi_interface_init();
 80050aa:	f000 fa95 	bl	80055d8 <spi_interface_init>
	config_load();
 80050ae:	f000 faa9 	bl	8005604 <config_load>
	if(config.tel_num[0] != '+')
 80050b2:	4b06      	ldr	r3, [pc, #24]	; (80050cc <app_main+0x24>)
 80050b4:	781b      	ldrb	r3, [r3, #0]
 80050b6:	2b2b      	cmp	r3, #43	; 0x2b
 80050b8:	d001      	beq.n	80050be <app_main+0x16>
	{
		config_init();
 80050ba:	f000 fab3 	bl	8005624 <config_init>
	}

	init_task_create();
 80050be:	f000 fce9 	bl	8005a94 <init_task_create>

	vTaskStartScheduler();
 80050c2:	f7ff fb0b 	bl	80046dc <vTaskStartScheduler>

	/*Should not reach here*/
	while(1)
	{
		__NOP();
 80050c6:	bf00      	nop
	while(1)
 80050c8:	e7fd      	b.n	80050c6 <app_main+0x1e>
 80050ca:	bf00      	nop
 80050cc:	20002cf0 	.word	0x20002cf0

080050d0 <interface_init>:
QueueHandle_t		io_queue;
QueueHandle_t		key_queue;
SemaphoreHandle_t	numpad_mutex;

void interface_init()
{
 80050d0:	b510      	push	{r4, lr}
	lcd_queue 		= xQueueCreate(3, sizeof(lcd_data));
 80050d2:	2200      	movs	r2, #0
 80050d4:	2122      	movs	r1, #34	; 0x22
 80050d6:	2003      	movs	r0, #3
 80050d8:	f7fe ff58 	bl	8003f8c <xQueueGenericCreate>
 80050dc:	4b0d      	ldr	r3, [pc, #52]	; (8005114 <interface_init+0x44>)
	io_queue 		= xQueueCreate(3, sizeof(io_state_data));
 80050de:	2200      	movs	r2, #0
	lcd_queue 		= xQueueCreate(3, sizeof(lcd_data));
 80050e0:	6018      	str	r0, [r3, #0]
	io_queue 		= xQueueCreate(3, sizeof(io_state_data));
 80050e2:	2108      	movs	r1, #8
 80050e4:	2003      	movs	r0, #3
 80050e6:	f7fe ff51 	bl	8003f8c <xQueueGenericCreate>
 80050ea:	4b0b      	ldr	r3, [pc, #44]	; (8005118 <interface_init+0x48>)
	key_queue 		= xQueueCreate(3, sizeof(uint8_t));
 80050ec:	2200      	movs	r2, #0
 80050ee:	2101      	movs	r1, #1
	io_queue 		= xQueueCreate(3, sizeof(io_state_data));
 80050f0:	6018      	str	r0, [r3, #0]
	key_queue 		= xQueueCreate(3, sizeof(uint8_t));
 80050f2:	2003      	movs	r0, #3
 80050f4:	f7fe ff4a 	bl	8003f8c <xQueueGenericCreate>
 80050f8:	4b08      	ldr	r3, [pc, #32]	; (800511c <interface_init+0x4c>)
 80050fa:	6018      	str	r0, [r3, #0]
	numpad_mutex 	= xSemaphoreCreateMutex();
 80050fc:	2001      	movs	r0, #1
 80050fe:	f7fe ffec 	bl	80040da <xQueueCreateMutex>
	xSemaphoreGive(numpad_mutex);
}
 8005102:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	numpad_mutex 	= xSemaphoreCreateMutex();
 8005106:	4b06      	ldr	r3, [pc, #24]	; (8005120 <interface_init+0x50>)
 8005108:	6018      	str	r0, [r3, #0]
	xSemaphoreGive(numpad_mutex);
 800510a:	2300      	movs	r3, #0
 800510c:	461a      	mov	r2, r3
 800510e:	4619      	mov	r1, r3
 8005110:	f7fe bf61 	b.w	8003fd6 <xQueueGenericSend>
 8005114:	20002c60 	.word	0x20002c60
 8005118:	20002c58 	.word	0x20002c58
 800511c:	20002c5c 	.word	0x20002c5c
 8005120:	20002c64 	.word	0x20002c64

08005124 <AT_CPIN_callback_func>:
{
	return true;
}

static bool AT_CPIN_callback_func(uint8_t * data, void * return_data)
{
 8005124:	b510      	push	{r4, lr}
	if(return_data == NULL)
 8005126:	460c      	mov	r4, r1
 8005128:	b139      	cbz	r1, 800513a <AT_CPIN_callback_func+0x16>
		return true;

	bool * status = (bool*)return_data;

	*status = false;
 800512a:	2300      	movs	r3, #0
 800512c:	700b      	strb	r3, [r1, #0]

	if(strcmp((char*)data, "+CPIN: READY") == 0)
 800512e:	4904      	ldr	r1, [pc, #16]	; (8005140 <AT_CPIN_callback_func+0x1c>)
 8005130:	f7fb f826 	bl	8000180 <strcmp>
 8005134:	b908      	cbnz	r0, 800513a <AT_CPIN_callback_func+0x16>
	{
		*status = true;
 8005136:	2301      	movs	r3, #1
 8005138:	7023      	strb	r3, [r4, #0]
	}

	return true;
}
 800513a:	2001      	movs	r0, #1
 800513c:	bd10      	pop	{r4, pc}
 800513e:	bf00      	nop
 8005140:	0800767a 	.word	0x0800767a

08005144 <AT_CREG_callback_func>:

static bool AT_CREG_callback_func(uint8_t * data, void * return_data)
{
	if(return_data == NULL)
 8005144:	460a      	mov	r2, r1
{
 8005146:	b508      	push	{r3, lr}
	if(return_data == NULL)
 8005148:	b111      	cbz	r1, 8005150 <AT_CREG_callback_func+0xc>
		return true;

	uint8_t * status = (uint8_t*)return_data;

	sscanf((char*)data, "+CREG %*[^,],%[^,],", status);
 800514a:	4902      	ldr	r1, [pc, #8]	; (8005154 <AT_CREG_callback_func+0x10>)
 800514c:	f001 f968 	bl	8006420 <siscanf>

	return true;
}
 8005150:	2001      	movs	r0, #1
 8005152:	bd08      	pop	{r3, pc}
 8005154:	08007687 	.word	0x08007687

08005158 <M66_send_cmd.part.0>:
static bool M66_send_cmd(const char * cmd, uint16_t len, uint32_t delay_ms, m66_cmd_callback * cmd_callback, void * return_data)
 8005158:	b570      	push	{r4, r5, r6, lr}
 800515a:	4614      	mov	r4, r2
	m66_ctrl_local->data_send((uint8_t*)cmd, len);
 800515c:	4e21      	ldr	r6, [pc, #132]	; (80051e4 <M66_send_cmd.part.0+0x8c>)
static bool M66_send_cmd(const char * cmd, uint16_t len, uint32_t delay_ms, m66_cmd_callback * cmd_callback, void * return_data)
 800515e:	461d      	mov	r5, r3
	m66_ctrl_local->data_send((uint8_t*)cmd, len);
 8005160:	6833      	ldr	r3, [r6, #0]
static bool M66_send_cmd(const char * cmd, uint16_t len, uint32_t delay_ms, m66_cmd_callback * cmd_callback, void * return_data)
 8005162:	b0c4      	sub	sp, #272	; 0x110
	m66_ctrl_local->data_send((uint8_t*)cmd, len);
 8005164:	685b      	ldr	r3, [r3, #4]
 8005166:	4798      	blx	r3
	m66_ctrl_local->delay(delay_ms);
 8005168:	4620      	mov	r0, r4
	uint8_t data_buffer[CIRC_BUFF_SIZE] = {0};
 800516a:	2400      	movs	r4, #0
	m66_ctrl_local->delay(delay_ms);
 800516c:	6833      	ldr	r3, [r6, #0]
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	4798      	blx	r3
	uint8_t data_buffer[CIRC_BUFF_SIZE] = {0};
 8005172:	227c      	movs	r2, #124	; 0x7c
 8005174:	4621      	mov	r1, r4
 8005176:	a805      	add	r0, sp, #20
 8005178:	9404      	str	r4, [sp, #16]
 800517a:	f001 f929 	bl	80063d0 <memset>
	uint8_t cmd_data[CIRC_BUFF_SIZE] = {0};
 800517e:	227c      	movs	r2, #124	; 0x7c
 8005180:	4621      	mov	r1, r4
 8005182:	a825      	add	r0, sp, #148	; 0x94
 8005184:	9424      	str	r4, [sp, #144]	; 0x90
 8005186:	f001 f923 	bl	80063d0 <memset>
	circbuffer_get_all(data_buffer);
 800518a:	a804      	add	r0, sp, #16
	uint8_t cmd_result[10] = {0};
 800518c:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8005190:	f8ad 400c 	strh.w	r4, [sp, #12]
	circbuffer_get_all(data_buffer);
 8005194:	f000 f9ba 	bl	800550c <circbuffer_get_all>
	if(sscanf((char*)data_buffer, "\r\n%[^\r\n]\r\n%[^\r\n]\r\n", cmd_data, cmd_result) != 2)
 8005198:	4913      	ldr	r1, [pc, #76]	; (80051e8 <M66_send_cmd.part.0+0x90>)
 800519a:	ab01      	add	r3, sp, #4
 800519c:	aa24      	add	r2, sp, #144	; 0x90
 800519e:	a804      	add	r0, sp, #16
 80051a0:	f001 f93e 	bl	8006420 <siscanf>
 80051a4:	2802      	cmp	r0, #2
 80051a6:	d00d      	beq.n	80051c4 <M66_send_cmd.part.0+0x6c>
		if(sscanf((char*)data_buffer, "\r\n%[^\r\n]\r\n", cmd_result) != 1)
 80051a8:	4910      	ldr	r1, [pc, #64]	; (80051ec <M66_send_cmd.part.0+0x94>)
 80051aa:	aa01      	add	r2, sp, #4
 80051ac:	a804      	add	r0, sp, #16
 80051ae:	f001 f937 	bl	8006420 <siscanf>
 80051b2:	2801      	cmp	r0, #1
 80051b4:	d004      	beq.n	80051c0 <M66_send_cmd.part.0+0x68>
			sscanf((char*)data_buffer, "%[^\r\n]\r\n", cmd_result);
 80051b6:	490e      	ldr	r1, [pc, #56]	; (80051f0 <M66_send_cmd.part.0+0x98>)
 80051b8:	aa01      	add	r2, sp, #4
 80051ba:	a804      	add	r0, sp, #16
 80051bc:	f001 f930 	bl	8006420 <siscanf>
	bool result = false;
 80051c0:	4620      	mov	r0, r4
 80051c2:	e004      	b.n	80051ce <M66_send_cmd.part.0+0x76>
	else if(cmd_callback != NULL)
 80051c4:	b12d      	cbz	r5, 80051d2 <M66_send_cmd.part.0+0x7a>
		result = cmd_callback->callback_function(cmd_data, return_data);
 80051c6:	692b      	ldr	r3, [r5, #16]
 80051c8:	9948      	ldr	r1, [sp, #288]	; 0x120
 80051ca:	a824      	add	r0, sp, #144	; 0x90
 80051cc:	4798      	blx	r3
}
 80051ce:	b044      	add	sp, #272	; 0x110
 80051d0:	bd70      	pop	{r4, r5, r6, pc}
		if(strcmp((char*)cmd_result, "OK") == 0)
 80051d2:	4908      	ldr	r1, [pc, #32]	; (80051f4 <M66_send_cmd.part.0+0x9c>)
 80051d4:	a801      	add	r0, sp, #4
 80051d6:	f7fa ffd3 	bl	8000180 <strcmp>
 80051da:	fab0 f080 	clz	r0, r0
 80051de:	0940      	lsrs	r0, r0, #5
 80051e0:	e7f5      	b.n	80051ce <M66_send_cmd.part.0+0x76>
 80051e2:	bf00      	nop
 80051e4:	20002c68 	.word	0x20002c68
 80051e8:	0800769b 	.word	0x0800769b
 80051ec:	080076a3 	.word	0x080076a3
 80051f0:	080076a5 	.word	0x080076a5
 80051f4:	08007778 	.word	0x08007778

080051f8 <M66_send_cmd.constprop.0>:
static bool M66_send_cmd(const char * cmd, uint16_t len, uint32_t delay_ms, m66_cmd_callback * cmd_callback, void * return_data)
 80051f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if((cmd == NULL) || (len == 0) || (len > MAX_CMD_LEN))
 80051fa:	b150      	cbz	r0, 8005212 <M66_send_cmd.constprop.0+0x1a>
 80051fc:	1e4d      	subs	r5, r1, #1
 80051fe:	2d7f      	cmp	r5, #127	; 0x7f
 8005200:	d807      	bhi.n	8005212 <M66_send_cmd.constprop.0+0x1a>
 8005202:	9300      	str	r3, [sp, #0]
 8005204:	4613      	mov	r3, r2
 8005206:	f44f 7216 	mov.w	r2, #600	; 0x258
 800520a:	f7ff ffa5 	bl	8005158 <M66_send_cmd.part.0>
}
 800520e:	b003      	add	sp, #12
 8005210:	bd30      	pop	{r4, r5, pc}
		return false;
 8005212:	2000      	movs	r0, #0
 8005214:	e7fb      	b.n	800520e <M66_send_cmd.constprop.0+0x16>
	...

08005218 <M66_ctrl_init>:
	m66_ctrl_local = m66_ctrl_struct;
 8005218:	4b01      	ldr	r3, [pc, #4]	; (8005220 <M66_ctrl_init+0x8>)
 800521a:	6018      	str	r0, [r3, #0]
}
 800521c:	4770      	bx	lr
 800521e:	bf00      	nop
 8005220:	20002c68 	.word	0x20002c68

08005224 <M66_hw_reset>:
{
 8005224:	b510      	push	{r4, lr}
	m66_ctrl_local->pwrkey_switch(true);
 8005226:	4c0a      	ldr	r4, [pc, #40]	; (8005250 <M66_hw_reset+0x2c>)
 8005228:	2001      	movs	r0, #1
 800522a:	6823      	ldr	r3, [r4, #0]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	4798      	blx	r3
	m66_ctrl_local->delay(5000);
 8005230:	6823      	ldr	r3, [r4, #0]
 8005232:	f241 3088 	movw	r0, #5000	; 0x1388
 8005236:	689b      	ldr	r3, [r3, #8]
 8005238:	4798      	blx	r3
	m66_ctrl_local->pwrkey_switch(false);
 800523a:	6823      	ldr	r3, [r4, #0]
 800523c:	2000      	movs	r0, #0
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	4798      	blx	r3
	m66_ctrl_local->delay(5000);
 8005242:	6823      	ldr	r3, [r4, #0]
 8005244:	f241 3088 	movw	r0, #5000	; 0x1388
}
 8005248:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	m66_ctrl_local->delay(5000);
 800524c:	689b      	ldr	r3, [r3, #8]
 800524e:	4718      	bx	r3
 8005250:	20002c68 	.word	0x20002c68

08005254 <M66_disable_echo>:
	if((cmd == NULL) || (len == 0) || (len > MAX_CMD_LEN))
 8005254:	2300      	movs	r3, #0
{
 8005256:	b507      	push	{r0, r1, r2, lr}
 8005258:	f44f 7216 	mov.w	r2, #600	; 0x258
 800525c:	2106      	movs	r1, #6
 800525e:	9300      	str	r3, [sp, #0]
 8005260:	4804      	ldr	r0, [pc, #16]	; (8005274 <M66_disable_echo+0x20>)
 8005262:	f7ff ff79 	bl	8005158 <M66_send_cmd.part.0>
	return (M66_send_cmd("ATE0\r\n", 6, 600, NULL, NULL) ? CMD_OK : CMD_ERROR);
 8005266:	f080 0001 	eor.w	r0, r0, #1
}
 800526a:	b2c0      	uxtb	r0, r0
 800526c:	b003      	add	sp, #12
 800526e:	f85d fb04 	ldr.w	pc, [sp], #4
 8005272:	bf00      	nop
 8005274:	080076ae 	.word	0x080076ae

08005278 <M66_check_pin>:
{
 8005278:	b507      	push	{r0, r1, r2, lr}
 800527a:	4b07      	ldr	r3, [pc, #28]	; (8005298 <M66_check_pin+0x20>)
 800527c:	9000      	str	r0, [sp, #0]
 800527e:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005282:	210a      	movs	r1, #10
 8005284:	4805      	ldr	r0, [pc, #20]	; (800529c <M66_check_pin+0x24>)
 8005286:	f7ff ff67 	bl	8005158 <M66_send_cmd.part.0>
	return (M66_send_cmd("AT+CPIN?\r\n", 10, 600, &AT_CPIN_callback, (void *)state) ? CMD_OK : CMD_ERROR);
 800528a:	f080 0001 	eor.w	r0, r0, #1
}
 800528e:	b2c0      	uxtb	r0, r0
 8005290:	b003      	add	sp, #12
 8005292:	f85d fb04 	ldr.w	pc, [sp], #4
 8005296:	bf00      	nop
 8005298:	20000014 	.word	0x20000014
 800529c:	080076b5 	.word	0x080076b5

080052a0 <M66_switch_radio>:
{
 80052a0:	b530      	push	{r4, r5, lr}
	char cmd_buffer[32] = {0};
 80052a2:	2400      	movs	r4, #0
{
 80052a4:	4605      	mov	r5, r0
 80052a6:	b089      	sub	sp, #36	; 0x24
	char cmd_buffer[32] = {0};
 80052a8:	4621      	mov	r1, r4
 80052aa:	221c      	movs	r2, #28
 80052ac:	a801      	add	r0, sp, #4
 80052ae:	9400      	str	r4, [sp, #0]
 80052b0:	f001 f88e 	bl	80063d0 <memset>
	sprintf(cmd_buffer, "AT+CFUN=%d\r\n", state);
 80052b4:	462a      	mov	r2, r5
 80052b6:	4909      	ldr	r1, [pc, #36]	; (80052dc <M66_switch_radio+0x3c>)
 80052b8:	4668      	mov	r0, sp
 80052ba:	f001 f891 	bl	80063e0 <siprintf>
	return (M66_send_cmd(cmd_buffer, strlen(cmd_buffer), 600, NULL, NULL) ? CMD_OK : CMD_ERROR);
 80052be:	4668      	mov	r0, sp
 80052c0:	f7fa ff68 	bl	8000194 <strlen>
 80052c4:	4623      	mov	r3, r4
 80052c6:	b281      	uxth	r1, r0
 80052c8:	4622      	mov	r2, r4
 80052ca:	4668      	mov	r0, sp
 80052cc:	f7ff ff94 	bl	80051f8 <M66_send_cmd.constprop.0>
 80052d0:	f080 0001 	eor.w	r0, r0, #1
}
 80052d4:	b2c0      	uxtb	r0, r0
 80052d6:	b009      	add	sp, #36	; 0x24
 80052d8:	bd30      	pop	{r4, r5, pc}
 80052da:	bf00      	nop
 80052dc:	080076c0 	.word	0x080076c0

080052e0 <M66_save_config>:
	if((cmd == NULL) || (len == 0) || (len > MAX_CMD_LEN))
 80052e0:	2300      	movs	r3, #0
{
 80052e2:	b507      	push	{r0, r1, r2, lr}
 80052e4:	f44f 7216 	mov.w	r2, #600	; 0x258
 80052e8:	210a      	movs	r1, #10
 80052ea:	9300      	str	r3, [sp, #0]
 80052ec:	4804      	ldr	r0, [pc, #16]	; (8005300 <M66_save_config+0x20>)
 80052ee:	f7ff ff33 	bl	8005158 <M66_send_cmd.part.0>
	return (M66_send_cmd("AT&W\r\n", 10, 600, NULL, NULL) ? CMD_OK : CMD_ERROR);
 80052f2:	f080 0001 	eor.w	r0, r0, #1
}
 80052f6:	b2c0      	uxtb	r0, r0
 80052f8:	b003      	add	sp, #12
 80052fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80052fe:	bf00      	nop
 8005300:	080076cd 	.word	0x080076cd

08005304 <M66_select_operator>:
{
 8005304:	b530      	push	{r4, r5, lr}
	char cmd_buffer[32] = {0};
 8005306:	2400      	movs	r4, #0
{
 8005308:	4605      	mov	r5, r0
 800530a:	b089      	sub	sp, #36	; 0x24
	char cmd_buffer[32] = {0};
 800530c:	4621      	mov	r1, r4
 800530e:	221c      	movs	r2, #28
 8005310:	a801      	add	r0, sp, #4
 8005312:	9400      	str	r4, [sp, #0]
 8005314:	f001 f85c 	bl	80063d0 <memset>
	sprintf(cmd_buffer, "AT+COPS=1,2,\"%ld\"\r\n", mccmnc);
 8005318:	462a      	mov	r2, r5
 800531a:	4909      	ldr	r1, [pc, #36]	; (8005340 <M66_select_operator+0x3c>)
 800531c:	4668      	mov	r0, sp
 800531e:	f001 f85f 	bl	80063e0 <siprintf>
	return (M66_send_cmd(cmd_buffer, strlen(cmd_buffer), 600, NULL, NULL) ? CMD_OK : CMD_ERROR);
 8005322:	4668      	mov	r0, sp
 8005324:	f7fa ff36 	bl	8000194 <strlen>
 8005328:	4623      	mov	r3, r4
 800532a:	b281      	uxth	r1, r0
 800532c:	4622      	mov	r2, r4
 800532e:	4668      	mov	r0, sp
 8005330:	f7ff ff62 	bl	80051f8 <M66_send_cmd.constprop.0>
 8005334:	f080 0001 	eor.w	r0, r0, #1
}
 8005338:	b2c0      	uxtb	r0, r0
 800533a:	b009      	add	sp, #36	; 0x24
 800533c:	bd30      	pop	{r4, r5, pc}
 800533e:	bf00      	nop
 8005340:	080076d4 	.word	0x080076d4

08005344 <M66_query_network_status>:
	char cmd_buffer[32] = {0};
 8005344:	2100      	movs	r1, #0
{
 8005346:	b500      	push	{lr}
 8005348:	b08b      	sub	sp, #44	; 0x2c
	char cmd_buffer[32] = {0};
 800534a:	221c      	movs	r2, #28
{
 800534c:	9001      	str	r0, [sp, #4]
	char cmd_buffer[32] = {0};
 800534e:	a803      	add	r0, sp, #12
 8005350:	9102      	str	r1, [sp, #8]
 8005352:	f001 f83d 	bl	80063d0 <memset>
	sprintf(cmd_buffer, "AT+CREG?\r\n");
 8005356:	4909      	ldr	r1, [pc, #36]	; (800537c <M66_query_network_status+0x38>)
 8005358:	a802      	add	r0, sp, #8
 800535a:	f001 f88d 	bl	8006478 <strcpy>
	return (M66_send_cmd(cmd_buffer, strlen(cmd_buffer), 600, &AT_CREG_callback, &status) ? CMD_OK : CMD_ERROR);
 800535e:	a802      	add	r0, sp, #8
 8005360:	f7fa ff18 	bl	8000194 <strlen>
 8005364:	4a06      	ldr	r2, [pc, #24]	; (8005380 <M66_query_network_status+0x3c>)
 8005366:	b281      	uxth	r1, r0
 8005368:	ab01      	add	r3, sp, #4
 800536a:	a802      	add	r0, sp, #8
 800536c:	f7ff ff44 	bl	80051f8 <M66_send_cmd.constprop.0>
 8005370:	f080 0001 	eor.w	r0, r0, #1
}
 8005374:	b2c0      	uxtb	r0, r0
 8005376:	b00b      	add	sp, #44	; 0x2c
 8005378:	f85d fb04 	ldr.w	pc, [sp], #4
 800537c:	080076e8 	.word	0x080076e8
 8005380:	20000028 	.word	0x20000028

08005384 <M66_set_mode>:
{
 8005384:	b510      	push	{r4, lr}
	char cmd_buffer[32] = {0};
 8005386:	2400      	movs	r4, #0
{
 8005388:	b088      	sub	sp, #32
	char cmd_buffer[32] = {0};
 800538a:	221c      	movs	r2, #28
 800538c:	4621      	mov	r1, r4
 800538e:	a801      	add	r0, sp, #4
 8005390:	9400      	str	r4, [sp, #0]
 8005392:	f001 f81d 	bl	80063d0 <memset>
	sprintf(cmd_buffer, "AT+CMGF=%d\r\n");
 8005396:	4909      	ldr	r1, [pc, #36]	; (80053bc <M66_set_mode+0x38>)
 8005398:	4668      	mov	r0, sp
 800539a:	f001 f821 	bl	80063e0 <siprintf>
	return (M66_send_cmd(cmd_buffer, strlen(cmd_buffer), 600, NULL, NULL) ? CMD_OK : CMD_ERROR);
 800539e:	4668      	mov	r0, sp
 80053a0:	f7fa fef8 	bl	8000194 <strlen>
 80053a4:	4623      	mov	r3, r4
 80053a6:	b281      	uxth	r1, r0
 80053a8:	4622      	mov	r2, r4
 80053aa:	4668      	mov	r0, sp
 80053ac:	f7ff ff24 	bl	80051f8 <M66_send_cmd.constprop.0>
 80053b0:	f080 0001 	eor.w	r0, r0, #1
}
 80053b4:	b2c0      	uxtb	r0, r0
 80053b6:	b008      	add	sp, #32
 80053b8:	bd10      	pop	{r4, pc}
 80053ba:	bf00      	nop
 80053bc:	080076f3 	.word	0x080076f3

080053c0 <M66_send_sms>:
{
 80053c0:	b570      	push	{r4, r5, r6, lr}
	char cmd_buffer[32] = {0};
 80053c2:	2400      	movs	r4, #0
{
 80053c4:	4606      	mov	r6, r0
 80053c6:	b088      	sub	sp, #32
	char cmd_buffer[32] = {0};
 80053c8:	221c      	movs	r2, #28
{
 80053ca:	460d      	mov	r5, r1
	char cmd_buffer[32] = {0};
 80053cc:	a801      	add	r0, sp, #4
 80053ce:	4621      	mov	r1, r4
 80053d0:	9400      	str	r4, [sp, #0]
 80053d2:	f000 fffd 	bl	80063d0 <memset>
	sprintf(cmd_buffer, "AT+CMGS=\"%s\"\r\n", tel_num);
 80053d6:	4632      	mov	r2, r6
 80053d8:	490d      	ldr	r1, [pc, #52]	; (8005410 <M66_send_sms+0x50>)
 80053da:	4668      	mov	r0, sp
 80053dc:	f001 f800 	bl	80063e0 <siprintf>
	if(M66_send_cmd(cmd_buffer, strlen(cmd_buffer), 600, NULL, NULL) == CMD_ERROR)
 80053e0:	4668      	mov	r0, sp
 80053e2:	f7fa fed7 	bl	8000194 <strlen>
 80053e6:	4623      	mov	r3, r4
 80053e8:	b281      	uxth	r1, r0
 80053ea:	4622      	mov	r2, r4
 80053ec:	4668      	mov	r0, sp
 80053ee:	f7ff ff03 	bl	80051f8 <M66_send_cmd.constprop.0>
 80053f2:	b158      	cbz	r0, 800540c <M66_send_sms+0x4c>
		return (M66_send_cmd(message, strlen(message), 600, NULL, NULL) ? CMD_OK : CMD_ERROR);
 80053f4:	4628      	mov	r0, r5
 80053f6:	f7fa fecd 	bl	8000194 <strlen>
 80053fa:	4623      	mov	r3, r4
 80053fc:	b281      	uxth	r1, r0
 80053fe:	4622      	mov	r2, r4
 8005400:	4628      	mov	r0, r5
 8005402:	f7ff fef9 	bl	80051f8 <M66_send_cmd.constprop.0>
 8005406:	f080 0001 	eor.w	r0, r0, #1
 800540a:	b2c0      	uxtb	r0, r0
}
 800540c:	b008      	add	sp, #32
 800540e:	bd70      	pop	{r4, r5, r6, pc}
 8005410:	08007700 	.word	0x08007700

08005414 <M66_set_bt_state>:
{
 8005414:	b530      	push	{r4, r5, lr}
	char cmd_buffer[50] = {0};
 8005416:	2400      	movs	r4, #0
{
 8005418:	4605      	mov	r5, r0
 800541a:	b08f      	sub	sp, #60	; 0x3c
	char cmd_buffer[50] = {0};
 800541c:	4621      	mov	r1, r4
 800541e:	222e      	movs	r2, #46	; 0x2e
 8005420:	a802      	add	r0, sp, #8
 8005422:	9401      	str	r4, [sp, #4]
 8005424:	f000 ffd4 	bl	80063d0 <memset>
	sprintf(cmd_buffer, "AT+QBTPWR=%d\r\n", state);
 8005428:	462a      	mov	r2, r5
 800542a:	4909      	ldr	r1, [pc, #36]	; (8005450 <M66_set_bt_state+0x3c>)
 800542c:	a801      	add	r0, sp, #4
 800542e:	f000 ffd7 	bl	80063e0 <siprintf>
	return (M66_send_cmd(cmd_buffer, strlen(cmd_buffer), 600, NULL, NULL) ? CMD_OK : CMD_ERROR);
 8005432:	a801      	add	r0, sp, #4
 8005434:	f7fa feae 	bl	8000194 <strlen>
 8005438:	4623      	mov	r3, r4
 800543a:	b281      	uxth	r1, r0
 800543c:	4622      	mov	r2, r4
 800543e:	a801      	add	r0, sp, #4
 8005440:	f7ff feda 	bl	80051f8 <M66_send_cmd.constprop.0>
 8005444:	f080 0001 	eor.w	r0, r0, #1
}
 8005448:	b2c0      	uxtb	r0, r0
 800544a:	b00f      	add	sp, #60	; 0x3c
 800544c:	bd30      	pop	{r4, r5, pc}
 800544e:	bf00      	nop
 8005450:	0800770f 	.word	0x0800770f

08005454 <M66_set_bt_name>:
{
 8005454:	b530      	push	{r4, r5, lr}
	char cmd_buffer[50] = {0};
 8005456:	2400      	movs	r4, #0
{
 8005458:	4605      	mov	r5, r0
 800545a:	b08f      	sub	sp, #60	; 0x3c
	char cmd_buffer[50] = {0};
 800545c:	4621      	mov	r1, r4
 800545e:	222e      	movs	r2, #46	; 0x2e
 8005460:	a802      	add	r0, sp, #8
 8005462:	9401      	str	r4, [sp, #4]
 8005464:	f000 ffb4 	bl	80063d0 <memset>
	sprintf(cmd_buffer, "AT+QBTNAME=\"%s\"\r\n", name);
 8005468:	462a      	mov	r2, r5
 800546a:	4909      	ldr	r1, [pc, #36]	; (8005490 <M66_set_bt_name+0x3c>)
 800546c:	a801      	add	r0, sp, #4
 800546e:	f000 ffb7 	bl	80063e0 <siprintf>
	return (M66_send_cmd(cmd_buffer, strlen(cmd_buffer), 600, NULL, NULL) ? CMD_OK : CMD_ERROR);
 8005472:	a801      	add	r0, sp, #4
 8005474:	f7fa fe8e 	bl	8000194 <strlen>
 8005478:	4623      	mov	r3, r4
 800547a:	b281      	uxth	r1, r0
 800547c:	4622      	mov	r2, r4
 800547e:	a801      	add	r0, sp, #4
 8005480:	f7ff feba 	bl	80051f8 <M66_send_cmd.constprop.0>
 8005484:	f080 0001 	eor.w	r0, r0, #1
}
 8005488:	b2c0      	uxtb	r0, r0
 800548a:	b00f      	add	sp, #60	; 0x3c
 800548c:	bd30      	pop	{r4, r5, pc}
 800548e:	bf00      	nop
 8005490:	0800771e 	.word	0x0800771e

08005494 <M66_set_bt_visibility>:
{
 8005494:	b530      	push	{r4, r5, lr}
	char cmd_buffer[32] = {0};
 8005496:	2400      	movs	r4, #0
{
 8005498:	4605      	mov	r5, r0
 800549a:	b089      	sub	sp, #36	; 0x24
	char cmd_buffer[32] = {0};
 800549c:	4621      	mov	r1, r4
 800549e:	221c      	movs	r2, #28
 80054a0:	a801      	add	r0, sp, #4
 80054a2:	9400      	str	r4, [sp, #0]
 80054a4:	f000 ff94 	bl	80063d0 <memset>
	sprintf(cmd_buffer, "AT+QBTVISB=%d\r\n", visibility);
 80054a8:	462a      	mov	r2, r5
 80054aa:	4909      	ldr	r1, [pc, #36]	; (80054d0 <M66_set_bt_visibility+0x3c>)
 80054ac:	4668      	mov	r0, sp
 80054ae:	f000 ff97 	bl	80063e0 <siprintf>
	return (M66_send_cmd(cmd_buffer, strlen(cmd_buffer), 600, NULL, NULL) ? CMD_OK : CMD_ERROR);
 80054b2:	4668      	mov	r0, sp
 80054b4:	f7fa fe6e 	bl	8000194 <strlen>
 80054b8:	4623      	mov	r3, r4
 80054ba:	b281      	uxth	r1, r0
 80054bc:	4622      	mov	r2, r4
 80054be:	4668      	mov	r0, sp
 80054c0:	f7ff fe9a 	bl	80051f8 <M66_send_cmd.constprop.0>
 80054c4:	f080 0001 	eor.w	r0, r0, #1
}
 80054c8:	b2c0      	uxtb	r0, r0
 80054ca:	b009      	add	sp, #36	; 0x24
 80054cc:	bd30      	pop	{r4, r5, pc}
 80054ce:	bf00      	nop
 80054d0:	08007730 	.word	0x08007730

080054d4 <circbuffer_insert>:
static volatile uint8_t circular_buffer[CIRC_BUFF_SIZE] = {0};


bool circbuffer_insert(uint8_t * data, uint16_t len)
{
	if((len > CIRC_BUFF_SIZE) || (data == NULL))
 80054d4:	2980      	cmp	r1, #128	; 0x80
{
 80054d6:	b530      	push	{r4, r5, lr}
	if((len > CIRC_BUFF_SIZE) || (data == NULL))
 80054d8:	d812      	bhi.n	8005500 <circbuffer_insert+0x2c>
 80054da:	b128      	cbz	r0, 80054e8 <circbuffer_insert+0x14>
		return false;


	for(uint16_t i = 0;i < len;i++)
	{
		circular_buffer[wr_ptr] = data[i];
 80054dc:	4a09      	ldr	r2, [pc, #36]	; (8005504 <circbuffer_insert+0x30>)
 80054de:	4c0a      	ldr	r4, [pc, #40]	; (8005508 <circbuffer_insert+0x34>)
 80054e0:	4401      	add	r1, r0
	for(uint16_t i = 0;i < len;i++)
 80054e2:	4288      	cmp	r0, r1
 80054e4:	d101      	bne.n	80054ea <circbuffer_insert+0x16>
		wr_ptr = (wr_ptr + 1) % CIRC_BUFF_SIZE;
	}

	return true;
 80054e6:	2001      	movs	r0, #1

}
 80054e8:	bd30      	pop	{r4, r5, pc}
		circular_buffer[wr_ptr] = data[i];
 80054ea:	8813      	ldrh	r3, [r2, #0]
 80054ec:	f810 5b01 	ldrb.w	r5, [r0], #1
 80054f0:	b29b      	uxth	r3, r3
 80054f2:	54e5      	strb	r5, [r4, r3]
		wr_ptr = (wr_ptr + 1) % CIRC_BUFF_SIZE;
 80054f4:	8813      	ldrh	r3, [r2, #0]
 80054f6:	3301      	adds	r3, #1
 80054f8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80054fc:	8013      	strh	r3, [r2, #0]
	for(uint16_t i = 0;i < len;i++)
 80054fe:	e7f0      	b.n	80054e2 <circbuffer_insert+0xe>
		return false;
 8005500:	2000      	movs	r0, #0
 8005502:	e7f1      	b.n	80054e8 <circbuffer_insert+0x14>
 8005504:	20002cee 	.word	0x20002cee
 8005508:	20002c6c 	.word	0x20002c6c

0800550c <circbuffer_get_all>:
	return false;
}


bool circbuffer_get_all(uint8_t * buffer)
{
 800550c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if((buffer == NULL) || (rd_ptr == wr_ptr))
 800550e:	b198      	cbz	r0, 8005538 <circbuffer_get_all+0x2c>
 8005510:	4a12      	ldr	r2, [pc, #72]	; (800555c <circbuffer_get_all+0x50>)
 8005512:	4d13      	ldr	r5, [pc, #76]	; (8005560 <circbuffer_get_all+0x54>)
 8005514:	8811      	ldrh	r1, [r2, #0]
 8005516:	882b      	ldrh	r3, [r5, #0]
 8005518:	b289      	uxth	r1, r1
 800551a:	b29b      	uxth	r3, r3
 800551c:	4299      	cmp	r1, r3
 800551e:	d01b      	beq.n	8005558 <circbuffer_get_all+0x4c>
 8005520:	2300      	movs	r3, #0
		return false;

	for(uint16_t i = 0;rd_ptr != wr_ptr;i++)
	{
		buffer[i] = circular_buffer[rd_ptr];
		circular_buffer[rd_ptr] = '\0';
 8005522:	461f      	mov	r7, r3
		buffer[i] = circular_buffer[rd_ptr];
 8005524:	4e0f      	ldr	r6, [pc, #60]	; (8005564 <circbuffer_get_all+0x58>)
	for(uint16_t i = 0;rd_ptr != wr_ptr;i++)
 8005526:	8814      	ldrh	r4, [r2, #0]
 8005528:	8829      	ldrh	r1, [r5, #0]
 800552a:	b2a4      	uxth	r4, r4
 800552c:	b289      	uxth	r1, r1
 800552e:	428c      	cmp	r4, r1
 8005530:	f103 0c01 	add.w	ip, r3, #1
 8005534:	d101      	bne.n	800553a <circbuffer_get_all+0x2e>

		rd_ptr = (rd_ptr + 1) % CIRC_BUFF_SIZE;
	}

	return true;
 8005536:	2001      	movs	r0, #1
}
 8005538:	bdf0      	pop	{r4, r5, r6, r7, pc}
		buffer[i] = circular_buffer[rd_ptr];
 800553a:	8811      	ldrh	r1, [r2, #0]
 800553c:	b29b      	uxth	r3, r3
 800553e:	b289      	uxth	r1, r1
 8005540:	5c71      	ldrb	r1, [r6, r1]
 8005542:	54c1      	strb	r1, [r0, r3]
		circular_buffer[rd_ptr] = '\0';
 8005544:	8813      	ldrh	r3, [r2, #0]
 8005546:	b29b      	uxth	r3, r3
 8005548:	54f7      	strb	r7, [r6, r3]
		rd_ptr = (rd_ptr + 1) % CIRC_BUFF_SIZE;
 800554a:	8813      	ldrh	r3, [r2, #0]
 800554c:	3301      	adds	r3, #1
 800554e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005552:	8013      	strh	r3, [r2, #0]
 8005554:	4663      	mov	r3, ip
 8005556:	e7e6      	b.n	8005526 <circbuffer_get_all+0x1a>
		return false;
 8005558:	2000      	movs	r0, #0
 800555a:	e7ed      	b.n	8005538 <circbuffer_get_all+0x2c>
 800555c:	20002cec 	.word	0x20002cec
 8005560:	20002cee 	.word	0x20002cee
 8005564:	20002c6c 	.word	0x20002c6c

08005568 <spi_write>:
	return write_flash(CONFIG_ADDR,  (uint8_t*)&config, sizeof(config_t));
}


bool spi_write(uint8_t * data, uint16_t len)
{
 8005568:	460a      	mov	r2, r1
 800556a:	b508      	push	{r3, lr}
	return (HAL_SPI_Transmit(&hspi1, data, len, 200) == HAL_OK) ? true : false;
 800556c:	4601      	mov	r1, r0
 800556e:	23c8      	movs	r3, #200	; 0xc8
 8005570:	4803      	ldr	r0, [pc, #12]	; (8005580 <spi_write+0x18>)
 8005572:	f7fd fd67 	bl	8003044 <HAL_SPI_Transmit>
}
 8005576:	fab0 f080 	clz	r0, r0
 800557a:	0940      	lsrs	r0, r0, #5
 800557c:	bd08      	pop	{r3, pc}
 800557e:	bf00      	nop
 8005580:	200001cc 	.word	0x200001cc

08005584 <spi_read>:

bool spi_read(uint8_t * data_tx, uint16_t len_tx, uint8_t * data_rx, uint16_t len_rx)
{
 8005584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	HAL_StatusTypeDef status = HAL_OK;
	status |= HAL_SPI_Transmit(&hspi1, data_tx, len_tx, 200);
 8005586:	4f0b      	ldr	r7, [pc, #44]	; (80055b4 <spi_read+0x30>)
{
 8005588:	4615      	mov	r5, r2
 800558a:	461e      	mov	r6, r3
	status |= HAL_SPI_Transmit(&hspi1, data_tx, len_tx, 200);
 800558c:	460a      	mov	r2, r1
 800558e:	23c8      	movs	r3, #200	; 0xc8
 8005590:	4601      	mov	r1, r0
 8005592:	4638      	mov	r0, r7
 8005594:	f7fd fd56 	bl	8003044 <HAL_SPI_Transmit>
	status |= HAL_SPI_Receive(&hspi1, data_rx, len_rx, 200);
 8005598:	23c8      	movs	r3, #200	; 0xc8
	status |= HAL_SPI_Transmit(&hspi1, data_tx, len_tx, 200);
 800559a:	4604      	mov	r4, r0
	status |= HAL_SPI_Receive(&hspi1, data_rx, len_rx, 200);
 800559c:	4632      	mov	r2, r6
 800559e:	4629      	mov	r1, r5
 80055a0:	4638      	mov	r0, r7
 80055a2:	f7fd fef0 	bl	8003386 <HAL_SPI_Receive>
 80055a6:	4320      	orrs	r0, r4

	if(status != HAL_OK)
 80055a8:	b2c0      	uxtb	r0, r0
	}
	else
	{
		return true;
	}
}
 80055aa:	fab0 f080 	clz	r0, r0
 80055ae:	0940      	lsrs	r0, r0, #5
 80055b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80055b2:	bf00      	nop
 80055b4:	200001cc 	.word	0x200001cc

080055b8 <delay>:

void delay(uint32_t delay_ms)
{
	vTaskDelay(pdMS_TO_TICKS(delay_ms));
 80055b8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80055bc:	4358      	muls	r0, r3
 80055be:	fbb0 f0f3 	udiv	r0, r0, r3
 80055c2:	f7ff ba09 	b.w	80049d8 <vTaskDelay>
	...

080055c8 <cs_write>:
}

void cs_write(bool status)
{
 80055c8:	4602      	mov	r2, r0
	GPIO_PinState cs_stat =(status) ? GPIO_PIN_SET : GPIO_PIN_RESET;
	HAL_GPIO_WritePin(SPI1_CS_GPIO_Port, SPI1_CS_Pin, cs_stat);
 80055ca:	2140      	movs	r1, #64	; 0x40
 80055cc:	4801      	ldr	r0, [pc, #4]	; (80055d4 <cs_write+0xc>)
 80055ce:	f7fc bca3 	b.w	8001f18 <HAL_GPIO_WritePin>
 80055d2:	bf00      	nop
 80055d4:	40020400 	.word	0x40020400

080055d8 <spi_interface_init>:
	spi_ctrl.spi_write = spi_write;
 80055d8:	4805      	ldr	r0, [pc, #20]	; (80055f0 <spi_interface_init+0x18>)
 80055da:	4b06      	ldr	r3, [pc, #24]	; (80055f4 <spi_interface_init+0x1c>)
 80055dc:	6003      	str	r3, [r0, #0]
	spi_ctrl.spi_read = spi_read;
 80055de:	4b06      	ldr	r3, [pc, #24]	; (80055f8 <spi_interface_init+0x20>)
 80055e0:	6043      	str	r3, [r0, #4]
	spi_ctrl.delay = delay;
 80055e2:	4b06      	ldr	r3, [pc, #24]	; (80055fc <spi_interface_init+0x24>)
 80055e4:	60c3      	str	r3, [r0, #12]
	spi_ctrl.cs_write = cs_write;
 80055e6:	4b06      	ldr	r3, [pc, #24]	; (8005600 <spi_interface_init+0x28>)
 80055e8:	6083      	str	r3, [r0, #8]
	spi_control_init(&spi_ctrl);
 80055ea:	f000 b82b 	b.w	8005644 <spi_control_init>
 80055ee:	bf00      	nop
 80055f0:	20002d10 	.word	0x20002d10
 80055f4:	08005569 	.word	0x08005569
 80055f8:	08005585 	.word	0x08005585
 80055fc:	080055b9 	.word	0x080055b9
 8005600:	080055c9 	.word	0x080055c9

08005604 <config_load>:
	return read_flash(CONFIG_ADDR, (uint8_t*)&config, sizeof(config_t));
 8005604:	2220      	movs	r2, #32
 8005606:	2000      	movs	r0, #0
 8005608:	4901      	ldr	r1, [pc, #4]	; (8005610 <config_load+0xc>)
 800560a:	f000 b85f 	b.w	80056cc <read_flash>
 800560e:	bf00      	nop
 8005610:	20002cf0 	.word	0x20002cf0

08005614 <config_save>:
	return write_flash(CONFIG_ADDR,  (uint8_t*)&config, sizeof(config_t));
 8005614:	2220      	movs	r2, #32
 8005616:	2000      	movs	r0, #0
 8005618:	4901      	ldr	r1, [pc, #4]	; (8005620 <config_save+0xc>)
 800561a:	f000 b819 	b.w	8005650 <write_flash>
 800561e:	bf00      	nop
 8005620:	20002cf0 	.word	0x20002cf0

08005624 <config_init>:
	memcpy(&config, &default_config, sizeof(config_t));
 8005624:	4b05      	ldr	r3, [pc, #20]	; (800563c <config_init+0x18>)
 8005626:	4a06      	ldr	r2, [pc, #24]	; (8005640 <config_init+0x1c>)
 8005628:	f103 0120 	add.w	r1, r3, #32
 800562c:	f853 0b04 	ldr.w	r0, [r3], #4
 8005630:	428b      	cmp	r3, r1
 8005632:	f842 0b04 	str.w	r0, [r2], #4
 8005636:	d1f9      	bne.n	800562c <config_init+0x8>
	config_save();
 8005638:	f7ff bfec 	b.w	8005614 <config_save>
 800563c:	2000003c 	.word	0x2000003c
 8005640:	20002cf0 	.word	0x20002cf0

08005644 <spi_control_init>:
static spi_control * spi_control_local;


void spi_control_init(spi_control * spi_control_struct)
{
	spi_control_local = spi_control_struct;
 8005644:	4b01      	ldr	r3, [pc, #4]	; (800564c <spi_control_init+0x8>)
 8005646:	6018      	str	r0, [r3, #0]
}
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	20002d20 	.word	0x20002d20

08005650 <write_flash>:


bool write_flash(uint32_t addr, uint8_t * data, uint16_t len)
{
 8005650:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t wr_data[FLASH_MAX_WR_DATA] = {0};
 8005654:	2600      	movs	r6, #0
{
 8005656:	b0a0      	sub	sp, #128	; 0x80
 8005658:	4615      	mov	r5, r2
 800565a:	4680      	mov	r8, r0
	uint8_t wr_data[FLASH_MAX_WR_DATA] = {0};
 800565c:	227c      	movs	r2, #124	; 0x7c
{
 800565e:	460f      	mov	r7, r1
	uint8_t wr_data[FLASH_MAX_WR_DATA] = {0};
 8005660:	a801      	add	r0, sp, #4
 8005662:	4631      	mov	r1, r6
 8005664:	9600      	str	r6, [sp, #0]
 8005666:	f000 feb3 	bl	80063d0 <memset>

	wr_data[0] = WRITE_ENA_CODE;
 800566a:	2306      	movs	r3, #6

	spi_control_local->cs_write(false);
 800566c:	4c16      	ldr	r4, [pc, #88]	; (80056c8 <write_flash+0x78>)
	wr_data[0] = WRITE_ENA_CODE;
 800566e:	f88d 3000 	strb.w	r3, [sp]
	spi_control_local->cs_write(false);
 8005672:	6823      	ldr	r3, [r4, #0]
 8005674:	4630      	mov	r0, r6
 8005676:	689b      	ldr	r3, [r3, #8]
 8005678:	4798      	blx	r3
	spi_control_local->spi_write(wr_data, 1);
 800567a:	6823      	ldr	r3, [r4, #0]
 800567c:	2101      	movs	r1, #1
 800567e:	4668      	mov	r0, sp
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4798      	blx	r3
	spi_control_local->cs_write(true);
 8005684:	6823      	ldr	r3, [r4, #0]
 8005686:	2001      	movs	r0, #1
 8005688:	689b      	ldr	r3, [r3, #8]
 800568a:	4798      	blx	r3

	wr_data[0] = AA_WRITE_CODE;
 800568c:	23ad      	movs	r3, #173	; 0xad
	memcpy(&wr_data[1], &addr, sizeof(uint32_t));
	memcpy(&wr_data[5], data, len);
 800568e:	462a      	mov	r2, r5
 8005690:	4639      	mov	r1, r7
 8005692:	f10d 0005 	add.w	r0, sp, #5
	wr_data[0] = AA_WRITE_CODE;
 8005696:	f88d 3000 	strb.w	r3, [sp]
	memcpy(&wr_data[1], &addr, sizeof(uint32_t));
 800569a:	f8cd 8001 	str.w	r8, [sp, #1]
	memcpy(&wr_data[5], data, len);
 800569e:	f000 fe89 	bl	80063b4 <memcpy>

	spi_control_local->cs_write(false);
 80056a2:	6823      	ldr	r3, [r4, #0]
 80056a4:	4630      	mov	r0, r6
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	4798      	blx	r3
	spi_control_local->spi_write(wr_data, (len+4));
 80056aa:	6823      	ldr	r3, [r4, #0]
 80056ac:	1d29      	adds	r1, r5, #4
 80056ae:	b289      	uxth	r1, r1
 80056b0:	4668      	mov	r0, sp
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4798      	blx	r3
	spi_control_local->cs_write(true);
 80056b6:	6823      	ldr	r3, [r4, #0]
 80056b8:	2001      	movs	r0, #1
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	4798      	blx	r3

	return false;
}
 80056be:	4630      	mov	r0, r6
 80056c0:	b020      	add	sp, #128	; 0x80
 80056c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056c6:	bf00      	nop
 80056c8:	20002d20 	.word	0x20002d20

080056cc <read_flash>:

bool read_flash(uint32_t addr, uint8_t * data_rx, uint16_t len_rx)
{
 80056cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint8_t wr_data[FLASH_MAX_WR_DATA] = {0};
 80056d0:	2400      	movs	r4, #0
{
 80056d2:	b0a0      	sub	sp, #128	; 0x80
 80056d4:	4605      	mov	r5, r0
 80056d6:	460e      	mov	r6, r1
 80056d8:	4617      	mov	r7, r2
	uint8_t wr_data[FLASH_MAX_WR_DATA] = {0};
 80056da:	4621      	mov	r1, r4
 80056dc:	227c      	movs	r2, #124	; 0x7c
 80056de:	a801      	add	r0, sp, #4
 80056e0:	f000 fe76 	bl	80063d0 <memset>
	wr_data[0] = READ_CODE;
 80056e4:	2303      	movs	r3, #3
	memcpy(&wr_data[1], &addr, sizeof(uint32_t));
 80056e6:	f8cd 5001 	str.w	r5, [sp, #1]
	spi_control_local->cs_write(false);
 80056ea:	4d0b      	ldr	r5, [pc, #44]	; (8005718 <read_flash+0x4c>)
	wr_data[0] = READ_CODE;
 80056ec:	f88d 3000 	strb.w	r3, [sp]
	spi_control_local->cs_write(false);
 80056f0:	682b      	ldr	r3, [r5, #0]
 80056f2:	4620      	mov	r0, r4
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	4798      	blx	r3
	spi_control_local->spi_read(wr_data, 4, data_rx, len_rx);
 80056f8:	682b      	ldr	r3, [r5, #0]
 80056fa:	4632      	mov	r2, r6
 80056fc:	2104      	movs	r1, #4
 80056fe:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8005702:	4668      	mov	r0, sp
 8005704:	463b      	mov	r3, r7
 8005706:	47c0      	blx	r8
	spi_control_local->cs_write(true);
 8005708:	682b      	ldr	r3, [r5, #0]
 800570a:	2001      	movs	r0, #1
 800570c:	689b      	ldr	r3, [r3, #8]
 800570e:	4798      	blx	r3

	return false;
}
 8005710:	4620      	mov	r0, r4
 8005712:	b020      	add	sp, #128	; 0x80
 8005714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005718:	20002d20 	.word	0x20002d20

0800571c <LCD_send>:
}

static bool LCD_send(uint8_t cmd, LCD_data_mode mode)
{
	bool res = true;
	LCD_data send_cmd = {0};
 800571c:	2308      	movs	r3, #8
{
 800571e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8005720:	4606      	mov	r6, r0
	LCD_data send_cmd = {0};
 8005722:	f88d 3004 	strb.w	r3, [sp, #4]
	send_cmd.data_bits.LED 	= 1;


	if(mode == LCD_CMD)
 8005726:	b111      	cbz	r1, 800572e <LCD_send+0x12>
	{
		send_cmd.data_bits.RS = 0;
	}
	else
	{
		send_cmd.data_bits.RS = 1;
 8005728:	2309      	movs	r3, #9
 800572a:	f88d 3004 	strb.w	r3, [sp, #4]
	}


	/*Set the first nibble*/
	send_cmd.data_byte |= (cmd & 0xF0);
 800572e:	f89d 3004 	ldrb.w	r3, [sp, #4]
	res &= LCD_local_dev->i2c_write(I2C_ADDR, &send_cmd.data_byte, 1);
 8005732:	4c33      	ldr	r4, [pc, #204]	; (8005800 <LCD_send+0xe4>)
	send_cmd.data_byte |= (cmd & 0xF0);
 8005734:	f026 020f 	bic.w	r2, r6, #15
 8005738:	4313      	orrs	r3, r2
 800573a:	f88d 3004 	strb.w	r3, [sp, #4]
	res &= LCD_local_dev->i2c_write(I2C_ADDR, &send_cmd.data_byte, 1);
 800573e:	6823      	ldr	r3, [r4, #0]
 8005740:	a901      	add	r1, sp, #4
 8005742:	2201      	movs	r2, #1
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	203f      	movs	r0, #63	; 0x3f
 8005748:	4798      	blx	r3

	LCD_local_dev->delay(20);
 800574a:	6823      	ldr	r3, [r4, #0]
	res &= LCD_local_dev->i2c_write(I2C_ADDR, &send_cmd.data_byte, 1);
 800574c:	4605      	mov	r5, r0
	LCD_local_dev->delay(20);
 800574e:	689b      	ldr	r3, [r3, #8]
 8005750:	2014      	movs	r0, #20
 8005752:	4798      	blx	r3

	/*Pulse the enable pin*/
	send_cmd.data_bits.E = 1;
 8005754:	f89d 3004 	ldrb.w	r3, [sp, #4]
	res &= LCD_local_dev->i2c_write(I2C_ADDR, &send_cmd.data_byte, 1);
 8005758:	a901      	add	r1, sp, #4
	send_cmd.data_bits.E = 1;
 800575a:	f043 0304 	orr.w	r3, r3, #4
 800575e:	f88d 3004 	strb.w	r3, [sp, #4]
	res &= LCD_local_dev->i2c_write(I2C_ADDR, &send_cmd.data_byte, 1);
 8005762:	6823      	ldr	r3, [r4, #0]
 8005764:	2201      	movs	r2, #1
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	203f      	movs	r0, #63	; 0x3f
 800576a:	4798      	blx	r3
	LCD_local_dev->delay(20);
 800576c:	6823      	ldr	r3, [r4, #0]
 800576e:	4005      	ands	r5, r0
 8005770:	689b      	ldr	r3, [r3, #8]
 8005772:	2014      	movs	r0, #20
 8005774:	4798      	blx	r3
	send_cmd.data_bits.E = 0;
 8005776:	f89d 3004 	ldrb.w	r3, [sp, #4]
	res &= LCD_local_dev->i2c_write(I2C_ADDR, &send_cmd.data_byte, 1);
 800577a:	a901      	add	r1, sp, #4
	send_cmd.data_bits.E = 0;
 800577c:	f36f 0382 	bfc	r3, #2, #1
 8005780:	f88d 3004 	strb.w	r3, [sp, #4]
	res &= LCD_local_dev->i2c_write(I2C_ADDR, &send_cmd.data_byte, 1);
 8005784:	6823      	ldr	r3, [r4, #0]
 8005786:	2201      	movs	r2, #1
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	203f      	movs	r0, #63	; 0x3f
 800578c:	4798      	blx	r3

	LCD_local_dev->delay(20);
 800578e:	6823      	ldr	r3, [r4, #0]
 8005790:	b2ed      	uxtb	r5, r5
 8005792:	689b      	ldr	r3, [r3, #8]
 8005794:	4005      	ands	r5, r0
 8005796:	2014      	movs	r0, #20
 8005798:	4798      	blx	r3

	/*Send the second half of the data*/
	send_cmd.data_byte &= ~(send_cmd.data_byte & 0xF0);
 800579a:	f89d 3004 	ldrb.w	r3, [sp, #4]
	send_cmd.data_byte |= (cmd & 0x0F) << 4;
	res &= LCD_local_dev->i2c_write(I2C_ADDR, &send_cmd.data_byte, 1);
 800579e:	a901      	add	r1, sp, #4
	send_cmd.data_byte &= ~(send_cmd.data_byte & 0xF0);
 80057a0:	f003 030f 	and.w	r3, r3, #15
	send_cmd.data_byte |= (cmd & 0x0F) << 4;
 80057a4:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
 80057a8:	f88d 3004 	strb.w	r3, [sp, #4]
	res &= LCD_local_dev->i2c_write(I2C_ADDR, &send_cmd.data_byte, 1);
 80057ac:	6823      	ldr	r3, [r4, #0]
 80057ae:	2201      	movs	r2, #1
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	203f      	movs	r0, #63	; 0x3f
 80057b4:	4798      	blx	r3

	LCD_local_dev->delay(20);
 80057b6:	6823      	ldr	r3, [r4, #0]
 80057b8:	4005      	ands	r5, r0
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	2014      	movs	r0, #20
 80057be:	4798      	blx	r3

	/*Pulse the enable pin*/
	send_cmd.data_bits.E = 1;
 80057c0:	f89d 3004 	ldrb.w	r3, [sp, #4]
	res &= LCD_local_dev->i2c_write(I2C_ADDR, &send_cmd.data_byte, 1);
 80057c4:	a901      	add	r1, sp, #4
	send_cmd.data_bits.E = 1;
 80057c6:	f043 0304 	orr.w	r3, r3, #4
 80057ca:	f88d 3004 	strb.w	r3, [sp, #4]
	res &= LCD_local_dev->i2c_write(I2C_ADDR, &send_cmd.data_byte, 1);
 80057ce:	6823      	ldr	r3, [r4, #0]
 80057d0:	2201      	movs	r2, #1
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	203f      	movs	r0, #63	; 0x3f
 80057d6:	4798      	blx	r3
	LCD_local_dev->delay(20);
 80057d8:	6823      	ldr	r3, [r4, #0]
 80057da:	4005      	ands	r5, r0
 80057dc:	689b      	ldr	r3, [r3, #8]
 80057de:	2014      	movs	r0, #20
 80057e0:	4798      	blx	r3
	send_cmd.data_bits.E = 0;
 80057e2:	f89d 3004 	ldrb.w	r3, [sp, #4]
	res &= LCD_local_dev->i2c_write(I2C_ADDR, &send_cmd.data_byte, 1);
 80057e6:	2201      	movs	r2, #1
	send_cmd.data_bits.E = 0;
 80057e8:	f36f 0382 	bfc	r3, #2, #1
 80057ec:	f88d 3004 	strb.w	r3, [sp, #4]
	res &= LCD_local_dev->i2c_write(I2C_ADDR, &send_cmd.data_byte, 1);
 80057f0:	6823      	ldr	r3, [r4, #0]
 80057f2:	a901      	add	r1, sp, #4
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	203f      	movs	r0, #63	; 0x3f
 80057f8:	4798      	blx	r3

	return res;
}
 80057fa:	4028      	ands	r0, r5
 80057fc:	b002      	add	sp, #8
 80057fe:	bd70      	pop	{r4, r5, r6, pc}
 8005800:	20002d24 	.word	0x20002d24

08005804 <LCD_I2C_init>:
	if(fp_struct == NULL)
 8005804:	b110      	cbz	r0, 800580c <LCD_I2C_init+0x8>
	LCD_local_dev = fp_struct;
 8005806:	4b02      	ldr	r3, [pc, #8]	; (8005810 <LCD_I2C_init+0xc>)
 8005808:	6018      	str	r0, [r3, #0]
	return true;
 800580a:	2001      	movs	r0, #1
}
 800580c:	4770      	bx	lr
 800580e:	bf00      	nop
 8005810:	20002d24 	.word	0x20002d24

08005814 <LCD_init>:
{
 8005814:	b538      	push	{r3, r4, r5, lr}
	res &= LCD_send(LCD_CMD_OFF, LCD_CMD);
 8005816:	2100      	movs	r1, #0
 8005818:	2008      	movs	r0, #8
 800581a:	f7ff ff7f 	bl	800571c <LCD_send>
	LCD_local_dev->delay(10);
 800581e:	4d1d      	ldr	r5, [pc, #116]	; (8005894 <LCD_init+0x80>)
	res &= LCD_send(LCD_CMD_OFF, LCD_CMD);
 8005820:	4604      	mov	r4, r0
	LCD_local_dev->delay(10);
 8005822:	682b      	ldr	r3, [r5, #0]
 8005824:	200a      	movs	r0, #10
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	4798      	blx	r3
	res &= LCD_send(0x0E, LCD_CMD);
 800582a:	2100      	movs	r1, #0
 800582c:	200e      	movs	r0, #14
 800582e:	f7ff ff75 	bl	800571c <LCD_send>
	LCD_local_dev->delay(10);
 8005832:	682b      	ldr	r3, [r5, #0]
 8005834:	4004      	ands	r4, r0
 8005836:	689b      	ldr	r3, [r3, #8]
 8005838:	200a      	movs	r0, #10
 800583a:	4798      	blx	r3
	res &= LCD_send(LCD_CMD_ON, LCD_CMD);
 800583c:	2100      	movs	r1, #0
 800583e:	200e      	movs	r0, #14
 8005840:	f7ff ff6c 	bl	800571c <LCD_send>
	LCD_local_dev->delay(10);
 8005844:	682b      	ldr	r3, [r5, #0]
 8005846:	b2e4      	uxtb	r4, r4
 8005848:	689b      	ldr	r3, [r3, #8]
 800584a:	4004      	ands	r4, r0
 800584c:	200a      	movs	r0, #10
 800584e:	4798      	blx	r3
	res &= LCD_send(LCD_CMD_RETURN, LCD_CMD);
 8005850:	2100      	movs	r1, #0
 8005852:	2002      	movs	r0, #2
 8005854:	f7ff ff62 	bl	800571c <LCD_send>
	LCD_local_dev->delay(10);
 8005858:	682b      	ldr	r3, [r5, #0]
 800585a:	4004      	ands	r4, r0
 800585c:	689b      	ldr	r3, [r3, #8]
 800585e:	200a      	movs	r0, #10
 8005860:	4798      	blx	r3
	res &= LCD_send(LCD_CMD_CLR, LCD_CMD);
 8005862:	2100      	movs	r1, #0
 8005864:	2001      	movs	r0, #1
 8005866:	f7ff ff59 	bl	800571c <LCD_send>
	LCD_local_dev->delay(10);
 800586a:	682b      	ldr	r3, [r5, #0]
 800586c:	4004      	ands	r4, r0
 800586e:	689b      	ldr	r3, [r3, #8]
 8005870:	200a      	movs	r0, #10
 8005872:	4798      	blx	r3
	res &= LCD_send(LCD_CMD_SET_ENTRY, LCD_CMD);
 8005874:	2100      	movs	r1, #0
 8005876:	2028      	movs	r0, #40	; 0x28
 8005878:	f7ff ff50 	bl	800571c <LCD_send>
	LCD_local_dev->delay(10);
 800587c:	682b      	ldr	r3, [r5, #0]
 800587e:	4004      	ands	r4, r0
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	200a      	movs	r0, #10
 8005884:	4798      	blx	r3
	res &= LCD_send(LCD_CMD_CURSOR_BLINK, LCD_CMD);
 8005886:	2100      	movs	r1, #0
 8005888:	200f      	movs	r0, #15
 800588a:	f7ff ff47 	bl	800571c <LCD_send>
}
 800588e:	4020      	ands	r0, r4
 8005890:	bd38      	pop	{r3, r4, r5, pc}
 8005892:	bf00      	nop
 8005894:	20002d24 	.word	0x20002d24

08005898 <LCD_write>:
{
 8005898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800589c:	4607      	mov	r7, r0
 800589e:	460e      	mov	r6, r1
	for(uint8_t i = 0;i < len;i++)
 80058a0:	f04f 0900 	mov.w	r9, #0
	bool res = true;
 80058a4:	2501      	movs	r5, #1
		LCD_local_dev->delay(10);
 80058a6:	f8df 8054 	ldr.w	r8, [pc, #84]	; 80058fc <LCD_write+0x64>
	for(uint8_t i = 0;i < len;i++)
 80058aa:	454e      	cmp	r6, r9
 80058ac:	d102      	bne.n	80058b4 <LCD_write+0x1c>
}
 80058ae:	4628      	mov	r0, r5
 80058b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		res = LCD_send(data_byte,LCD_DATA);
 80058b4:	2101      	movs	r1, #1
 80058b6:	f817 0009 	ldrb.w	r0, [r7, r9]
 80058ba:	f7ff ff2f 	bl	800571c <LCD_send>
		LCD_local_dev->delay(10);
 80058be:	f8d8 3000 	ldr.w	r3, [r8]
		res = LCD_send(data_byte,LCD_DATA);
 80058c2:	4605      	mov	r5, r0
		LCD_local_dev->delay(10);
 80058c4:	689b      	ldr	r3, [r3, #8]
 80058c6:	200a      	movs	r0, #10
 80058c8:	4798      	blx	r3
		if(i == 15)
 80058ca:	fa5f f389 	uxtb.w	r3, r9
 80058ce:	2b0f      	cmp	r3, #15
 80058d0:	d110      	bne.n	80058f4 <LCD_write+0x5c>
			res &= LCD_send(LCD_CMD_RETURN, LCD_CMD);
 80058d2:	2100      	movs	r1, #0
 80058d4:	2002      	movs	r0, #2
 80058d6:	f7ff ff21 	bl	800571c <LCD_send>
			LCD_local_dev->delay(10);
 80058da:	f8d8 3000 	ldr.w	r3, [r8]
			res &= LCD_send(LCD_CMD_RETURN, LCD_CMD);
 80058de:	4604      	mov	r4, r0
			LCD_local_dev->delay(10);
 80058e0:	689b      	ldr	r3, [r3, #8]
 80058e2:	200a      	movs	r0, #10
 80058e4:	4798      	blx	r3
			res &= LCD_send(0xC0, LCD_CMD);
 80058e6:	2100      	movs	r1, #0
 80058e8:	20c0      	movs	r0, #192	; 0xc0
 80058ea:	f7ff ff17 	bl	800571c <LCD_send>
 80058ee:	4004      	ands	r4, r0
 80058f0:	402c      	ands	r4, r5
 80058f2:	b2e5      	uxtb	r5, r4
	for(uint8_t i = 0;i < len;i++)
 80058f4:	f109 0901 	add.w	r9, r9, #1
 80058f8:	e7d7      	b.n	80058aa <LCD_write+0x12>
 80058fa:	bf00      	nop
 80058fc:	20002d24 	.word	0x20002d24

08005900 <LCD_clear>:
{
 8005900:	b538      	push	{r3, r4, r5, lr}
	res &= LCD_send(LCD_CMD_CLR, LCD_CMD);
 8005902:	2100      	movs	r1, #0
 8005904:	2001      	movs	r0, #1
 8005906:	f7ff ff09 	bl	800571c <LCD_send>
	LCD_local_dev->delay(10);
 800590a:	4d09      	ldr	r5, [pc, #36]	; (8005930 <LCD_clear+0x30>)
	res &= LCD_send(LCD_CMD_CLR, LCD_CMD);
 800590c:	4604      	mov	r4, r0
	LCD_local_dev->delay(10);
 800590e:	682b      	ldr	r3, [r5, #0]
 8005910:	200a      	movs	r0, #10
 8005912:	689b      	ldr	r3, [r3, #8]
 8005914:	4798      	blx	r3
	res &= LCD_send(LCD_CMD_RETURN, LCD_CMD);
 8005916:	2100      	movs	r1, #0
 8005918:	2002      	movs	r0, #2
 800591a:	f7ff feff 	bl	800571c <LCD_send>
	LCD_local_dev->delay(10);
 800591e:	682b      	ldr	r3, [r5, #0]
 8005920:	4004      	ands	r4, r0
 8005922:	689b      	ldr	r3, [r3, #8]
 8005924:	200a      	movs	r0, #10
 8005926:	b2e4      	uxtb	r4, r4
 8005928:	4798      	blx	r3
}
 800592a:	4620      	mov	r0, r4
 800592c:	bd38      	pop	{r3, r4, r5, pc}
 800592e:	bf00      	nop
 8005930:	20002d24 	.word	0x20002d24

08005934 <LCD_next_line>:
	res &= LCD_send(LCD_CMD_NEXT_LINE, LCD_CMD);
 8005934:	2100      	movs	r1, #0
 8005936:	20c0      	movs	r0, #192	; 0xc0
 8005938:	f7ff bef0 	b.w	800571c <LCD_send>

0800593c <Numpad_init>:
}scan_pin;

scan_pin	scan_array[COLUMN_NUM][ROW_NUM] 	= {0};

bool Numpad_init(Numpad_dev * dev)
{
 800593c:	b570      	push	{r4, r5, r6, lr}
	if(dev == NULL)
 800593e:	2800      	cmp	r0, #0
 8005940:	d046      	beq.n	80059d0 <Numpad_init+0x94>
		return false;

	numpad_local_dev = dev;
 8005942:	4b24      	ldr	r3, [pc, #144]	; (80059d4 <Numpad_init+0x98>)

	/*Initialize an array with the functions*/

	/*column 1*/
	scan_array[0][0].write_func = numpad_local_dev->col0_write;
 8005944:	6902      	ldr	r2, [r0, #16]
	numpad_local_dev = dev;
 8005946:	6018      	str	r0, [r3, #0]
	scan_array[0][0].write_func = numpad_local_dev->col0_write;
 8005948:	4b23      	ldr	r3, [pc, #140]	; (80059d8 <Numpad_init+0x9c>)
	scan_array[0][1].write_func = numpad_local_dev->col0_write;
	scan_array[0][2].write_func = numpad_local_dev->col0_write;
	scan_array[0][3].write_func = numpad_local_dev->col0_write;

	scan_array[0][0].read_func = numpad_local_dev->row0_read;
 800594a:	6806      	ldr	r6, [r0, #0]
	scan_array[0][0].write_func = numpad_local_dev->col0_write;
 800594c:	601a      	str	r2, [r3, #0]
	scan_array[0][1].write_func = numpad_local_dev->col0_write;
 800594e:	60da      	str	r2, [r3, #12]
	scan_array[0][2].write_func = numpad_local_dev->col0_write;
 8005950:	619a      	str	r2, [r3, #24]
	scan_array[0][3].write_func = numpad_local_dev->col0_write;
 8005952:	625a      	str	r2, [r3, #36]	; 0x24
	scan_array[0][1].read_func = numpad_local_dev->row1_read;
	scan_array[0][2].read_func = numpad_local_dev->row2_read;
	scan_array[0][3].read_func = numpad_local_dev->row3_read;

	scan_array[0][0].character = '1';
 8005954:	2231      	movs	r2, #49	; 0x31
	scan_array[0][1].read_func = numpad_local_dev->row1_read;
 8005956:	6845      	ldr	r5, [r0, #4]
	scan_array[0][2].read_func = numpad_local_dev->row2_read;
 8005958:	6884      	ldr	r4, [r0, #8]
	scan_array[0][0].character = '1';
 800595a:	721a      	strb	r2, [r3, #8]
	scan_array[0][1].character = '4';
 800595c:	2234      	movs	r2, #52	; 0x34
	scan_array[0][3].read_func = numpad_local_dev->row3_read;
 800595e:	68c1      	ldr	r1, [r0, #12]
	scan_array[0][1].character = '4';
 8005960:	751a      	strb	r2, [r3, #20]
	scan_array[0][2].character = '7';
 8005962:	2237      	movs	r2, #55	; 0x37
 8005964:	f883 2020 	strb.w	r2, [r3, #32]
	scan_array[0][3].character = '*';
 8005968:	222a      	movs	r2, #42	; 0x2a
 800596a:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c


	/*column 2*/
	scan_array[1][0].write_func = numpad_local_dev->col1_write;
 800596e:	6942      	ldr	r2, [r0, #20]
	scan_array[0][0].read_func = numpad_local_dev->row0_read;
 8005970:	605e      	str	r6, [r3, #4]
	scan_array[1][0].write_func = numpad_local_dev->col1_write;
 8005972:	631a      	str	r2, [r3, #48]	; 0x30
	scan_array[1][1].write_func = numpad_local_dev->col1_write;
 8005974:	63da      	str	r2, [r3, #60]	; 0x3c
	scan_array[1][2].write_func = numpad_local_dev->col1_write;
 8005976:	649a      	str	r2, [r3, #72]	; 0x48
	scan_array[1][3].write_func = numpad_local_dev->col1_write;
 8005978:	655a      	str	r2, [r3, #84]	; 0x54
	scan_array[1][0].read_func = numpad_local_dev->row0_read;
	scan_array[1][1].read_func = numpad_local_dev->row1_read;
	scan_array[1][2].read_func = numpad_local_dev->row2_read;
	scan_array[1][3].read_func = numpad_local_dev->row3_read;

	scan_array[1][0].character = '2';
 800597a:	2232      	movs	r2, #50	; 0x32
 800597c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	scan_array[1][1].character = '5';
 8005980:	2235      	movs	r2, #53	; 0x35
 8005982:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	scan_array[1][2].character = '8';
 8005986:	2238      	movs	r2, #56	; 0x38
 8005988:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	scan_array[1][3].character = '0';
 800598c:	2230      	movs	r2, #48	; 0x30
 800598e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

	/*column 3*/
	scan_array[2][0].write_func = numpad_local_dev->col2_write;
 8005992:	6982      	ldr	r2, [r0, #24]
	scan_array[0][1].read_func = numpad_local_dev->row1_read;
 8005994:	611d      	str	r5, [r3, #16]
	scan_array[0][2].read_func = numpad_local_dev->row2_read;
 8005996:	61dc      	str	r4, [r3, #28]
	scan_array[0][3].read_func = numpad_local_dev->row3_read;
 8005998:	6299      	str	r1, [r3, #40]	; 0x28
	scan_array[1][0].read_func = numpad_local_dev->row0_read;
 800599a:	635e      	str	r6, [r3, #52]	; 0x34
	scan_array[1][1].read_func = numpad_local_dev->row1_read;
 800599c:	641d      	str	r5, [r3, #64]	; 0x40
	scan_array[1][2].read_func = numpad_local_dev->row2_read;
 800599e:	64dc      	str	r4, [r3, #76]	; 0x4c
	scan_array[1][3].read_func = numpad_local_dev->row3_read;
 80059a0:	6599      	str	r1, [r3, #88]	; 0x58
	scan_array[2][0].write_func = numpad_local_dev->col2_write;
 80059a2:	661a      	str	r2, [r3, #96]	; 0x60
	scan_array[2][1].write_func = numpad_local_dev->col2_write;
 80059a4:	66da      	str	r2, [r3, #108]	; 0x6c
	scan_array[2][2].write_func = numpad_local_dev->col2_write;
 80059a6:	679a      	str	r2, [r3, #120]	; 0x78
	scan_array[2][3].write_func = numpad_local_dev->col2_write;
 80059a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	scan_array[2][0].read_func = numpad_local_dev->row0_read;
	scan_array[2][1].read_func = numpad_local_dev->row1_read;
	scan_array[2][2].read_func = numpad_local_dev->row2_read;
	scan_array[2][3].read_func = numpad_local_dev->row3_read;

	scan_array[2][0].character = '3';
 80059ac:	2233      	movs	r2, #51	; 0x33
 80059ae:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	scan_array[2][1].character = '6';
 80059b2:	2236      	movs	r2, #54	; 0x36
 80059b4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	scan_array[2][2].character = '9';
 80059b8:	2239      	movs	r2, #57	; 0x39
 80059ba:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	scan_array[2][3].character = '#';
 80059be:	2223      	movs	r2, #35	; 0x23

	return true;
 80059c0:	2001      	movs	r0, #1
	scan_array[2][0].read_func = numpad_local_dev->row0_read;
 80059c2:	665e      	str	r6, [r3, #100]	; 0x64
	scan_array[2][1].read_func = numpad_local_dev->row1_read;
 80059c4:	671d      	str	r5, [r3, #112]	; 0x70
	scan_array[2][2].read_func = numpad_local_dev->row2_read;
 80059c6:	67dc      	str	r4, [r3, #124]	; 0x7c
	scan_array[2][3].read_func = numpad_local_dev->row3_read;
 80059c8:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	scan_array[2][3].character = '#';
 80059cc:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
}
 80059d0:	bd70      	pop	{r4, r5, r6, pc}
 80059d2:	bf00      	nop
 80059d4:	20002d28 	.word	0x20002d28
 80059d8:	20002d2c 	.word	0x20002d2c

080059dc <Numpad_scan>:


char Numpad_scan()
{
 80059dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059e0:	4c20      	ldr	r4, [pc, #128]	; (8005a64 <Numpad_scan+0x88>)
 80059e2:	2500      	movs	r5, #0
 80059e4:	46a0      	mov	r8, r4
	for(uint8_t i = 0;i < COLUMN_NUM;i++)
	{
		for(uint8_t j = 0;j < ROW_NUM;j++)
		{
			scan_array[i][j].write_func(false);
			numpad_local_dev->delay(10);
 80059e6:	f8df 9080 	ldr.w	r9, [pc, #128]	; 8005a68 <Numpad_scan+0x8c>
{
 80059ea:	4627      	mov	r7, r4
 80059ec:	2600      	movs	r6, #0
			scan_array[i][j].write_func(false);
 80059ee:	2000      	movs	r0, #0
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	4798      	blx	r3
			numpad_local_dev->delay(10);
 80059f4:	f8d9 3000 	ldr.w	r3, [r9]
 80059f8:	200a      	movs	r0, #10
 80059fa:	69db      	ldr	r3, [r3, #28]
 80059fc:	4798      	blx	r3
			if(!scan_array[i][j].read_func())
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4798      	blx	r3
 8005a02:	4682      	mov	sl, r0
 8005a04:	b9e0      	cbnz	r0, 8005a40 <Numpad_scan+0x64>
			{
				numpad_local_dev->buzzer(true);
 8005a06:	f8d9 3000 	ldr.w	r3, [r9]
 8005a0a:	2001      	movs	r0, #1
 8005a0c:	6a1b      	ldr	r3, [r3, #32]
 8005a0e:	4798      	blx	r3
				numpad_local_dev->delay(100);
 8005a10:	f8d9 3000 	ldr.w	r3, [r9]
 8005a14:	2064      	movs	r0, #100	; 0x64
 8005a16:	69db      	ldr	r3, [r3, #28]
 8005a18:	4798      	blx	r3
				numpad_local_dev->buzzer(false);
 8005a1a:	f8d9 3000 	ldr.w	r3, [r9]
 8005a1e:	4650      	mov	r0, sl
 8005a20:	6a1b      	ldr	r3, [r3, #32]
 8005a22:	4798      	blx	r3
				scan_array[i][0].write_func(true);
 8005a24:	2330      	movs	r3, #48	; 0x30
 8005a26:	fb03 f405 	mul.w	r4, r3, r5
 8005a2a:	2001      	movs	r0, #1
 8005a2c:	f858 3004 	ldr.w	r3, [r8, r4]
 8005a30:	4798      	blx	r3
				return scan_array[i][j].character;
 8005a32:	230c      	movs	r3, #12
 8005a34:	fb03 4406 	mla	r4, r3, r6, r4
 8005a38:	4444      	add	r4, r8
 8005a3a:	7a20      	ldrb	r0, [r4, #8]

		scan_array[i][0].write_func(true);
	}

	return 'X';
}
 8005a3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for(uint8_t j = 0;j < ROW_NUM;j++)
 8005a40:	3601      	adds	r6, #1
 8005a42:	2e04      	cmp	r6, #4
 8005a44:	f107 070c 	add.w	r7, r7, #12
 8005a48:	d1d1      	bne.n	80059ee <Numpad_scan+0x12>
		scan_array[i][0].write_func(true);
 8005a4a:	2330      	movs	r3, #48	; 0x30
 8005a4c:	436b      	muls	r3, r5
 8005a4e:	2001      	movs	r0, #1
 8005a50:	f858 3003 	ldr.w	r3, [r8, r3]
	for(uint8_t i = 0;i < COLUMN_NUM;i++)
 8005a54:	3501      	adds	r5, #1
		scan_array[i][0].write_func(true);
 8005a56:	4798      	blx	r3
	for(uint8_t i = 0;i < COLUMN_NUM;i++)
 8005a58:	2d03      	cmp	r5, #3
 8005a5a:	f104 0430 	add.w	r4, r4, #48	; 0x30
 8005a5e:	d1c4      	bne.n	80059ea <Numpad_scan+0xe>
	return 'X';
 8005a60:	2058      	movs	r0, #88	; 0x58
 8005a62:	e7eb      	b.n	8005a3c <Numpad_scan+0x60>
 8005a64:	20002d2c 	.word	0x20002d2c
 8005a68:	20002d28 	.word	0x20002d28

08005a6c <init_task>:

	configASSERT(result == pdPASS);
}

void init_task(void * params)
{
 8005a6c:	b508      	push	{r3, lr}
	while(1)
	{
		interface_init();
 8005a6e:	f7ff fb2f 	bl	80050d0 <interface_init>

		/*Call the initialising function of each task*/
		manager_task_create();
 8005a72:	f000 f821 	bl	8005ab8 <manager_task_create>
		uart_task_create();
 8005a76:	f000 f9f1 	bl	8005e5c <uart_task_create>
		gsm_task_create();
 8005a7a:	f000 faa5 	bl	8005fc8 <gsm_task_create>
		io_task_create();
 8005a7e:	f000 fb09 	bl	8006094 <io_task_create>
		lcd_task_create();
 8005a82:	f000 fb89 	bl	8006198 <lcd_task_create>
		numpad_task_create();
 8005a86:	f000 fc59 	bl	800633c <numpad_task_create>

		/*Delete the init_task after initialisation*/
		vTaskDelete(NULL);
 8005a8a:	2000      	movs	r0, #0
 8005a8c:	f7fe fdc4 	bl	8004618 <vTaskDelete>
	while(1)
 8005a90:	e7ed      	b.n	8005a6e <init_task+0x2>
	...

08005a94 <init_task_create>:
{
 8005a94:	b507      	push	{r0, r1, r2, lr}
	result = xTaskCreate(init_task,
 8005a96:	2300      	movs	r3, #0
 8005a98:	2201      	movs	r2, #1
 8005a9a:	4905      	ldr	r1, [pc, #20]	; (8005ab0 <init_task_create+0x1c>)
 8005a9c:	e9cd 2300 	strd	r2, r3, [sp]
 8005aa0:	4804      	ldr	r0, [pc, #16]	; (8005ab4 <init_task_create+0x20>)
 8005aa2:	2264      	movs	r2, #100	; 0x64
 8005aa4:	f7fe fcd6 	bl	8004454 <xTaskCreate>
}
 8005aa8:	b003      	add	sp, #12
 8005aaa:	f85d fb04 	ldr.w	pc, [sp], #4
 8005aae:	bf00      	nop
 8005ab0:	08007740 	.word	0x08007740
 8005ab4:	08005a6d 	.word	0x08005a6d

08005ab8 <manager_task_create>:

void buzzer_sound();
void manager_task(void * params);

void manager_task_create()
{
 8005ab8:	b507      	push	{r0, r1, r2, lr}
	BaseType_t result = pdPASS;
	result = xTaskCreate(manager_task,
 8005aba:	2300      	movs	r3, #0
 8005abc:	2202      	movs	r2, #2
 8005abe:	4905      	ldr	r1, [pc, #20]	; (8005ad4 <manager_task_create+0x1c>)
 8005ac0:	e9cd 2300 	strd	r2, r3, [sp]
 8005ac4:	4804      	ldr	r0, [pc, #16]	; (8005ad8 <manager_task_create+0x20>)
 8005ac6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005aca:	f7fe fcc3 	bl	8004454 <xTaskCreate>
				NULL,
				2,
				NULL);

	configASSERT(result == pdPASS);
}
 8005ace:	b003      	add	sp, #12
 8005ad0:	f85d fb04 	ldr.w	pc, [sp], #4
 8005ad4:	08007747 	.word	0x08007747
 8005ad8:	08005b21 	.word	0x08005b21

08005adc <buzzer_sound>:
}


void buzzer_sound()
{
	TIM4->ARR = 137;
 8005adc:	2289      	movs	r2, #137	; 0x89
{
 8005ade:	b538      	push	{r3, r4, r5, lr}
	TIM4->ARR = 137;
 8005ae0:	4b0c      	ldr	r3, [pc, #48]	; (8005b14 <buzzer_sound+0x38>)
	TIM4->CCR2 = 68;
 8005ae2:	240a      	movs	r4, #10
	TIM4->ARR = 137;
 8005ae4:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM4->CCR2 = 68;
 8005ae6:	2244      	movs	r2, #68	; 0x44
	for(uint8_t i = 0;i < 10;i++)
	{
		HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8005ae8:	4d0b      	ldr	r5, [pc, #44]	; (8005b18 <buzzer_sound+0x3c>)
	TIM4->CCR2 = 68;
 8005aea:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8005aec:	2104      	movs	r1, #4
 8005aee:	4628      	mov	r0, r5
 8005af0:	f7fd fe43 	bl	800377a <HAL_TIM_PWM_Start>
		vTaskDelay(pdMS_TO_TICKS(80));
 8005af4:	2050      	movs	r0, #80	; 0x50
 8005af6:	f7fe ff6f 	bl	80049d8 <vTaskDelay>
		HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 8005afa:	2104      	movs	r1, #4
 8005afc:	4628      	mov	r0, r5
 8005afe:	f7fd fe3e 	bl	800377e <HAL_TIM_PWM_Stop>
	for(uint8_t i = 0;i < 10;i++)
 8005b02:	3c01      	subs	r4, #1
		vTaskDelay(pdMS_TO_TICKS(80));
 8005b04:	2050      	movs	r0, #80	; 0x50
 8005b06:	f7fe ff67 	bl	80049d8 <vTaskDelay>
	for(uint8_t i = 0;i < 10;i++)
 8005b0a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 8005b0e:	d1ed      	bne.n	8005aec <buzzer_sound+0x10>
	}
}
 8005b10:	bd38      	pop	{r3, r4, r5, pc}
 8005b12:	bf00      	nop
 8005b14:	40000800 	.word	0x40000800
 8005b18:	20000268 	.word	0x20000268
 8005b1c:	00000000 	.word	0x00000000

08005b20 <manager_task>:
{
 8005b20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
				if(io_data.vbat >= 3.2)
 8005b24:	a7b2      	add	r7, pc, #712	; (adr r7, 8005df0 <manager_task+0x2d0>)
 8005b26:	e9d7 6700 	ldrd	r6, r7, [r7]
	io_state_data 	io_data 				= {0};
 8005b2a:	2400      	movs	r4, #0
{
 8005b2c:	b08f      	sub	sp, #60	; 0x3c
	lcd_data 		lcd_data 				= {0};
 8005b2e:	2222      	movs	r2, #34	; 0x22
 8005b30:	2100      	movs	r1, #0
 8005b32:	a805      	add	r0, sp, #20
 8005b34:	f000 fc4c 	bl	80063d0 <memset>
	io_state_data 	io_data 				= {0};
 8005b38:	e9cd 4403 	strd	r4, r4, [sp, #12]
		switch(system_state)
 8005b3c:	f8df 82b8 	ldr.w	r8, [pc, #696]	; 8005df8 <manager_task+0x2d8>
	char			key_buffer[MAX_KEY_CNT]	= {0};
 8005b40:	9401      	str	r4, [sp, #4]
 8005b42:	f8ad 4008 	strh.w	r4, [sp, #8]
 8005b46:	f88d 400a 	strb.w	r4, [sp, #10]
		switch(system_state)
 8005b4a:	f898 3000 	ldrb.w	r3, [r8]
 8005b4e:	2b04      	cmp	r3, #4
 8005b50:	d8fd      	bhi.n	8005b4e <manager_task+0x2e>
 8005b52:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005b56:	0005      	.short	0x0005
 8005b58:	009d002e 	.word	0x009d002e
 8005b5c:	008900f3 	.word	0x008900f3
				xSemaphoreTake(numpad_mutex, pdMS_TO_TICKS(500));
 8005b60:	4ba6      	ldr	r3, [pc, #664]	; (8005dfc <manager_task+0x2dc>)
 8005b62:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005b66:	6818      	ldr	r0, [r3, #0]
 8005b68:	f7fe fb49 	bl	80041fe <xQueueSemaphoreTake>
				memcpy(lcd_data.text, "HOME ALARM V1.0", 15);
 8005b6c:	4ba4      	ldr	r3, [pc, #656]	; (8005e00 <manager_task+0x2e0>)
 8005b6e:	aa05      	add	r2, sp, #20
 8005b70:	f103 0c08 	add.w	ip, r3, #8
 8005b74:	4615      	mov	r5, r2
 8005b76:	6818      	ldr	r0, [r3, #0]
 8005b78:	6859      	ldr	r1, [r3, #4]
 8005b7a:	3308      	adds	r3, #8
 8005b7c:	c503      	stmia	r5!, {r0, r1}
 8005b7e:	4563      	cmp	r3, ip
 8005b80:	462a      	mov	r2, r5
 8005b82:	d1f7      	bne.n	8005b74 <manager_task+0x54>
 8005b84:	6818      	ldr	r0, [r3, #0]
 8005b86:	8899      	ldrh	r1, [r3, #4]
 8005b88:	799b      	ldrb	r3, [r3, #6]
 8005b8a:	6028      	str	r0, [r5, #0]
 8005b8c:	80a9      	strh	r1, [r5, #4]
 8005b8e:	71ab      	strb	r3, [r5, #6]
				lcd_data.clr = true;
 8005b90:	2501      	movs	r5, #1
				xQueueSend(lcd_queue, (void*)&lcd_data, pdMS_TO_TICKS(100));
 8005b92:	489c      	ldr	r0, [pc, #624]	; (8005e04 <manager_task+0x2e4>)
 8005b94:	2300      	movs	r3, #0
 8005b96:	2264      	movs	r2, #100	; 0x64
 8005b98:	a905      	add	r1, sp, #20
 8005b9a:	6800      	ldr	r0, [r0, #0]
				lcd_data.clr = true;
 8005b9c:	f88d 5034 	strb.w	r5, [sp, #52]	; 0x34
				xQueueSend(lcd_queue, (void*)&lcd_data, pdMS_TO_TICKS(100));
 8005ba0:	f7fe fa19 	bl	8003fd6 <xQueueGenericSend>
				vTaskDelay(pdMS_TO_TICKS(5000));
 8005ba4:	f241 3088 	movw	r0, #5000	; 0x1388
 8005ba8:	f7fe ff16 	bl	80049d8 <vTaskDelay>
				system_state = STATE_INIT;
 8005bac:	f888 5000 	strb.w	r5, [r8]
				break;
 8005bb0:	e7cb      	b.n	8005b4a <manager_task+0x2a>
				xQueueReceive(io_queue, (void*)&io_data, pdMS_TO_TICKS(portMAX_DELAY));
 8005bb2:	4b95      	ldr	r3, [pc, #596]	; (8005e08 <manager_task+0x2e8>)
 8005bb4:	4a95      	ldr	r2, [pc, #596]	; (8005e0c <manager_task+0x2ec>)
 8005bb6:	6818      	ldr	r0, [r3, #0]
 8005bb8:	a903      	add	r1, sp, #12
 8005bba:	f7fe faa9 	bl	8004110 <xQueueReceive>
				memset(lcd_data.text, '\0', LCD_BUFF_MAX_SIZE);
 8005bbe:	2220      	movs	r2, #32
 8005bc0:	2100      	movs	r1, #0
 8005bc2:	a805      	add	r0, sp, #20
 8005bc4:	f000 fc04 	bl	80063d0 <memset>
				if(io_data.vbat >= 3.2)
 8005bc8:	9803      	ldr	r0, [sp, #12]
 8005bca:	f7fa fd79 	bl	80006c0 <__aeabi_f2d>
 8005bce:	4632      	mov	r2, r6
 8005bd0:	463b      	mov	r3, r7
 8005bd2:	f7fa fe41 	bl	8000858 <__aeabi_dcmpge>
 8005bd6:	2800      	cmp	r0, #0
 8005bd8:	d04a      	beq.n	8005c70 <manager_task+0x150>
					memcpy(lcd_data.text, "VBAT OK", 7);
 8005bda:	4b8d      	ldr	r3, [pc, #564]	; (8005e10 <manager_task+0x2f0>)
 8005bdc:	6818      	ldr	r0, [r3, #0]
 8005bde:	889a      	ldrh	r2, [r3, #4]
 8005be0:	799b      	ldrb	r3, [r3, #6]
 8005be2:	9005      	str	r0, [sp, #20]
 8005be4:	f8ad 2018 	strh.w	r2, [sp, #24]
 8005be8:	f88d 301a 	strb.w	r3, [sp, #26]
				xQueueSend(lcd_queue, (void*)&lcd_data, pdMS_TO_TICKS(100));
 8005bec:	4d85      	ldr	r5, [pc, #532]	; (8005e04 <manager_task+0x2e4>)
 8005bee:	2300      	movs	r3, #0
 8005bf0:	2264      	movs	r2, #100	; 0x64
 8005bf2:	a905      	add	r1, sp, #20
 8005bf4:	6828      	ldr	r0, [r5, #0]
 8005bf6:	f7fe f9ee 	bl	8003fd6 <xQueueGenericSend>
				vTaskDelay(pdMS_TO_TICKS(2000));
 8005bfa:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005bfe:	f7fe feeb 	bl	80049d8 <vTaskDelay>
				if(io_data.io_state == 0)
 8005c02:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d13a      	bne.n	8005c80 <manager_task+0x160>
					memcpy(lcd_data.text, "I/O OK", 7);
 8005c0a:	4b82      	ldr	r3, [pc, #520]	; (8005e14 <manager_task+0x2f4>)
 8005c0c:	6818      	ldr	r0, [r3, #0]
 8005c0e:	889a      	ldrh	r2, [r3, #4]
 8005c10:	799b      	ldrb	r3, [r3, #6]
 8005c12:	9005      	str	r0, [sp, #20]
 8005c14:	f8ad 2018 	strh.w	r2, [sp, #24]
 8005c18:	f88d 301a 	strb.w	r3, [sp, #26]
				xQueueSend(lcd_queue, (void*)&lcd_data, pdMS_TO_TICKS(100));
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	2264      	movs	r2, #100	; 0x64
 8005c20:	a905      	add	r1, sp, #20
 8005c22:	6828      	ldr	r0, [r5, #0]
 8005c24:	f7fe f9d7 	bl	8003fd6 <xQueueGenericSend>
				vTaskDelay(pdMS_TO_TICKS(2000));
 8005c28:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005c2c:	f7fe fed4 	bl	80049d8 <vTaskDelay>
				memset(lcd_data.text, '\0', LCD_BUFF_MAX_SIZE);
 8005c30:	2218      	movs	r2, #24
 8005c32:	2100      	movs	r1, #0
 8005c34:	a807      	add	r0, sp, #28
 8005c36:	f000 fbcb 	bl	80063d0 <memset>
				memcpy(lcd_data.text, "DISARMED", 9);
 8005c3a:	4a77      	ldr	r2, [pc, #476]	; (8005e18 <manager_task+0x2f8>)
 8005c3c:	ab05      	add	r3, sp, #20
 8005c3e:	6810      	ldr	r0, [r2, #0]
 8005c40:	6851      	ldr	r1, [r2, #4]
 8005c42:	7a12      	ldrb	r2, [r2, #8]
 8005c44:	c303      	stmia	r3!, {r0, r1}
 8005c46:	701a      	strb	r2, [r3, #0]
				lcd_data.crlf = true;
 8005c48:	2301      	movs	r3, #1
				xQueueSend(lcd_queue, (void*)&lcd_data, pdMS_TO_TICKS(100));
 8005c4a:	2264      	movs	r2, #100	; 0x64
				lcd_data.crlf = true;
 8005c4c:	f88d 3035 	strb.w	r3, [sp, #53]	; 0x35
				xQueueSend(lcd_queue, (void*)&lcd_data, pdMS_TO_TICKS(100));
 8005c50:	a905      	add	r1, sp, #20
 8005c52:	2300      	movs	r3, #0
 8005c54:	6828      	ldr	r0, [r5, #0]
 8005c56:	f7fe f9be 	bl	8003fd6 <xQueueGenericSend>
				xSemaphoreGive(numpad_mutex);
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	4867      	ldr	r0, [pc, #412]	; (8005dfc <manager_task+0x2dc>)
 8005c5e:	461a      	mov	r2, r3
 8005c60:	4619      	mov	r1, r3
 8005c62:	6800      	ldr	r0, [r0, #0]
 8005c64:	f7fe f9b7 	bl	8003fd6 <xQueueGenericSend>
				system_state = STATE_DISARMED;
 8005c68:	2302      	movs	r3, #2
 8005c6a:	f888 3000 	strb.w	r3, [r8]
				break;
 8005c6e:	e76c      	b.n	8005b4a <manager_task+0x2a>
					memcpy(lcd_data.text, "VBAT ERROR", 10);
 8005c70:	4a6a      	ldr	r2, [pc, #424]	; (8005e1c <manager_task+0x2fc>)
 8005c72:	ab05      	add	r3, sp, #20
 8005c74:	6810      	ldr	r0, [r2, #0]
 8005c76:	6851      	ldr	r1, [r2, #4]
 8005c78:	8912      	ldrh	r2, [r2, #8]
 8005c7a:	c303      	stmia	r3!, {r0, r1}
 8005c7c:	801a      	strh	r2, [r3, #0]
 8005c7e:	e7b5      	b.n	8005bec <manager_task+0xcc>
					memcpy(lcd_data.text, "I/O ERROR", 9);
 8005c80:	4a67      	ldr	r2, [pc, #412]	; (8005e20 <manager_task+0x300>)
 8005c82:	ab05      	add	r3, sp, #20
 8005c84:	6810      	ldr	r0, [r2, #0]
 8005c86:	6851      	ldr	r1, [r2, #4]
 8005c88:	7a12      	ldrb	r2, [r2, #8]
 8005c8a:	c303      	stmia	r3!, {r0, r1}
 8005c8c:	701a      	strb	r2, [r3, #0]
 8005c8e:	e7c5      	b.n	8005c1c <manager_task+0xfc>
				if(xQueueReceive(key_queue, (void*)&key, pdMS_TO_TICKS(100)) == pdTRUE)
 8005c90:	4b64      	ldr	r3, [pc, #400]	; (8005e24 <manager_task+0x304>)
 8005c92:	2264      	movs	r2, #100	; 0x64
 8005c94:	6818      	ldr	r0, [r3, #0]
 8005c96:	f10d 0103 	add.w	r1, sp, #3
 8005c9a:	f7fe fa39 	bl	8004110 <xQueueReceive>
 8005c9e:	2801      	cmp	r0, #1
 8005ca0:	4681      	mov	r9, r0
 8005ca2:	f47f af52 	bne.w	8005b4a <manager_task+0x2a>
					key_buffer[key_cnt] = key;
 8005ca6:	f104 0338 	add.w	r3, r4, #56	; 0x38
					key_cnt++;
 8005caa:	3401      	adds	r4, #1
					key_buffer[key_cnt] = key;
 8005cac:	f89d 2003 	ldrb.w	r2, [sp, #3]
					key_cnt++;
 8005cb0:	b2e4      	uxtb	r4, r4
					key_buffer[key_cnt] = key;
 8005cb2:	446b      	add	r3, sp
					if(key_cnt > MAX_KEY_CNT)
 8005cb4:	2c07      	cmp	r4, #7
					key_buffer[key_cnt] = key;
 8005cb6:	f803 2c34 	strb.w	r2, [r3, #-52]
					if(key_cnt > MAX_KEY_CNT)
 8005cba:	d919      	bls.n	8005cf0 <manager_task+0x1d0>
						memset(key_buffer, '\0', sizeof(key_buffer));
 8005cbc:	2400      	movs	r4, #0
						memset(lcd_data.text, '\0', LCD_BUFF_MAX_SIZE);
 8005cbe:	2218      	movs	r2, #24
 8005cc0:	4621      	mov	r1, r4
 8005cc2:	a807      	add	r0, sp, #28
						memset(key_buffer, '\0', sizeof(key_buffer));
 8005cc4:	9401      	str	r4, [sp, #4]
 8005cc6:	f8cd 4007 	str.w	r4, [sp, #7]
						memset(lcd_data.text, '\0', LCD_BUFF_MAX_SIZE);
 8005cca:	f000 fb81 	bl	80063d0 <memset>
						memcpy(lcd_data.text, "DISARMED", 9);
 8005cce:	4a52      	ldr	r2, [pc, #328]	; (8005e18 <manager_task+0x2f8>)
 8005cd0:	ab05      	add	r3, sp, #20
 8005cd2:	6810      	ldr	r0, [r2, #0]
 8005cd4:	6851      	ldr	r1, [r2, #4]
 8005cd6:	7a12      	ldrb	r2, [r2, #8]
 8005cd8:	c303      	stmia	r3!, {r0, r1}
						xQueueSend(lcd_queue, (void*)&lcd_data, pdMS_TO_TICKS(100));
 8005cda:	484a      	ldr	r0, [pc, #296]	; (8005e04 <manager_task+0x2e4>)
						memcpy(lcd_data.text, "DISARMED", 9);
 8005cdc:	701a      	strb	r2, [r3, #0]
						xQueueSend(lcd_queue, (void*)&lcd_data, pdMS_TO_TICKS(100));
 8005cde:	a905      	add	r1, sp, #20
 8005ce0:	4623      	mov	r3, r4
 8005ce2:	2264      	movs	r2, #100	; 0x64
 8005ce4:	6800      	ldr	r0, [r0, #0]
						lcd_data.crlf = true;
 8005ce6:	f88d 9035 	strb.w	r9, [sp, #53]	; 0x35
						xQueueSend(lcd_queue, (void*)&lcd_data, pdMS_TO_TICKS(100));
 8005cea:	f7fe f974 	bl	8003fd6 <xQueueGenericSend>
 8005cee:	e72c      	b.n	8005b4a <manager_task+0x2a>
					else if(strcmp(key_buffer, "*1234#") == 0)
 8005cf0:	494d      	ldr	r1, [pc, #308]	; (8005e28 <manager_task+0x308>)
 8005cf2:	a801      	add	r0, sp, #4
 8005cf4:	f7fa fa44 	bl	8000180 <strcmp>
 8005cf8:	4605      	mov	r5, r0
 8005cfa:	2800      	cmp	r0, #0
 8005cfc:	f47f af25 	bne.w	8005b4a <manager_task+0x2a>
						memset(lcd_data.text, '\0', LCD_BUFF_MAX_SIZE);
 8005d00:	4601      	mov	r1, r0
						memset(key_buffer, '\0', sizeof(key_buffer));
 8005d02:	9001      	str	r0, [sp, #4]
						memset(lcd_data.text, '\0', LCD_BUFF_MAX_SIZE);
 8005d04:	221c      	movs	r2, #28
						memset(key_buffer, '\0', sizeof(key_buffer));
 8005d06:	f8cd 0007 	str.w	r0, [sp, #7]
						memset(lcd_data.text, '\0', LCD_BUFF_MAX_SIZE);
 8005d0a:	a806      	add	r0, sp, #24
 8005d0c:	f000 fb60 	bl	80063d0 <memset>
						memcpy(lcd_data.text, "ARMED", 6);
 8005d10:	4b46      	ldr	r3, [pc, #280]	; (8005e2c <manager_task+0x30c>)
						xQueueSend(lcd_queue, (void*)&lcd_data, pdMS_TO_TICKS(100));
 8005d12:	2264      	movs	r2, #100	; 0x64
						memcpy(lcd_data.text, "ARMED", 6);
 8005d14:	6818      	ldr	r0, [r3, #0]
 8005d16:	889b      	ldrh	r3, [r3, #4]
 8005d18:	9005      	str	r0, [sp, #20]
						xQueueSend(lcd_queue, (void*)&lcd_data, pdMS_TO_TICKS(100));
 8005d1a:	483a      	ldr	r0, [pc, #232]	; (8005e04 <manager_task+0x2e4>)
						memcpy(lcd_data.text, "ARMED", 6);
 8005d1c:	f8ad 3018 	strh.w	r3, [sp, #24]
						xQueueSend(lcd_queue, (void*)&lcd_data, pdMS_TO_TICKS(100));
 8005d20:	a905      	add	r1, sp, #20
 8005d22:	462b      	mov	r3, r5
 8005d24:	6800      	ldr	r0, [r0, #0]
						lcd_data.crlf = true;
 8005d26:	f88d 9035 	strb.w	r9, [sp, #53]	; 0x35
						xQueueSend(lcd_queue, (void*)&lcd_data, pdMS_TO_TICKS(100));
 8005d2a:	f7fe f954 	bl	8003fd6 <xQueueGenericSend>
						buzzer_sound();
 8005d2e:	f7ff fed5 	bl	8005adc <buzzer_sound>
						system_state = STATE_ARMED;
 8005d32:	2303      	movs	r3, #3
						key_cnt = 0;
 8005d34:	462c      	mov	r4, r5
						system_state = STATE_ARMED;
 8005d36:	f888 3000 	strb.w	r3, [r8]
 8005d3a:	e706      	b.n	8005b4a <manager_task+0x2a>
				if(xQueueReceive(key_queue, (void*)&key, pdMS_TO_TICKS(100)) == pdTRUE)
 8005d3c:	4b39      	ldr	r3, [pc, #228]	; (8005e24 <manager_task+0x304>)
 8005d3e:	2264      	movs	r2, #100	; 0x64
 8005d40:	6818      	ldr	r0, [r3, #0]
 8005d42:	f10d 0103 	add.w	r1, sp, #3
 8005d46:	f7fe f9e3 	bl	8004110 <xQueueReceive>
 8005d4a:	2801      	cmp	r0, #1
 8005d4c:	4681      	mov	r9, r0
 8005d4e:	d122      	bne.n	8005d96 <manager_task+0x276>
					key_buffer[key_cnt] = key;
 8005d50:	f104 0338 	add.w	r3, r4, #56	; 0x38
					key_cnt++;
 8005d54:	3401      	adds	r4, #1
					key_buffer[key_cnt] = key;
 8005d56:	f89d 2003 	ldrb.w	r2, [sp, #3]
					key_cnt++;
 8005d5a:	b2e4      	uxtb	r4, r4
					key_buffer[key_cnt] = key;
 8005d5c:	446b      	add	r3, sp
					if(key_cnt > MAX_KEY_CNT)
 8005d5e:	2c07      	cmp	r4, #7
					key_buffer[key_cnt] = key;
 8005d60:	f803 2c34 	strb.w	r2, [r3, #-52]
					if(key_cnt > MAX_KEY_CNT)
 8005d64:	d91c      	bls.n	8005da0 <manager_task+0x280>
						memset(key_buffer, '\0', sizeof(key_buffer));
 8005d66:	2400      	movs	r4, #0
						memset(lcd_data.text, '\0', LCD_BUFF_MAX_SIZE);
 8005d68:	221c      	movs	r2, #28
 8005d6a:	4621      	mov	r1, r4
 8005d6c:	a806      	add	r0, sp, #24
						memset(key_buffer, '\0', sizeof(key_buffer));
 8005d6e:	9401      	str	r4, [sp, #4]
 8005d70:	f8cd 4007 	str.w	r4, [sp, #7]
						memset(lcd_data.text, '\0', LCD_BUFF_MAX_SIZE);
 8005d74:	f000 fb2c 	bl	80063d0 <memset>
						memcpy(lcd_data.text, "ARMED", 6);
 8005d78:	4b2c      	ldr	r3, [pc, #176]	; (8005e2c <manager_task+0x30c>)
						xQueueSend(lcd_queue, (void*)&lcd_data, pdMS_TO_TICKS(100));
 8005d7a:	2264      	movs	r2, #100	; 0x64
						memcpy(lcd_data.text, "ARMED", 6);
 8005d7c:	6818      	ldr	r0, [r3, #0]
 8005d7e:	889b      	ldrh	r3, [r3, #4]
 8005d80:	9005      	str	r0, [sp, #20]
						xQueueSend(lcd_queue, (void*)&lcd_data, pdMS_TO_TICKS(100));
 8005d82:	4820      	ldr	r0, [pc, #128]	; (8005e04 <manager_task+0x2e4>)
						memcpy(lcd_data.text, "ARMED", 6);
 8005d84:	f8ad 3018 	strh.w	r3, [sp, #24]
						xQueueSend(lcd_queue, (void*)&lcd_data, pdMS_TO_TICKS(100));
 8005d88:	6800      	ldr	r0, [r0, #0]
 8005d8a:	4623      	mov	r3, r4
 8005d8c:	a905      	add	r1, sp, #20
						lcd_data.crlf = true;
 8005d8e:	f88d 9035 	strb.w	r9, [sp, #53]	; 0x35
						xQueueSend(lcd_queue, (void*)&lcd_data, pdMS_TO_TICKS(100));
 8005d92:	f7fe f920 	bl	8003fd6 <xQueueGenericSend>
				vTaskDelay(pdMS_TO_TICKS(500));
 8005d96:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005d9a:	f7fe fe1d 	bl	80049d8 <vTaskDelay>
				break;
 8005d9e:	e6d4      	b.n	8005b4a <manager_task+0x2a>
					else if(strcmp(key_buffer, "*1234#") == 0)
 8005da0:	4921      	ldr	r1, [pc, #132]	; (8005e28 <manager_task+0x308>)
 8005da2:	a801      	add	r0, sp, #4
 8005da4:	f7fa f9ec 	bl	8000180 <strcmp>
 8005da8:	4605      	mov	r5, r0
 8005daa:	2800      	cmp	r0, #0
 8005dac:	d1f3      	bne.n	8005d96 <manager_task+0x276>
						memset(lcd_data.text, '\0', LCD_BUFF_MAX_SIZE);
 8005dae:	4601      	mov	r1, r0
						memset(key_buffer, '\0', sizeof(key_buffer));
 8005db0:	9001      	str	r0, [sp, #4]
						memset(lcd_data.text, '\0', LCD_BUFF_MAX_SIZE);
 8005db2:	2218      	movs	r2, #24
						memset(key_buffer, '\0', sizeof(key_buffer));
 8005db4:	f8cd 0007 	str.w	r0, [sp, #7]
						memset(lcd_data.text, '\0', LCD_BUFF_MAX_SIZE);
 8005db8:	a807      	add	r0, sp, #28
 8005dba:	f000 fb09 	bl	80063d0 <memset>
						memcpy(lcd_data.text, "DISARMED", 9);
 8005dbe:	4a16      	ldr	r2, [pc, #88]	; (8005e18 <manager_task+0x2f8>)
 8005dc0:	ab05      	add	r3, sp, #20
 8005dc2:	6810      	ldr	r0, [r2, #0]
 8005dc4:	6851      	ldr	r1, [r2, #4]
 8005dc6:	7a12      	ldrb	r2, [r2, #8]
 8005dc8:	c303      	stmia	r3!, {r0, r1}
						xQueueSend(lcd_queue, (void*)&lcd_data, pdMS_TO_TICKS(100));
 8005dca:	480e      	ldr	r0, [pc, #56]	; (8005e04 <manager_task+0x2e4>)
						memcpy(lcd_data.text, "DISARMED", 9);
 8005dcc:	701a      	strb	r2, [r3, #0]
						xQueueSend(lcd_queue, (void*)&lcd_data, pdMS_TO_TICKS(100));
 8005dce:	a905      	add	r1, sp, #20
 8005dd0:	462b      	mov	r3, r5
 8005dd2:	2264      	movs	r2, #100	; 0x64
 8005dd4:	6800      	ldr	r0, [r0, #0]
						lcd_data.crlf = true;
 8005dd6:	f88d 9035 	strb.w	r9, [sp, #53]	; 0x35
						xQueueSend(lcd_queue, (void*)&lcd_data, pdMS_TO_TICKS(100));
 8005dda:	f7fe f8fc 	bl	8003fd6 <xQueueGenericSend>
						buzzer_sound();
 8005dde:	f7ff fe7d 	bl	8005adc <buzzer_sound>
						system_state = STATE_DISARMED;
 8005de2:	2302      	movs	r3, #2
						key_cnt = 0;
 8005de4:	462c      	mov	r4, r5
						system_state = STATE_DISARMED;
 8005de6:	f888 3000 	strb.w	r3, [r8]
 8005dea:	e7d4      	b.n	8005d96 <manager_task+0x276>
 8005dec:	f3af 8000 	nop.w
 8005df0:	9999999a 	.word	0x9999999a
 8005df4:	40099999 	.word	0x40099999
 8005df8:	20002dbc 	.word	0x20002dbc
 8005dfc:	20002c64 	.word	0x20002c64
 8005e00:	08007751 	.word	0x08007751
 8005e04:	20002c60 	.word	0x20002c60
 8005e08:	20002c58 	.word	0x20002c58
 8005e0c:	00418936 	.word	0x00418936
 8005e10:	08007761 	.word	0x08007761
 8005e14:	08007774 	.word	0x08007774
 8005e18:	08007785 	.word	0x08007785
 8005e1c:	08007769 	.word	0x08007769
 8005e20:	0800777b 	.word	0x0800777b
 8005e24:	20002c5c 	.word	0x20002c5c
 8005e28:	0800778e 	.word	0x0800778e
 8005e2c:	08007788 	.word	0x08007788

08005e30 <uart_task>:

	configASSERT(result == pdPASS);
}

void uart_task(void * params)
{
 8005e30:	b510      	push	{r4, lr}
	taskENTER_CRITICAL();
 8005e32:	f7fe ffdf 	bl	8004df4 <vPortEnterCritical>
	HAL_StatusTypeDef status = HAL_ERROR;
	status = HAL_UART_Receive_DMA(&huart2, &data_byte, 1);
 8005e36:	2201      	movs	r2, #1
 8005e38:	4905      	ldr	r1, [pc, #20]	; (8005e50 <uart_task+0x20>)
 8005e3a:	4806      	ldr	r0, [pc, #24]	; (8005e54 <uart_task+0x24>)
 8005e3c:	f7fd ff84 	bl	8003d48 <HAL_UART_Receive_DMA>
	taskEXIT_CRITICAL();
 8005e40:	f7fe ffe8 	bl	8004e14 <vPortExitCritical>

	while(1)
	{
		/*Wait for data on the uart*/
		vTaskDelay(pdMS_TO_TICKS(portMAX_DELAY));
 8005e44:	4c04      	ldr	r4, [pc, #16]	; (8005e58 <uart_task+0x28>)
 8005e46:	4620      	mov	r0, r4
 8005e48:	f7fe fdc6 	bl	80049d8 <vTaskDelay>
	while(1)
 8005e4c:	e7fb      	b.n	8005e46 <uart_task+0x16>
 8005e4e:	bf00      	nop
 8005e50:	20002dbd 	.word	0x20002dbd
 8005e54:	200002ec 	.word	0x200002ec
 8005e58:	00418936 	.word	0x00418936

08005e5c <uart_task_create>:
{
 8005e5c:	b507      	push	{r0, r1, r2, lr}
	result = xTaskCreate(uart_task,
 8005e5e:	2300      	movs	r3, #0
 8005e60:	2202      	movs	r2, #2
 8005e62:	4905      	ldr	r1, [pc, #20]	; (8005e78 <uart_task_create+0x1c>)
 8005e64:	e9cd 2300 	strd	r2, r3, [sp]
 8005e68:	4804      	ldr	r0, [pc, #16]	; (8005e7c <uart_task_create+0x20>)
 8005e6a:	22c8      	movs	r2, #200	; 0xc8
 8005e6c:	f7fe faf2 	bl	8004454 <xTaskCreate>
}
 8005e70:	b003      	add	sp, #12
 8005e72:	f85d fb04 	ldr.w	pc, [sp], #4
 8005e76:	bf00      	nop
 8005e78:	08007795 	.word	0x08007795
 8005e7c:	08005e31 	.word	0x08005e31

08005e80 <HAL_UART_RxCpltCallback>:
	}
}


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e80:	b510      	push	{r4, lr}
        __asm volatile
 8005e82:	f3ef 8411 	mrs	r4, BASEPRI
 8005e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e8a:	f383 8811 	msr	BASEPRI, r3
 8005e8e:	f3bf 8f6f 	isb	sy
 8005e92:	f3bf 8f4f 	dsb	sy
	UBaseType_t uxSavedInterruptStatus;
	uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
	circbuffer_insert(&data_byte, 1);
 8005e96:	2101      	movs	r1, #1
 8005e98:	4802      	ldr	r0, [pc, #8]	; (8005ea4 <HAL_UART_RxCpltCallback+0x24>)
 8005e9a:	f7ff fb1b 	bl	80054d4 <circbuffer_insert>
        __asm volatile
 8005e9e:	f384 8811 	msr	BASEPRI, r4
	taskEXIT_CRITICAL_FROM_ISR(uxSavedInterruptStatus);
}
 8005ea2:	bd10      	pop	{r4, pc}
 8005ea4:	20002dbd 	.word	0x20002dbd

08005ea8 <delay_gsm>:
	return (HAL_UART_Transmit(&huart2, data, len, 2000) == HAL_OK) ? true : false;
}

void delay_gsm(uint32_t delay_ms)
{
	vTaskDelay(pdMS_TO_TICKS(delay_ms));
 8005ea8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005eac:	4358      	muls	r0, r3
 8005eae:	fbb0 f0f3 	udiv	r0, r0, r3
 8005eb2:	f7fe bd91 	b.w	80049d8 <vTaskDelay>
	...

08005eb8 <gsm_task>:
{
 8005eb8:	b507      	push	{r0, r1, r2, lr}
	m66_ctrl_struct.data_send = send_data;
 8005eba:	4b2c      	ldr	r3, [pc, #176]	; (8005f6c <gsm_task+0xb4>)
 8005ebc:	482c      	ldr	r0, [pc, #176]	; (8005f70 <gsm_task+0xb8>)
		switch(gsm_sm)
 8005ebe:	4c2d      	ldr	r4, [pc, #180]	; (8005f74 <gsm_task+0xbc>)
	m66_ctrl_struct.data_send = send_data;
 8005ec0:	6043      	str	r3, [r0, #4]
	m66_ctrl_struct.pwrkey_switch = powerkey_switch;
 8005ec2:	4b2d      	ldr	r3, [pc, #180]	; (8005f78 <gsm_task+0xc0>)
				M66_send_sms("+36702047619", "HELLO BABE");
 8005ec4:	4e2d      	ldr	r6, [pc, #180]	; (8005f7c <gsm_task+0xc4>)
	m66_ctrl_struct.pwrkey_switch = powerkey_switch;
 8005ec6:	6003      	str	r3, [r0, #0]
	m66_ctrl_struct.delay = delay_gsm;
 8005ec8:	4b2d      	ldr	r3, [pc, #180]	; (8005f80 <gsm_task+0xc8>)
 8005eca:	6083      	str	r3, [r0, #8]
	M66_ctrl_init(&m66_ctrl_struct);
 8005ecc:	f7ff f9a4 	bl	8005218 <M66_ctrl_init>
		switch(gsm_sm)
 8005ed0:	7823      	ldrb	r3, [r4, #0]
 8005ed2:	2b04      	cmp	r3, #4
 8005ed4:	d848      	bhi.n	8005f68 <gsm_task+0xb0>
 8005ed6:	e8df f003 	tbb	[pc, r3]
 8005eda:	0803      	.short	0x0803
 8005edc:	3418      	.short	0x3418
 8005ede:	41          	.byte	0x41
 8005edf:	00          	.byte	0x00
				M66_hw_reset();
 8005ee0:	f7ff f9a0 	bl	8005224 <M66_hw_reset>
				gsm_sm = GSM_CHECK_CREDENTIALS;
 8005ee4:	2301      	movs	r3, #1
				gsm_sm = GSM_MODULE_START;
 8005ee6:	7023      	strb	r3, [r4, #0]
				break;
 8005ee8:	e033      	b.n	8005f52 <gsm_task+0x9a>
				bool status = true;
 8005eea:	2501      	movs	r5, #1
 8005eec:	f88d 5007 	strb.w	r5, [sp, #7]
				M66_disable_echo();
 8005ef0:	f7ff f9b0 	bl	8005254 <M66_disable_echo>
				M66_check_pin(&status);
 8005ef4:	f10d 0007 	add.w	r0, sp, #7
 8005ef8:	f7ff f9be 	bl	8005278 <M66_check_pin>
				 M66_set_mode(1);
 8005efc:	4628      	mov	r0, r5
 8005efe:	f7ff fa41 	bl	8005384 <M66_set_mode>
				M66_save_config();
 8005f02:	f7ff f9ed 	bl	80052e0 <M66_save_config>
				gsm_sm = GSM_CONNECT;
 8005f06:	2302      	movs	r3, #2
 8005f08:	e7ed      	b.n	8005ee6 <gsm_task+0x2e>
				M66_switch_radio(1);
 8005f0a:	2001      	movs	r0, #1
 8005f0c:	f7ff f9c8 	bl	80052a0 <M66_switch_radio>
				M66_select_operator(21670);
 8005f10:	f245 40a6 	movw	r0, #21670	; 0x54a6
 8005f14:	f7ff f9f6 	bl	8005304 <M66_select_operator>
				M66_set_bt_state(1);
 8005f18:	2001      	movs	r0, #1
 8005f1a:	f7ff fa7b 	bl	8005414 <M66_set_bt_state>
				M66_set_bt_name("ALARM");
 8005f1e:	4819      	ldr	r0, [pc, #100]	; (8005f84 <gsm_task+0xcc>)
 8005f20:	f7ff fa98 	bl	8005454 <M66_set_bt_name>
				M66_set_bt_visibility(1);
 8005f24:	2001      	movs	r0, #1
 8005f26:	f7ff fab5 	bl	8005494 <M66_set_bt_visibility>
				uint8_t netstat = 0;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	f88d 3007 	strb.w	r3, [sp, #7]
					M66_query_network_status(&netstat);
 8005f30:	f10d 0007 	add.w	r0, sp, #7
 8005f34:	f7ff fa06 	bl	8005344 <M66_query_network_status>
					vTaskDelay(pdMS_TO_TICKS(500));
 8005f38:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005f3c:	f7fe fd4c 	bl	80049d8 <vTaskDelay>
				}while((netstat != 1) || (netstat != 5));
 8005f40:	e7f6      	b.n	8005f30 <gsm_task+0x78>
				uint8_t netstat = 0;
 8005f42:	2500      	movs	r5, #0
				M66_query_network_status(&netstat);
 8005f44:	f10d 0007 	add.w	r0, sp, #7
				uint8_t netstat = 0;
 8005f48:	f88d 5007 	strb.w	r5, [sp, #7]
				M66_query_network_status(&netstat);
 8005f4c:	f7ff f9fa 	bl	8005344 <M66_query_network_status>
					gsm_sm = GSM_MODULE_START;
 8005f50:	7025      	strb	r5, [r4, #0]
		vTaskDelay(pdMS_TO_TICKS(1000));
 8005f52:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005f56:	f7fe fd3f 	bl	80049d8 <vTaskDelay>
		switch(gsm_sm)
 8005f5a:	e7b9      	b.n	8005ed0 <gsm_task+0x18>
				M66_send_sms("+36702047619", "HELLO BABE");
 8005f5c:	4631      	mov	r1, r6
 8005f5e:	480a      	ldr	r0, [pc, #40]	; (8005f88 <gsm_task+0xd0>)
 8005f60:	f7ff fa2e 	bl	80053c0 <M66_send_sms>
				gsm_sm = GSM_CONNECTED;
 8005f64:	2303      	movs	r3, #3
 8005f66:	e7be      	b.n	8005ee6 <gsm_task+0x2e>
				gsm_sm = GSM_MODULE_START;
 8005f68:	2300      	movs	r3, #0
 8005f6a:	e7bc      	b.n	8005ee6 <gsm_task+0x2e>
 8005f6c:	08005fad 	.word	0x08005fad
 8005f70:	20002dc0 	.word	0x20002dc0
 8005f74:	20002dbe 	.word	0x20002dbe
 8005f78:	08005f8d 	.word	0x08005f8d
 8005f7c:	080077a2 	.word	0x080077a2
 8005f80:	08005ea9 	.word	0x08005ea9
 8005f84:	0800779c 	.word	0x0800779c
 8005f88:	080077ad 	.word	0x080077ad

08005f8c <powerkey_switch>:
{
 8005f8c:	b510      	push	{r4, lr}
 8005f8e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8005f90:	f7fe ff30 	bl	8004df4 <vPortEnterCritical>
	HAL_GPIO_WritePin(PWRKEY_GPIO_Port, PWRKEY_Pin, pin_state);
 8005f94:	4622      	mov	r2, r4
 8005f96:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005f9a:	4803      	ldr	r0, [pc, #12]	; (8005fa8 <powerkey_switch+0x1c>)
 8005f9c:	f7fb ffbc 	bl	8001f18 <HAL_GPIO_WritePin>
}
 8005fa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	taskEXIT_CRITICAL();
 8005fa4:	f7fe bf36 	b.w	8004e14 <vPortExitCritical>
 8005fa8:	40020000 	.word	0x40020000

08005fac <send_data>:
{
 8005fac:	460a      	mov	r2, r1
 8005fae:	b508      	push	{r3, lr}
	return (HAL_UART_Transmit(&huart2, data, len, 2000) == HAL_OK) ? true : false;
 8005fb0:	4601      	mov	r1, r0
 8005fb2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005fb6:	4803      	ldr	r0, [pc, #12]	; (8005fc4 <send_data+0x18>)
 8005fb8:	f7fd fddc 	bl	8003b74 <HAL_UART_Transmit>
}
 8005fbc:	fab0 f080 	clz	r0, r0
 8005fc0:	0940      	lsrs	r0, r0, #5
 8005fc2:	bd08      	pop	{r3, pc}
 8005fc4:	200002ec 	.word	0x200002ec

08005fc8 <gsm_task_create>:
{
 8005fc8:	b507      	push	{r0, r1, r2, lr}
	result = xTaskCreate(gsm_task,
 8005fca:	2300      	movs	r3, #0
 8005fcc:	2204      	movs	r2, #4
 8005fce:	4905      	ldr	r1, [pc, #20]	; (8005fe4 <gsm_task_create+0x1c>)
 8005fd0:	e9cd 2300 	strd	r2, r3, [sp]
 8005fd4:	4804      	ldr	r0, [pc, #16]	; (8005fe8 <gsm_task_create+0x20>)
 8005fd6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005fda:	f7fe fa3b 	bl	8004454 <xTaskCreate>
}
 8005fde:	b003      	add	sp, #12
 8005fe0:	f85d fb04 	ldr.w	pc, [sp], #4
 8005fe4:	080077ba 	.word	0x080077ba
 8005fe8:	08005eb9 	.word	0x08005eb9
 8005fec:	00000000 	.word	0x00000000

08005ff0 <io_task>:

	configASSERT(result == pdPASS);
}

void io_task(void * params)
{
 8005ff0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
		uint32_t adc_val = 0;
		float adc_val_f = 0.0f;
		HAL_ADC_Start(&hadc);
		HAL_ADC_PollForConversion(&hadc, 5000);
		adc_val = HAL_ADC_GetValue(&hadc);
		adc_val_f = adc_val * (3300.0 / 4095.0);
 8005ff4:	a720      	add	r7, pc, #128	; (adr r7, 8006078 <io_task+0x88>)
 8005ff6:	e9d7 6700 	ldrd	r6, r7, [r7]
		HAL_ADC_Start(&hadc);
 8005ffa:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8006080 <io_task+0x90>
		io_data.vbat = ((adc_val_f * (10000.0f + 1000.f)) / (1000.0f)) / 1000.0;
 8005ffe:	f8df 9084 	ldr.w	r9, [pc, #132]	; 8006084 <io_task+0x94>
		io_state_data 	io_data 	= {0};
 8006002:	2400      	movs	r4, #0
		HAL_ADC_Start(&hadc);
 8006004:	4640      	mov	r0, r8
		io_state_data 	io_data 	= {0};
 8006006:	e9cd 4400 	strd	r4, r4, [sp]
		HAL_ADC_Start(&hadc);
 800600a:	f7fb fd75 	bl	8001af8 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 5000);
 800600e:	f241 3188 	movw	r1, #5000	; 0x1388
 8006012:	4640      	mov	r0, r8
 8006014:	f7fb fc2e 	bl	8001874 <HAL_ADC_PollForConversion>
		adc_val = HAL_ADC_GetValue(&hadc);
 8006018:	4640      	mov	r0, r8
 800601a:	f7fb fc81 	bl	8001920 <HAL_ADC_GetValue>
		adc_val_f = adc_val * (3300.0 / 4095.0);
 800601e:	f7fa fb2d 	bl	800067c <__aeabi_ui2d>
 8006022:	4632      	mov	r2, r6
 8006024:	463b      	mov	r3, r7
 8006026:	f7fa f8bd 	bl	80001a4 <__aeabi_dmul>
 800602a:	f7fa fc29 	bl	8000880 <__aeabi_d2f>
		io_data.vbat = ((adc_val_f * (10000.0f + 1000.f)) / (1000.0f)) / 1000.0;
 800602e:	4916      	ldr	r1, [pc, #88]	; (8006088 <io_task+0x98>)
 8006030:	f7fa fc76 	bl	8000920 <__aeabi_fmul>
 8006034:	4649      	mov	r1, r9
 8006036:	f7fa fd27 	bl	8000a88 <__aeabi_fdiv>
 800603a:	4649      	mov	r1, r9
 800603c:	f7fa fd24 	bl	8000a88 <__aeabi_fdiv>
 8006040:	4d12      	ldr	r5, [pc, #72]	; (800608c <io_task+0x9c>)
 8006042:	9000      	str	r0, [sp, #0]

		for(uint8_t i = 0;i < 9;i++)
		{
			io_data.io_state = HAL_GPIO_ReadPin(io_struct[i].GPIO_Port, io_struct[i].GPIO_Pin) << i;
 8006044:	8829      	ldrh	r1, [r5, #0]
 8006046:	6868      	ldr	r0, [r5, #4]
 8006048:	f7fb ff60 	bl	8001f0c <HAL_GPIO_ReadPin>
 800604c:	40a0      	lsls	r0, r4
		for(uint8_t i = 0;i < 9;i++)
 800604e:	3401      	adds	r4, #1
 8006050:	2c09      	cmp	r4, #9
			io_data.io_state = HAL_GPIO_ReadPin(io_struct[i].GPIO_Port, io_struct[i].GPIO_Pin) << i;
 8006052:	f8ad 0004 	strh.w	r0, [sp, #4]
		for(uint8_t i = 0;i < 9;i++)
 8006056:	f105 0508 	add.w	r5, r5, #8
 800605a:	d1f3      	bne.n	8006044 <io_task+0x54>
		}

		xQueueSend(io_queue, (void*)&io_data, pdMS_TO_TICKS(100));
 800605c:	480c      	ldr	r0, [pc, #48]	; (8006090 <io_task+0xa0>)
 800605e:	2300      	movs	r3, #0
 8006060:	2264      	movs	r2, #100	; 0x64
 8006062:	4669      	mov	r1, sp
 8006064:	6800      	ldr	r0, [r0, #0]
 8006066:	f7fd ffb6 	bl	8003fd6 <xQueueGenericSend>

		vTaskDelay(pdMS_TO_TICKS(500));
 800606a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800606e:	f7fe fcb3 	bl	80049d8 <vTaskDelay>
	{
 8006072:	e7c6      	b.n	8006002 <io_task+0x12>
 8006074:	f3af 8000 	nop.w
 8006078:	99c99c9a 	.word	0x99c99c9a
 800607c:	3fe9c99c 	.word	0x3fe9c99c
 8006080:	20000124 	.word	0x20000124
 8006084:	447a0000 	.word	0x447a0000
 8006088:	462be000 	.word	0x462be000
 800608c:	2000005c 	.word	0x2000005c
 8006090:	20002c58 	.word	0x20002c58

08006094 <io_task_create>:
{
 8006094:	b507      	push	{r0, r1, r2, lr}
	result = xTaskCreate(io_task,
 8006096:	2300      	movs	r3, #0
 8006098:	2203      	movs	r2, #3
 800609a:	4905      	ldr	r1, [pc, #20]	; (80060b0 <io_task_create+0x1c>)
 800609c:	e9cd 2300 	strd	r2, r3, [sp]
 80060a0:	4804      	ldr	r0, [pc, #16]	; (80060b4 <io_task_create+0x20>)
 80060a2:	22c8      	movs	r2, #200	; 0xc8
 80060a4:	f7fe f9d6 	bl	8004454 <xTaskCreate>
}
 80060a8:	b003      	add	sp, #12
 80060aa:	f85d fb04 	ldr.w	pc, [sp], #4
 80060ae:	bf00      	nop
 80060b0:	080077c0 	.word	0x080077c0
 80060b4:	08005ff1 	.word	0x08005ff1

080060b8 <lcd_task>:

	configASSERT(result == pdPASS);
}

void lcd_task(void * params)
{
 80060b8:	b500      	push	{lr}
	lcd_i2c.i2c_write 	= i2c_write;
 80060ba:	4817      	ldr	r0, [pc, #92]	; (8006118 <lcd_task+0x60>)
 80060bc:	4b17      	ldr	r3, [pc, #92]	; (800611c <lcd_task+0x64>)
{
 80060be:	b08b      	sub	sp, #44	; 0x2c
	lcd_i2c.i2c_write 	= i2c_write;
 80060c0:	6003      	str	r3, [r0, #0]
	lcd_i2c.i2c_read 	= i2c_read;
 80060c2:	4b17      	ldr	r3, [pc, #92]	; (8006120 <lcd_task+0x68>)

	while(1)
	{
		/*Wait until data is received then print it on the LCD screen*/
		lcd_data data = {0};
		xQueueReceive(lcd_queue, (void*)&data, pdMS_TO_TICKS(portMAX_DELAY));
 80060c4:	4c17      	ldr	r4, [pc, #92]	; (8006124 <lcd_task+0x6c>)
	lcd_i2c.i2c_read 	= i2c_read;
 80060c6:	6043      	str	r3, [r0, #4]
	lcd_i2c.delay 		= i2c_delay;
 80060c8:	4b17      	ldr	r3, [pc, #92]	; (8006128 <lcd_task+0x70>)
		xQueueReceive(lcd_queue, (void*)&data, pdMS_TO_TICKS(portMAX_DELAY));
 80060ca:	4d18      	ldr	r5, [pc, #96]	; (800612c <lcd_task+0x74>)
	lcd_i2c.delay 		= i2c_delay;
 80060cc:	6083      	str	r3, [r0, #8]
	LCD_I2C_init(&lcd_i2c);
 80060ce:	f7ff fb99 	bl	8005804 <LCD_I2C_init>
	LCD_init();
 80060d2:	f7ff fb9f 	bl	8005814 <LCD_init>
		lcd_data data = {0};
 80060d6:	2222      	movs	r2, #34	; 0x22
 80060d8:	2100      	movs	r1, #0
 80060da:	a801      	add	r0, sp, #4
 80060dc:	f000 f978 	bl	80063d0 <memset>
		xQueueReceive(lcd_queue, (void*)&data, pdMS_TO_TICKS(portMAX_DELAY));
 80060e0:	462a      	mov	r2, r5
 80060e2:	a901      	add	r1, sp, #4
 80060e4:	6820      	ldr	r0, [r4, #0]
 80060e6:	f7fe f813 	bl	8004110 <xQueueReceive>
		taskENTER_CRITICAL();
 80060ea:	f7fe fe83 	bl	8004df4 <vPortEnterCritical>
		if(data.clr)
 80060ee:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 80060f2:	b10b      	cbz	r3, 80060f8 <lcd_task+0x40>
		{
			LCD_clear();
 80060f4:	f7ff fc04 	bl	8005900 <LCD_clear>
		}
		LCD_write(data.text, strlen(data.text));
 80060f8:	a801      	add	r0, sp, #4
 80060fa:	f7fa f84b 	bl	8000194 <strlen>
 80060fe:	b2c1      	uxtb	r1, r0
 8006100:	a801      	add	r0, sp, #4
 8006102:	f7ff fbc9 	bl	8005898 <LCD_write>
		if(data.crlf)
 8006106:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 800610a:	b10b      	cbz	r3, 8006110 <lcd_task+0x58>
		{
			LCD_next_line();
 800610c:	f7ff fc12 	bl	8005934 <LCD_next_line>
		}
		taskEXIT_CRITICAL();
 8006110:	f7fe fe80 	bl	8004e14 <vPortExitCritical>
	{
 8006114:	e7df      	b.n	80060d6 <lcd_task+0x1e>
 8006116:	bf00      	nop
 8006118:	20002dcc 	.word	0x20002dcc
 800611c:	08006131 	.word	0x08006131
 8006120:	08006155 	.word	0x08006155
 8006124:	20002c60 	.word	0x20002c60
 8006128:	08006195 	.word	0x08006195
 800612c:	00418936 	.word	0x00418936

08006130 <i2c_write>:
	}
}


bool i2c_write(uint8_t dev_addr, uint8_t * data, uint8_t len)
{
 8006130:	b507      	push	{r0, r1, r2, lr}
 8006132:	4613      	mov	r3, r2
	HAL_StatusTypeDef status = HAL_ERROR;
	status = HAL_I2C_Master_Transmit(&hi2c1, (dev_addr << 1), data, len, 200);
 8006134:	22c8      	movs	r2, #200	; 0xc8
 8006136:	9200      	str	r2, [sp, #0]
 8006138:	460a      	mov	r2, r1
 800613a:	0041      	lsls	r1, r0, #1
 800613c:	4804      	ldr	r0, [pc, #16]	; (8006150 <i2c_write+0x20>)
 800613e:	f7fc f8a7 	bl	8002290 <HAL_I2C_Master_Transmit>
	return (status == HAL_OK) ? true : false;
}
 8006142:	fab0 f080 	clz	r0, r0
 8006146:	0940      	lsrs	r0, r0, #5
 8006148:	b003      	add	sp, #12
 800614a:	f85d fb04 	ldr.w	pc, [sp], #4
 800614e:	bf00      	nop
 8006150:	20000178 	.word	0x20000178

08006154 <i2c_read>:

bool i2c_read(uint8_t dev_addr, uint8_t * data, uint8_t len)
{
 8006154:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	HAL_StatusTypeDef status = HAL_ERROR;
	status = HAL_I2C_Master_Transmit(&hi2c1, (dev_addr << 1), data, len, 200);
 8006158:	27c8      	movs	r7, #200	; 0xc8
{
 800615a:	460c      	mov	r4, r1
	status = HAL_I2C_Master_Transmit(&hi2c1, (dev_addr << 1), data, len, 200);
 800615c:	4615      	mov	r5, r2
 800615e:	4e0c      	ldr	r6, [pc, #48]	; (8006190 <i2c_read+0x3c>)
 8006160:	ea4f 0840 	mov.w	r8, r0, lsl #1
 8006164:	4613      	mov	r3, r2
 8006166:	4630      	mov	r0, r6
 8006168:	460a      	mov	r2, r1
 800616a:	9700      	str	r7, [sp, #0]
 800616c:	4641      	mov	r1, r8
 800616e:	f7fc f88f 	bl	8002290 <HAL_I2C_Master_Transmit>
	status = HAL_I2C_Master_Receive(&hi2c1, ((dev_addr << 1) | 0x01), data, len, 200);
 8006172:	462b      	mov	r3, r5
 8006174:	4622      	mov	r2, r4
 8006176:	4630      	mov	r0, r6
 8006178:	9700      	str	r7, [sp, #0]
 800617a:	f048 0101 	orr.w	r1, r8, #1
 800617e:	f7fc f95f 	bl	8002440 <HAL_I2C_Master_Receive>
	return (status == HAL_OK) ? true : false;
}
 8006182:	fab0 f080 	clz	r0, r0
 8006186:	0940      	lsrs	r0, r0, #5
 8006188:	b002      	add	sp, #8
 800618a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800618e:	bf00      	nop
 8006190:	20000178 	.word	0x20000178

08006194 <i2c_delay>:

void i2c_delay(uint32_t ms)
{
	vTaskDelay(ms);
 8006194:	f7fe bc20 	b.w	80049d8 <vTaskDelay>

08006198 <lcd_task_create>:
{
 8006198:	b507      	push	{r0, r1, r2, lr}
	result = xTaskCreate(lcd_task,
 800619a:	2300      	movs	r3, #0
 800619c:	2203      	movs	r2, #3
 800619e:	4905      	ldr	r1, [pc, #20]	; (80061b4 <lcd_task_create+0x1c>)
 80061a0:	e9cd 2300 	strd	r2, r3, [sp]
 80061a4:	4804      	ldr	r0, [pc, #16]	; (80061b8 <lcd_task_create+0x20>)
 80061a6:	2264      	movs	r2, #100	; 0x64
 80061a8:	f7fe f954 	bl	8004454 <xTaskCreate>
}
 80061ac:	b003      	add	sp, #12
 80061ae:	f85d fb04 	ldr.w	pc, [sp], #4
 80061b2:	bf00      	nop
 80061b4:	080077c5 	.word	0x080077c5
 80061b8:	080060b9 	.word	0x080060b9

080061bc <numpad_task>:

}

void numpad_task(void * params)
{
	char key = 'X';
 80061bc:	2358      	movs	r3, #88	; 0x58
{
 80061be:	b500      	push	{lr}
 80061c0:	b08b      	sub	sp, #44	; 0x2c

	numpad_ctrl.col0_write = col0_write;
 80061c2:	4822      	ldr	r0, [pc, #136]	; (800624c <numpad_task+0x90>)
	char key = 'X';
 80061c4:	f88d 3003 	strb.w	r3, [sp, #3]
	numpad_ctrl.col0_write = col0_write;
 80061c8:	4b21      	ldr	r3, [pc, #132]	; (8006250 <numpad_task+0x94>)

	Numpad_init(&numpad_ctrl);

	while(1)
	{
		xSemaphoreTake(numpad_mutex, pdMS_TO_TICKS(portMAX_DELAY));
 80061ca:	4d22      	ldr	r5, [pc, #136]	; (8006254 <numpad_task+0x98>)
	numpad_ctrl.col0_write = col0_write;
 80061cc:	6103      	str	r3, [r0, #16]
	numpad_ctrl.col1_write = col1_write;
 80061ce:	4b22      	ldr	r3, [pc, #136]	; (8006258 <numpad_task+0x9c>)
		xSemaphoreTake(numpad_mutex, pdMS_TO_TICKS(portMAX_DELAY));
 80061d0:	4e22      	ldr	r6, [pc, #136]	; (800625c <numpad_task+0xa0>)
	numpad_ctrl.col1_write = col1_write;
 80061d2:	6143      	str	r3, [r0, #20]
	numpad_ctrl.col2_write = col2_write;
 80061d4:	4b22      	ldr	r3, [pc, #136]	; (8006260 <numpad_task+0xa4>)
 80061d6:	6183      	str	r3, [r0, #24]
	numpad_ctrl.row0_read = row0_read;
 80061d8:	4b22      	ldr	r3, [pc, #136]	; (8006264 <numpad_task+0xa8>)
 80061da:	6003      	str	r3, [r0, #0]
	numpad_ctrl.row1_read = row1_read;
 80061dc:	4b22      	ldr	r3, [pc, #136]	; (8006268 <numpad_task+0xac>)
 80061de:	6043      	str	r3, [r0, #4]
	numpad_ctrl.row2_read = row2_read;
 80061e0:	4b22      	ldr	r3, [pc, #136]	; (800626c <numpad_task+0xb0>)
 80061e2:	6083      	str	r3, [r0, #8]
	numpad_ctrl.row3_read = row3_read;
 80061e4:	4b22      	ldr	r3, [pc, #136]	; (8006270 <numpad_task+0xb4>)
 80061e6:	60c3      	str	r3, [r0, #12]
	numpad_ctrl.delay 	= numpad_delay;
 80061e8:	4b22      	ldr	r3, [pc, #136]	; (8006274 <numpad_task+0xb8>)
 80061ea:	61c3      	str	r3, [r0, #28]
	numpad_ctrl.buzzer 	= buzzer_write;
 80061ec:	4b22      	ldr	r3, [pc, #136]	; (8006278 <numpad_task+0xbc>)
 80061ee:	6203      	str	r3, [r0, #32]
	Numpad_init(&numpad_ctrl);
 80061f0:	f7ff fba4 	bl	800593c <Numpad_init>
		xSemaphoreTake(numpad_mutex, pdMS_TO_TICKS(portMAX_DELAY));
 80061f4:	4631      	mov	r1, r6
 80061f6:	6828      	ldr	r0, [r5, #0]
 80061f8:	f7fe f801 	bl	80041fe <xQueueSemaphoreTake>

		/*Keep scanning the numpad for keypresses*/
		key = Numpad_scan();
 80061fc:	f7ff fbee 	bl	80059dc <Numpad_scan>
		if(key != 'X')
 8006200:	2858      	cmp	r0, #88	; 0x58
		key = Numpad_scan();
 8006202:	4604      	mov	r4, r0
 8006204:	f88d 0003 	strb.w	r0, [sp, #3]
		if(key != 'X')
 8006208:	d015      	beq.n	8006236 <numpad_task+0x7a>
		{
			lcd_data data = {0};
 800620a:	2222      	movs	r2, #34	; 0x22
 800620c:	2100      	movs	r1, #0
 800620e:	a801      	add	r0, sp, #4
 8006210:	f000 f8de 	bl	80063d0 <memset>
			data.text[0] = key;
			/*Send the key to the LCD task*/
			xQueueSend(lcd_queue, (void*)&data, pdMS_TO_TICKS(100));
 8006214:	4819      	ldr	r0, [pc, #100]	; (800627c <numpad_task+0xc0>)
 8006216:	2300      	movs	r3, #0
 8006218:	2264      	movs	r2, #100	; 0x64
 800621a:	a901      	add	r1, sp, #4
 800621c:	6800      	ldr	r0, [r0, #0]
			data.text[0] = key;
 800621e:	f88d 4004 	strb.w	r4, [sp, #4]
			xQueueSend(lcd_queue, (void*)&data, pdMS_TO_TICKS(100));
 8006222:	f7fd fed8 	bl	8003fd6 <xQueueGenericSend>
			/*Send the key to the manager task as well*/
			xQueueSend(key_queue, (void*)&key, pdMS_TO_TICKS(100));
 8006226:	4816      	ldr	r0, [pc, #88]	; (8006280 <numpad_task+0xc4>)
 8006228:	2300      	movs	r3, #0
 800622a:	2264      	movs	r2, #100	; 0x64
 800622c:	6800      	ldr	r0, [r0, #0]
 800622e:	f10d 0103 	add.w	r1, sp, #3
 8006232:	f7fd fed0 	bl	8003fd6 <xQueueGenericSend>
		}
		xSemaphoreGive(numpad_mutex);
 8006236:	2300      	movs	r3, #0
 8006238:	6828      	ldr	r0, [r5, #0]
 800623a:	461a      	mov	r2, r3
 800623c:	4619      	mov	r1, r3
 800623e:	f7fd feca 	bl	8003fd6 <xQueueGenericSend>
		vTaskDelay(pdMS_TO_TICKS(100));
 8006242:	2064      	movs	r0, #100	; 0x64
 8006244:	f7fe fbc8 	bl	80049d8 <vTaskDelay>
		xSemaphoreTake(numpad_mutex, pdMS_TO_TICKS(portMAX_DELAY));
 8006248:	e7d4      	b.n	80061f4 <numpad_task+0x38>
 800624a:	bf00      	nop
 800624c:	20002dd8 	.word	0x20002dd8
 8006250:	08006289 	.word	0x08006289
 8006254:	20002c64 	.word	0x20002c64
 8006258:	08006299 	.word	0x08006299
 800625c:	00418936 	.word	0x00418936
 8006260:	080062a9 	.word	0x080062a9
 8006264:	080062b9 	.word	0x080062b9
 8006268:	080062d1 	.word	0x080062d1
 800626c:	080062e9 	.word	0x080062e9
 8006270:	08006301 	.word	0x08006301
 8006274:	08006285 	.word	0x08006285
 8006278:	08006319 	.word	0x08006319
 800627c:	20002c60 	.word	0x20002c60
 8006280:	20002c5c 	.word	0x20002c5c

08006284 <numpad_delay>:
	(state == true) ? HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2) : HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
}

void numpad_delay(uint32_t ms)
{
	vTaskDelay(ms);
 8006284:	f7fe bba8 	b.w	80049d8 <vTaskDelay>

08006288 <col0_write>:
{
 8006288:	4602      	mov	r2, r0
	HAL_GPIO_WritePin(COL0_GPIO_Port, COL0_Pin, (GPIO_PinState)status);
 800628a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800628e:	4801      	ldr	r0, [pc, #4]	; (8006294 <col0_write+0xc>)
 8006290:	f7fb be42 	b.w	8001f18 <HAL_GPIO_WritePin>
 8006294:	40020400 	.word	0x40020400

08006298 <col1_write>:
{
 8006298:	4602      	mov	r2, r0
	HAL_GPIO_WritePin(COL1_GPIO_Port, COL1_Pin, (GPIO_PinState)status);
 800629a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800629e:	4801      	ldr	r0, [pc, #4]	; (80062a4 <col1_write+0xc>)
 80062a0:	f7fb be3a 	b.w	8001f18 <HAL_GPIO_WritePin>
 80062a4:	40020400 	.word	0x40020400

080062a8 <col2_write>:
{
 80062a8:	4602      	mov	r2, r0
	HAL_GPIO_WritePin(COL2_GPIO_Port, COL2_Pin, (GPIO_PinState)status);
 80062aa:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80062ae:	4801      	ldr	r0, [pc, #4]	; (80062b4 <col2_write+0xc>)
 80062b0:	f7fb be32 	b.w	8001f18 <HAL_GPIO_WritePin>
 80062b4:	40020400 	.word	0x40020400

080062b8 <row0_read>:
{
 80062b8:	b508      	push	{r3, lr}
	return (HAL_GPIO_ReadPin(ROW0_GPIO_Port, ROW0_Pin) == GPIO_PIN_SET) ? true : false;
 80062ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80062be:	4803      	ldr	r0, [pc, #12]	; (80062cc <row0_read+0x14>)
 80062c0:	f7fb fe24 	bl	8001f0c <HAL_GPIO_ReadPin>
}
 80062c4:	1e43      	subs	r3, r0, #1
 80062c6:	4258      	negs	r0, r3
 80062c8:	4158      	adcs	r0, r3
 80062ca:	bd08      	pop	{r3, pc}
 80062cc:	40020400 	.word	0x40020400

080062d0 <row1_read>:
{
 80062d0:	b508      	push	{r3, lr}
	return (HAL_GPIO_ReadPin(ROW1_GPIO_Port, ROW1_Pin) == GPIO_PIN_SET) ? true : false;
 80062d2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80062d6:	4803      	ldr	r0, [pc, #12]	; (80062e4 <row1_read+0x14>)
 80062d8:	f7fb fe18 	bl	8001f0c <HAL_GPIO_ReadPin>
}
 80062dc:	1e43      	subs	r3, r0, #1
 80062de:	4258      	negs	r0, r3
 80062e0:	4158      	adcs	r0, r3
 80062e2:	bd08      	pop	{r3, pc}
 80062e4:	40020000 	.word	0x40020000

080062e8 <row2_read>:
{
 80062e8:	b508      	push	{r3, lr}
	return (HAL_GPIO_ReadPin(ROW2_GPIO_Port, ROW2_Pin) == GPIO_PIN_SET) ? true : false;
 80062ea:	f44f 7100 	mov.w	r1, #512	; 0x200
 80062ee:	4803      	ldr	r0, [pc, #12]	; (80062fc <row2_read+0x14>)
 80062f0:	f7fb fe0c 	bl	8001f0c <HAL_GPIO_ReadPin>
}
 80062f4:	1e43      	subs	r3, r0, #1
 80062f6:	4258      	negs	r0, r3
 80062f8:	4158      	adcs	r0, r3
 80062fa:	bd08      	pop	{r3, pc}
 80062fc:	40020000 	.word	0x40020000

08006300 <row3_read>:
{
 8006300:	b508      	push	{r3, lr}
	return (HAL_GPIO_ReadPin(ROW3_GPIO_Port, ROW3_Pin) == GPIO_PIN_SET) ? true : false;
 8006302:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006306:	4803      	ldr	r0, [pc, #12]	; (8006314 <row3_read+0x14>)
 8006308:	f7fb fe00 	bl	8001f0c <HAL_GPIO_ReadPin>
}
 800630c:	1e43      	subs	r3, r0, #1
 800630e:	4258      	negs	r0, r3
 8006310:	4158      	adcs	r0, r3
 8006312:	bd08      	pop	{r3, pc}
 8006314:	40020000 	.word	0x40020000

08006318 <buzzer_write>:
	TIM4->ARR = 137;
 8006318:	2289      	movs	r2, #137	; 0x89
 800631a:	4b06      	ldr	r3, [pc, #24]	; (8006334 <buzzer_write+0x1c>)
	(state == true) ? HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2) : HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 800631c:	2104      	movs	r1, #4
	TIM4->ARR = 137;
 800631e:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM4->CCR2 = 68;
 8006320:	2244      	movs	r2, #68	; 0x44
 8006322:	639a      	str	r2, [r3, #56]	; 0x38
	(state == true) ? HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2) : HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 8006324:	b110      	cbz	r0, 800632c <buzzer_write+0x14>
 8006326:	4804      	ldr	r0, [pc, #16]	; (8006338 <buzzer_write+0x20>)
 8006328:	f7fd ba27 	b.w	800377a <HAL_TIM_PWM_Start>
 800632c:	4802      	ldr	r0, [pc, #8]	; (8006338 <buzzer_write+0x20>)
 800632e:	f7fd ba26 	b.w	800377e <HAL_TIM_PWM_Stop>
 8006332:	bf00      	nop
 8006334:	40000800 	.word	0x40000800
 8006338:	20000268 	.word	0x20000268

0800633c <numpad_task_create>:
{
 800633c:	b507      	push	{r0, r1, r2, lr}
	result = xTaskCreate(numpad_task,
 800633e:	2300      	movs	r3, #0
 8006340:	2204      	movs	r2, #4
 8006342:	4905      	ldr	r1, [pc, #20]	; (8006358 <numpad_task_create+0x1c>)
 8006344:	e9cd 2300 	strd	r2, r3, [sp]
 8006348:	4804      	ldr	r0, [pc, #16]	; (800635c <numpad_task_create+0x20>)
 800634a:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 800634e:	f7fe f881 	bl	8004454 <xTaskCreate>
}
 8006352:	b003      	add	sp, #12
 8006354:	f85d fb04 	ldr.w	pc, [sp], #4
 8006358:	080077cb 	.word	0x080077cb
 800635c:	080061bd 	.word	0x080061bd

08006360 <__errno>:
 8006360:	4b01      	ldr	r3, [pc, #4]	; (8006368 <__errno+0x8>)
 8006362:	6818      	ldr	r0, [r3, #0]
 8006364:	4770      	bx	lr
 8006366:	bf00      	nop
 8006368:	200000a4 	.word	0x200000a4

0800636c <__libc_init_array>:
 800636c:	b570      	push	{r4, r5, r6, lr}
 800636e:	2600      	movs	r6, #0
 8006370:	4d0c      	ldr	r5, [pc, #48]	; (80063a4 <__libc_init_array+0x38>)
 8006372:	4c0d      	ldr	r4, [pc, #52]	; (80063a8 <__libc_init_array+0x3c>)
 8006374:	1b64      	subs	r4, r4, r5
 8006376:	10a4      	asrs	r4, r4, #2
 8006378:	42a6      	cmp	r6, r4
 800637a:	d109      	bne.n	8006390 <__libc_init_array+0x24>
 800637c:	f001 f958 	bl	8007630 <_init>
 8006380:	2600      	movs	r6, #0
 8006382:	4d0a      	ldr	r5, [pc, #40]	; (80063ac <__libc_init_array+0x40>)
 8006384:	4c0a      	ldr	r4, [pc, #40]	; (80063b0 <__libc_init_array+0x44>)
 8006386:	1b64      	subs	r4, r4, r5
 8006388:	10a4      	asrs	r4, r4, #2
 800638a:	42a6      	cmp	r6, r4
 800638c:	d105      	bne.n	800639a <__libc_init_array+0x2e>
 800638e:	bd70      	pop	{r4, r5, r6, pc}
 8006390:	f855 3b04 	ldr.w	r3, [r5], #4
 8006394:	4798      	blx	r3
 8006396:	3601      	adds	r6, #1
 8006398:	e7ee      	b.n	8006378 <__libc_init_array+0xc>
 800639a:	f855 3b04 	ldr.w	r3, [r5], #4
 800639e:	4798      	blx	r3
 80063a0:	3601      	adds	r6, #1
 80063a2:	e7f2      	b.n	800638a <__libc_init_array+0x1e>
 80063a4:	0800798c 	.word	0x0800798c
 80063a8:	0800798c 	.word	0x0800798c
 80063ac:	0800798c 	.word	0x0800798c
 80063b0:	08007990 	.word	0x08007990

080063b4 <memcpy>:
 80063b4:	440a      	add	r2, r1
 80063b6:	4291      	cmp	r1, r2
 80063b8:	f100 33ff 	add.w	r3, r0, #4294967295
 80063bc:	d100      	bne.n	80063c0 <memcpy+0xc>
 80063be:	4770      	bx	lr
 80063c0:	b510      	push	{r4, lr}
 80063c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80063c6:	4291      	cmp	r1, r2
 80063c8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80063cc:	d1f9      	bne.n	80063c2 <memcpy+0xe>
 80063ce:	bd10      	pop	{r4, pc}

080063d0 <memset>:
 80063d0:	4603      	mov	r3, r0
 80063d2:	4402      	add	r2, r0
 80063d4:	4293      	cmp	r3, r2
 80063d6:	d100      	bne.n	80063da <memset+0xa>
 80063d8:	4770      	bx	lr
 80063da:	f803 1b01 	strb.w	r1, [r3], #1
 80063de:	e7f9      	b.n	80063d4 <memset+0x4>

080063e0 <siprintf>:
 80063e0:	b40e      	push	{r1, r2, r3}
 80063e2:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80063e6:	b500      	push	{lr}
 80063e8:	b09c      	sub	sp, #112	; 0x70
 80063ea:	ab1d      	add	r3, sp, #116	; 0x74
 80063ec:	9002      	str	r0, [sp, #8]
 80063ee:	9006      	str	r0, [sp, #24]
 80063f0:	9107      	str	r1, [sp, #28]
 80063f2:	9104      	str	r1, [sp, #16]
 80063f4:	4808      	ldr	r0, [pc, #32]	; (8006418 <siprintf+0x38>)
 80063f6:	4909      	ldr	r1, [pc, #36]	; (800641c <siprintf+0x3c>)
 80063f8:	f853 2b04 	ldr.w	r2, [r3], #4
 80063fc:	9105      	str	r1, [sp, #20]
 80063fe:	6800      	ldr	r0, [r0, #0]
 8006400:	a902      	add	r1, sp, #8
 8006402:	9301      	str	r3, [sp, #4]
 8006404:	f000 f89c 	bl	8006540 <_svfiprintf_r>
 8006408:	2200      	movs	r2, #0
 800640a:	9b02      	ldr	r3, [sp, #8]
 800640c:	701a      	strb	r2, [r3, #0]
 800640e:	b01c      	add	sp, #112	; 0x70
 8006410:	f85d eb04 	ldr.w	lr, [sp], #4
 8006414:	b003      	add	sp, #12
 8006416:	4770      	bx	lr
 8006418:	200000a4 	.word	0x200000a4
 800641c:	ffff0208 	.word	0xffff0208

08006420 <siscanf>:
 8006420:	b40e      	push	{r1, r2, r3}
 8006422:	f44f 7201 	mov.w	r2, #516	; 0x204
 8006426:	b530      	push	{r4, r5, lr}
 8006428:	b09c      	sub	sp, #112	; 0x70
 800642a:	ac1f      	add	r4, sp, #124	; 0x7c
 800642c:	f854 5b04 	ldr.w	r5, [r4], #4
 8006430:	f8ad 2014 	strh.w	r2, [sp, #20]
 8006434:	9002      	str	r0, [sp, #8]
 8006436:	9006      	str	r0, [sp, #24]
 8006438:	f7f9 feac 	bl	8000194 <strlen>
 800643c:	4b0b      	ldr	r3, [pc, #44]	; (800646c <siscanf+0x4c>)
 800643e:	9003      	str	r0, [sp, #12]
 8006440:	930b      	str	r3, [sp, #44]	; 0x2c
 8006442:	2300      	movs	r3, #0
 8006444:	930f      	str	r3, [sp, #60]	; 0x3c
 8006446:	9314      	str	r3, [sp, #80]	; 0x50
 8006448:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800644c:	9007      	str	r0, [sp, #28]
 800644e:	4808      	ldr	r0, [pc, #32]	; (8006470 <siscanf+0x50>)
 8006450:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006454:	462a      	mov	r2, r5
 8006456:	4623      	mov	r3, r4
 8006458:	a902      	add	r1, sp, #8
 800645a:	6800      	ldr	r0, [r0, #0]
 800645c:	9401      	str	r4, [sp, #4]
 800645e:	f000 f9c9 	bl	80067f4 <__ssvfiscanf_r>
 8006462:	b01c      	add	sp, #112	; 0x70
 8006464:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006468:	b003      	add	sp, #12
 800646a:	4770      	bx	lr
 800646c:	08006475 	.word	0x08006475
 8006470:	200000a4 	.word	0x200000a4

08006474 <__seofread>:
 8006474:	2000      	movs	r0, #0
 8006476:	4770      	bx	lr

08006478 <strcpy>:
 8006478:	4603      	mov	r3, r0
 800647a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800647e:	f803 2b01 	strb.w	r2, [r3], #1
 8006482:	2a00      	cmp	r2, #0
 8006484:	d1f9      	bne.n	800647a <strcpy+0x2>
 8006486:	4770      	bx	lr

08006488 <__ssputs_r>:
 8006488:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800648c:	688e      	ldr	r6, [r1, #8]
 800648e:	4682      	mov	sl, r0
 8006490:	429e      	cmp	r6, r3
 8006492:	460c      	mov	r4, r1
 8006494:	4690      	mov	r8, r2
 8006496:	461f      	mov	r7, r3
 8006498:	d838      	bhi.n	800650c <__ssputs_r+0x84>
 800649a:	898a      	ldrh	r2, [r1, #12]
 800649c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80064a0:	d032      	beq.n	8006508 <__ssputs_r+0x80>
 80064a2:	6825      	ldr	r5, [r4, #0]
 80064a4:	6909      	ldr	r1, [r1, #16]
 80064a6:	3301      	adds	r3, #1
 80064a8:	eba5 0901 	sub.w	r9, r5, r1
 80064ac:	6965      	ldr	r5, [r4, #20]
 80064ae:	444b      	add	r3, r9
 80064b0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80064b4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80064b8:	106d      	asrs	r5, r5, #1
 80064ba:	429d      	cmp	r5, r3
 80064bc:	bf38      	it	cc
 80064be:	461d      	movcc	r5, r3
 80064c0:	0553      	lsls	r3, r2, #21
 80064c2:	d531      	bpl.n	8006528 <__ssputs_r+0xa0>
 80064c4:	4629      	mov	r1, r5
 80064c6:	f000 ffeb 	bl	80074a0 <_malloc_r>
 80064ca:	4606      	mov	r6, r0
 80064cc:	b950      	cbnz	r0, 80064e4 <__ssputs_r+0x5c>
 80064ce:	230c      	movs	r3, #12
 80064d0:	f04f 30ff 	mov.w	r0, #4294967295
 80064d4:	f8ca 3000 	str.w	r3, [sl]
 80064d8:	89a3      	ldrh	r3, [r4, #12]
 80064da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064de:	81a3      	strh	r3, [r4, #12]
 80064e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064e4:	464a      	mov	r2, r9
 80064e6:	6921      	ldr	r1, [r4, #16]
 80064e8:	f7ff ff64 	bl	80063b4 <memcpy>
 80064ec:	89a3      	ldrh	r3, [r4, #12]
 80064ee:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80064f2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80064f6:	81a3      	strh	r3, [r4, #12]
 80064f8:	6126      	str	r6, [r4, #16]
 80064fa:	444e      	add	r6, r9
 80064fc:	6026      	str	r6, [r4, #0]
 80064fe:	463e      	mov	r6, r7
 8006500:	6165      	str	r5, [r4, #20]
 8006502:	eba5 0509 	sub.w	r5, r5, r9
 8006506:	60a5      	str	r5, [r4, #8]
 8006508:	42be      	cmp	r6, r7
 800650a:	d900      	bls.n	800650e <__ssputs_r+0x86>
 800650c:	463e      	mov	r6, r7
 800650e:	4632      	mov	r2, r6
 8006510:	4641      	mov	r1, r8
 8006512:	6820      	ldr	r0, [r4, #0]
 8006514:	f000 ff42 	bl	800739c <memmove>
 8006518:	68a3      	ldr	r3, [r4, #8]
 800651a:	2000      	movs	r0, #0
 800651c:	1b9b      	subs	r3, r3, r6
 800651e:	60a3      	str	r3, [r4, #8]
 8006520:	6823      	ldr	r3, [r4, #0]
 8006522:	4433      	add	r3, r6
 8006524:	6023      	str	r3, [r4, #0]
 8006526:	e7db      	b.n	80064e0 <__ssputs_r+0x58>
 8006528:	462a      	mov	r2, r5
 800652a:	f001 f82d 	bl	8007588 <_realloc_r>
 800652e:	4606      	mov	r6, r0
 8006530:	2800      	cmp	r0, #0
 8006532:	d1e1      	bne.n	80064f8 <__ssputs_r+0x70>
 8006534:	4650      	mov	r0, sl
 8006536:	6921      	ldr	r1, [r4, #16]
 8006538:	f000 ff4a 	bl	80073d0 <_free_r>
 800653c:	e7c7      	b.n	80064ce <__ssputs_r+0x46>
	...

08006540 <_svfiprintf_r>:
 8006540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006544:	4698      	mov	r8, r3
 8006546:	898b      	ldrh	r3, [r1, #12]
 8006548:	4607      	mov	r7, r0
 800654a:	061b      	lsls	r3, r3, #24
 800654c:	460d      	mov	r5, r1
 800654e:	4614      	mov	r4, r2
 8006550:	b09d      	sub	sp, #116	; 0x74
 8006552:	d50e      	bpl.n	8006572 <_svfiprintf_r+0x32>
 8006554:	690b      	ldr	r3, [r1, #16]
 8006556:	b963      	cbnz	r3, 8006572 <_svfiprintf_r+0x32>
 8006558:	2140      	movs	r1, #64	; 0x40
 800655a:	f000 ffa1 	bl	80074a0 <_malloc_r>
 800655e:	6028      	str	r0, [r5, #0]
 8006560:	6128      	str	r0, [r5, #16]
 8006562:	b920      	cbnz	r0, 800656e <_svfiprintf_r+0x2e>
 8006564:	230c      	movs	r3, #12
 8006566:	603b      	str	r3, [r7, #0]
 8006568:	f04f 30ff 	mov.w	r0, #4294967295
 800656c:	e0d1      	b.n	8006712 <_svfiprintf_r+0x1d2>
 800656e:	2340      	movs	r3, #64	; 0x40
 8006570:	616b      	str	r3, [r5, #20]
 8006572:	2300      	movs	r3, #0
 8006574:	9309      	str	r3, [sp, #36]	; 0x24
 8006576:	2320      	movs	r3, #32
 8006578:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800657c:	2330      	movs	r3, #48	; 0x30
 800657e:	f04f 0901 	mov.w	r9, #1
 8006582:	f8cd 800c 	str.w	r8, [sp, #12]
 8006586:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800672c <_svfiprintf_r+0x1ec>
 800658a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800658e:	4623      	mov	r3, r4
 8006590:	469a      	mov	sl, r3
 8006592:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006596:	b10a      	cbz	r2, 800659c <_svfiprintf_r+0x5c>
 8006598:	2a25      	cmp	r2, #37	; 0x25
 800659a:	d1f9      	bne.n	8006590 <_svfiprintf_r+0x50>
 800659c:	ebba 0b04 	subs.w	fp, sl, r4
 80065a0:	d00b      	beq.n	80065ba <_svfiprintf_r+0x7a>
 80065a2:	465b      	mov	r3, fp
 80065a4:	4622      	mov	r2, r4
 80065a6:	4629      	mov	r1, r5
 80065a8:	4638      	mov	r0, r7
 80065aa:	f7ff ff6d 	bl	8006488 <__ssputs_r>
 80065ae:	3001      	adds	r0, #1
 80065b0:	f000 80aa 	beq.w	8006708 <_svfiprintf_r+0x1c8>
 80065b4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80065b6:	445a      	add	r2, fp
 80065b8:	9209      	str	r2, [sp, #36]	; 0x24
 80065ba:	f89a 3000 	ldrb.w	r3, [sl]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	f000 80a2 	beq.w	8006708 <_svfiprintf_r+0x1c8>
 80065c4:	2300      	movs	r3, #0
 80065c6:	f04f 32ff 	mov.w	r2, #4294967295
 80065ca:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80065ce:	f10a 0a01 	add.w	sl, sl, #1
 80065d2:	9304      	str	r3, [sp, #16]
 80065d4:	9307      	str	r3, [sp, #28]
 80065d6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80065da:	931a      	str	r3, [sp, #104]	; 0x68
 80065dc:	4654      	mov	r4, sl
 80065de:	2205      	movs	r2, #5
 80065e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065e4:	4851      	ldr	r0, [pc, #324]	; (800672c <_svfiprintf_r+0x1ec>)
 80065e6:	f000 fecb 	bl	8007380 <memchr>
 80065ea:	9a04      	ldr	r2, [sp, #16]
 80065ec:	b9d8      	cbnz	r0, 8006626 <_svfiprintf_r+0xe6>
 80065ee:	06d0      	lsls	r0, r2, #27
 80065f0:	bf44      	itt	mi
 80065f2:	2320      	movmi	r3, #32
 80065f4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80065f8:	0711      	lsls	r1, r2, #28
 80065fa:	bf44      	itt	mi
 80065fc:	232b      	movmi	r3, #43	; 0x2b
 80065fe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006602:	f89a 3000 	ldrb.w	r3, [sl]
 8006606:	2b2a      	cmp	r3, #42	; 0x2a
 8006608:	d015      	beq.n	8006636 <_svfiprintf_r+0xf6>
 800660a:	4654      	mov	r4, sl
 800660c:	2000      	movs	r0, #0
 800660e:	f04f 0c0a 	mov.w	ip, #10
 8006612:	9a07      	ldr	r2, [sp, #28]
 8006614:	4621      	mov	r1, r4
 8006616:	f811 3b01 	ldrb.w	r3, [r1], #1
 800661a:	3b30      	subs	r3, #48	; 0x30
 800661c:	2b09      	cmp	r3, #9
 800661e:	d94e      	bls.n	80066be <_svfiprintf_r+0x17e>
 8006620:	b1b0      	cbz	r0, 8006650 <_svfiprintf_r+0x110>
 8006622:	9207      	str	r2, [sp, #28]
 8006624:	e014      	b.n	8006650 <_svfiprintf_r+0x110>
 8006626:	eba0 0308 	sub.w	r3, r0, r8
 800662a:	fa09 f303 	lsl.w	r3, r9, r3
 800662e:	4313      	orrs	r3, r2
 8006630:	46a2      	mov	sl, r4
 8006632:	9304      	str	r3, [sp, #16]
 8006634:	e7d2      	b.n	80065dc <_svfiprintf_r+0x9c>
 8006636:	9b03      	ldr	r3, [sp, #12]
 8006638:	1d19      	adds	r1, r3, #4
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	9103      	str	r1, [sp, #12]
 800663e:	2b00      	cmp	r3, #0
 8006640:	bfbb      	ittet	lt
 8006642:	425b      	neglt	r3, r3
 8006644:	f042 0202 	orrlt.w	r2, r2, #2
 8006648:	9307      	strge	r3, [sp, #28]
 800664a:	9307      	strlt	r3, [sp, #28]
 800664c:	bfb8      	it	lt
 800664e:	9204      	strlt	r2, [sp, #16]
 8006650:	7823      	ldrb	r3, [r4, #0]
 8006652:	2b2e      	cmp	r3, #46	; 0x2e
 8006654:	d10c      	bne.n	8006670 <_svfiprintf_r+0x130>
 8006656:	7863      	ldrb	r3, [r4, #1]
 8006658:	2b2a      	cmp	r3, #42	; 0x2a
 800665a:	d135      	bne.n	80066c8 <_svfiprintf_r+0x188>
 800665c:	9b03      	ldr	r3, [sp, #12]
 800665e:	3402      	adds	r4, #2
 8006660:	1d1a      	adds	r2, r3, #4
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	9203      	str	r2, [sp, #12]
 8006666:	2b00      	cmp	r3, #0
 8006668:	bfb8      	it	lt
 800666a:	f04f 33ff 	movlt.w	r3, #4294967295
 800666e:	9305      	str	r3, [sp, #20]
 8006670:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 8006730 <_svfiprintf_r+0x1f0>
 8006674:	2203      	movs	r2, #3
 8006676:	4650      	mov	r0, sl
 8006678:	7821      	ldrb	r1, [r4, #0]
 800667a:	f000 fe81 	bl	8007380 <memchr>
 800667e:	b140      	cbz	r0, 8006692 <_svfiprintf_r+0x152>
 8006680:	2340      	movs	r3, #64	; 0x40
 8006682:	eba0 000a 	sub.w	r0, r0, sl
 8006686:	fa03 f000 	lsl.w	r0, r3, r0
 800668a:	9b04      	ldr	r3, [sp, #16]
 800668c:	3401      	adds	r4, #1
 800668e:	4303      	orrs	r3, r0
 8006690:	9304      	str	r3, [sp, #16]
 8006692:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006696:	2206      	movs	r2, #6
 8006698:	4826      	ldr	r0, [pc, #152]	; (8006734 <_svfiprintf_r+0x1f4>)
 800669a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800669e:	f000 fe6f 	bl	8007380 <memchr>
 80066a2:	2800      	cmp	r0, #0
 80066a4:	d038      	beq.n	8006718 <_svfiprintf_r+0x1d8>
 80066a6:	4b24      	ldr	r3, [pc, #144]	; (8006738 <_svfiprintf_r+0x1f8>)
 80066a8:	bb1b      	cbnz	r3, 80066f2 <_svfiprintf_r+0x1b2>
 80066aa:	9b03      	ldr	r3, [sp, #12]
 80066ac:	3307      	adds	r3, #7
 80066ae:	f023 0307 	bic.w	r3, r3, #7
 80066b2:	3308      	adds	r3, #8
 80066b4:	9303      	str	r3, [sp, #12]
 80066b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066b8:	4433      	add	r3, r6
 80066ba:	9309      	str	r3, [sp, #36]	; 0x24
 80066bc:	e767      	b.n	800658e <_svfiprintf_r+0x4e>
 80066be:	460c      	mov	r4, r1
 80066c0:	2001      	movs	r0, #1
 80066c2:	fb0c 3202 	mla	r2, ip, r2, r3
 80066c6:	e7a5      	b.n	8006614 <_svfiprintf_r+0xd4>
 80066c8:	2300      	movs	r3, #0
 80066ca:	f04f 0c0a 	mov.w	ip, #10
 80066ce:	4619      	mov	r1, r3
 80066d0:	3401      	adds	r4, #1
 80066d2:	9305      	str	r3, [sp, #20]
 80066d4:	4620      	mov	r0, r4
 80066d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80066da:	3a30      	subs	r2, #48	; 0x30
 80066dc:	2a09      	cmp	r2, #9
 80066de:	d903      	bls.n	80066e8 <_svfiprintf_r+0x1a8>
 80066e0:	2b00      	cmp	r3, #0
 80066e2:	d0c5      	beq.n	8006670 <_svfiprintf_r+0x130>
 80066e4:	9105      	str	r1, [sp, #20]
 80066e6:	e7c3      	b.n	8006670 <_svfiprintf_r+0x130>
 80066e8:	4604      	mov	r4, r0
 80066ea:	2301      	movs	r3, #1
 80066ec:	fb0c 2101 	mla	r1, ip, r1, r2
 80066f0:	e7f0      	b.n	80066d4 <_svfiprintf_r+0x194>
 80066f2:	ab03      	add	r3, sp, #12
 80066f4:	9300      	str	r3, [sp, #0]
 80066f6:	462a      	mov	r2, r5
 80066f8:	4638      	mov	r0, r7
 80066fa:	4b10      	ldr	r3, [pc, #64]	; (800673c <_svfiprintf_r+0x1fc>)
 80066fc:	a904      	add	r1, sp, #16
 80066fe:	f3af 8000 	nop.w
 8006702:	1c42      	adds	r2, r0, #1
 8006704:	4606      	mov	r6, r0
 8006706:	d1d6      	bne.n	80066b6 <_svfiprintf_r+0x176>
 8006708:	89ab      	ldrh	r3, [r5, #12]
 800670a:	065b      	lsls	r3, r3, #25
 800670c:	f53f af2c 	bmi.w	8006568 <_svfiprintf_r+0x28>
 8006710:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006712:	b01d      	add	sp, #116	; 0x74
 8006714:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006718:	ab03      	add	r3, sp, #12
 800671a:	9300      	str	r3, [sp, #0]
 800671c:	462a      	mov	r2, r5
 800671e:	4638      	mov	r0, r7
 8006720:	4b06      	ldr	r3, [pc, #24]	; (800673c <_svfiprintf_r+0x1fc>)
 8006722:	a904      	add	r1, sp, #16
 8006724:	f000 fa50 	bl	8006bc8 <_printf_i>
 8006728:	e7eb      	b.n	8006702 <_svfiprintf_r+0x1c2>
 800672a:	bf00      	nop
 800672c:	080077d4 	.word	0x080077d4
 8006730:	080077da 	.word	0x080077da
 8006734:	080077de 	.word	0x080077de
 8006738:	00000000 	.word	0x00000000
 800673c:	08006489 	.word	0x08006489

08006740 <_sungetc_r>:
 8006740:	b538      	push	{r3, r4, r5, lr}
 8006742:	1c4b      	adds	r3, r1, #1
 8006744:	4614      	mov	r4, r2
 8006746:	d103      	bne.n	8006750 <_sungetc_r+0x10>
 8006748:	f04f 35ff 	mov.w	r5, #4294967295
 800674c:	4628      	mov	r0, r5
 800674e:	bd38      	pop	{r3, r4, r5, pc}
 8006750:	8993      	ldrh	r3, [r2, #12]
 8006752:	b2cd      	uxtb	r5, r1
 8006754:	f023 0320 	bic.w	r3, r3, #32
 8006758:	8193      	strh	r3, [r2, #12]
 800675a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800675c:	6852      	ldr	r2, [r2, #4]
 800675e:	b18b      	cbz	r3, 8006784 <_sungetc_r+0x44>
 8006760:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006762:	4293      	cmp	r3, r2
 8006764:	dd08      	ble.n	8006778 <_sungetc_r+0x38>
 8006766:	6823      	ldr	r3, [r4, #0]
 8006768:	1e5a      	subs	r2, r3, #1
 800676a:	6022      	str	r2, [r4, #0]
 800676c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8006770:	6863      	ldr	r3, [r4, #4]
 8006772:	3301      	adds	r3, #1
 8006774:	6063      	str	r3, [r4, #4]
 8006776:	e7e9      	b.n	800674c <_sungetc_r+0xc>
 8006778:	4621      	mov	r1, r4
 800677a:	f000 fdc7 	bl	800730c <__submore>
 800677e:	2800      	cmp	r0, #0
 8006780:	d0f1      	beq.n	8006766 <_sungetc_r+0x26>
 8006782:	e7e1      	b.n	8006748 <_sungetc_r+0x8>
 8006784:	6921      	ldr	r1, [r4, #16]
 8006786:	6823      	ldr	r3, [r4, #0]
 8006788:	b151      	cbz	r1, 80067a0 <_sungetc_r+0x60>
 800678a:	4299      	cmp	r1, r3
 800678c:	d208      	bcs.n	80067a0 <_sungetc_r+0x60>
 800678e:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8006792:	42a9      	cmp	r1, r5
 8006794:	d104      	bne.n	80067a0 <_sungetc_r+0x60>
 8006796:	3b01      	subs	r3, #1
 8006798:	3201      	adds	r2, #1
 800679a:	6023      	str	r3, [r4, #0]
 800679c:	6062      	str	r2, [r4, #4]
 800679e:	e7d5      	b.n	800674c <_sungetc_r+0xc>
 80067a0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80067a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80067a8:	6363      	str	r3, [r4, #52]	; 0x34
 80067aa:	2303      	movs	r3, #3
 80067ac:	63a3      	str	r3, [r4, #56]	; 0x38
 80067ae:	4623      	mov	r3, r4
 80067b0:	f803 5f46 	strb.w	r5, [r3, #70]!
 80067b4:	6023      	str	r3, [r4, #0]
 80067b6:	2301      	movs	r3, #1
 80067b8:	e7dc      	b.n	8006774 <_sungetc_r+0x34>

080067ba <__ssrefill_r>:
 80067ba:	b510      	push	{r4, lr}
 80067bc:	460c      	mov	r4, r1
 80067be:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80067c0:	b169      	cbz	r1, 80067de <__ssrefill_r+0x24>
 80067c2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80067c6:	4299      	cmp	r1, r3
 80067c8:	d001      	beq.n	80067ce <__ssrefill_r+0x14>
 80067ca:	f000 fe01 	bl	80073d0 <_free_r>
 80067ce:	2000      	movs	r0, #0
 80067d0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80067d2:	6360      	str	r0, [r4, #52]	; 0x34
 80067d4:	6063      	str	r3, [r4, #4]
 80067d6:	b113      	cbz	r3, 80067de <__ssrefill_r+0x24>
 80067d8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80067da:	6023      	str	r3, [r4, #0]
 80067dc:	bd10      	pop	{r4, pc}
 80067de:	6923      	ldr	r3, [r4, #16]
 80067e0:	f04f 30ff 	mov.w	r0, #4294967295
 80067e4:	6023      	str	r3, [r4, #0]
 80067e6:	2300      	movs	r3, #0
 80067e8:	6063      	str	r3, [r4, #4]
 80067ea:	89a3      	ldrh	r3, [r4, #12]
 80067ec:	f043 0320 	orr.w	r3, r3, #32
 80067f0:	81a3      	strh	r3, [r4, #12]
 80067f2:	e7f3      	b.n	80067dc <__ssrefill_r+0x22>

080067f4 <__ssvfiscanf_r>:
 80067f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067f8:	460c      	mov	r4, r1
 80067fa:	2100      	movs	r1, #0
 80067fc:	4606      	mov	r6, r0
 80067fe:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8006802:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8006806:	49a7      	ldr	r1, [pc, #668]	; (8006aa4 <__ssvfiscanf_r+0x2b0>)
 8006808:	f10d 0804 	add.w	r8, sp, #4
 800680c:	91a0      	str	r1, [sp, #640]	; 0x280
 800680e:	49a6      	ldr	r1, [pc, #664]	; (8006aa8 <__ssvfiscanf_r+0x2b4>)
 8006810:	4fa6      	ldr	r7, [pc, #664]	; (8006aac <__ssvfiscanf_r+0x2b8>)
 8006812:	f8df 929c 	ldr.w	r9, [pc, #668]	; 8006ab0 <__ssvfiscanf_r+0x2bc>
 8006816:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800681a:	91a1      	str	r1, [sp, #644]	; 0x284
 800681c:	9300      	str	r3, [sp, #0]
 800681e:	7813      	ldrb	r3, [r2, #0]
 8006820:	2b00      	cmp	r3, #0
 8006822:	f000 815c 	beq.w	8006ade <__ssvfiscanf_r+0x2ea>
 8006826:	5dd9      	ldrb	r1, [r3, r7]
 8006828:	1c55      	adds	r5, r2, #1
 800682a:	f011 0108 	ands.w	r1, r1, #8
 800682e:	d019      	beq.n	8006864 <__ssvfiscanf_r+0x70>
 8006830:	6863      	ldr	r3, [r4, #4]
 8006832:	2b00      	cmp	r3, #0
 8006834:	dd0f      	ble.n	8006856 <__ssvfiscanf_r+0x62>
 8006836:	6823      	ldr	r3, [r4, #0]
 8006838:	781a      	ldrb	r2, [r3, #0]
 800683a:	5cba      	ldrb	r2, [r7, r2]
 800683c:	0712      	lsls	r2, r2, #28
 800683e:	d401      	bmi.n	8006844 <__ssvfiscanf_r+0x50>
 8006840:	462a      	mov	r2, r5
 8006842:	e7ec      	b.n	800681e <__ssvfiscanf_r+0x2a>
 8006844:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006846:	3301      	adds	r3, #1
 8006848:	3201      	adds	r2, #1
 800684a:	9245      	str	r2, [sp, #276]	; 0x114
 800684c:	6862      	ldr	r2, [r4, #4]
 800684e:	6023      	str	r3, [r4, #0]
 8006850:	3a01      	subs	r2, #1
 8006852:	6062      	str	r2, [r4, #4]
 8006854:	e7ec      	b.n	8006830 <__ssvfiscanf_r+0x3c>
 8006856:	4621      	mov	r1, r4
 8006858:	4630      	mov	r0, r6
 800685a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800685c:	4798      	blx	r3
 800685e:	2800      	cmp	r0, #0
 8006860:	d0e9      	beq.n	8006836 <__ssvfiscanf_r+0x42>
 8006862:	e7ed      	b.n	8006840 <__ssvfiscanf_r+0x4c>
 8006864:	2b25      	cmp	r3, #37	; 0x25
 8006866:	d012      	beq.n	800688e <__ssvfiscanf_r+0x9a>
 8006868:	469a      	mov	sl, r3
 800686a:	6863      	ldr	r3, [r4, #4]
 800686c:	2b00      	cmp	r3, #0
 800686e:	f340 8094 	ble.w	800699a <__ssvfiscanf_r+0x1a6>
 8006872:	6822      	ldr	r2, [r4, #0]
 8006874:	7813      	ldrb	r3, [r2, #0]
 8006876:	4553      	cmp	r3, sl
 8006878:	f040 8131 	bne.w	8006ade <__ssvfiscanf_r+0x2ea>
 800687c:	6863      	ldr	r3, [r4, #4]
 800687e:	3201      	adds	r2, #1
 8006880:	3b01      	subs	r3, #1
 8006882:	6063      	str	r3, [r4, #4]
 8006884:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8006886:	6022      	str	r2, [r4, #0]
 8006888:	3301      	adds	r3, #1
 800688a:	9345      	str	r3, [sp, #276]	; 0x114
 800688c:	e7d8      	b.n	8006840 <__ssvfiscanf_r+0x4c>
 800688e:	9141      	str	r1, [sp, #260]	; 0x104
 8006890:	9143      	str	r1, [sp, #268]	; 0x10c
 8006892:	7853      	ldrb	r3, [r2, #1]
 8006894:	2b2a      	cmp	r3, #42	; 0x2a
 8006896:	bf04      	itt	eq
 8006898:	2310      	moveq	r3, #16
 800689a:	1c95      	addeq	r5, r2, #2
 800689c:	f04f 020a 	mov.w	r2, #10
 80068a0:	bf08      	it	eq
 80068a2:	9341      	streq	r3, [sp, #260]	; 0x104
 80068a4:	46aa      	mov	sl, r5
 80068a6:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80068aa:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 80068ae:	2b09      	cmp	r3, #9
 80068b0:	d91d      	bls.n	80068ee <__ssvfiscanf_r+0xfa>
 80068b2:	2203      	movs	r2, #3
 80068b4:	487e      	ldr	r0, [pc, #504]	; (8006ab0 <__ssvfiscanf_r+0x2bc>)
 80068b6:	f000 fd63 	bl	8007380 <memchr>
 80068ba:	b140      	cbz	r0, 80068ce <__ssvfiscanf_r+0xda>
 80068bc:	2301      	movs	r3, #1
 80068be:	4655      	mov	r5, sl
 80068c0:	eba0 0009 	sub.w	r0, r0, r9
 80068c4:	fa03 f000 	lsl.w	r0, r3, r0
 80068c8:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80068ca:	4318      	orrs	r0, r3
 80068cc:	9041      	str	r0, [sp, #260]	; 0x104
 80068ce:	f815 3b01 	ldrb.w	r3, [r5], #1
 80068d2:	2b78      	cmp	r3, #120	; 0x78
 80068d4:	d806      	bhi.n	80068e4 <__ssvfiscanf_r+0xf0>
 80068d6:	2b57      	cmp	r3, #87	; 0x57
 80068d8:	d810      	bhi.n	80068fc <__ssvfiscanf_r+0x108>
 80068da:	2b25      	cmp	r3, #37	; 0x25
 80068dc:	d0c4      	beq.n	8006868 <__ssvfiscanf_r+0x74>
 80068de:	d857      	bhi.n	8006990 <__ssvfiscanf_r+0x19c>
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d065      	beq.n	80069b0 <__ssvfiscanf_r+0x1bc>
 80068e4:	2303      	movs	r3, #3
 80068e6:	9347      	str	r3, [sp, #284]	; 0x11c
 80068e8:	230a      	movs	r3, #10
 80068ea:	9342      	str	r3, [sp, #264]	; 0x108
 80068ec:	e072      	b.n	80069d4 <__ssvfiscanf_r+0x1e0>
 80068ee:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80068f0:	4655      	mov	r5, sl
 80068f2:	fb02 1103 	mla	r1, r2, r3, r1
 80068f6:	3930      	subs	r1, #48	; 0x30
 80068f8:	9143      	str	r1, [sp, #268]	; 0x10c
 80068fa:	e7d3      	b.n	80068a4 <__ssvfiscanf_r+0xb0>
 80068fc:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8006900:	2a20      	cmp	r2, #32
 8006902:	d8ef      	bhi.n	80068e4 <__ssvfiscanf_r+0xf0>
 8006904:	a101      	add	r1, pc, #4	; (adr r1, 800690c <__ssvfiscanf_r+0x118>)
 8006906:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800690a:	bf00      	nop
 800690c:	080069bf 	.word	0x080069bf
 8006910:	080068e5 	.word	0x080068e5
 8006914:	080068e5 	.word	0x080068e5
 8006918:	08006a1d 	.word	0x08006a1d
 800691c:	080068e5 	.word	0x080068e5
 8006920:	080068e5 	.word	0x080068e5
 8006924:	080068e5 	.word	0x080068e5
 8006928:	080068e5 	.word	0x080068e5
 800692c:	080068e5 	.word	0x080068e5
 8006930:	080068e5 	.word	0x080068e5
 8006934:	080068e5 	.word	0x080068e5
 8006938:	08006a33 	.word	0x08006a33
 800693c:	08006a09 	.word	0x08006a09
 8006940:	08006997 	.word	0x08006997
 8006944:	08006997 	.word	0x08006997
 8006948:	08006997 	.word	0x08006997
 800694c:	080068e5 	.word	0x080068e5
 8006950:	08006a0d 	.word	0x08006a0d
 8006954:	080068e5 	.word	0x080068e5
 8006958:	080068e5 	.word	0x080068e5
 800695c:	080068e5 	.word	0x080068e5
 8006960:	080068e5 	.word	0x080068e5
 8006964:	08006a43 	.word	0x08006a43
 8006968:	08006a15 	.word	0x08006a15
 800696c:	080069b7 	.word	0x080069b7
 8006970:	080068e5 	.word	0x080068e5
 8006974:	080068e5 	.word	0x080068e5
 8006978:	08006a3f 	.word	0x08006a3f
 800697c:	080068e5 	.word	0x080068e5
 8006980:	08006a09 	.word	0x08006a09
 8006984:	080068e5 	.word	0x080068e5
 8006988:	080068e5 	.word	0x080068e5
 800698c:	080069bf 	.word	0x080069bf
 8006990:	3b45      	subs	r3, #69	; 0x45
 8006992:	2b02      	cmp	r3, #2
 8006994:	d8a6      	bhi.n	80068e4 <__ssvfiscanf_r+0xf0>
 8006996:	2305      	movs	r3, #5
 8006998:	e01b      	b.n	80069d2 <__ssvfiscanf_r+0x1de>
 800699a:	4621      	mov	r1, r4
 800699c:	4630      	mov	r0, r6
 800699e:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80069a0:	4798      	blx	r3
 80069a2:	2800      	cmp	r0, #0
 80069a4:	f43f af65 	beq.w	8006872 <__ssvfiscanf_r+0x7e>
 80069a8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80069aa:	2800      	cmp	r0, #0
 80069ac:	f040 808d 	bne.w	8006aca <__ssvfiscanf_r+0x2d6>
 80069b0:	f04f 30ff 	mov.w	r0, #4294967295
 80069b4:	e08f      	b.n	8006ad6 <__ssvfiscanf_r+0x2e2>
 80069b6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80069b8:	f042 0220 	orr.w	r2, r2, #32
 80069bc:	9241      	str	r2, [sp, #260]	; 0x104
 80069be:	9a41      	ldr	r2, [sp, #260]	; 0x104
 80069c0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80069c4:	9241      	str	r2, [sp, #260]	; 0x104
 80069c6:	2210      	movs	r2, #16
 80069c8:	2b6f      	cmp	r3, #111	; 0x6f
 80069ca:	bf34      	ite	cc
 80069cc:	2303      	movcc	r3, #3
 80069ce:	2304      	movcs	r3, #4
 80069d0:	9242      	str	r2, [sp, #264]	; 0x108
 80069d2:	9347      	str	r3, [sp, #284]	; 0x11c
 80069d4:	6863      	ldr	r3, [r4, #4]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	dd42      	ble.n	8006a60 <__ssvfiscanf_r+0x26c>
 80069da:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80069dc:	0659      	lsls	r1, r3, #25
 80069de:	d404      	bmi.n	80069ea <__ssvfiscanf_r+0x1f6>
 80069e0:	6823      	ldr	r3, [r4, #0]
 80069e2:	781a      	ldrb	r2, [r3, #0]
 80069e4:	5cba      	ldrb	r2, [r7, r2]
 80069e6:	0712      	lsls	r2, r2, #28
 80069e8:	d441      	bmi.n	8006a6e <__ssvfiscanf_r+0x27a>
 80069ea:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80069ec:	2b02      	cmp	r3, #2
 80069ee:	dc50      	bgt.n	8006a92 <__ssvfiscanf_r+0x29e>
 80069f0:	466b      	mov	r3, sp
 80069f2:	4622      	mov	r2, r4
 80069f4:	4630      	mov	r0, r6
 80069f6:	a941      	add	r1, sp, #260	; 0x104
 80069f8:	f000 fa0c 	bl	8006e14 <_scanf_chars>
 80069fc:	2801      	cmp	r0, #1
 80069fe:	d06e      	beq.n	8006ade <__ssvfiscanf_r+0x2ea>
 8006a00:	2802      	cmp	r0, #2
 8006a02:	f47f af1d 	bne.w	8006840 <__ssvfiscanf_r+0x4c>
 8006a06:	e7cf      	b.n	80069a8 <__ssvfiscanf_r+0x1b4>
 8006a08:	220a      	movs	r2, #10
 8006a0a:	e7dd      	b.n	80069c8 <__ssvfiscanf_r+0x1d4>
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	9342      	str	r3, [sp, #264]	; 0x108
 8006a10:	2303      	movs	r3, #3
 8006a12:	e7de      	b.n	80069d2 <__ssvfiscanf_r+0x1de>
 8006a14:	2308      	movs	r3, #8
 8006a16:	9342      	str	r3, [sp, #264]	; 0x108
 8006a18:	2304      	movs	r3, #4
 8006a1a:	e7da      	b.n	80069d2 <__ssvfiscanf_r+0x1de>
 8006a1c:	4629      	mov	r1, r5
 8006a1e:	4640      	mov	r0, r8
 8006a20:	f000 fb4a 	bl	80070b8 <__sccl>
 8006a24:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006a26:	4605      	mov	r5, r0
 8006a28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a2c:	9341      	str	r3, [sp, #260]	; 0x104
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e7cf      	b.n	80069d2 <__ssvfiscanf_r+0x1de>
 8006a32:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006a34:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a38:	9341      	str	r3, [sp, #260]	; 0x104
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	e7c9      	b.n	80069d2 <__ssvfiscanf_r+0x1de>
 8006a3e:	2302      	movs	r3, #2
 8006a40:	e7c7      	b.n	80069d2 <__ssvfiscanf_r+0x1de>
 8006a42:	9841      	ldr	r0, [sp, #260]	; 0x104
 8006a44:	06c3      	lsls	r3, r0, #27
 8006a46:	f53f aefb 	bmi.w	8006840 <__ssvfiscanf_r+0x4c>
 8006a4a:	9b00      	ldr	r3, [sp, #0]
 8006a4c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006a4e:	1d19      	adds	r1, r3, #4
 8006a50:	9100      	str	r1, [sp, #0]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f010 0f01 	tst.w	r0, #1
 8006a58:	bf14      	ite	ne
 8006a5a:	801a      	strhne	r2, [r3, #0]
 8006a5c:	601a      	streq	r2, [r3, #0]
 8006a5e:	e6ef      	b.n	8006840 <__ssvfiscanf_r+0x4c>
 8006a60:	4621      	mov	r1, r4
 8006a62:	4630      	mov	r0, r6
 8006a64:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006a66:	4798      	blx	r3
 8006a68:	2800      	cmp	r0, #0
 8006a6a:	d0b6      	beq.n	80069da <__ssvfiscanf_r+0x1e6>
 8006a6c:	e79c      	b.n	80069a8 <__ssvfiscanf_r+0x1b4>
 8006a6e:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006a70:	3201      	adds	r2, #1
 8006a72:	9245      	str	r2, [sp, #276]	; 0x114
 8006a74:	6862      	ldr	r2, [r4, #4]
 8006a76:	3a01      	subs	r2, #1
 8006a78:	2a00      	cmp	r2, #0
 8006a7a:	6062      	str	r2, [r4, #4]
 8006a7c:	dd02      	ble.n	8006a84 <__ssvfiscanf_r+0x290>
 8006a7e:	3301      	adds	r3, #1
 8006a80:	6023      	str	r3, [r4, #0]
 8006a82:	e7ad      	b.n	80069e0 <__ssvfiscanf_r+0x1ec>
 8006a84:	4621      	mov	r1, r4
 8006a86:	4630      	mov	r0, r6
 8006a88:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006a8a:	4798      	blx	r3
 8006a8c:	2800      	cmp	r0, #0
 8006a8e:	d0a7      	beq.n	80069e0 <__ssvfiscanf_r+0x1ec>
 8006a90:	e78a      	b.n	80069a8 <__ssvfiscanf_r+0x1b4>
 8006a92:	2b04      	cmp	r3, #4
 8006a94:	dc0e      	bgt.n	8006ab4 <__ssvfiscanf_r+0x2c0>
 8006a96:	466b      	mov	r3, sp
 8006a98:	4622      	mov	r2, r4
 8006a9a:	4630      	mov	r0, r6
 8006a9c:	a941      	add	r1, sp, #260	; 0x104
 8006a9e:	f000 fa13 	bl	8006ec8 <_scanf_i>
 8006aa2:	e7ab      	b.n	80069fc <__ssvfiscanf_r+0x208>
 8006aa4:	08006741 	.word	0x08006741
 8006aa8:	080067bb 	.word	0x080067bb
 8006aac:	08007823 	.word	0x08007823
 8006ab0:	080077da 	.word	0x080077da
 8006ab4:	4b0b      	ldr	r3, [pc, #44]	; (8006ae4 <__ssvfiscanf_r+0x2f0>)
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	f43f aec2 	beq.w	8006840 <__ssvfiscanf_r+0x4c>
 8006abc:	466b      	mov	r3, sp
 8006abe:	4622      	mov	r2, r4
 8006ac0:	4630      	mov	r0, r6
 8006ac2:	a941      	add	r1, sp, #260	; 0x104
 8006ac4:	f3af 8000 	nop.w
 8006ac8:	e798      	b.n	80069fc <__ssvfiscanf_r+0x208>
 8006aca:	89a3      	ldrh	r3, [r4, #12]
 8006acc:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006ad0:	bf18      	it	ne
 8006ad2:	f04f 30ff 	movne.w	r0, #4294967295
 8006ad6:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8006ada:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ade:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006ae0:	e7f9      	b.n	8006ad6 <__ssvfiscanf_r+0x2e2>
 8006ae2:	bf00      	nop
 8006ae4:	00000000 	.word	0x00000000

08006ae8 <_printf_common>:
 8006ae8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006aec:	4616      	mov	r6, r2
 8006aee:	4699      	mov	r9, r3
 8006af0:	688a      	ldr	r2, [r1, #8]
 8006af2:	690b      	ldr	r3, [r1, #16]
 8006af4:	4607      	mov	r7, r0
 8006af6:	4293      	cmp	r3, r2
 8006af8:	bfb8      	it	lt
 8006afa:	4613      	movlt	r3, r2
 8006afc:	6033      	str	r3, [r6, #0]
 8006afe:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b02:	460c      	mov	r4, r1
 8006b04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b08:	b10a      	cbz	r2, 8006b0e <_printf_common+0x26>
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	6033      	str	r3, [r6, #0]
 8006b0e:	6823      	ldr	r3, [r4, #0]
 8006b10:	0699      	lsls	r1, r3, #26
 8006b12:	bf42      	ittt	mi
 8006b14:	6833      	ldrmi	r3, [r6, #0]
 8006b16:	3302      	addmi	r3, #2
 8006b18:	6033      	strmi	r3, [r6, #0]
 8006b1a:	6825      	ldr	r5, [r4, #0]
 8006b1c:	f015 0506 	ands.w	r5, r5, #6
 8006b20:	d106      	bne.n	8006b30 <_printf_common+0x48>
 8006b22:	f104 0a19 	add.w	sl, r4, #25
 8006b26:	68e3      	ldr	r3, [r4, #12]
 8006b28:	6832      	ldr	r2, [r6, #0]
 8006b2a:	1a9b      	subs	r3, r3, r2
 8006b2c:	42ab      	cmp	r3, r5
 8006b2e:	dc28      	bgt.n	8006b82 <_printf_common+0x9a>
 8006b30:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006b34:	1e13      	subs	r3, r2, #0
 8006b36:	6822      	ldr	r2, [r4, #0]
 8006b38:	bf18      	it	ne
 8006b3a:	2301      	movne	r3, #1
 8006b3c:	0692      	lsls	r2, r2, #26
 8006b3e:	d42d      	bmi.n	8006b9c <_printf_common+0xb4>
 8006b40:	4649      	mov	r1, r9
 8006b42:	4638      	mov	r0, r7
 8006b44:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006b48:	47c0      	blx	r8
 8006b4a:	3001      	adds	r0, #1
 8006b4c:	d020      	beq.n	8006b90 <_printf_common+0xa8>
 8006b4e:	6823      	ldr	r3, [r4, #0]
 8006b50:	68e5      	ldr	r5, [r4, #12]
 8006b52:	f003 0306 	and.w	r3, r3, #6
 8006b56:	2b04      	cmp	r3, #4
 8006b58:	bf18      	it	ne
 8006b5a:	2500      	movne	r5, #0
 8006b5c:	6832      	ldr	r2, [r6, #0]
 8006b5e:	f04f 0600 	mov.w	r6, #0
 8006b62:	68a3      	ldr	r3, [r4, #8]
 8006b64:	bf08      	it	eq
 8006b66:	1aad      	subeq	r5, r5, r2
 8006b68:	6922      	ldr	r2, [r4, #16]
 8006b6a:	bf08      	it	eq
 8006b6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b70:	4293      	cmp	r3, r2
 8006b72:	bfc4      	itt	gt
 8006b74:	1a9b      	subgt	r3, r3, r2
 8006b76:	18ed      	addgt	r5, r5, r3
 8006b78:	341a      	adds	r4, #26
 8006b7a:	42b5      	cmp	r5, r6
 8006b7c:	d11a      	bne.n	8006bb4 <_printf_common+0xcc>
 8006b7e:	2000      	movs	r0, #0
 8006b80:	e008      	b.n	8006b94 <_printf_common+0xac>
 8006b82:	2301      	movs	r3, #1
 8006b84:	4652      	mov	r2, sl
 8006b86:	4649      	mov	r1, r9
 8006b88:	4638      	mov	r0, r7
 8006b8a:	47c0      	blx	r8
 8006b8c:	3001      	adds	r0, #1
 8006b8e:	d103      	bne.n	8006b98 <_printf_common+0xb0>
 8006b90:	f04f 30ff 	mov.w	r0, #4294967295
 8006b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b98:	3501      	adds	r5, #1
 8006b9a:	e7c4      	b.n	8006b26 <_printf_common+0x3e>
 8006b9c:	2030      	movs	r0, #48	; 0x30
 8006b9e:	18e1      	adds	r1, r4, r3
 8006ba0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006ba4:	1c5a      	adds	r2, r3, #1
 8006ba6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006baa:	4422      	add	r2, r4
 8006bac:	3302      	adds	r3, #2
 8006bae:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006bb2:	e7c5      	b.n	8006b40 <_printf_common+0x58>
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	4622      	mov	r2, r4
 8006bb8:	4649      	mov	r1, r9
 8006bba:	4638      	mov	r0, r7
 8006bbc:	47c0      	blx	r8
 8006bbe:	3001      	adds	r0, #1
 8006bc0:	d0e6      	beq.n	8006b90 <_printf_common+0xa8>
 8006bc2:	3601      	adds	r6, #1
 8006bc4:	e7d9      	b.n	8006b7a <_printf_common+0x92>
	...

08006bc8 <_printf_i>:
 8006bc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bcc:	7e0f      	ldrb	r7, [r1, #24]
 8006bce:	4691      	mov	r9, r2
 8006bd0:	2f78      	cmp	r7, #120	; 0x78
 8006bd2:	4680      	mov	r8, r0
 8006bd4:	460c      	mov	r4, r1
 8006bd6:	469a      	mov	sl, r3
 8006bd8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006bda:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006bde:	d807      	bhi.n	8006bf0 <_printf_i+0x28>
 8006be0:	2f62      	cmp	r7, #98	; 0x62
 8006be2:	d80a      	bhi.n	8006bfa <_printf_i+0x32>
 8006be4:	2f00      	cmp	r7, #0
 8006be6:	f000 80d9 	beq.w	8006d9c <_printf_i+0x1d4>
 8006bea:	2f58      	cmp	r7, #88	; 0x58
 8006bec:	f000 80a4 	beq.w	8006d38 <_printf_i+0x170>
 8006bf0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006bf4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006bf8:	e03a      	b.n	8006c70 <_printf_i+0xa8>
 8006bfa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006bfe:	2b15      	cmp	r3, #21
 8006c00:	d8f6      	bhi.n	8006bf0 <_printf_i+0x28>
 8006c02:	a101      	add	r1, pc, #4	; (adr r1, 8006c08 <_printf_i+0x40>)
 8006c04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c08:	08006c61 	.word	0x08006c61
 8006c0c:	08006c75 	.word	0x08006c75
 8006c10:	08006bf1 	.word	0x08006bf1
 8006c14:	08006bf1 	.word	0x08006bf1
 8006c18:	08006bf1 	.word	0x08006bf1
 8006c1c:	08006bf1 	.word	0x08006bf1
 8006c20:	08006c75 	.word	0x08006c75
 8006c24:	08006bf1 	.word	0x08006bf1
 8006c28:	08006bf1 	.word	0x08006bf1
 8006c2c:	08006bf1 	.word	0x08006bf1
 8006c30:	08006bf1 	.word	0x08006bf1
 8006c34:	08006d83 	.word	0x08006d83
 8006c38:	08006ca5 	.word	0x08006ca5
 8006c3c:	08006d65 	.word	0x08006d65
 8006c40:	08006bf1 	.word	0x08006bf1
 8006c44:	08006bf1 	.word	0x08006bf1
 8006c48:	08006da5 	.word	0x08006da5
 8006c4c:	08006bf1 	.word	0x08006bf1
 8006c50:	08006ca5 	.word	0x08006ca5
 8006c54:	08006bf1 	.word	0x08006bf1
 8006c58:	08006bf1 	.word	0x08006bf1
 8006c5c:	08006d6d 	.word	0x08006d6d
 8006c60:	682b      	ldr	r3, [r5, #0]
 8006c62:	1d1a      	adds	r2, r3, #4
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	602a      	str	r2, [r5, #0]
 8006c68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c70:	2301      	movs	r3, #1
 8006c72:	e0a4      	b.n	8006dbe <_printf_i+0x1f6>
 8006c74:	6820      	ldr	r0, [r4, #0]
 8006c76:	6829      	ldr	r1, [r5, #0]
 8006c78:	0606      	lsls	r6, r0, #24
 8006c7a:	f101 0304 	add.w	r3, r1, #4
 8006c7e:	d50a      	bpl.n	8006c96 <_printf_i+0xce>
 8006c80:	680e      	ldr	r6, [r1, #0]
 8006c82:	602b      	str	r3, [r5, #0]
 8006c84:	2e00      	cmp	r6, #0
 8006c86:	da03      	bge.n	8006c90 <_printf_i+0xc8>
 8006c88:	232d      	movs	r3, #45	; 0x2d
 8006c8a:	4276      	negs	r6, r6
 8006c8c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c90:	230a      	movs	r3, #10
 8006c92:	485e      	ldr	r0, [pc, #376]	; (8006e0c <_printf_i+0x244>)
 8006c94:	e019      	b.n	8006cca <_printf_i+0x102>
 8006c96:	680e      	ldr	r6, [r1, #0]
 8006c98:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006c9c:	602b      	str	r3, [r5, #0]
 8006c9e:	bf18      	it	ne
 8006ca0:	b236      	sxthne	r6, r6
 8006ca2:	e7ef      	b.n	8006c84 <_printf_i+0xbc>
 8006ca4:	682b      	ldr	r3, [r5, #0]
 8006ca6:	6820      	ldr	r0, [r4, #0]
 8006ca8:	1d19      	adds	r1, r3, #4
 8006caa:	6029      	str	r1, [r5, #0]
 8006cac:	0601      	lsls	r1, r0, #24
 8006cae:	d501      	bpl.n	8006cb4 <_printf_i+0xec>
 8006cb0:	681e      	ldr	r6, [r3, #0]
 8006cb2:	e002      	b.n	8006cba <_printf_i+0xf2>
 8006cb4:	0646      	lsls	r6, r0, #25
 8006cb6:	d5fb      	bpl.n	8006cb0 <_printf_i+0xe8>
 8006cb8:	881e      	ldrh	r6, [r3, #0]
 8006cba:	2f6f      	cmp	r7, #111	; 0x6f
 8006cbc:	bf0c      	ite	eq
 8006cbe:	2308      	moveq	r3, #8
 8006cc0:	230a      	movne	r3, #10
 8006cc2:	4852      	ldr	r0, [pc, #328]	; (8006e0c <_printf_i+0x244>)
 8006cc4:	2100      	movs	r1, #0
 8006cc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006cca:	6865      	ldr	r5, [r4, #4]
 8006ccc:	2d00      	cmp	r5, #0
 8006cce:	bfa8      	it	ge
 8006cd0:	6821      	ldrge	r1, [r4, #0]
 8006cd2:	60a5      	str	r5, [r4, #8]
 8006cd4:	bfa4      	itt	ge
 8006cd6:	f021 0104 	bicge.w	r1, r1, #4
 8006cda:	6021      	strge	r1, [r4, #0]
 8006cdc:	b90e      	cbnz	r6, 8006ce2 <_printf_i+0x11a>
 8006cde:	2d00      	cmp	r5, #0
 8006ce0:	d04d      	beq.n	8006d7e <_printf_i+0x1b6>
 8006ce2:	4615      	mov	r5, r2
 8006ce4:	fbb6 f1f3 	udiv	r1, r6, r3
 8006ce8:	fb03 6711 	mls	r7, r3, r1, r6
 8006cec:	5dc7      	ldrb	r7, [r0, r7]
 8006cee:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006cf2:	4637      	mov	r7, r6
 8006cf4:	42bb      	cmp	r3, r7
 8006cf6:	460e      	mov	r6, r1
 8006cf8:	d9f4      	bls.n	8006ce4 <_printf_i+0x11c>
 8006cfa:	2b08      	cmp	r3, #8
 8006cfc:	d10b      	bne.n	8006d16 <_printf_i+0x14e>
 8006cfe:	6823      	ldr	r3, [r4, #0]
 8006d00:	07de      	lsls	r6, r3, #31
 8006d02:	d508      	bpl.n	8006d16 <_printf_i+0x14e>
 8006d04:	6923      	ldr	r3, [r4, #16]
 8006d06:	6861      	ldr	r1, [r4, #4]
 8006d08:	4299      	cmp	r1, r3
 8006d0a:	bfde      	ittt	le
 8006d0c:	2330      	movle	r3, #48	; 0x30
 8006d0e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006d12:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006d16:	1b52      	subs	r2, r2, r5
 8006d18:	6122      	str	r2, [r4, #16]
 8006d1a:	464b      	mov	r3, r9
 8006d1c:	4621      	mov	r1, r4
 8006d1e:	4640      	mov	r0, r8
 8006d20:	f8cd a000 	str.w	sl, [sp]
 8006d24:	aa03      	add	r2, sp, #12
 8006d26:	f7ff fedf 	bl	8006ae8 <_printf_common>
 8006d2a:	3001      	adds	r0, #1
 8006d2c:	d14c      	bne.n	8006dc8 <_printf_i+0x200>
 8006d2e:	f04f 30ff 	mov.w	r0, #4294967295
 8006d32:	b004      	add	sp, #16
 8006d34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d38:	4834      	ldr	r0, [pc, #208]	; (8006e0c <_printf_i+0x244>)
 8006d3a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006d3e:	6829      	ldr	r1, [r5, #0]
 8006d40:	6823      	ldr	r3, [r4, #0]
 8006d42:	f851 6b04 	ldr.w	r6, [r1], #4
 8006d46:	6029      	str	r1, [r5, #0]
 8006d48:	061d      	lsls	r5, r3, #24
 8006d4a:	d514      	bpl.n	8006d76 <_printf_i+0x1ae>
 8006d4c:	07df      	lsls	r7, r3, #31
 8006d4e:	bf44      	itt	mi
 8006d50:	f043 0320 	orrmi.w	r3, r3, #32
 8006d54:	6023      	strmi	r3, [r4, #0]
 8006d56:	b91e      	cbnz	r6, 8006d60 <_printf_i+0x198>
 8006d58:	6823      	ldr	r3, [r4, #0]
 8006d5a:	f023 0320 	bic.w	r3, r3, #32
 8006d5e:	6023      	str	r3, [r4, #0]
 8006d60:	2310      	movs	r3, #16
 8006d62:	e7af      	b.n	8006cc4 <_printf_i+0xfc>
 8006d64:	6823      	ldr	r3, [r4, #0]
 8006d66:	f043 0320 	orr.w	r3, r3, #32
 8006d6a:	6023      	str	r3, [r4, #0]
 8006d6c:	2378      	movs	r3, #120	; 0x78
 8006d6e:	4828      	ldr	r0, [pc, #160]	; (8006e10 <_printf_i+0x248>)
 8006d70:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d74:	e7e3      	b.n	8006d3e <_printf_i+0x176>
 8006d76:	0659      	lsls	r1, r3, #25
 8006d78:	bf48      	it	mi
 8006d7a:	b2b6      	uxthmi	r6, r6
 8006d7c:	e7e6      	b.n	8006d4c <_printf_i+0x184>
 8006d7e:	4615      	mov	r5, r2
 8006d80:	e7bb      	b.n	8006cfa <_printf_i+0x132>
 8006d82:	682b      	ldr	r3, [r5, #0]
 8006d84:	6826      	ldr	r6, [r4, #0]
 8006d86:	1d18      	adds	r0, r3, #4
 8006d88:	6961      	ldr	r1, [r4, #20]
 8006d8a:	6028      	str	r0, [r5, #0]
 8006d8c:	0635      	lsls	r5, r6, #24
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	d501      	bpl.n	8006d96 <_printf_i+0x1ce>
 8006d92:	6019      	str	r1, [r3, #0]
 8006d94:	e002      	b.n	8006d9c <_printf_i+0x1d4>
 8006d96:	0670      	lsls	r0, r6, #25
 8006d98:	d5fb      	bpl.n	8006d92 <_printf_i+0x1ca>
 8006d9a:	8019      	strh	r1, [r3, #0]
 8006d9c:	2300      	movs	r3, #0
 8006d9e:	4615      	mov	r5, r2
 8006da0:	6123      	str	r3, [r4, #16]
 8006da2:	e7ba      	b.n	8006d1a <_printf_i+0x152>
 8006da4:	682b      	ldr	r3, [r5, #0]
 8006da6:	2100      	movs	r1, #0
 8006da8:	1d1a      	adds	r2, r3, #4
 8006daa:	602a      	str	r2, [r5, #0]
 8006dac:	681d      	ldr	r5, [r3, #0]
 8006dae:	6862      	ldr	r2, [r4, #4]
 8006db0:	4628      	mov	r0, r5
 8006db2:	f000 fae5 	bl	8007380 <memchr>
 8006db6:	b108      	cbz	r0, 8006dbc <_printf_i+0x1f4>
 8006db8:	1b40      	subs	r0, r0, r5
 8006dba:	6060      	str	r0, [r4, #4]
 8006dbc:	6863      	ldr	r3, [r4, #4]
 8006dbe:	6123      	str	r3, [r4, #16]
 8006dc0:	2300      	movs	r3, #0
 8006dc2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006dc6:	e7a8      	b.n	8006d1a <_printf_i+0x152>
 8006dc8:	462a      	mov	r2, r5
 8006dca:	4649      	mov	r1, r9
 8006dcc:	4640      	mov	r0, r8
 8006dce:	6923      	ldr	r3, [r4, #16]
 8006dd0:	47d0      	blx	sl
 8006dd2:	3001      	adds	r0, #1
 8006dd4:	d0ab      	beq.n	8006d2e <_printf_i+0x166>
 8006dd6:	6823      	ldr	r3, [r4, #0]
 8006dd8:	079b      	lsls	r3, r3, #30
 8006dda:	d413      	bmi.n	8006e04 <_printf_i+0x23c>
 8006ddc:	68e0      	ldr	r0, [r4, #12]
 8006dde:	9b03      	ldr	r3, [sp, #12]
 8006de0:	4298      	cmp	r0, r3
 8006de2:	bfb8      	it	lt
 8006de4:	4618      	movlt	r0, r3
 8006de6:	e7a4      	b.n	8006d32 <_printf_i+0x16a>
 8006de8:	2301      	movs	r3, #1
 8006dea:	4632      	mov	r2, r6
 8006dec:	4649      	mov	r1, r9
 8006dee:	4640      	mov	r0, r8
 8006df0:	47d0      	blx	sl
 8006df2:	3001      	adds	r0, #1
 8006df4:	d09b      	beq.n	8006d2e <_printf_i+0x166>
 8006df6:	3501      	adds	r5, #1
 8006df8:	68e3      	ldr	r3, [r4, #12]
 8006dfa:	9903      	ldr	r1, [sp, #12]
 8006dfc:	1a5b      	subs	r3, r3, r1
 8006dfe:	42ab      	cmp	r3, r5
 8006e00:	dcf2      	bgt.n	8006de8 <_printf_i+0x220>
 8006e02:	e7eb      	b.n	8006ddc <_printf_i+0x214>
 8006e04:	2500      	movs	r5, #0
 8006e06:	f104 0619 	add.w	r6, r4, #25
 8006e0a:	e7f5      	b.n	8006df8 <_printf_i+0x230>
 8006e0c:	080077e5 	.word	0x080077e5
 8006e10:	080077f6 	.word	0x080077f6

08006e14 <_scanf_chars>:
 8006e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e18:	4615      	mov	r5, r2
 8006e1a:	688a      	ldr	r2, [r1, #8]
 8006e1c:	4680      	mov	r8, r0
 8006e1e:	460c      	mov	r4, r1
 8006e20:	b932      	cbnz	r2, 8006e30 <_scanf_chars+0x1c>
 8006e22:	698a      	ldr	r2, [r1, #24]
 8006e24:	2a00      	cmp	r2, #0
 8006e26:	bf0c      	ite	eq
 8006e28:	2201      	moveq	r2, #1
 8006e2a:	f04f 32ff 	movne.w	r2, #4294967295
 8006e2e:	608a      	str	r2, [r1, #8]
 8006e30:	2700      	movs	r7, #0
 8006e32:	6822      	ldr	r2, [r4, #0]
 8006e34:	f8df 908c 	ldr.w	r9, [pc, #140]	; 8006ec4 <_scanf_chars+0xb0>
 8006e38:	06d1      	lsls	r1, r2, #27
 8006e3a:	bf5f      	itttt	pl
 8006e3c:	681a      	ldrpl	r2, [r3, #0]
 8006e3e:	1d11      	addpl	r1, r2, #4
 8006e40:	6019      	strpl	r1, [r3, #0]
 8006e42:	6816      	ldrpl	r6, [r2, #0]
 8006e44:	69a0      	ldr	r0, [r4, #24]
 8006e46:	b188      	cbz	r0, 8006e6c <_scanf_chars+0x58>
 8006e48:	2801      	cmp	r0, #1
 8006e4a:	d107      	bne.n	8006e5c <_scanf_chars+0x48>
 8006e4c:	682b      	ldr	r3, [r5, #0]
 8006e4e:	781a      	ldrb	r2, [r3, #0]
 8006e50:	6963      	ldr	r3, [r4, #20]
 8006e52:	5c9b      	ldrb	r3, [r3, r2]
 8006e54:	b953      	cbnz	r3, 8006e6c <_scanf_chars+0x58>
 8006e56:	2f00      	cmp	r7, #0
 8006e58:	d031      	beq.n	8006ebe <_scanf_chars+0xaa>
 8006e5a:	e022      	b.n	8006ea2 <_scanf_chars+0x8e>
 8006e5c:	2802      	cmp	r0, #2
 8006e5e:	d120      	bne.n	8006ea2 <_scanf_chars+0x8e>
 8006e60:	682b      	ldr	r3, [r5, #0]
 8006e62:	781b      	ldrb	r3, [r3, #0]
 8006e64:	f813 3009 	ldrb.w	r3, [r3, r9]
 8006e68:	071b      	lsls	r3, r3, #28
 8006e6a:	d41a      	bmi.n	8006ea2 <_scanf_chars+0x8e>
 8006e6c:	6823      	ldr	r3, [r4, #0]
 8006e6e:	3701      	adds	r7, #1
 8006e70:	06da      	lsls	r2, r3, #27
 8006e72:	bf5e      	ittt	pl
 8006e74:	682b      	ldrpl	r3, [r5, #0]
 8006e76:	781b      	ldrbpl	r3, [r3, #0]
 8006e78:	f806 3b01 	strbpl.w	r3, [r6], #1
 8006e7c:	682a      	ldr	r2, [r5, #0]
 8006e7e:	686b      	ldr	r3, [r5, #4]
 8006e80:	3201      	adds	r2, #1
 8006e82:	602a      	str	r2, [r5, #0]
 8006e84:	68a2      	ldr	r2, [r4, #8]
 8006e86:	3b01      	subs	r3, #1
 8006e88:	3a01      	subs	r2, #1
 8006e8a:	606b      	str	r3, [r5, #4]
 8006e8c:	60a2      	str	r2, [r4, #8]
 8006e8e:	b142      	cbz	r2, 8006ea2 <_scanf_chars+0x8e>
 8006e90:	2b00      	cmp	r3, #0
 8006e92:	dcd7      	bgt.n	8006e44 <_scanf_chars+0x30>
 8006e94:	4629      	mov	r1, r5
 8006e96:	4640      	mov	r0, r8
 8006e98:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8006e9c:	4798      	blx	r3
 8006e9e:	2800      	cmp	r0, #0
 8006ea0:	d0d0      	beq.n	8006e44 <_scanf_chars+0x30>
 8006ea2:	6823      	ldr	r3, [r4, #0]
 8006ea4:	f013 0310 	ands.w	r3, r3, #16
 8006ea8:	d105      	bne.n	8006eb6 <_scanf_chars+0xa2>
 8006eaa:	68e2      	ldr	r2, [r4, #12]
 8006eac:	3201      	adds	r2, #1
 8006eae:	60e2      	str	r2, [r4, #12]
 8006eb0:	69a2      	ldr	r2, [r4, #24]
 8006eb2:	b102      	cbz	r2, 8006eb6 <_scanf_chars+0xa2>
 8006eb4:	7033      	strb	r3, [r6, #0]
 8006eb6:	2000      	movs	r0, #0
 8006eb8:	6923      	ldr	r3, [r4, #16]
 8006eba:	443b      	add	r3, r7
 8006ebc:	6123      	str	r3, [r4, #16]
 8006ebe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ec2:	bf00      	nop
 8006ec4:	08007823 	.word	0x08007823

08006ec8 <_scanf_i>:
 8006ec8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ecc:	460c      	mov	r4, r1
 8006ece:	4698      	mov	r8, r3
 8006ed0:	4b75      	ldr	r3, [pc, #468]	; (80070a8 <_scanf_i+0x1e0>)
 8006ed2:	b087      	sub	sp, #28
 8006ed4:	4682      	mov	sl, r0
 8006ed6:	4616      	mov	r6, r2
 8006ed8:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8006edc:	ab03      	add	r3, sp, #12
 8006ede:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8006ee2:	4b72      	ldr	r3, [pc, #456]	; (80070ac <_scanf_i+0x1e4>)
 8006ee4:	69a1      	ldr	r1, [r4, #24]
 8006ee6:	4a72      	ldr	r2, [pc, #456]	; (80070b0 <_scanf_i+0x1e8>)
 8006ee8:	4627      	mov	r7, r4
 8006eea:	2903      	cmp	r1, #3
 8006eec:	bf18      	it	ne
 8006eee:	461a      	movne	r2, r3
 8006ef0:	68a3      	ldr	r3, [r4, #8]
 8006ef2:	9201      	str	r2, [sp, #4]
 8006ef4:	1e5a      	subs	r2, r3, #1
 8006ef6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8006efa:	bf81      	itttt	hi
 8006efc:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8006f00:	eb03 0905 	addhi.w	r9, r3, r5
 8006f04:	f240 135d 	movwhi	r3, #349	; 0x15d
 8006f08:	60a3      	strhi	r3, [r4, #8]
 8006f0a:	f857 3b1c 	ldr.w	r3, [r7], #28
 8006f0e:	bf98      	it	ls
 8006f10:	f04f 0900 	movls.w	r9, #0
 8006f14:	463d      	mov	r5, r7
 8006f16:	f04f 0b00 	mov.w	fp, #0
 8006f1a:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8006f1e:	6023      	str	r3, [r4, #0]
 8006f20:	6831      	ldr	r1, [r6, #0]
 8006f22:	ab03      	add	r3, sp, #12
 8006f24:	2202      	movs	r2, #2
 8006f26:	7809      	ldrb	r1, [r1, #0]
 8006f28:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8006f2c:	f000 fa28 	bl	8007380 <memchr>
 8006f30:	b328      	cbz	r0, 8006f7e <_scanf_i+0xb6>
 8006f32:	f1bb 0f01 	cmp.w	fp, #1
 8006f36:	d159      	bne.n	8006fec <_scanf_i+0x124>
 8006f38:	6862      	ldr	r2, [r4, #4]
 8006f3a:	b92a      	cbnz	r2, 8006f48 <_scanf_i+0x80>
 8006f3c:	2308      	movs	r3, #8
 8006f3e:	6822      	ldr	r2, [r4, #0]
 8006f40:	6063      	str	r3, [r4, #4]
 8006f42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006f46:	6022      	str	r2, [r4, #0]
 8006f48:	6822      	ldr	r2, [r4, #0]
 8006f4a:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8006f4e:	6022      	str	r2, [r4, #0]
 8006f50:	68a2      	ldr	r2, [r4, #8]
 8006f52:	1e51      	subs	r1, r2, #1
 8006f54:	60a1      	str	r1, [r4, #8]
 8006f56:	b192      	cbz	r2, 8006f7e <_scanf_i+0xb6>
 8006f58:	6832      	ldr	r2, [r6, #0]
 8006f5a:	1c51      	adds	r1, r2, #1
 8006f5c:	6031      	str	r1, [r6, #0]
 8006f5e:	7812      	ldrb	r2, [r2, #0]
 8006f60:	f805 2b01 	strb.w	r2, [r5], #1
 8006f64:	6872      	ldr	r2, [r6, #4]
 8006f66:	3a01      	subs	r2, #1
 8006f68:	2a00      	cmp	r2, #0
 8006f6a:	6072      	str	r2, [r6, #4]
 8006f6c:	dc07      	bgt.n	8006f7e <_scanf_i+0xb6>
 8006f6e:	4631      	mov	r1, r6
 8006f70:	4650      	mov	r0, sl
 8006f72:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8006f76:	4790      	blx	r2
 8006f78:	2800      	cmp	r0, #0
 8006f7a:	f040 8085 	bne.w	8007088 <_scanf_i+0x1c0>
 8006f7e:	f10b 0b01 	add.w	fp, fp, #1
 8006f82:	f1bb 0f03 	cmp.w	fp, #3
 8006f86:	d1cb      	bne.n	8006f20 <_scanf_i+0x58>
 8006f88:	6863      	ldr	r3, [r4, #4]
 8006f8a:	b90b      	cbnz	r3, 8006f90 <_scanf_i+0xc8>
 8006f8c:	230a      	movs	r3, #10
 8006f8e:	6063      	str	r3, [r4, #4]
 8006f90:	6863      	ldr	r3, [r4, #4]
 8006f92:	4948      	ldr	r1, [pc, #288]	; (80070b4 <_scanf_i+0x1ec>)
 8006f94:	6960      	ldr	r0, [r4, #20]
 8006f96:	1ac9      	subs	r1, r1, r3
 8006f98:	f000 f88e 	bl	80070b8 <__sccl>
 8006f9c:	f04f 0b00 	mov.w	fp, #0
 8006fa0:	68a3      	ldr	r3, [r4, #8]
 8006fa2:	6822      	ldr	r2, [r4, #0]
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d03d      	beq.n	8007024 <_scanf_i+0x15c>
 8006fa8:	6831      	ldr	r1, [r6, #0]
 8006faa:	6960      	ldr	r0, [r4, #20]
 8006fac:	f891 c000 	ldrb.w	ip, [r1]
 8006fb0:	f810 000c 	ldrb.w	r0, [r0, ip]
 8006fb4:	2800      	cmp	r0, #0
 8006fb6:	d035      	beq.n	8007024 <_scanf_i+0x15c>
 8006fb8:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8006fbc:	d124      	bne.n	8007008 <_scanf_i+0x140>
 8006fbe:	0510      	lsls	r0, r2, #20
 8006fc0:	d522      	bpl.n	8007008 <_scanf_i+0x140>
 8006fc2:	f10b 0b01 	add.w	fp, fp, #1
 8006fc6:	f1b9 0f00 	cmp.w	r9, #0
 8006fca:	d003      	beq.n	8006fd4 <_scanf_i+0x10c>
 8006fcc:	3301      	adds	r3, #1
 8006fce:	f109 39ff 	add.w	r9, r9, #4294967295
 8006fd2:	60a3      	str	r3, [r4, #8]
 8006fd4:	6873      	ldr	r3, [r6, #4]
 8006fd6:	3b01      	subs	r3, #1
 8006fd8:	2b00      	cmp	r3, #0
 8006fda:	6073      	str	r3, [r6, #4]
 8006fdc:	dd1b      	ble.n	8007016 <_scanf_i+0x14e>
 8006fde:	6833      	ldr	r3, [r6, #0]
 8006fe0:	3301      	adds	r3, #1
 8006fe2:	6033      	str	r3, [r6, #0]
 8006fe4:	68a3      	ldr	r3, [r4, #8]
 8006fe6:	3b01      	subs	r3, #1
 8006fe8:	60a3      	str	r3, [r4, #8]
 8006fea:	e7d9      	b.n	8006fa0 <_scanf_i+0xd8>
 8006fec:	f1bb 0f02 	cmp.w	fp, #2
 8006ff0:	d1ae      	bne.n	8006f50 <_scanf_i+0x88>
 8006ff2:	6822      	ldr	r2, [r4, #0]
 8006ff4:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8006ff8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8006ffc:	d1bf      	bne.n	8006f7e <_scanf_i+0xb6>
 8006ffe:	2310      	movs	r3, #16
 8007000:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8007004:	6063      	str	r3, [r4, #4]
 8007006:	e7a2      	b.n	8006f4e <_scanf_i+0x86>
 8007008:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800700c:	6022      	str	r2, [r4, #0]
 800700e:	780b      	ldrb	r3, [r1, #0]
 8007010:	f805 3b01 	strb.w	r3, [r5], #1
 8007014:	e7de      	b.n	8006fd4 <_scanf_i+0x10c>
 8007016:	4631      	mov	r1, r6
 8007018:	4650      	mov	r0, sl
 800701a:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800701e:	4798      	blx	r3
 8007020:	2800      	cmp	r0, #0
 8007022:	d0df      	beq.n	8006fe4 <_scanf_i+0x11c>
 8007024:	6823      	ldr	r3, [r4, #0]
 8007026:	05db      	lsls	r3, r3, #23
 8007028:	d50d      	bpl.n	8007046 <_scanf_i+0x17e>
 800702a:	42bd      	cmp	r5, r7
 800702c:	d909      	bls.n	8007042 <_scanf_i+0x17a>
 800702e:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8007032:	4632      	mov	r2, r6
 8007034:	4650      	mov	r0, sl
 8007036:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800703a:	f105 39ff 	add.w	r9, r5, #4294967295
 800703e:	4798      	blx	r3
 8007040:	464d      	mov	r5, r9
 8007042:	42bd      	cmp	r5, r7
 8007044:	d02d      	beq.n	80070a2 <_scanf_i+0x1da>
 8007046:	6822      	ldr	r2, [r4, #0]
 8007048:	f012 0210 	ands.w	r2, r2, #16
 800704c:	d113      	bne.n	8007076 <_scanf_i+0x1ae>
 800704e:	702a      	strb	r2, [r5, #0]
 8007050:	4639      	mov	r1, r7
 8007052:	6863      	ldr	r3, [r4, #4]
 8007054:	4650      	mov	r0, sl
 8007056:	9e01      	ldr	r6, [sp, #4]
 8007058:	47b0      	blx	r6
 800705a:	6821      	ldr	r1, [r4, #0]
 800705c:	f8d8 3000 	ldr.w	r3, [r8]
 8007060:	f011 0f20 	tst.w	r1, #32
 8007064:	d013      	beq.n	800708e <_scanf_i+0x1c6>
 8007066:	1d1a      	adds	r2, r3, #4
 8007068:	f8c8 2000 	str.w	r2, [r8]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	6018      	str	r0, [r3, #0]
 8007070:	68e3      	ldr	r3, [r4, #12]
 8007072:	3301      	adds	r3, #1
 8007074:	60e3      	str	r3, [r4, #12]
 8007076:	2000      	movs	r0, #0
 8007078:	1bed      	subs	r5, r5, r7
 800707a:	44ab      	add	fp, r5
 800707c:	6925      	ldr	r5, [r4, #16]
 800707e:	445d      	add	r5, fp
 8007080:	6125      	str	r5, [r4, #16]
 8007082:	b007      	add	sp, #28
 8007084:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007088:	f04f 0b00 	mov.w	fp, #0
 800708c:	e7ca      	b.n	8007024 <_scanf_i+0x15c>
 800708e:	1d1a      	adds	r2, r3, #4
 8007090:	f8c8 2000 	str.w	r2, [r8]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f011 0f01 	tst.w	r1, #1
 800709a:	bf14      	ite	ne
 800709c:	8018      	strhne	r0, [r3, #0]
 800709e:	6018      	streq	r0, [r3, #0]
 80070a0:	e7e6      	b.n	8007070 <_scanf_i+0x1a8>
 80070a2:	2001      	movs	r0, #1
 80070a4:	e7ed      	b.n	8007082 <_scanf_i+0x1ba>
 80070a6:	bf00      	nop
 80070a8:	08007648 	.word	0x08007648
 80070ac:	08007309 	.word	0x08007309
 80070b0:	08007221 	.word	0x08007221
 80070b4:	08007820 	.word	0x08007820

080070b8 <__sccl>:
 80070b8:	b570      	push	{r4, r5, r6, lr}
 80070ba:	780b      	ldrb	r3, [r1, #0]
 80070bc:	4604      	mov	r4, r0
 80070be:	2b5e      	cmp	r3, #94	; 0x5e
 80070c0:	bf13      	iteet	ne
 80070c2:	2200      	movne	r2, #0
 80070c4:	2201      	moveq	r2, #1
 80070c6:	784b      	ldrbeq	r3, [r1, #1]
 80070c8:	1c48      	addne	r0, r1, #1
 80070ca:	bf08      	it	eq
 80070cc:	1c88      	addeq	r0, r1, #2
 80070ce:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 80070d2:	1e61      	subs	r1, r4, #1
 80070d4:	f801 2f01 	strb.w	r2, [r1, #1]!
 80070d8:	42a9      	cmp	r1, r5
 80070da:	d1fb      	bne.n	80070d4 <__sccl+0x1c>
 80070dc:	b90b      	cbnz	r3, 80070e2 <__sccl+0x2a>
 80070de:	3801      	subs	r0, #1
 80070e0:	bd70      	pop	{r4, r5, r6, pc}
 80070e2:	f082 0201 	eor.w	r2, r2, #1
 80070e6:	4605      	mov	r5, r0
 80070e8:	54e2      	strb	r2, [r4, r3]
 80070ea:	4628      	mov	r0, r5
 80070ec:	f810 1b01 	ldrb.w	r1, [r0], #1
 80070f0:	292d      	cmp	r1, #45	; 0x2d
 80070f2:	d006      	beq.n	8007102 <__sccl+0x4a>
 80070f4:	295d      	cmp	r1, #93	; 0x5d
 80070f6:	d0f3      	beq.n	80070e0 <__sccl+0x28>
 80070f8:	b909      	cbnz	r1, 80070fe <__sccl+0x46>
 80070fa:	4628      	mov	r0, r5
 80070fc:	e7f0      	b.n	80070e0 <__sccl+0x28>
 80070fe:	460b      	mov	r3, r1
 8007100:	e7f1      	b.n	80070e6 <__sccl+0x2e>
 8007102:	786e      	ldrb	r6, [r5, #1]
 8007104:	2e5d      	cmp	r6, #93	; 0x5d
 8007106:	d0fa      	beq.n	80070fe <__sccl+0x46>
 8007108:	42b3      	cmp	r3, r6
 800710a:	dcf8      	bgt.n	80070fe <__sccl+0x46>
 800710c:	4619      	mov	r1, r3
 800710e:	3502      	adds	r5, #2
 8007110:	3101      	adds	r1, #1
 8007112:	428e      	cmp	r6, r1
 8007114:	5462      	strb	r2, [r4, r1]
 8007116:	dcfb      	bgt.n	8007110 <__sccl+0x58>
 8007118:	1af1      	subs	r1, r6, r3
 800711a:	3901      	subs	r1, #1
 800711c:	42b3      	cmp	r3, r6
 800711e:	bfa8      	it	ge
 8007120:	2100      	movge	r1, #0
 8007122:	1c58      	adds	r0, r3, #1
 8007124:	1843      	adds	r3, r0, r1
 8007126:	e7e0      	b.n	80070ea <__sccl+0x32>

08007128 <_strtol_l.constprop.0>:
 8007128:	2b01      	cmp	r3, #1
 800712a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800712e:	4680      	mov	r8, r0
 8007130:	d001      	beq.n	8007136 <_strtol_l.constprop.0+0xe>
 8007132:	2b24      	cmp	r3, #36	; 0x24
 8007134:	d906      	bls.n	8007144 <_strtol_l.constprop.0+0x1c>
 8007136:	f7ff f913 	bl	8006360 <__errno>
 800713a:	2316      	movs	r3, #22
 800713c:	6003      	str	r3, [r0, #0]
 800713e:	2000      	movs	r0, #0
 8007140:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007144:	460d      	mov	r5, r1
 8007146:	4f35      	ldr	r7, [pc, #212]	; (800721c <_strtol_l.constprop.0+0xf4>)
 8007148:	4628      	mov	r0, r5
 800714a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800714e:	5de6      	ldrb	r6, [r4, r7]
 8007150:	f016 0608 	ands.w	r6, r6, #8
 8007154:	d1f8      	bne.n	8007148 <_strtol_l.constprop.0+0x20>
 8007156:	2c2d      	cmp	r4, #45	; 0x2d
 8007158:	d12f      	bne.n	80071ba <_strtol_l.constprop.0+0x92>
 800715a:	2601      	movs	r6, #1
 800715c:	782c      	ldrb	r4, [r5, #0]
 800715e:	1c85      	adds	r5, r0, #2
 8007160:	2b00      	cmp	r3, #0
 8007162:	d057      	beq.n	8007214 <_strtol_l.constprop.0+0xec>
 8007164:	2b10      	cmp	r3, #16
 8007166:	d109      	bne.n	800717c <_strtol_l.constprop.0+0x54>
 8007168:	2c30      	cmp	r4, #48	; 0x30
 800716a:	d107      	bne.n	800717c <_strtol_l.constprop.0+0x54>
 800716c:	7828      	ldrb	r0, [r5, #0]
 800716e:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007172:	2858      	cmp	r0, #88	; 0x58
 8007174:	d149      	bne.n	800720a <_strtol_l.constprop.0+0xe2>
 8007176:	2310      	movs	r3, #16
 8007178:	786c      	ldrb	r4, [r5, #1]
 800717a:	3502      	adds	r5, #2
 800717c:	2700      	movs	r7, #0
 800717e:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8007182:	f10e 3eff 	add.w	lr, lr, #4294967295
 8007186:	fbbe f9f3 	udiv	r9, lr, r3
 800718a:	4638      	mov	r0, r7
 800718c:	fb03 ea19 	mls	sl, r3, r9, lr
 8007190:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007194:	f1bc 0f09 	cmp.w	ip, #9
 8007198:	d814      	bhi.n	80071c4 <_strtol_l.constprop.0+0x9c>
 800719a:	4664      	mov	r4, ip
 800719c:	42a3      	cmp	r3, r4
 800719e:	dd22      	ble.n	80071e6 <_strtol_l.constprop.0+0xbe>
 80071a0:	2f00      	cmp	r7, #0
 80071a2:	db1d      	blt.n	80071e0 <_strtol_l.constprop.0+0xb8>
 80071a4:	4581      	cmp	r9, r0
 80071a6:	d31b      	bcc.n	80071e0 <_strtol_l.constprop.0+0xb8>
 80071a8:	d101      	bne.n	80071ae <_strtol_l.constprop.0+0x86>
 80071aa:	45a2      	cmp	sl, r4
 80071ac:	db18      	blt.n	80071e0 <_strtol_l.constprop.0+0xb8>
 80071ae:	2701      	movs	r7, #1
 80071b0:	fb00 4003 	mla	r0, r0, r3, r4
 80071b4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80071b8:	e7ea      	b.n	8007190 <_strtol_l.constprop.0+0x68>
 80071ba:	2c2b      	cmp	r4, #43	; 0x2b
 80071bc:	bf04      	itt	eq
 80071be:	782c      	ldrbeq	r4, [r5, #0]
 80071c0:	1c85      	addeq	r5, r0, #2
 80071c2:	e7cd      	b.n	8007160 <_strtol_l.constprop.0+0x38>
 80071c4:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80071c8:	f1bc 0f19 	cmp.w	ip, #25
 80071cc:	d801      	bhi.n	80071d2 <_strtol_l.constprop.0+0xaa>
 80071ce:	3c37      	subs	r4, #55	; 0x37
 80071d0:	e7e4      	b.n	800719c <_strtol_l.constprop.0+0x74>
 80071d2:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80071d6:	f1bc 0f19 	cmp.w	ip, #25
 80071da:	d804      	bhi.n	80071e6 <_strtol_l.constprop.0+0xbe>
 80071dc:	3c57      	subs	r4, #87	; 0x57
 80071de:	e7dd      	b.n	800719c <_strtol_l.constprop.0+0x74>
 80071e0:	f04f 37ff 	mov.w	r7, #4294967295
 80071e4:	e7e6      	b.n	80071b4 <_strtol_l.constprop.0+0x8c>
 80071e6:	2f00      	cmp	r7, #0
 80071e8:	da07      	bge.n	80071fa <_strtol_l.constprop.0+0xd2>
 80071ea:	2322      	movs	r3, #34	; 0x22
 80071ec:	4670      	mov	r0, lr
 80071ee:	f8c8 3000 	str.w	r3, [r8]
 80071f2:	2a00      	cmp	r2, #0
 80071f4:	d0a4      	beq.n	8007140 <_strtol_l.constprop.0+0x18>
 80071f6:	1e69      	subs	r1, r5, #1
 80071f8:	e005      	b.n	8007206 <_strtol_l.constprop.0+0xde>
 80071fa:	b106      	cbz	r6, 80071fe <_strtol_l.constprop.0+0xd6>
 80071fc:	4240      	negs	r0, r0
 80071fe:	2a00      	cmp	r2, #0
 8007200:	d09e      	beq.n	8007140 <_strtol_l.constprop.0+0x18>
 8007202:	2f00      	cmp	r7, #0
 8007204:	d1f7      	bne.n	80071f6 <_strtol_l.constprop.0+0xce>
 8007206:	6011      	str	r1, [r2, #0]
 8007208:	e79a      	b.n	8007140 <_strtol_l.constprop.0+0x18>
 800720a:	2430      	movs	r4, #48	; 0x30
 800720c:	2b00      	cmp	r3, #0
 800720e:	d1b5      	bne.n	800717c <_strtol_l.constprop.0+0x54>
 8007210:	2308      	movs	r3, #8
 8007212:	e7b3      	b.n	800717c <_strtol_l.constprop.0+0x54>
 8007214:	2c30      	cmp	r4, #48	; 0x30
 8007216:	d0a9      	beq.n	800716c <_strtol_l.constprop.0+0x44>
 8007218:	230a      	movs	r3, #10
 800721a:	e7af      	b.n	800717c <_strtol_l.constprop.0+0x54>
 800721c:	08007823 	.word	0x08007823

08007220 <_strtol_r>:
 8007220:	f7ff bf82 	b.w	8007128 <_strtol_l.constprop.0>

08007224 <_strtoul_l.constprop.0>:
 8007224:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007228:	4686      	mov	lr, r0
 800722a:	460d      	mov	r5, r1
 800722c:	4f35      	ldr	r7, [pc, #212]	; (8007304 <_strtoul_l.constprop.0+0xe0>)
 800722e:	4628      	mov	r0, r5
 8007230:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007234:	5de6      	ldrb	r6, [r4, r7]
 8007236:	f016 0608 	ands.w	r6, r6, #8
 800723a:	d1f8      	bne.n	800722e <_strtoul_l.constprop.0+0xa>
 800723c:	2c2d      	cmp	r4, #45	; 0x2d
 800723e:	d12f      	bne.n	80072a0 <_strtoul_l.constprop.0+0x7c>
 8007240:	2601      	movs	r6, #1
 8007242:	782c      	ldrb	r4, [r5, #0]
 8007244:	1c85      	adds	r5, r0, #2
 8007246:	2b00      	cmp	r3, #0
 8007248:	d057      	beq.n	80072fa <_strtoul_l.constprop.0+0xd6>
 800724a:	2b10      	cmp	r3, #16
 800724c:	d109      	bne.n	8007262 <_strtoul_l.constprop.0+0x3e>
 800724e:	2c30      	cmp	r4, #48	; 0x30
 8007250:	d107      	bne.n	8007262 <_strtoul_l.constprop.0+0x3e>
 8007252:	7828      	ldrb	r0, [r5, #0]
 8007254:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8007258:	2858      	cmp	r0, #88	; 0x58
 800725a:	d149      	bne.n	80072f0 <_strtoul_l.constprop.0+0xcc>
 800725c:	2310      	movs	r3, #16
 800725e:	786c      	ldrb	r4, [r5, #1]
 8007260:	3502      	adds	r5, #2
 8007262:	f04f 38ff 	mov.w	r8, #4294967295
 8007266:	fbb8 f8f3 	udiv	r8, r8, r3
 800726a:	2700      	movs	r7, #0
 800726c:	fb03 f908 	mul.w	r9, r3, r8
 8007270:	4638      	mov	r0, r7
 8007272:	ea6f 0909 	mvn.w	r9, r9
 8007276:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800727a:	f1bc 0f09 	cmp.w	ip, #9
 800727e:	d814      	bhi.n	80072aa <_strtoul_l.constprop.0+0x86>
 8007280:	4664      	mov	r4, ip
 8007282:	42a3      	cmp	r3, r4
 8007284:	dd22      	ble.n	80072cc <_strtoul_l.constprop.0+0xa8>
 8007286:	2f00      	cmp	r7, #0
 8007288:	db1d      	blt.n	80072c6 <_strtoul_l.constprop.0+0xa2>
 800728a:	4580      	cmp	r8, r0
 800728c:	d31b      	bcc.n	80072c6 <_strtoul_l.constprop.0+0xa2>
 800728e:	d101      	bne.n	8007294 <_strtoul_l.constprop.0+0x70>
 8007290:	45a1      	cmp	r9, r4
 8007292:	db18      	blt.n	80072c6 <_strtoul_l.constprop.0+0xa2>
 8007294:	2701      	movs	r7, #1
 8007296:	fb00 4003 	mla	r0, r0, r3, r4
 800729a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800729e:	e7ea      	b.n	8007276 <_strtoul_l.constprop.0+0x52>
 80072a0:	2c2b      	cmp	r4, #43	; 0x2b
 80072a2:	bf04      	itt	eq
 80072a4:	782c      	ldrbeq	r4, [r5, #0]
 80072a6:	1c85      	addeq	r5, r0, #2
 80072a8:	e7cd      	b.n	8007246 <_strtoul_l.constprop.0+0x22>
 80072aa:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80072ae:	f1bc 0f19 	cmp.w	ip, #25
 80072b2:	d801      	bhi.n	80072b8 <_strtoul_l.constprop.0+0x94>
 80072b4:	3c37      	subs	r4, #55	; 0x37
 80072b6:	e7e4      	b.n	8007282 <_strtoul_l.constprop.0+0x5e>
 80072b8:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80072bc:	f1bc 0f19 	cmp.w	ip, #25
 80072c0:	d804      	bhi.n	80072cc <_strtoul_l.constprop.0+0xa8>
 80072c2:	3c57      	subs	r4, #87	; 0x57
 80072c4:	e7dd      	b.n	8007282 <_strtoul_l.constprop.0+0x5e>
 80072c6:	f04f 37ff 	mov.w	r7, #4294967295
 80072ca:	e7e6      	b.n	800729a <_strtoul_l.constprop.0+0x76>
 80072cc:	2f00      	cmp	r7, #0
 80072ce:	da07      	bge.n	80072e0 <_strtoul_l.constprop.0+0xbc>
 80072d0:	2322      	movs	r3, #34	; 0x22
 80072d2:	f04f 30ff 	mov.w	r0, #4294967295
 80072d6:	f8ce 3000 	str.w	r3, [lr]
 80072da:	b932      	cbnz	r2, 80072ea <_strtoul_l.constprop.0+0xc6>
 80072dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80072e0:	b106      	cbz	r6, 80072e4 <_strtoul_l.constprop.0+0xc0>
 80072e2:	4240      	negs	r0, r0
 80072e4:	2a00      	cmp	r2, #0
 80072e6:	d0f9      	beq.n	80072dc <_strtoul_l.constprop.0+0xb8>
 80072e8:	b107      	cbz	r7, 80072ec <_strtoul_l.constprop.0+0xc8>
 80072ea:	1e69      	subs	r1, r5, #1
 80072ec:	6011      	str	r1, [r2, #0]
 80072ee:	e7f5      	b.n	80072dc <_strtoul_l.constprop.0+0xb8>
 80072f0:	2430      	movs	r4, #48	; 0x30
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d1b5      	bne.n	8007262 <_strtoul_l.constprop.0+0x3e>
 80072f6:	2308      	movs	r3, #8
 80072f8:	e7b3      	b.n	8007262 <_strtoul_l.constprop.0+0x3e>
 80072fa:	2c30      	cmp	r4, #48	; 0x30
 80072fc:	d0a9      	beq.n	8007252 <_strtoul_l.constprop.0+0x2e>
 80072fe:	230a      	movs	r3, #10
 8007300:	e7af      	b.n	8007262 <_strtoul_l.constprop.0+0x3e>
 8007302:	bf00      	nop
 8007304:	08007823 	.word	0x08007823

08007308 <_strtoul_r>:
 8007308:	f7ff bf8c 	b.w	8007224 <_strtoul_l.constprop.0>

0800730c <__submore>:
 800730c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007310:	460c      	mov	r4, r1
 8007312:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8007314:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007318:	4299      	cmp	r1, r3
 800731a:	d11b      	bne.n	8007354 <__submore+0x48>
 800731c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8007320:	f000 f8be 	bl	80074a0 <_malloc_r>
 8007324:	b918      	cbnz	r0, 800732e <__submore+0x22>
 8007326:	f04f 30ff 	mov.w	r0, #4294967295
 800732a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800732e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007332:	63a3      	str	r3, [r4, #56]	; 0x38
 8007334:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8007338:	6360      	str	r0, [r4, #52]	; 0x34
 800733a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800733e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8007342:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8007346:	7043      	strb	r3, [r0, #1]
 8007348:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800734c:	7003      	strb	r3, [r0, #0]
 800734e:	6020      	str	r0, [r4, #0]
 8007350:	2000      	movs	r0, #0
 8007352:	e7ea      	b.n	800732a <__submore+0x1e>
 8007354:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 8007356:	0077      	lsls	r7, r6, #1
 8007358:	463a      	mov	r2, r7
 800735a:	f000 f915 	bl	8007588 <_realloc_r>
 800735e:	4605      	mov	r5, r0
 8007360:	2800      	cmp	r0, #0
 8007362:	d0e0      	beq.n	8007326 <__submore+0x1a>
 8007364:	eb00 0806 	add.w	r8, r0, r6
 8007368:	4601      	mov	r1, r0
 800736a:	4632      	mov	r2, r6
 800736c:	4640      	mov	r0, r8
 800736e:	f7ff f821 	bl	80063b4 <memcpy>
 8007372:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8007376:	f8c4 8000 	str.w	r8, [r4]
 800737a:	e7e9      	b.n	8007350 <__submore+0x44>

0800737c <__retarget_lock_acquire_recursive>:
 800737c:	4770      	bx	lr

0800737e <__retarget_lock_release_recursive>:
 800737e:	4770      	bx	lr

08007380 <memchr>:
 8007380:	4603      	mov	r3, r0
 8007382:	b510      	push	{r4, lr}
 8007384:	b2c9      	uxtb	r1, r1
 8007386:	4402      	add	r2, r0
 8007388:	4293      	cmp	r3, r2
 800738a:	4618      	mov	r0, r3
 800738c:	d101      	bne.n	8007392 <memchr+0x12>
 800738e:	2000      	movs	r0, #0
 8007390:	e003      	b.n	800739a <memchr+0x1a>
 8007392:	7804      	ldrb	r4, [r0, #0]
 8007394:	3301      	adds	r3, #1
 8007396:	428c      	cmp	r4, r1
 8007398:	d1f6      	bne.n	8007388 <memchr+0x8>
 800739a:	bd10      	pop	{r4, pc}

0800739c <memmove>:
 800739c:	4288      	cmp	r0, r1
 800739e:	b510      	push	{r4, lr}
 80073a0:	eb01 0402 	add.w	r4, r1, r2
 80073a4:	d902      	bls.n	80073ac <memmove+0x10>
 80073a6:	4284      	cmp	r4, r0
 80073a8:	4623      	mov	r3, r4
 80073aa:	d807      	bhi.n	80073bc <memmove+0x20>
 80073ac:	1e43      	subs	r3, r0, #1
 80073ae:	42a1      	cmp	r1, r4
 80073b0:	d008      	beq.n	80073c4 <memmove+0x28>
 80073b2:	f811 2b01 	ldrb.w	r2, [r1], #1
 80073b6:	f803 2f01 	strb.w	r2, [r3, #1]!
 80073ba:	e7f8      	b.n	80073ae <memmove+0x12>
 80073bc:	4601      	mov	r1, r0
 80073be:	4402      	add	r2, r0
 80073c0:	428a      	cmp	r2, r1
 80073c2:	d100      	bne.n	80073c6 <memmove+0x2a>
 80073c4:	bd10      	pop	{r4, pc}
 80073c6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80073ca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80073ce:	e7f7      	b.n	80073c0 <memmove+0x24>

080073d0 <_free_r>:
 80073d0:	b538      	push	{r3, r4, r5, lr}
 80073d2:	4605      	mov	r5, r0
 80073d4:	2900      	cmp	r1, #0
 80073d6:	d040      	beq.n	800745a <_free_r+0x8a>
 80073d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80073dc:	1f0c      	subs	r4, r1, #4
 80073de:	2b00      	cmp	r3, #0
 80073e0:	bfb8      	it	lt
 80073e2:	18e4      	addlt	r4, r4, r3
 80073e4:	f000 f910 	bl	8007608 <__malloc_lock>
 80073e8:	4a1c      	ldr	r2, [pc, #112]	; (800745c <_free_r+0x8c>)
 80073ea:	6813      	ldr	r3, [r2, #0]
 80073ec:	b933      	cbnz	r3, 80073fc <_free_r+0x2c>
 80073ee:	6063      	str	r3, [r4, #4]
 80073f0:	6014      	str	r4, [r2, #0]
 80073f2:	4628      	mov	r0, r5
 80073f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80073f8:	f000 b90c 	b.w	8007614 <__malloc_unlock>
 80073fc:	42a3      	cmp	r3, r4
 80073fe:	d908      	bls.n	8007412 <_free_r+0x42>
 8007400:	6820      	ldr	r0, [r4, #0]
 8007402:	1821      	adds	r1, r4, r0
 8007404:	428b      	cmp	r3, r1
 8007406:	bf01      	itttt	eq
 8007408:	6819      	ldreq	r1, [r3, #0]
 800740a:	685b      	ldreq	r3, [r3, #4]
 800740c:	1809      	addeq	r1, r1, r0
 800740e:	6021      	streq	r1, [r4, #0]
 8007410:	e7ed      	b.n	80073ee <_free_r+0x1e>
 8007412:	461a      	mov	r2, r3
 8007414:	685b      	ldr	r3, [r3, #4]
 8007416:	b10b      	cbz	r3, 800741c <_free_r+0x4c>
 8007418:	42a3      	cmp	r3, r4
 800741a:	d9fa      	bls.n	8007412 <_free_r+0x42>
 800741c:	6811      	ldr	r1, [r2, #0]
 800741e:	1850      	adds	r0, r2, r1
 8007420:	42a0      	cmp	r0, r4
 8007422:	d10b      	bne.n	800743c <_free_r+0x6c>
 8007424:	6820      	ldr	r0, [r4, #0]
 8007426:	4401      	add	r1, r0
 8007428:	1850      	adds	r0, r2, r1
 800742a:	4283      	cmp	r3, r0
 800742c:	6011      	str	r1, [r2, #0]
 800742e:	d1e0      	bne.n	80073f2 <_free_r+0x22>
 8007430:	6818      	ldr	r0, [r3, #0]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	4401      	add	r1, r0
 8007436:	6011      	str	r1, [r2, #0]
 8007438:	6053      	str	r3, [r2, #4]
 800743a:	e7da      	b.n	80073f2 <_free_r+0x22>
 800743c:	d902      	bls.n	8007444 <_free_r+0x74>
 800743e:	230c      	movs	r3, #12
 8007440:	602b      	str	r3, [r5, #0]
 8007442:	e7d6      	b.n	80073f2 <_free_r+0x22>
 8007444:	6820      	ldr	r0, [r4, #0]
 8007446:	1821      	adds	r1, r4, r0
 8007448:	428b      	cmp	r3, r1
 800744a:	bf01      	itttt	eq
 800744c:	6819      	ldreq	r1, [r3, #0]
 800744e:	685b      	ldreq	r3, [r3, #4]
 8007450:	1809      	addeq	r1, r1, r0
 8007452:	6021      	streq	r1, [r4, #0]
 8007454:	6063      	str	r3, [r4, #4]
 8007456:	6054      	str	r4, [r2, #4]
 8007458:	e7cb      	b.n	80073f2 <_free_r+0x22>
 800745a:	bd38      	pop	{r3, r4, r5, pc}
 800745c:	20002e04 	.word	0x20002e04

08007460 <sbrk_aligned>:
 8007460:	b570      	push	{r4, r5, r6, lr}
 8007462:	4e0e      	ldr	r6, [pc, #56]	; (800749c <sbrk_aligned+0x3c>)
 8007464:	460c      	mov	r4, r1
 8007466:	6831      	ldr	r1, [r6, #0]
 8007468:	4605      	mov	r5, r0
 800746a:	b911      	cbnz	r1, 8007472 <sbrk_aligned+0x12>
 800746c:	f000 f8bc 	bl	80075e8 <_sbrk_r>
 8007470:	6030      	str	r0, [r6, #0]
 8007472:	4621      	mov	r1, r4
 8007474:	4628      	mov	r0, r5
 8007476:	f000 f8b7 	bl	80075e8 <_sbrk_r>
 800747a:	1c43      	adds	r3, r0, #1
 800747c:	d00a      	beq.n	8007494 <sbrk_aligned+0x34>
 800747e:	1cc4      	adds	r4, r0, #3
 8007480:	f024 0403 	bic.w	r4, r4, #3
 8007484:	42a0      	cmp	r0, r4
 8007486:	d007      	beq.n	8007498 <sbrk_aligned+0x38>
 8007488:	1a21      	subs	r1, r4, r0
 800748a:	4628      	mov	r0, r5
 800748c:	f000 f8ac 	bl	80075e8 <_sbrk_r>
 8007490:	3001      	adds	r0, #1
 8007492:	d101      	bne.n	8007498 <sbrk_aligned+0x38>
 8007494:	f04f 34ff 	mov.w	r4, #4294967295
 8007498:	4620      	mov	r0, r4
 800749a:	bd70      	pop	{r4, r5, r6, pc}
 800749c:	20002e08 	.word	0x20002e08

080074a0 <_malloc_r>:
 80074a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074a4:	1ccd      	adds	r5, r1, #3
 80074a6:	f025 0503 	bic.w	r5, r5, #3
 80074aa:	3508      	adds	r5, #8
 80074ac:	2d0c      	cmp	r5, #12
 80074ae:	bf38      	it	cc
 80074b0:	250c      	movcc	r5, #12
 80074b2:	2d00      	cmp	r5, #0
 80074b4:	4607      	mov	r7, r0
 80074b6:	db01      	blt.n	80074bc <_malloc_r+0x1c>
 80074b8:	42a9      	cmp	r1, r5
 80074ba:	d905      	bls.n	80074c8 <_malloc_r+0x28>
 80074bc:	230c      	movs	r3, #12
 80074be:	2600      	movs	r6, #0
 80074c0:	603b      	str	r3, [r7, #0]
 80074c2:	4630      	mov	r0, r6
 80074c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074c8:	4e2e      	ldr	r6, [pc, #184]	; (8007584 <_malloc_r+0xe4>)
 80074ca:	f000 f89d 	bl	8007608 <__malloc_lock>
 80074ce:	6833      	ldr	r3, [r6, #0]
 80074d0:	461c      	mov	r4, r3
 80074d2:	bb34      	cbnz	r4, 8007522 <_malloc_r+0x82>
 80074d4:	4629      	mov	r1, r5
 80074d6:	4638      	mov	r0, r7
 80074d8:	f7ff ffc2 	bl	8007460 <sbrk_aligned>
 80074dc:	1c43      	adds	r3, r0, #1
 80074de:	4604      	mov	r4, r0
 80074e0:	d14d      	bne.n	800757e <_malloc_r+0xde>
 80074e2:	6834      	ldr	r4, [r6, #0]
 80074e4:	4626      	mov	r6, r4
 80074e6:	2e00      	cmp	r6, #0
 80074e8:	d140      	bne.n	800756c <_malloc_r+0xcc>
 80074ea:	6823      	ldr	r3, [r4, #0]
 80074ec:	4631      	mov	r1, r6
 80074ee:	4638      	mov	r0, r7
 80074f0:	eb04 0803 	add.w	r8, r4, r3
 80074f4:	f000 f878 	bl	80075e8 <_sbrk_r>
 80074f8:	4580      	cmp	r8, r0
 80074fa:	d13a      	bne.n	8007572 <_malloc_r+0xd2>
 80074fc:	6821      	ldr	r1, [r4, #0]
 80074fe:	3503      	adds	r5, #3
 8007500:	1a6d      	subs	r5, r5, r1
 8007502:	f025 0503 	bic.w	r5, r5, #3
 8007506:	3508      	adds	r5, #8
 8007508:	2d0c      	cmp	r5, #12
 800750a:	bf38      	it	cc
 800750c:	250c      	movcc	r5, #12
 800750e:	4638      	mov	r0, r7
 8007510:	4629      	mov	r1, r5
 8007512:	f7ff ffa5 	bl	8007460 <sbrk_aligned>
 8007516:	3001      	adds	r0, #1
 8007518:	d02b      	beq.n	8007572 <_malloc_r+0xd2>
 800751a:	6823      	ldr	r3, [r4, #0]
 800751c:	442b      	add	r3, r5
 800751e:	6023      	str	r3, [r4, #0]
 8007520:	e00e      	b.n	8007540 <_malloc_r+0xa0>
 8007522:	6822      	ldr	r2, [r4, #0]
 8007524:	1b52      	subs	r2, r2, r5
 8007526:	d41e      	bmi.n	8007566 <_malloc_r+0xc6>
 8007528:	2a0b      	cmp	r2, #11
 800752a:	d916      	bls.n	800755a <_malloc_r+0xba>
 800752c:	1961      	adds	r1, r4, r5
 800752e:	42a3      	cmp	r3, r4
 8007530:	6025      	str	r5, [r4, #0]
 8007532:	bf18      	it	ne
 8007534:	6059      	strne	r1, [r3, #4]
 8007536:	6863      	ldr	r3, [r4, #4]
 8007538:	bf08      	it	eq
 800753a:	6031      	streq	r1, [r6, #0]
 800753c:	5162      	str	r2, [r4, r5]
 800753e:	604b      	str	r3, [r1, #4]
 8007540:	4638      	mov	r0, r7
 8007542:	f104 060b 	add.w	r6, r4, #11
 8007546:	f000 f865 	bl	8007614 <__malloc_unlock>
 800754a:	f026 0607 	bic.w	r6, r6, #7
 800754e:	1d23      	adds	r3, r4, #4
 8007550:	1af2      	subs	r2, r6, r3
 8007552:	d0b6      	beq.n	80074c2 <_malloc_r+0x22>
 8007554:	1b9b      	subs	r3, r3, r6
 8007556:	50a3      	str	r3, [r4, r2]
 8007558:	e7b3      	b.n	80074c2 <_malloc_r+0x22>
 800755a:	6862      	ldr	r2, [r4, #4]
 800755c:	42a3      	cmp	r3, r4
 800755e:	bf0c      	ite	eq
 8007560:	6032      	streq	r2, [r6, #0]
 8007562:	605a      	strne	r2, [r3, #4]
 8007564:	e7ec      	b.n	8007540 <_malloc_r+0xa0>
 8007566:	4623      	mov	r3, r4
 8007568:	6864      	ldr	r4, [r4, #4]
 800756a:	e7b2      	b.n	80074d2 <_malloc_r+0x32>
 800756c:	4634      	mov	r4, r6
 800756e:	6876      	ldr	r6, [r6, #4]
 8007570:	e7b9      	b.n	80074e6 <_malloc_r+0x46>
 8007572:	230c      	movs	r3, #12
 8007574:	4638      	mov	r0, r7
 8007576:	603b      	str	r3, [r7, #0]
 8007578:	f000 f84c 	bl	8007614 <__malloc_unlock>
 800757c:	e7a1      	b.n	80074c2 <_malloc_r+0x22>
 800757e:	6025      	str	r5, [r4, #0]
 8007580:	e7de      	b.n	8007540 <_malloc_r+0xa0>
 8007582:	bf00      	nop
 8007584:	20002e04 	.word	0x20002e04

08007588 <_realloc_r>:
 8007588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800758c:	4680      	mov	r8, r0
 800758e:	4614      	mov	r4, r2
 8007590:	460e      	mov	r6, r1
 8007592:	b921      	cbnz	r1, 800759e <_realloc_r+0x16>
 8007594:	4611      	mov	r1, r2
 8007596:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800759a:	f7ff bf81 	b.w	80074a0 <_malloc_r>
 800759e:	b92a      	cbnz	r2, 80075ac <_realloc_r+0x24>
 80075a0:	f7ff ff16 	bl	80073d0 <_free_r>
 80075a4:	4625      	mov	r5, r4
 80075a6:	4628      	mov	r0, r5
 80075a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80075ac:	f000 f838 	bl	8007620 <_malloc_usable_size_r>
 80075b0:	4284      	cmp	r4, r0
 80075b2:	4607      	mov	r7, r0
 80075b4:	d802      	bhi.n	80075bc <_realloc_r+0x34>
 80075b6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80075ba:	d812      	bhi.n	80075e2 <_realloc_r+0x5a>
 80075bc:	4621      	mov	r1, r4
 80075be:	4640      	mov	r0, r8
 80075c0:	f7ff ff6e 	bl	80074a0 <_malloc_r>
 80075c4:	4605      	mov	r5, r0
 80075c6:	2800      	cmp	r0, #0
 80075c8:	d0ed      	beq.n	80075a6 <_realloc_r+0x1e>
 80075ca:	42bc      	cmp	r4, r7
 80075cc:	4622      	mov	r2, r4
 80075ce:	4631      	mov	r1, r6
 80075d0:	bf28      	it	cs
 80075d2:	463a      	movcs	r2, r7
 80075d4:	f7fe feee 	bl	80063b4 <memcpy>
 80075d8:	4631      	mov	r1, r6
 80075da:	4640      	mov	r0, r8
 80075dc:	f7ff fef8 	bl	80073d0 <_free_r>
 80075e0:	e7e1      	b.n	80075a6 <_realloc_r+0x1e>
 80075e2:	4635      	mov	r5, r6
 80075e4:	e7df      	b.n	80075a6 <_realloc_r+0x1e>
	...

080075e8 <_sbrk_r>:
 80075e8:	b538      	push	{r3, r4, r5, lr}
 80075ea:	2300      	movs	r3, #0
 80075ec:	4d05      	ldr	r5, [pc, #20]	; (8007604 <_sbrk_r+0x1c>)
 80075ee:	4604      	mov	r4, r0
 80075f0:	4608      	mov	r0, r1
 80075f2:	602b      	str	r3, [r5, #0]
 80075f4:	f7f9 ff36 	bl	8001464 <_sbrk>
 80075f8:	1c43      	adds	r3, r0, #1
 80075fa:	d102      	bne.n	8007602 <_sbrk_r+0x1a>
 80075fc:	682b      	ldr	r3, [r5, #0]
 80075fe:	b103      	cbz	r3, 8007602 <_sbrk_r+0x1a>
 8007600:	6023      	str	r3, [r4, #0]
 8007602:	bd38      	pop	{r3, r4, r5, pc}
 8007604:	20002dfc 	.word	0x20002dfc

08007608 <__malloc_lock>:
 8007608:	4801      	ldr	r0, [pc, #4]	; (8007610 <__malloc_lock+0x8>)
 800760a:	f7ff beb7 	b.w	800737c <__retarget_lock_acquire_recursive>
 800760e:	bf00      	nop
 8007610:	20002e00 	.word	0x20002e00

08007614 <__malloc_unlock>:
 8007614:	4801      	ldr	r0, [pc, #4]	; (800761c <__malloc_unlock+0x8>)
 8007616:	f7ff beb2 	b.w	800737e <__retarget_lock_release_recursive>
 800761a:	bf00      	nop
 800761c:	20002e00 	.word	0x20002e00

08007620 <_malloc_usable_size_r>:
 8007620:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007624:	1f18      	subs	r0, r3, #4
 8007626:	2b00      	cmp	r3, #0
 8007628:	bfbc      	itt	lt
 800762a:	580b      	ldrlt	r3, [r1, r0]
 800762c:	18c0      	addlt	r0, r0, r3
 800762e:	4770      	bx	lr

08007630 <_init>:
 8007630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007632:	bf00      	nop
 8007634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007636:	bc08      	pop	{r3}
 8007638:	469e      	mov	lr, r3
 800763a:	4770      	bx	lr

0800763c <_fini>:
 800763c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800763e:	bf00      	nop
 8007640:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007642:	bc08      	pop	{r3}
 8007644:	469e      	mov	lr, r3
 8007646:	4770      	bx	lr
