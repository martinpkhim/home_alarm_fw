
home_alarm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007594  08000140  08000140  00010140  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000560  080076d4  080076d4  000176d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007c34  08007c34  00020104  2**0
                  CONTENTS
  4 .ARM          00000008  08007c34  08007c34  00017c34  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007c3c  08007c3c  00020104  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007c3c  08007c3c  00017c3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007c40  08007c40  00017c40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000104  20000000  08007c44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002d38  20000104  08007d48  00020104  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002e3c  08007d48  00022e3c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020104  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024ece  00000000  00000000  0002012d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006bdd  00000000  00000000  00044ffb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_loc    00014232  00000000  00000000  0004bbd8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001680  00000000  00000000  0005fe10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00002510  00000000  00000000  00061490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000194d6  00000000  00000000  000639a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0002bafb  00000000  00000000  0007ce76  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000940d5  00000000  00000000  000a8971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013ca46  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004c10  00000000  00000000  0013ca98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	20000104 	.word	0x20000104
 800015c:	00000000 	.word	0x00000000
 8000160:	080076bc 	.word	0x080076bc

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	20000108 	.word	0x20000108
 800017c:	080076bc 	.word	0x080076bc

08000180 <strcmp>:
 8000180:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000184:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000188:	2a01      	cmp	r2, #1
 800018a:	bf28      	it	cs
 800018c:	429a      	cmpcs	r2, r3
 800018e:	d0f7      	beq.n	8000180 <strcmp>
 8000190:	1ad0      	subs	r0, r2, r3
 8000192:	4770      	bx	lr

08000194 <strlen>:
 8000194:	4603      	mov	r3, r0
 8000196:	f813 2b01 	ldrb.w	r2, [r3], #1
 800019a:	2a00      	cmp	r2, #0
 800019c:	d1fb      	bne.n	8000196 <strlen+0x2>
 800019e:	1a18      	subs	r0, r3, r0
 80001a0:	3801      	subs	r0, #1
 80001a2:	4770      	bx	lr

080001a4 <__aeabi_dmul>:
 80001a4:	b570      	push	{r4, r5, r6, lr}
 80001a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001b2:	bf1d      	ittte	ne
 80001b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001b8:	ea94 0f0c 	teqne	r4, ip
 80001bc:	ea95 0f0c 	teqne	r5, ip
 80001c0:	f000 f8de 	bleq	8000380 <__aeabi_dmul+0x1dc>
 80001c4:	442c      	add	r4, r5
 80001c6:	ea81 0603 	eor.w	r6, r1, r3
 80001ca:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001ce:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001d2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001d6:	bf18      	it	ne
 80001d8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80001dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80001e0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80001e4:	d038      	beq.n	8000258 <__aeabi_dmul+0xb4>
 80001e6:	fba0 ce02 	umull	ip, lr, r0, r2
 80001ea:	f04f 0500 	mov.w	r5, #0
 80001ee:	fbe1 e502 	umlal	lr, r5, r1, r2
 80001f2:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80001f6:	fbe0 e503 	umlal	lr, r5, r0, r3
 80001fa:	f04f 0600 	mov.w	r6, #0
 80001fe:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000202:	f09c 0f00 	teq	ip, #0
 8000206:	bf18      	it	ne
 8000208:	f04e 0e01 	orrne.w	lr, lr, #1
 800020c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000210:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000214:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000218:	d204      	bcs.n	8000224 <__aeabi_dmul+0x80>
 800021a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800021e:	416d      	adcs	r5, r5
 8000220:	eb46 0606 	adc.w	r6, r6, r6
 8000224:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000228:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800022c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000230:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000234:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000238:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800023c:	bf88      	it	hi
 800023e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000242:	d81e      	bhi.n	8000282 <__aeabi_dmul+0xde>
 8000244:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000248:	bf08      	it	eq
 800024a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800024e:	f150 0000 	adcs.w	r0, r0, #0
 8000252:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000256:	bd70      	pop	{r4, r5, r6, pc}
 8000258:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 800025c:	ea46 0101 	orr.w	r1, r6, r1
 8000260:	ea40 0002 	orr.w	r0, r0, r2
 8000264:	ea81 0103 	eor.w	r1, r1, r3
 8000268:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800026c:	bfc2      	ittt	gt
 800026e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000272:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000276:	bd70      	popgt	{r4, r5, r6, pc}
 8000278:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800027c:	f04f 0e00 	mov.w	lr, #0
 8000280:	3c01      	subs	r4, #1
 8000282:	f300 80ab 	bgt.w	80003dc <__aeabi_dmul+0x238>
 8000286:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800028a:	bfde      	ittt	le
 800028c:	2000      	movle	r0, #0
 800028e:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000292:	bd70      	pople	{r4, r5, r6, pc}
 8000294:	f1c4 0400 	rsb	r4, r4, #0
 8000298:	3c20      	subs	r4, #32
 800029a:	da35      	bge.n	8000308 <__aeabi_dmul+0x164>
 800029c:	340c      	adds	r4, #12
 800029e:	dc1b      	bgt.n	80002d8 <__aeabi_dmul+0x134>
 80002a0:	f104 0414 	add.w	r4, r4, #20
 80002a4:	f1c4 0520 	rsb	r5, r4, #32
 80002a8:	fa00 f305 	lsl.w	r3, r0, r5
 80002ac:	fa20 f004 	lsr.w	r0, r0, r4
 80002b0:	fa01 f205 	lsl.w	r2, r1, r5
 80002b4:	ea40 0002 	orr.w	r0, r0, r2
 80002b8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002bc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002c4:	fa21 f604 	lsr.w	r6, r1, r4
 80002c8:	eb42 0106 	adc.w	r1, r2, r6
 80002cc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002d0:	bf08      	it	eq
 80002d2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002d6:	bd70      	pop	{r4, r5, r6, pc}
 80002d8:	f1c4 040c 	rsb	r4, r4, #12
 80002dc:	f1c4 0520 	rsb	r5, r4, #32
 80002e0:	fa00 f304 	lsl.w	r3, r0, r4
 80002e4:	fa20 f005 	lsr.w	r0, r0, r5
 80002e8:	fa01 f204 	lsl.w	r2, r1, r4
 80002ec:	ea40 0002 	orr.w	r0, r0, r2
 80002f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	f141 0100 	adc.w	r1, r1, #0
 80002fc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000300:	bf08      	it	eq
 8000302:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000306:	bd70      	pop	{r4, r5, r6, pc}
 8000308:	f1c4 0520 	rsb	r5, r4, #32
 800030c:	fa00 f205 	lsl.w	r2, r0, r5
 8000310:	ea4e 0e02 	orr.w	lr, lr, r2
 8000314:	fa20 f304 	lsr.w	r3, r0, r4
 8000318:	fa01 f205 	lsl.w	r2, r1, r5
 800031c:	ea43 0302 	orr.w	r3, r3, r2
 8000320:	fa21 f004 	lsr.w	r0, r1, r4
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000328:	fa21 f204 	lsr.w	r2, r1, r4
 800032c:	ea20 0002 	bic.w	r0, r0, r2
 8000330:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000334:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000338:	bf08      	it	eq
 800033a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033e:	bd70      	pop	{r4, r5, r6, pc}
 8000340:	f094 0f00 	teq	r4, #0
 8000344:	d10f      	bne.n	8000366 <__aeabi_dmul+0x1c2>
 8000346:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800034a:	0040      	lsls	r0, r0, #1
 800034c:	eb41 0101 	adc.w	r1, r1, r1
 8000350:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000354:	bf08      	it	eq
 8000356:	3c01      	subeq	r4, #1
 8000358:	d0f7      	beq.n	800034a <__aeabi_dmul+0x1a6>
 800035a:	ea41 0106 	orr.w	r1, r1, r6
 800035e:	f095 0f00 	teq	r5, #0
 8000362:	bf18      	it	ne
 8000364:	4770      	bxne	lr
 8000366:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800036a:	0052      	lsls	r2, r2, #1
 800036c:	eb43 0303 	adc.w	r3, r3, r3
 8000370:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000374:	bf08      	it	eq
 8000376:	3d01      	subeq	r5, #1
 8000378:	d0f7      	beq.n	800036a <__aeabi_dmul+0x1c6>
 800037a:	ea43 0306 	orr.w	r3, r3, r6
 800037e:	4770      	bx	lr
 8000380:	ea94 0f0c 	teq	r4, ip
 8000384:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000388:	bf18      	it	ne
 800038a:	ea95 0f0c 	teqne	r5, ip
 800038e:	d00c      	beq.n	80003aa <__aeabi_dmul+0x206>
 8000390:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000394:	bf18      	it	ne
 8000396:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800039a:	d1d1      	bne.n	8000340 <__aeabi_dmul+0x19c>
 800039c:	ea81 0103 	eor.w	r1, r1, r3
 80003a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd70      	pop	{r4, r5, r6, pc}
 80003aa:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003ae:	bf06      	itte	eq
 80003b0:	4610      	moveq	r0, r2
 80003b2:	4619      	moveq	r1, r3
 80003b4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003b8:	d019      	beq.n	80003ee <__aeabi_dmul+0x24a>
 80003ba:	ea94 0f0c 	teq	r4, ip
 80003be:	d102      	bne.n	80003c6 <__aeabi_dmul+0x222>
 80003c0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003c4:	d113      	bne.n	80003ee <__aeabi_dmul+0x24a>
 80003c6:	ea95 0f0c 	teq	r5, ip
 80003ca:	d105      	bne.n	80003d8 <__aeabi_dmul+0x234>
 80003cc:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003d0:	bf1c      	itt	ne
 80003d2:	4610      	movne	r0, r2
 80003d4:	4619      	movne	r1, r3
 80003d6:	d10a      	bne.n	80003ee <__aeabi_dmul+0x24a>
 80003d8:	ea81 0103 	eor.w	r1, r1, r3
 80003dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003e0:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003e4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e8:	f04f 0000 	mov.w	r0, #0
 80003ec:	bd70      	pop	{r4, r5, r6, pc}
 80003ee:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80003f2:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80003f6:	bd70      	pop	{r4, r5, r6, pc}

080003f8 <__aeabi_drsub>:
 80003f8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80003fc:	e002      	b.n	8000404 <__adddf3>
 80003fe:	bf00      	nop

08000400 <__aeabi_dsub>:
 8000400:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000404 <__adddf3>:
 8000404:	b530      	push	{r4, r5, lr}
 8000406:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800040a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	bf1f      	itttt	ne
 800041a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800041e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000422:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000426:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800042a:	f000 80e2 	beq.w	80005f2 <__adddf3+0x1ee>
 800042e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000432:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000436:	bfb8      	it	lt
 8000438:	426d      	neglt	r5, r5
 800043a:	dd0c      	ble.n	8000456 <__adddf3+0x52>
 800043c:	442c      	add	r4, r5
 800043e:	ea80 0202 	eor.w	r2, r0, r2
 8000442:	ea81 0303 	eor.w	r3, r1, r3
 8000446:	ea82 0000 	eor.w	r0, r2, r0
 800044a:	ea83 0101 	eor.w	r1, r3, r1
 800044e:	ea80 0202 	eor.w	r2, r0, r2
 8000452:	ea81 0303 	eor.w	r3, r1, r3
 8000456:	2d36      	cmp	r5, #54	; 0x36
 8000458:	bf88      	it	hi
 800045a:	bd30      	pophi	{r4, r5, pc}
 800045c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000460:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000464:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000468:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800046c:	d002      	beq.n	8000474 <__adddf3+0x70>
 800046e:	4240      	negs	r0, r0
 8000470:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000474:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000478:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800047c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000480:	d002      	beq.n	8000488 <__adddf3+0x84>
 8000482:	4252      	negs	r2, r2
 8000484:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000488:	ea94 0f05 	teq	r4, r5
 800048c:	f000 80a7 	beq.w	80005de <__adddf3+0x1da>
 8000490:	f1a4 0401 	sub.w	r4, r4, #1
 8000494:	f1d5 0e20 	rsbs	lr, r5, #32
 8000498:	db0d      	blt.n	80004b6 <__adddf3+0xb2>
 800049a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800049e:	fa22 f205 	lsr.w	r2, r2, r5
 80004a2:	1880      	adds	r0, r0, r2
 80004a4:	f141 0100 	adc.w	r1, r1, #0
 80004a8:	fa03 f20e 	lsl.w	r2, r3, lr
 80004ac:	1880      	adds	r0, r0, r2
 80004ae:	fa43 f305 	asr.w	r3, r3, r5
 80004b2:	4159      	adcs	r1, r3
 80004b4:	e00e      	b.n	80004d4 <__adddf3+0xd0>
 80004b6:	f1a5 0520 	sub.w	r5, r5, #32
 80004ba:	f10e 0e20 	add.w	lr, lr, #32
 80004be:	2a01      	cmp	r2, #1
 80004c0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004c4:	bf28      	it	cs
 80004c6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ca:	fa43 f305 	asr.w	r3, r3, r5
 80004ce:	18c0      	adds	r0, r0, r3
 80004d0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004d4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004d8:	d507      	bpl.n	80004ea <__adddf3+0xe6>
 80004da:	f04f 0e00 	mov.w	lr, #0
 80004de:	f1dc 0c00 	rsbs	ip, ip, #0
 80004e2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80004e6:	eb6e 0101 	sbc.w	r1, lr, r1
 80004ea:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80004ee:	d31b      	bcc.n	8000528 <__adddf3+0x124>
 80004f0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80004f4:	d30c      	bcc.n	8000510 <__adddf3+0x10c>
 80004f6:	0849      	lsrs	r1, r1, #1
 80004f8:	ea5f 0030 	movs.w	r0, r0, rrx
 80004fc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000500:	f104 0401 	add.w	r4, r4, #1
 8000504:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000508:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800050c:	f080 809a 	bcs.w	8000644 <__adddf3+0x240>
 8000510:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000514:	bf08      	it	eq
 8000516:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800051a:	f150 0000 	adcs.w	r0, r0, #0
 800051e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000522:	ea41 0105 	orr.w	r1, r1, r5
 8000526:	bd30      	pop	{r4, r5, pc}
 8000528:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800052c:	4140      	adcs	r0, r0
 800052e:	eb41 0101 	adc.w	r1, r1, r1
 8000532:	3c01      	subs	r4, #1
 8000534:	bf28      	it	cs
 8000536:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800053a:	d2e9      	bcs.n	8000510 <__adddf3+0x10c>
 800053c:	f091 0f00 	teq	r1, #0
 8000540:	bf04      	itt	eq
 8000542:	4601      	moveq	r1, r0
 8000544:	2000      	moveq	r0, #0
 8000546:	fab1 f381 	clz	r3, r1
 800054a:	bf08      	it	eq
 800054c:	3320      	addeq	r3, #32
 800054e:	f1a3 030b 	sub.w	r3, r3, #11
 8000552:	f1b3 0220 	subs.w	r2, r3, #32
 8000556:	da0c      	bge.n	8000572 <__adddf3+0x16e>
 8000558:	320c      	adds	r2, #12
 800055a:	dd08      	ble.n	800056e <__adddf3+0x16a>
 800055c:	f102 0c14 	add.w	ip, r2, #20
 8000560:	f1c2 020c 	rsb	r2, r2, #12
 8000564:	fa01 f00c 	lsl.w	r0, r1, ip
 8000568:	fa21 f102 	lsr.w	r1, r1, r2
 800056c:	e00c      	b.n	8000588 <__adddf3+0x184>
 800056e:	f102 0214 	add.w	r2, r2, #20
 8000572:	bfd8      	it	le
 8000574:	f1c2 0c20 	rsble	ip, r2, #32
 8000578:	fa01 f102 	lsl.w	r1, r1, r2
 800057c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000580:	bfdc      	itt	le
 8000582:	ea41 010c 	orrle.w	r1, r1, ip
 8000586:	4090      	lslle	r0, r2
 8000588:	1ae4      	subs	r4, r4, r3
 800058a:	bfa2      	ittt	ge
 800058c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000590:	4329      	orrge	r1, r5
 8000592:	bd30      	popge	{r4, r5, pc}
 8000594:	ea6f 0404 	mvn.w	r4, r4
 8000598:	3c1f      	subs	r4, #31
 800059a:	da1c      	bge.n	80005d6 <__adddf3+0x1d2>
 800059c:	340c      	adds	r4, #12
 800059e:	dc0e      	bgt.n	80005be <__adddf3+0x1ba>
 80005a0:	f104 0414 	add.w	r4, r4, #20
 80005a4:	f1c4 0220 	rsb	r2, r4, #32
 80005a8:	fa20 f004 	lsr.w	r0, r0, r4
 80005ac:	fa01 f302 	lsl.w	r3, r1, r2
 80005b0:	ea40 0003 	orr.w	r0, r0, r3
 80005b4:	fa21 f304 	lsr.w	r3, r1, r4
 80005b8:	ea45 0103 	orr.w	r1, r5, r3
 80005bc:	bd30      	pop	{r4, r5, pc}
 80005be:	f1c4 040c 	rsb	r4, r4, #12
 80005c2:	f1c4 0220 	rsb	r2, r4, #32
 80005c6:	fa20 f002 	lsr.w	r0, r0, r2
 80005ca:	fa01 f304 	lsl.w	r3, r1, r4
 80005ce:	ea40 0003 	orr.w	r0, r0, r3
 80005d2:	4629      	mov	r1, r5
 80005d4:	bd30      	pop	{r4, r5, pc}
 80005d6:	fa21 f004 	lsr.w	r0, r1, r4
 80005da:	4629      	mov	r1, r5
 80005dc:	bd30      	pop	{r4, r5, pc}
 80005de:	f094 0f00 	teq	r4, #0
 80005e2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80005e6:	bf06      	itte	eq
 80005e8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80005ec:	3401      	addeq	r4, #1
 80005ee:	3d01      	subne	r5, #1
 80005f0:	e74e      	b.n	8000490 <__adddf3+0x8c>
 80005f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005f6:	bf18      	it	ne
 80005f8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80005fc:	d029      	beq.n	8000652 <__adddf3+0x24e>
 80005fe:	ea94 0f05 	teq	r4, r5
 8000602:	bf08      	it	eq
 8000604:	ea90 0f02 	teqeq	r0, r2
 8000608:	d005      	beq.n	8000616 <__adddf3+0x212>
 800060a:	ea54 0c00 	orrs.w	ip, r4, r0
 800060e:	bf04      	itt	eq
 8000610:	4619      	moveq	r1, r3
 8000612:	4610      	moveq	r0, r2
 8000614:	bd30      	pop	{r4, r5, pc}
 8000616:	ea91 0f03 	teq	r1, r3
 800061a:	bf1e      	ittt	ne
 800061c:	2100      	movne	r1, #0
 800061e:	2000      	movne	r0, #0
 8000620:	bd30      	popne	{r4, r5, pc}
 8000622:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000626:	d105      	bne.n	8000634 <__adddf3+0x230>
 8000628:	0040      	lsls	r0, r0, #1
 800062a:	4149      	adcs	r1, r1
 800062c:	bf28      	it	cs
 800062e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000632:	bd30      	pop	{r4, r5, pc}
 8000634:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000638:	bf3c      	itt	cc
 800063a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800063e:	bd30      	popcc	{r4, r5, pc}
 8000640:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000644:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000648:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800064c:	f04f 0000 	mov.w	r0, #0
 8000650:	bd30      	pop	{r4, r5, pc}
 8000652:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000656:	bf1a      	itte	ne
 8000658:	4619      	movne	r1, r3
 800065a:	4610      	movne	r0, r2
 800065c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000660:	bf1c      	itt	ne
 8000662:	460b      	movne	r3, r1
 8000664:	4602      	movne	r2, r0
 8000666:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800066a:	bf06      	itte	eq
 800066c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000670:	ea91 0f03 	teqeq	r1, r3
 8000674:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000678:	bd30      	pop	{r4, r5, pc}
 800067a:	bf00      	nop

0800067c <__aeabi_ui2d>:
 800067c:	f090 0f00 	teq	r0, #0
 8000680:	bf04      	itt	eq
 8000682:	2100      	moveq	r1, #0
 8000684:	4770      	bxeq	lr
 8000686:	b530      	push	{r4, r5, lr}
 8000688:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800068c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000690:	f04f 0500 	mov.w	r5, #0
 8000694:	f04f 0100 	mov.w	r1, #0
 8000698:	e750      	b.n	800053c <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_i2d>:
 800069c:	f090 0f00 	teq	r0, #0
 80006a0:	bf04      	itt	eq
 80006a2:	2100      	moveq	r1, #0
 80006a4:	4770      	bxeq	lr
 80006a6:	b530      	push	{r4, r5, lr}
 80006a8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006ac:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006b4:	bf48      	it	mi
 80006b6:	4240      	negmi	r0, r0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e73e      	b.n	800053c <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_f2d>:
 80006c0:	0042      	lsls	r2, r0, #1
 80006c2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006c6:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ca:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006ce:	bf1f      	itttt	ne
 80006d0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006d4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006d8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80006dc:	4770      	bxne	lr
 80006de:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80006e2:	bf08      	it	eq
 80006e4:	4770      	bxeq	lr
 80006e6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80006ea:	bf04      	itt	eq
 80006ec:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80006f0:	4770      	bxeq	lr
 80006f2:	b530      	push	{r4, r5, lr}
 80006f4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80006f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80006fc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000700:	e71c      	b.n	800053c <__adddf3+0x138>
 8000702:	bf00      	nop

08000704 <__aeabi_ul2d>:
 8000704:	ea50 0201 	orrs.w	r2, r0, r1
 8000708:	bf08      	it	eq
 800070a:	4770      	bxeq	lr
 800070c:	b530      	push	{r4, r5, lr}
 800070e:	f04f 0500 	mov.w	r5, #0
 8000712:	e00a      	b.n	800072a <__aeabi_l2d+0x16>

08000714 <__aeabi_l2d>:
 8000714:	ea50 0201 	orrs.w	r2, r0, r1
 8000718:	bf08      	it	eq
 800071a:	4770      	bxeq	lr
 800071c:	b530      	push	{r4, r5, lr}
 800071e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000722:	d502      	bpl.n	800072a <__aeabi_l2d+0x16>
 8000724:	4240      	negs	r0, r0
 8000726:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800072a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800072e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000732:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000736:	f43f aed8 	beq.w	80004ea <__adddf3+0xe6>
 800073a:	f04f 0203 	mov.w	r2, #3
 800073e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000742:	bf18      	it	ne
 8000744:	3203      	addne	r2, #3
 8000746:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800074a:	bf18      	it	ne
 800074c:	3203      	addne	r2, #3
 800074e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000752:	f1c2 0320 	rsb	r3, r2, #32
 8000756:	fa00 fc03 	lsl.w	ip, r0, r3
 800075a:	fa20 f002 	lsr.w	r0, r0, r2
 800075e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000762:	ea40 000e 	orr.w	r0, r0, lr
 8000766:	fa21 f102 	lsr.w	r1, r1, r2
 800076a:	4414      	add	r4, r2
 800076c:	e6bd      	b.n	80004ea <__adddf3+0xe6>
 800076e:	bf00      	nop

08000770 <__aeabi_d2f>:
 8000770:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000774:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000778:	bf24      	itt	cs
 800077a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800077e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000782:	d90d      	bls.n	80007a0 <__aeabi_d2f+0x30>
 8000784:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000788:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 800078c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000790:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000794:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000798:	bf08      	it	eq
 800079a:	f020 0001 	biceq.w	r0, r0, #1
 800079e:	4770      	bx	lr
 80007a0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 80007a4:	d121      	bne.n	80007ea <__aeabi_d2f+0x7a>
 80007a6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 80007aa:	bfbc      	itt	lt
 80007ac:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 80007b0:	4770      	bxlt	lr
 80007b2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80007b6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 80007ba:	f1c2 0218 	rsb	r2, r2, #24
 80007be:	f1c2 0c20 	rsb	ip, r2, #32
 80007c2:	fa10 f30c 	lsls.w	r3, r0, ip
 80007c6:	fa20 f002 	lsr.w	r0, r0, r2
 80007ca:	bf18      	it	ne
 80007cc:	f040 0001 	orrne.w	r0, r0, #1
 80007d0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007d4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80007d8:	fa03 fc0c 	lsl.w	ip, r3, ip
 80007dc:	ea40 000c 	orr.w	r0, r0, ip
 80007e0:	fa23 f302 	lsr.w	r3, r3, r2
 80007e4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80007e8:	e7cc      	b.n	8000784 <__aeabi_d2f+0x14>
 80007ea:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80007ee:	d107      	bne.n	8000800 <__aeabi_d2f+0x90>
 80007f0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80007f4:	bf1e      	ittt	ne
 80007f6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80007fa:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80007fe:	4770      	bxne	lr
 8000800:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000804:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000808:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800080c:	4770      	bx	lr
 800080e:	bf00      	nop

08000810 <__aeabi_fmul>:
 8000810:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000814:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000818:	bf1e      	ittt	ne
 800081a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800081e:	ea92 0f0c 	teqne	r2, ip
 8000822:	ea93 0f0c 	teqne	r3, ip
 8000826:	d06f      	beq.n	8000908 <__aeabi_fmul+0xf8>
 8000828:	441a      	add	r2, r3
 800082a:	ea80 0c01 	eor.w	ip, r0, r1
 800082e:	0240      	lsls	r0, r0, #9
 8000830:	bf18      	it	ne
 8000832:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000836:	d01e      	beq.n	8000876 <__aeabi_fmul+0x66>
 8000838:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800083c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000840:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000844:	fba0 3101 	umull	r3, r1, r0, r1
 8000848:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800084c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000850:	bf3e      	ittt	cc
 8000852:	0049      	lslcc	r1, r1, #1
 8000854:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000858:	005b      	lslcc	r3, r3, #1
 800085a:	ea40 0001 	orr.w	r0, r0, r1
 800085e:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000862:	2afd      	cmp	r2, #253	; 0xfd
 8000864:	d81d      	bhi.n	80008a2 <__aeabi_fmul+0x92>
 8000866:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800086a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 800086e:	bf08      	it	eq
 8000870:	f020 0001 	biceq.w	r0, r0, #1
 8000874:	4770      	bx	lr
 8000876:	f090 0f00 	teq	r0, #0
 800087a:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 800087e:	bf08      	it	eq
 8000880:	0249      	lsleq	r1, r1, #9
 8000882:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000886:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 800088a:	3a7f      	subs	r2, #127	; 0x7f
 800088c:	bfc2      	ittt	gt
 800088e:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000892:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000896:	4770      	bxgt	lr
 8000898:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800089c:	f04f 0300 	mov.w	r3, #0
 80008a0:	3a01      	subs	r2, #1
 80008a2:	dc5d      	bgt.n	8000960 <__aeabi_fmul+0x150>
 80008a4:	f112 0f19 	cmn.w	r2, #25
 80008a8:	bfdc      	itt	le
 80008aa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80008ae:	4770      	bxle	lr
 80008b0:	f1c2 0200 	rsb	r2, r2, #0
 80008b4:	0041      	lsls	r1, r0, #1
 80008b6:	fa21 f102 	lsr.w	r1, r1, r2
 80008ba:	f1c2 0220 	rsb	r2, r2, #32
 80008be:	fa00 fc02 	lsl.w	ip, r0, r2
 80008c2:	ea5f 0031 	movs.w	r0, r1, rrx
 80008c6:	f140 0000 	adc.w	r0, r0, #0
 80008ca:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 80008ce:	bf08      	it	eq
 80008d0:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 80008d4:	4770      	bx	lr
 80008d6:	f092 0f00 	teq	r2, #0
 80008da:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 80008de:	bf02      	ittt	eq
 80008e0:	0040      	lsleq	r0, r0, #1
 80008e2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 80008e6:	3a01      	subeq	r2, #1
 80008e8:	d0f9      	beq.n	80008de <__aeabi_fmul+0xce>
 80008ea:	ea40 000c 	orr.w	r0, r0, ip
 80008ee:	f093 0f00 	teq	r3, #0
 80008f2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80008f6:	bf02      	ittt	eq
 80008f8:	0049      	lsleq	r1, r1, #1
 80008fa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 80008fe:	3b01      	subeq	r3, #1
 8000900:	d0f9      	beq.n	80008f6 <__aeabi_fmul+0xe6>
 8000902:	ea41 010c 	orr.w	r1, r1, ip
 8000906:	e78f      	b.n	8000828 <__aeabi_fmul+0x18>
 8000908:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800090c:	ea92 0f0c 	teq	r2, ip
 8000910:	bf18      	it	ne
 8000912:	ea93 0f0c 	teqne	r3, ip
 8000916:	d00a      	beq.n	800092e <__aeabi_fmul+0x11e>
 8000918:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800091c:	bf18      	it	ne
 800091e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000922:	d1d8      	bne.n	80008d6 <__aeabi_fmul+0xc6>
 8000924:	ea80 0001 	eor.w	r0, r0, r1
 8000928:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800092c:	4770      	bx	lr
 800092e:	f090 0f00 	teq	r0, #0
 8000932:	bf17      	itett	ne
 8000934:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000938:	4608      	moveq	r0, r1
 800093a:	f091 0f00 	teqne	r1, #0
 800093e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000942:	d014      	beq.n	800096e <__aeabi_fmul+0x15e>
 8000944:	ea92 0f0c 	teq	r2, ip
 8000948:	d101      	bne.n	800094e <__aeabi_fmul+0x13e>
 800094a:	0242      	lsls	r2, r0, #9
 800094c:	d10f      	bne.n	800096e <__aeabi_fmul+0x15e>
 800094e:	ea93 0f0c 	teq	r3, ip
 8000952:	d103      	bne.n	800095c <__aeabi_fmul+0x14c>
 8000954:	024b      	lsls	r3, r1, #9
 8000956:	bf18      	it	ne
 8000958:	4608      	movne	r0, r1
 800095a:	d108      	bne.n	800096e <__aeabi_fmul+0x15e>
 800095c:	ea80 0001 	eor.w	r0, r0, r1
 8000960:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000964:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000968:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800096c:	4770      	bx	lr
 800096e:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000972:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000976:	4770      	bx	lr

08000978 <__aeabi_fdiv>:
 8000978:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800097c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000980:	bf1e      	ittt	ne
 8000982:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000986:	ea92 0f0c 	teqne	r2, ip
 800098a:	ea93 0f0c 	teqne	r3, ip
 800098e:	d069      	beq.n	8000a64 <__aeabi_fdiv+0xec>
 8000990:	eba2 0203 	sub.w	r2, r2, r3
 8000994:	ea80 0c01 	eor.w	ip, r0, r1
 8000998:	0249      	lsls	r1, r1, #9
 800099a:	ea4f 2040 	mov.w	r0, r0, lsl #9
 800099e:	d037      	beq.n	8000a10 <__aeabi_fdiv+0x98>
 80009a0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80009a4:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 80009a8:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 80009ac:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 80009b0:	428b      	cmp	r3, r1
 80009b2:	bf38      	it	cc
 80009b4:	005b      	lslcc	r3, r3, #1
 80009b6:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 80009ba:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 80009be:	428b      	cmp	r3, r1
 80009c0:	bf24      	itt	cs
 80009c2:	1a5b      	subcs	r3, r3, r1
 80009c4:	ea40 000c 	orrcs.w	r0, r0, ip
 80009c8:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 80009cc:	bf24      	itt	cs
 80009ce:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 80009d2:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80009d6:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 80009da:	bf24      	itt	cs
 80009dc:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 80009e0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80009e4:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 80009e8:	bf24      	itt	cs
 80009ea:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 80009ee:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80009f2:	011b      	lsls	r3, r3, #4
 80009f4:	bf18      	it	ne
 80009f6:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 80009fa:	d1e0      	bne.n	80009be <__aeabi_fdiv+0x46>
 80009fc:	2afd      	cmp	r2, #253	; 0xfd
 80009fe:	f63f af50 	bhi.w	80008a2 <__aeabi_fmul+0x92>
 8000a02:	428b      	cmp	r3, r1
 8000a04:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a08:	bf08      	it	eq
 8000a0a:	f020 0001 	biceq.w	r0, r0, #1
 8000a0e:	4770      	bx	lr
 8000a10:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000a14:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000a18:	327f      	adds	r2, #127	; 0x7f
 8000a1a:	bfc2      	ittt	gt
 8000a1c:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000a20:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000a24:	4770      	bxgt	lr
 8000a26:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a2a:	f04f 0300 	mov.w	r3, #0
 8000a2e:	3a01      	subs	r2, #1
 8000a30:	e737      	b.n	80008a2 <__aeabi_fmul+0x92>
 8000a32:	f092 0f00 	teq	r2, #0
 8000a36:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000a3a:	bf02      	ittt	eq
 8000a3c:	0040      	lsleq	r0, r0, #1
 8000a3e:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000a42:	3a01      	subeq	r2, #1
 8000a44:	d0f9      	beq.n	8000a3a <__aeabi_fdiv+0xc2>
 8000a46:	ea40 000c 	orr.w	r0, r0, ip
 8000a4a:	f093 0f00 	teq	r3, #0
 8000a4e:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a52:	bf02      	ittt	eq
 8000a54:	0049      	lsleq	r1, r1, #1
 8000a56:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000a5a:	3b01      	subeq	r3, #1
 8000a5c:	d0f9      	beq.n	8000a52 <__aeabi_fdiv+0xda>
 8000a5e:	ea41 010c 	orr.w	r1, r1, ip
 8000a62:	e795      	b.n	8000990 <__aeabi_fdiv+0x18>
 8000a64:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000a68:	ea92 0f0c 	teq	r2, ip
 8000a6c:	d108      	bne.n	8000a80 <__aeabi_fdiv+0x108>
 8000a6e:	0242      	lsls	r2, r0, #9
 8000a70:	f47f af7d 	bne.w	800096e <__aeabi_fmul+0x15e>
 8000a74:	ea93 0f0c 	teq	r3, ip
 8000a78:	f47f af70 	bne.w	800095c <__aeabi_fmul+0x14c>
 8000a7c:	4608      	mov	r0, r1
 8000a7e:	e776      	b.n	800096e <__aeabi_fmul+0x15e>
 8000a80:	ea93 0f0c 	teq	r3, ip
 8000a84:	d104      	bne.n	8000a90 <__aeabi_fdiv+0x118>
 8000a86:	024b      	lsls	r3, r1, #9
 8000a88:	f43f af4c 	beq.w	8000924 <__aeabi_fmul+0x114>
 8000a8c:	4608      	mov	r0, r1
 8000a8e:	e76e      	b.n	800096e <__aeabi_fmul+0x15e>
 8000a90:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000a94:	bf18      	it	ne
 8000a96:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000a9a:	d1ca      	bne.n	8000a32 <__aeabi_fdiv+0xba>
 8000a9c:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000aa0:	f47f af5c 	bne.w	800095c <__aeabi_fmul+0x14c>
 8000aa4:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000aa8:	f47f af3c 	bne.w	8000924 <__aeabi_fmul+0x114>
 8000aac:	e75f      	b.n	800096e <__aeabi_fmul+0x15e>
 8000aae:	bf00      	nop

08000ab0 <__aeabi_uldivmod>:
 8000ab0:	b953      	cbnz	r3, 8000ac8 <__aeabi_uldivmod+0x18>
 8000ab2:	b94a      	cbnz	r2, 8000ac8 <__aeabi_uldivmod+0x18>
 8000ab4:	2900      	cmp	r1, #0
 8000ab6:	bf08      	it	eq
 8000ab8:	2800      	cmpeq	r0, #0
 8000aba:	bf1c      	itt	ne
 8000abc:	f04f 31ff 	movne.w	r1, #4294967295
 8000ac0:	f04f 30ff 	movne.w	r0, #4294967295
 8000ac4:	f000 b976 	b.w	8000db4 <__aeabi_idiv0>
 8000ac8:	f1ad 0c08 	sub.w	ip, sp, #8
 8000acc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ad0:	f000 f806 	bl	8000ae0 <__udivmoddi4>
 8000ad4:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ad8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000adc:	b004      	add	sp, #16
 8000ade:	4770      	bx	lr

08000ae0 <__udivmoddi4>:
 8000ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ae4:	9e08      	ldr	r6, [sp, #32]
 8000ae6:	460d      	mov	r5, r1
 8000ae8:	4604      	mov	r4, r0
 8000aea:	4688      	mov	r8, r1
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d14d      	bne.n	8000b8c <__udivmoddi4+0xac>
 8000af0:	428a      	cmp	r2, r1
 8000af2:	4694      	mov	ip, r2
 8000af4:	d968      	bls.n	8000bc8 <__udivmoddi4+0xe8>
 8000af6:	fab2 f282 	clz	r2, r2
 8000afa:	b152      	cbz	r2, 8000b12 <__udivmoddi4+0x32>
 8000afc:	fa01 f302 	lsl.w	r3, r1, r2
 8000b00:	f1c2 0120 	rsb	r1, r2, #32
 8000b04:	fa20 f101 	lsr.w	r1, r0, r1
 8000b08:	fa0c fc02 	lsl.w	ip, ip, r2
 8000b0c:	ea41 0803 	orr.w	r8, r1, r3
 8000b10:	4094      	lsls	r4, r2
 8000b12:	ea4f 411c 	mov.w	r1, ip, lsr #16
 8000b16:	fbb8 f7f1 	udiv	r7, r8, r1
 8000b1a:	fa1f fe8c 	uxth.w	lr, ip
 8000b1e:	fb01 8817 	mls	r8, r1, r7, r8
 8000b22:	fb07 f00e 	mul.w	r0, r7, lr
 8000b26:	0c23      	lsrs	r3, r4, #16
 8000b28:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b2c:	4298      	cmp	r0, r3
 8000b2e:	d90a      	bls.n	8000b46 <__udivmoddi4+0x66>
 8000b30:	eb1c 0303 	adds.w	r3, ip, r3
 8000b34:	f107 35ff 	add.w	r5, r7, #4294967295
 8000b38:	f080 811e 	bcs.w	8000d78 <__udivmoddi4+0x298>
 8000b3c:	4298      	cmp	r0, r3
 8000b3e:	f240 811b 	bls.w	8000d78 <__udivmoddi4+0x298>
 8000b42:	3f02      	subs	r7, #2
 8000b44:	4463      	add	r3, ip
 8000b46:	1a1b      	subs	r3, r3, r0
 8000b48:	fbb3 f0f1 	udiv	r0, r3, r1
 8000b4c:	fb01 3310 	mls	r3, r1, r0, r3
 8000b50:	fb00 fe0e 	mul.w	lr, r0, lr
 8000b54:	b2a4      	uxth	r4, r4
 8000b56:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b5a:	45a6      	cmp	lr, r4
 8000b5c:	d90a      	bls.n	8000b74 <__udivmoddi4+0x94>
 8000b5e:	eb1c 0404 	adds.w	r4, ip, r4
 8000b62:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b66:	f080 8109 	bcs.w	8000d7c <__udivmoddi4+0x29c>
 8000b6a:	45a6      	cmp	lr, r4
 8000b6c:	f240 8106 	bls.w	8000d7c <__udivmoddi4+0x29c>
 8000b70:	4464      	add	r4, ip
 8000b72:	3802      	subs	r0, #2
 8000b74:	2100      	movs	r1, #0
 8000b76:	eba4 040e 	sub.w	r4, r4, lr
 8000b7a:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000b7e:	b11e      	cbz	r6, 8000b88 <__udivmoddi4+0xa8>
 8000b80:	2300      	movs	r3, #0
 8000b82:	40d4      	lsrs	r4, r2
 8000b84:	e9c6 4300 	strd	r4, r3, [r6]
 8000b88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b8c:	428b      	cmp	r3, r1
 8000b8e:	d908      	bls.n	8000ba2 <__udivmoddi4+0xc2>
 8000b90:	2e00      	cmp	r6, #0
 8000b92:	f000 80ee 	beq.w	8000d72 <__udivmoddi4+0x292>
 8000b96:	2100      	movs	r1, #0
 8000b98:	e9c6 0500 	strd	r0, r5, [r6]
 8000b9c:	4608      	mov	r0, r1
 8000b9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ba2:	fab3 f183 	clz	r1, r3
 8000ba6:	2900      	cmp	r1, #0
 8000ba8:	d14a      	bne.n	8000c40 <__udivmoddi4+0x160>
 8000baa:	42ab      	cmp	r3, r5
 8000bac:	d302      	bcc.n	8000bb4 <__udivmoddi4+0xd4>
 8000bae:	4282      	cmp	r2, r0
 8000bb0:	f200 80fc 	bhi.w	8000dac <__udivmoddi4+0x2cc>
 8000bb4:	1a84      	subs	r4, r0, r2
 8000bb6:	eb65 0303 	sbc.w	r3, r5, r3
 8000bba:	2001      	movs	r0, #1
 8000bbc:	4698      	mov	r8, r3
 8000bbe:	2e00      	cmp	r6, #0
 8000bc0:	d0e2      	beq.n	8000b88 <__udivmoddi4+0xa8>
 8000bc2:	e9c6 4800 	strd	r4, r8, [r6]
 8000bc6:	e7df      	b.n	8000b88 <__udivmoddi4+0xa8>
 8000bc8:	b902      	cbnz	r2, 8000bcc <__udivmoddi4+0xec>
 8000bca:	deff      	udf	#255	; 0xff
 8000bcc:	fab2 f282 	clz	r2, r2
 8000bd0:	2a00      	cmp	r2, #0
 8000bd2:	f040 8091 	bne.w	8000cf8 <__udivmoddi4+0x218>
 8000bd6:	eba1 000c 	sub.w	r0, r1, ip
 8000bda:	2101      	movs	r1, #1
 8000bdc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000be0:	fa1f fe8c 	uxth.w	lr, ip
 8000be4:	fbb0 f3f7 	udiv	r3, r0, r7
 8000be8:	fb07 0013 	mls	r0, r7, r3, r0
 8000bec:	0c25      	lsrs	r5, r4, #16
 8000bee:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000bf2:	fb0e f003 	mul.w	r0, lr, r3
 8000bf6:	42a8      	cmp	r0, r5
 8000bf8:	d908      	bls.n	8000c0c <__udivmoddi4+0x12c>
 8000bfa:	eb1c 0505 	adds.w	r5, ip, r5
 8000bfe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000c02:	d202      	bcs.n	8000c0a <__udivmoddi4+0x12a>
 8000c04:	42a8      	cmp	r0, r5
 8000c06:	f200 80ce 	bhi.w	8000da6 <__udivmoddi4+0x2c6>
 8000c0a:	4643      	mov	r3, r8
 8000c0c:	1a2d      	subs	r5, r5, r0
 8000c0e:	fbb5 f0f7 	udiv	r0, r5, r7
 8000c12:	fb07 5510 	mls	r5, r7, r0, r5
 8000c16:	fb0e fe00 	mul.w	lr, lr, r0
 8000c1a:	b2a4      	uxth	r4, r4
 8000c1c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000c20:	45a6      	cmp	lr, r4
 8000c22:	d908      	bls.n	8000c36 <__udivmoddi4+0x156>
 8000c24:	eb1c 0404 	adds.w	r4, ip, r4
 8000c28:	f100 35ff 	add.w	r5, r0, #4294967295
 8000c2c:	d202      	bcs.n	8000c34 <__udivmoddi4+0x154>
 8000c2e:	45a6      	cmp	lr, r4
 8000c30:	f200 80b6 	bhi.w	8000da0 <__udivmoddi4+0x2c0>
 8000c34:	4628      	mov	r0, r5
 8000c36:	eba4 040e 	sub.w	r4, r4, lr
 8000c3a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000c3e:	e79e      	b.n	8000b7e <__udivmoddi4+0x9e>
 8000c40:	f1c1 0720 	rsb	r7, r1, #32
 8000c44:	408b      	lsls	r3, r1
 8000c46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c4e:	fa25 fa07 	lsr.w	sl, r5, r7
 8000c52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c56:	fbba f8f9 	udiv	r8, sl, r9
 8000c5a:	fa20 f307 	lsr.w	r3, r0, r7
 8000c5e:	fb09 aa18 	mls	sl, r9, r8, sl
 8000c62:	408d      	lsls	r5, r1
 8000c64:	fa1f fe8c 	uxth.w	lr, ip
 8000c68:	431d      	orrs	r5, r3
 8000c6a:	fa00 f301 	lsl.w	r3, r0, r1
 8000c6e:	fb08 f00e 	mul.w	r0, r8, lr
 8000c72:	0c2c      	lsrs	r4, r5, #16
 8000c74:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8000c78:	42a0      	cmp	r0, r4
 8000c7a:	fa02 f201 	lsl.w	r2, r2, r1
 8000c7e:	d90b      	bls.n	8000c98 <__udivmoddi4+0x1b8>
 8000c80:	eb1c 0404 	adds.w	r4, ip, r4
 8000c84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c88:	f080 8088 	bcs.w	8000d9c <__udivmoddi4+0x2bc>
 8000c8c:	42a0      	cmp	r0, r4
 8000c8e:	f240 8085 	bls.w	8000d9c <__udivmoddi4+0x2bc>
 8000c92:	f1a8 0802 	sub.w	r8, r8, #2
 8000c96:	4464      	add	r4, ip
 8000c98:	1a24      	subs	r4, r4, r0
 8000c9a:	fbb4 f0f9 	udiv	r0, r4, r9
 8000c9e:	fb09 4410 	mls	r4, r9, r0, r4
 8000ca2:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ca6:	b2ad      	uxth	r5, r5
 8000ca8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000cac:	45a6      	cmp	lr, r4
 8000cae:	d908      	bls.n	8000cc2 <__udivmoddi4+0x1e2>
 8000cb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000cb4:	f100 35ff 	add.w	r5, r0, #4294967295
 8000cb8:	d26c      	bcs.n	8000d94 <__udivmoddi4+0x2b4>
 8000cba:	45a6      	cmp	lr, r4
 8000cbc:	d96a      	bls.n	8000d94 <__udivmoddi4+0x2b4>
 8000cbe:	3802      	subs	r0, #2
 8000cc0:	4464      	add	r4, ip
 8000cc2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000cc6:	fba0 9502 	umull	r9, r5, r0, r2
 8000cca:	eba4 040e 	sub.w	r4, r4, lr
 8000cce:	42ac      	cmp	r4, r5
 8000cd0:	46c8      	mov	r8, r9
 8000cd2:	46ae      	mov	lr, r5
 8000cd4:	d356      	bcc.n	8000d84 <__udivmoddi4+0x2a4>
 8000cd6:	d053      	beq.n	8000d80 <__udivmoddi4+0x2a0>
 8000cd8:	2e00      	cmp	r6, #0
 8000cda:	d069      	beq.n	8000db0 <__udivmoddi4+0x2d0>
 8000cdc:	ebb3 0208 	subs.w	r2, r3, r8
 8000ce0:	eb64 040e 	sbc.w	r4, r4, lr
 8000ce4:	fa22 f301 	lsr.w	r3, r2, r1
 8000ce8:	fa04 f707 	lsl.w	r7, r4, r7
 8000cec:	431f      	orrs	r7, r3
 8000cee:	40cc      	lsrs	r4, r1
 8000cf0:	e9c6 7400 	strd	r7, r4, [r6]
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	e747      	b.n	8000b88 <__udivmoddi4+0xa8>
 8000cf8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cfc:	f1c2 0120 	rsb	r1, r2, #32
 8000d00:	fa25 f301 	lsr.w	r3, r5, r1
 8000d04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d08:	fa20 f101 	lsr.w	r1, r0, r1
 8000d0c:	4095      	lsls	r5, r2
 8000d0e:	430d      	orrs	r5, r1
 8000d10:	fbb3 f1f7 	udiv	r1, r3, r7
 8000d14:	fb07 3311 	mls	r3, r7, r1, r3
 8000d18:	fa1f fe8c 	uxth.w	lr, ip
 8000d1c:	0c28      	lsrs	r0, r5, #16
 8000d1e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d22:	fb01 f30e 	mul.w	r3, r1, lr
 8000d26:	4283      	cmp	r3, r0
 8000d28:	fa04 f402 	lsl.w	r4, r4, r2
 8000d2c:	d908      	bls.n	8000d40 <__udivmoddi4+0x260>
 8000d2e:	eb1c 0000 	adds.w	r0, ip, r0
 8000d32:	f101 38ff 	add.w	r8, r1, #4294967295
 8000d36:	d22f      	bcs.n	8000d98 <__udivmoddi4+0x2b8>
 8000d38:	4283      	cmp	r3, r0
 8000d3a:	d92d      	bls.n	8000d98 <__udivmoddi4+0x2b8>
 8000d3c:	3902      	subs	r1, #2
 8000d3e:	4460      	add	r0, ip
 8000d40:	1ac0      	subs	r0, r0, r3
 8000d42:	fbb0 f3f7 	udiv	r3, r0, r7
 8000d46:	fb07 0013 	mls	r0, r7, r3, r0
 8000d4a:	b2ad      	uxth	r5, r5
 8000d4c:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8000d50:	fb03 f00e 	mul.w	r0, r3, lr
 8000d54:	42a8      	cmp	r0, r5
 8000d56:	d908      	bls.n	8000d6a <__udivmoddi4+0x28a>
 8000d58:	eb1c 0505 	adds.w	r5, ip, r5
 8000d5c:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d60:	d216      	bcs.n	8000d90 <__udivmoddi4+0x2b0>
 8000d62:	42a8      	cmp	r0, r5
 8000d64:	d914      	bls.n	8000d90 <__udivmoddi4+0x2b0>
 8000d66:	3b02      	subs	r3, #2
 8000d68:	4465      	add	r5, ip
 8000d6a:	1a28      	subs	r0, r5, r0
 8000d6c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d70:	e738      	b.n	8000be4 <__udivmoddi4+0x104>
 8000d72:	4631      	mov	r1, r6
 8000d74:	4630      	mov	r0, r6
 8000d76:	e707      	b.n	8000b88 <__udivmoddi4+0xa8>
 8000d78:	462f      	mov	r7, r5
 8000d7a:	e6e4      	b.n	8000b46 <__udivmoddi4+0x66>
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	e6f9      	b.n	8000b74 <__udivmoddi4+0x94>
 8000d80:	454b      	cmp	r3, r9
 8000d82:	d2a9      	bcs.n	8000cd8 <__udivmoddi4+0x1f8>
 8000d84:	ebb9 0802 	subs.w	r8, r9, r2
 8000d88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000d8c:	3801      	subs	r0, #1
 8000d8e:	e7a3      	b.n	8000cd8 <__udivmoddi4+0x1f8>
 8000d90:	4643      	mov	r3, r8
 8000d92:	e7ea      	b.n	8000d6a <__udivmoddi4+0x28a>
 8000d94:	4628      	mov	r0, r5
 8000d96:	e794      	b.n	8000cc2 <__udivmoddi4+0x1e2>
 8000d98:	4641      	mov	r1, r8
 8000d9a:	e7d1      	b.n	8000d40 <__udivmoddi4+0x260>
 8000d9c:	46d0      	mov	r8, sl
 8000d9e:	e77b      	b.n	8000c98 <__udivmoddi4+0x1b8>
 8000da0:	4464      	add	r4, ip
 8000da2:	3802      	subs	r0, #2
 8000da4:	e747      	b.n	8000c36 <__udivmoddi4+0x156>
 8000da6:	3b02      	subs	r3, #2
 8000da8:	4465      	add	r5, ip
 8000daa:	e72f      	b.n	8000c0c <__udivmoddi4+0x12c>
 8000dac:	4608      	mov	r0, r1
 8000dae:	e706      	b.n	8000bbe <__udivmoddi4+0xde>
 8000db0:	4631      	mov	r1, r6
 8000db2:	e6e9      	b.n	8000b88 <__udivmoddi4+0xa8>

08000db4 <__aeabi_idiv0>:
 8000db4:	4770      	bx	lr
 8000db6:	bf00      	nop

08000db8 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8000db8:	b530      	push	{r4, r5, lr}

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000dba:	2400      	movs	r4, #0

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8000dbc:	4815      	ldr	r0, [pc, #84]	; (8000e14 <MX_ADC_Init+0x5c>)
 8000dbe:	4b16      	ldr	r3, [pc, #88]	; (8000e18 <MX_ADC_Init+0x60>)
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
  hadc.Init.ContinuousConvMode = DISABLE;
  hadc.Init.NbrOfConversion = 1;
 8000dc0:	2501      	movs	r5, #1
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8000dc2:	e9c0 3400 	strd	r3, r4, [r0]
  hadc.Init.DiscontinuousConvMode = DISABLE;
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000dc6:	2310      	movs	r3, #16
{
 8000dc8:	b085      	sub	sp, #20
  ADC_ChannelConfTypeDef sConfig = {0};
 8000dca:	e9cd 4401 	strd	r4, r4, [sp, #4]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000dce:	e9c0 4402 	strd	r4, r4, [r0, #8]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000dd2:	e9c0 4404 	strd	r4, r4, [r0, #16]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 8000dd6:	e9c0 4406 	strd	r4, r4, [r0, #24]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000dda:	e9c0 340d 	strd	r3, r4, [r0, #52]	; 0x34
  ADC_ChannelConfTypeDef sConfig = {0};
 8000dde:	9403      	str	r4, [sp, #12]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 8000de0:	6204      	str	r4, [r0, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 8000de2:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
  hadc.Init.NbrOfConversion = 1;
 8000de6:	6285      	str	r5, [r0, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 8000de8:	f880 402c 	strb.w	r4, [r0, #44]	; 0x2c
  hadc.Init.DMAContinuousRequests = DISABLE;
 8000dec:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 8000df0:	f000 fc1e 	bl	8001630 <HAL_ADC_Init>
 8000df4:	b108      	cbz	r0, 8000dfa <MX_ADC_Init+0x42>
  {
    Error_Handler();
 8000df6:	f000 f9db 	bl	80011b0 <Error_Handler>
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
  sConfig.Rank = ADC_REGULAR_RANK_1;
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000dfa:	4806      	ldr	r0, [pc, #24]	; (8000e14 <MX_ADC_Init+0x5c>)
 8000dfc:	a901      	add	r1, sp, #4
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000dfe:	e9cd 4501 	strd	r4, r5, [sp, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_4CYCLES;
 8000e02:	9403      	str	r4, [sp, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8000e04:	f000 fd30 	bl	8001868 <HAL_ADC_ConfigChannel>
 8000e08:	b108      	cbz	r0, 8000e0e <MX_ADC_Init+0x56>
  {
    Error_Handler();
 8000e0a:	f000 f9d1 	bl	80011b0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 8000e0e:	b005      	add	sp, #20
 8000e10:	bd30      	pop	{r4, r5, pc}
 8000e12:	bf00      	nop
 8000e14:	20000120 	.word	0x20000120
 8000e18:	40012400 	.word	0x40012400

08000e1c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000e1c:	b510      	push	{r4, lr}
 8000e1e:	4604      	mov	r4, r0
 8000e20:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e22:	2214      	movs	r2, #20
 8000e24:	2100      	movs	r1, #0
 8000e26:	a803      	add	r0, sp, #12
 8000e28:	f005 faf8 	bl	800641c <memset>
  if(adcHandle->Instance==ADC1)
 8000e2c:	6822      	ldr	r2, [r4, #0]
 8000e2e:	4b10      	ldr	r3, [pc, #64]	; (8000e70 <HAL_ADC_MspInit+0x54>)
 8000e30:	429a      	cmp	r2, r3
 8000e32:	d11b      	bne.n	8000e6c <HAL_ADC_MspInit+0x50>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e34:	f503 338a 	add.w	r3, r3, #70656	; 0x11400
 8000e38:	6a1a      	ldr	r2, [r3, #32]
    PA0-WKUP1     ------> ADC_IN0
    */
    GPIO_InitStruct.Pin = ADC_VBAT_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    HAL_GPIO_Init(ADC_VBAT_GPIO_Port, &GPIO_InitStruct);
 8000e3a:	480e      	ldr	r0, [pc, #56]	; (8000e74 <HAL_ADC_MspInit+0x58>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e3c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8000e40:	621a      	str	r2, [r3, #32]
 8000e42:	6a1a      	ldr	r2, [r3, #32]
    HAL_GPIO_Init(ADC_VBAT_GPIO_Port, &GPIO_InitStruct);
 8000e44:	a903      	add	r1, sp, #12
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e46:	f402 7200 	and.w	r2, r2, #512	; 0x200
 8000e4a:	9201      	str	r2, [sp, #4]
 8000e4c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e4e:	69da      	ldr	r2, [r3, #28]
 8000e50:	f042 0201 	orr.w	r2, r2, #1
 8000e54:	61da      	str	r2, [r3, #28]
 8000e56:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e58:	2201      	movs	r2, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	9302      	str	r3, [sp, #8]
 8000e60:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e62:	2303      	movs	r3, #3
 8000e64:	e9cd 2303 	strd	r2, r3, [sp, #12]
    HAL_GPIO_Init(ADC_VBAT_GPIO_Port, &GPIO_InitStruct);
 8000e68:	f001 f862 	bl	8001f30 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000e6c:	b008      	add	sp, #32
 8000e6e:	bd10      	pop	{r4, pc}
 8000e70:	40012400 	.word	0x40012400
 8000e74:	40020000 	.word	0x40020000

08000e78 <MX_CRC_Init>:

CRC_HandleTypeDef hcrc;

/* CRC init function */
void MX_CRC_Init(void)
{
 8000e78:	b508      	push	{r3, lr}
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000e7a:	4805      	ldr	r0, [pc, #20]	; (8000e90 <MX_CRC_Init+0x18>)
 8000e7c:	4b05      	ldr	r3, [pc, #20]	; (8000e94 <MX_CRC_Init+0x1c>)
 8000e7e:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000e80:	f000 fe64 	bl	8001b4c <HAL_CRC_Init>
 8000e84:	b118      	cbz	r0, 8000e8e <MX_CRC_Init+0x16>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000e86:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8000e8a:	f000 b991 	b.w	80011b0 <Error_Handler>
}
 8000e8e:	bd08      	pop	{r3, pc}
 8000e90:	20000174 	.word	0x20000174
 8000e94:	40023000 	.word	0x40023000

08000e98 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 8000e98:	6802      	ldr	r2, [r0, #0]
 8000e9a:	4b09      	ldr	r3, [pc, #36]	; (8000ec0 <HAL_CRC_MspInit+0x28>)
{
 8000e9c:	b082      	sub	sp, #8
  if(crcHandle->Instance==CRC)
 8000e9e:	429a      	cmp	r2, r3
 8000ea0:	d10b      	bne.n	8000eba <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8000ea2:	f8d3 281c 	ldr.w	r2, [r3, #2076]	; 0x81c
 8000ea6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8000eaa:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8000eae:	61da      	str	r2, [r3, #28]
 8000eb0:	69db      	ldr	r3, [r3, #28]
 8000eb2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000eb6:	9301      	str	r3, [sp, #4]
 8000eb8:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8000eba:	b002      	add	sp, #8
 8000ebc:	4770      	bx	lr
 8000ebe:	bf00      	nop
 8000ec0:	40023000 	.word	0x40023000

08000ec4 <MX_DMA_Init>:
  */
void MX_DMA_Init(void)
{

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ec4:	4b0a      	ldr	r3, [pc, #40]	; (8000ef0 <MX_DMA_Init+0x2c>)
{
 8000ec6:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ec8:	69da      	ldr	r2, [r3, #28]

  /* DMA interrupt init */
  /* DMA1_Channel6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 6, 0);
 8000eca:	2106      	movs	r1, #6
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ecc:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8000ed0:	61da      	str	r2, [r3, #28]
 8000ed2:	69db      	ldr	r3, [r3, #28]
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 6, 0);
 8000ed4:	2200      	movs	r2, #0
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ed6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8000eda:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 6, 0);
 8000edc:	2010      	movs	r0, #16
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ede:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel6_IRQn, 6, 0);
 8000ee0:	f000 fdf4 	bl	8001acc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000ee4:	2010      	movs	r0, #16

}
 8000ee6:	b003      	add	sp, #12
 8000ee8:	f85d eb04 	ldr.w	lr, [sp], #4
  HAL_NVIC_EnableIRQ(DMA1_Channel6_IRQn);
 8000eec:	f000 be20 	b.w	8001b30 <HAL_NVIC_EnableIRQ>
 8000ef0:	40023800 	.word	0x40023800

08000ef4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000ef4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000ef8:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000efa:	2214      	movs	r2, #20
 8000efc:	2100      	movs	r1, #0
 8000efe:	a803      	add	r0, sp, #12
 8000f00:	f005 fa8c 	bl	800641c <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f04:	4b4f      	ldr	r3, [pc, #316]	; (8001044 <MX_GPIO_Init+0x150>)
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, COL0_Pin|COL1_Pin|COL2_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 8000f06:	4d50      	ldr	r5, [pc, #320]	; (8001048 <MX_GPIO_Init+0x154>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f08:	69da      	ldr	r2, [r3, #28]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PWRKEY_GPIO_Port, PWRKEY_Pin, GPIO_PIN_RESET);
 8000f0a:	4f50      	ldr	r7, [pc, #320]	; (800104c <MX_GPIO_Init+0x158>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0c:	f042 0201 	orr.w	r2, r2, #1
 8000f10:	61da      	str	r2, [r3, #28]
 8000f12:	69da      	ldr	r2, [r3, #28]
  HAL_GPIO_WritePin(GPIOB, COL0_Pin|COL1_Pin|COL2_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 8000f14:	4628      	mov	r0, r5
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f16:	f002 0201 	and.w	r2, r2, #1
 8000f1a:	9201      	str	r2, [sp, #4]
 8000f1c:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f1e:	69da      	ldr	r2, [r3, #28]
  HAL_GPIO_WritePin(GPIOB, COL0_Pin|COL1_Pin|COL2_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 8000f20:	f247 0140 	movw	r1, #28736	; 0x7040
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f24:	f042 0202 	orr.w	r2, r2, #2
 8000f28:	61da      	str	r2, [r3, #28]
 8000f2a:	69db      	ldr	r3, [r3, #28]
  HAL_GPIO_WritePin(GPIOB, COL0_Pin|COL1_Pin|COL2_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 8000f2c:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f2e:	f003 0302 	and.w	r3, r3, #2
 8000f32:	9302      	str	r3, [sp, #8]
 8000f34:	9b02      	ldr	r3, [sp, #8]
  HAL_GPIO_WritePin(GPIOB, COL0_Pin|COL1_Pin|COL2_Pin|SPI1_CS_Pin, GPIO_PIN_RESET);
 8000f36:	f001 f8c7 	bl	80020c8 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(PWRKEY_GPIO_Port, PWRKEY_Pin, GPIO_PIN_RESET);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	4638      	mov	r0, r7
 8000f3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SENS0_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f42:	2400      	movs	r4, #0
  HAL_GPIO_WritePin(PWRKEY_GPIO_Port, PWRKEY_Pin, GPIO_PIN_RESET);
 8000f44:	f001 f8c0 	bl	80020c8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f48:	2302      	movs	r3, #2
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(SENS0_GPIO_Port, &GPIO_InitStruct);
 8000f4a:	4638      	mov	r0, r7
 8000f4c:	a903      	add	r1, sp, #12

  /*Configure GPIO pins : PAPin PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = SENS1_Pin|SENS2_Pin|SENS3_Pin|SENS4_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f4e:	f44f 1688 	mov.w	r6, #1114112	; 0x110000
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f52:	e9cd 3403 	strd	r3, r4, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f56:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(SENS0_GPIO_Port, &GPIO_InitStruct);
 8000f58:	f000 ffea 	bl	8001f30 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f5c:	23f0      	movs	r3, #240	; 0xf0
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f5e:	4638      	mov	r0, r7
 8000f60:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f62:	e9cd 3603 	strd	r3, r6, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f66:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f68:	f000 ffe2 	bl	8001f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin
                           PBPin */
  GPIO_InitStruct.Pin = SENS5_Pin|SENS6_Pin|SENS7_Pin|SENS8_Pin
 8000f6c:	f640 4307 	movw	r3, #3079	; 0xc07
                          |SENS9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f70:	4628      	mov	r0, r5
 8000f72:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f74:	e9cd 3603 	strd	r3, r6, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f78:	9405      	str	r4, [sp, #20]

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = COL0_Pin|COL1_Pin|COL2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f7a:	2601      	movs	r6, #1
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f7c:	f000 ffd8 	bl	8001f30 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f80:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8000f84:	e9cd 3603 	strd	r3, r6, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f88:	2303      	movs	r3, #3
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = ROW0_Pin;
 8000f8a:	f44f 4800 	mov.w	r8, #32768	; 0x8000
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f8e:	4628      	mov	r0, r5
 8000f90:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f92:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f94:	9405      	str	r4, [sp, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f96:	f000 ffcb 	bl	8001f30 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(ROW0_GPIO_Port, &GPIO_InitStruct);
 8000f9a:	4628      	mov	r0, r5
 8000f9c:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f9e:	e9cd 8403 	strd	r8, r4, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fa2:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(ROW0_GPIO_Port, &GPIO_InitStruct);
 8000fa4:	f000 ffc4 	bl	8001f30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = ROW1_Pin|ROW2_Pin|ROW3_Pin;
 8000fa8:	f44f 63e0 	mov.w	r3, #1792	; 0x700
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_PULLUP;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fac:	4638      	mov	r0, r7
 8000fae:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fb0:	e9cd 3403 	strd	r3, r4, [sp, #12]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fb4:	9605      	str	r6, [sp, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fb6:	f000 ffbb 	bl	8001f30 <HAL_GPIO_Init>
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = PWRKEY_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(PWRKEY_GPIO_Port, &GPIO_InitStruct);
 8000fba:	4638      	mov	r0, r7
 8000fbc:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fbe:	e9cd 8603 	strd	r8, r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	e9cd 4405 	strd	r4, r4, [sp, #20]
  HAL_GPIO_Init(PWRKEY_GPIO_Port, &GPIO_InitStruct);
 8000fc6:	f000 ffb3 	bl	8001f30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI1_CS_Pin;
 8000fca:	2340      	movs	r3, #64	; 0x40
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000fcc:	4628      	mov	r0, r5
 8000fce:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd0:	e9cd 3603 	strd	r3, r6, [sp, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fd4:	e9cd 4405 	strd	r4, r4, [sp, #20]
  HAL_GPIO_Init(SPI1_CS_GPIO_Port, &GPIO_InitStruct);
 8000fd8:	f000 ffaa 	bl	8001f30 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000fdc:	4622      	mov	r2, r4
 8000fde:	4621      	mov	r1, r4
 8000fe0:	2006      	movs	r0, #6
 8000fe2:	f000 fd73 	bl	8001acc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000fe6:	2006      	movs	r0, #6
 8000fe8:	f000 fda2 	bl	8001b30 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000fec:	4622      	mov	r2, r4
 8000fee:	4621      	mov	r1, r4
 8000ff0:	2007      	movs	r0, #7
 8000ff2:	f000 fd6b 	bl	8001acc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000ff6:	2007      	movs	r0, #7
 8000ff8:	f000 fd9a 	bl	8001b30 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 0, 0);
 8000ffc:	4622      	mov	r2, r4
 8000ffe:	4621      	mov	r1, r4
 8001000:	2008      	movs	r0, #8
 8001002:	f000 fd63 	bl	8001acc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 8001006:	2008      	movs	r0, #8
 8001008:	f000 fd92 	bl	8001b30 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 800100c:	4622      	mov	r2, r4
 800100e:	4621      	mov	r1, r4
 8001010:	200a      	movs	r0, #10
 8001012:	f000 fd5b 	bl	8001acc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8001016:	200a      	movs	r0, #10
 8001018:	f000 fd8a 	bl	8001b30 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800101c:	4622      	mov	r2, r4
 800101e:	4621      	mov	r1, r4
 8001020:	2017      	movs	r0, #23
 8001022:	f000 fd53 	bl	8001acc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001026:	2017      	movs	r0, #23
 8001028:	f000 fd82 	bl	8001b30 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800102c:	4622      	mov	r2, r4
 800102e:	4621      	mov	r1, r4
 8001030:	2028      	movs	r0, #40	; 0x28
 8001032:	f000 fd4b 	bl	8001acc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001036:	2028      	movs	r0, #40	; 0x28
 8001038:	f000 fd7a 	bl	8001b30 <HAL_NVIC_EnableIRQ>

}
 800103c:	b008      	add	sp, #32
 800103e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001042:	bf00      	nop
 8001044:	40023800 	.word	0x40023800
 8001048:	40020400 	.word	0x40020400
 800104c:	40020000 	.word	0x40020000

08001050 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001050:	b508      	push	{r3, lr}
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001052:	480b      	ldr	r0, [pc, #44]	; (8001080 <MX_I2C1_Init+0x30>)
  hi2c1.Init.ClockSpeed = 100000;
 8001054:	4a0b      	ldr	r2, [pc, #44]	; (8001084 <MX_I2C1_Init+0x34>)
 8001056:	4b0c      	ldr	r3, [pc, #48]	; (8001088 <MX_I2C1_Init+0x38>)
 8001058:	e9c0 2300 	strd	r2, r3, [r0]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800105c:	2300      	movs	r3, #0
  hi2c1.Init.OwnAddress1 = 0;
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800105e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c1.Init.OwnAddress1 = 0;
 8001062:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001066:	e9c0 2304 	strd	r2, r3, [r0, #16]
  hi2c1.Init.OwnAddress2 = 0;
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800106a:	e9c0 3306 	strd	r3, r3, [r0, #24]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800106e:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001070:	f001 f93e 	bl	80022f0 <HAL_I2C_Init>
 8001074:	b118      	cbz	r0, 800107e <MX_I2C1_Init+0x2e>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001076:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800107a:	f000 b899 	b.w	80011b0 <Error_Handler>
}
 800107e:	bd08      	pop	{r3, pc}
 8001080:	2000017c 	.word	0x2000017c
 8001084:	40005400 	.word	0x40005400
 8001088:	000186a0 	.word	0x000186a0

0800108c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800108c:	b510      	push	{r4, lr}
 800108e:	4604      	mov	r4, r0
 8001090:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001092:	2214      	movs	r2, #20
 8001094:	2100      	movs	r1, #0
 8001096:	a803      	add	r0, sp, #12
 8001098:	f005 f9c0 	bl	800641c <memset>
  if(i2cHandle->Instance==I2C1)
 800109c:	6822      	ldr	r2, [r4, #0]
 800109e:	4b12      	ldr	r3, [pc, #72]	; (80010e8 <HAL_I2C_MspInit+0x5c>)
 80010a0:	429a      	cmp	r2, r3
 80010a2:	d11f      	bne.n	80010e4 <HAL_I2C_MspInit+0x58>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010a4:	4c11      	ldr	r4, [pc, #68]	; (80010ec <HAL_I2C_MspInit+0x60>)
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010a6:	f44f 7240 	mov.w	r2, #768	; 0x300
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010aa:	69e3      	ldr	r3, [r4, #28]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010ac:	2103      	movs	r1, #3
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ae:	f043 0302 	orr.w	r3, r3, #2
 80010b2:	61e3      	str	r3, [r4, #28]
 80010b4:	69e3      	ldr	r3, [r4, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010b6:	480e      	ldr	r0, [pc, #56]	; (80010f0 <HAL_I2C_MspInit+0x64>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010b8:	f003 0302 	and.w	r3, r3, #2
 80010bc:	9301      	str	r3, [sp, #4]
 80010be:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010c0:	2312      	movs	r3, #18
 80010c2:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80010c6:	2304      	movs	r3, #4
 80010c8:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010cc:	a903      	add	r1, sp, #12
 80010ce:	f000 ff2f 	bl	8001f30 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80010d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80010d4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80010d8:	6263      	str	r3, [r4, #36]	; 0x24
 80010da:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80010dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010e0:	9302      	str	r3, [sp, #8]
 80010e2:	9b02      	ldr	r3, [sp, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80010e4:	b008      	add	sp, #32
 80010e6:	bd10      	pop	{r4, pc}
 80010e8:	40005400 	.word	0x40005400
 80010ec:	40023800 	.word	0x40023800
 80010f0:	40020400 	.word	0x40020400

080010f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010f4:	b510      	push	{r4, lr}
 80010f6:	b092      	sub	sp, #72	; 0x48
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010f8:	2220      	movs	r2, #32
 80010fa:	2100      	movs	r1, #0
 80010fc:	a806      	add	r0, sp, #24
 80010fe:	f005 f98d 	bl	800641c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001102:	2214      	movs	r2, #20
 8001104:	2100      	movs	r1, #0
 8001106:	4668      	mov	r0, sp
 8001108:	f005 f988 	bl	800641c <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800110c:	4a15      	ldr	r2, [pc, #84]	; (8001164 <SystemClock_Config+0x70>)
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800110e:	2100      	movs	r1, #0
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001110:	6813      	ldr	r3, [r2, #0]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001112:	2401      	movs	r4, #1
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001114:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8001118:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800111c:	6013      	str	r3, [r2, #0]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800111e:	2302      	movs	r3, #2
 8001120:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001122:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 8001124:	f44f 2380 	mov.w	r3, #262144	; 0x40000
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001128:	2210      	movs	r2, #16
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL4;
 800112a:	e9cd 130f 	strd	r1, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 800112e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001132:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001134:	e9cd 4208 	strd	r4, r2, [sp, #32]
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV2;
 8001138:	9311      	str	r3, [sp, #68]	; 0x44
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800113a:	f001 fc09 	bl	8002950 <HAL_RCC_OscConfig>
 800113e:	b108      	cbz	r0, 8001144 <SystemClock_Config+0x50>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001140:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001142:	e7fe      	b.n	8001142 <SystemClock_Config+0x4e>
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001144:	220f      	movs	r2, #15
 8001146:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001148:	e9cd 0002 	strd	r0, r0, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800114c:	9004      	str	r0, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800114e:	4621      	mov	r1, r4
 8001150:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001152:	e9cd 2300 	strd	r2, r3, [sp]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001156:	f001 fe4d 	bl	8002df4 <HAL_RCC_ClockConfig>
 800115a:	b108      	cbz	r0, 8001160 <SystemClock_Config+0x6c>
 800115c:	b672      	cpsid	i
  while (1)
 800115e:	e7fe      	b.n	800115e <SystemClock_Config+0x6a>
}
 8001160:	b012      	add	sp, #72	; 0x48
 8001162:	bd10      	pop	{r4, pc}
 8001164:	40007000 	.word	0x40007000

08001168 <main>:
{
 8001168:	b508      	push	{r3, lr}
  HAL_Init();
 800116a:	f000 fa40 	bl	80015ee <HAL_Init>
  SystemClock_Config();
 800116e:	f7ff ffc1 	bl	80010f4 <SystemClock_Config>
  MX_GPIO_Init();
 8001172:	f7ff febf 	bl	8000ef4 <MX_GPIO_Init>
  MX_DMA_Init();
 8001176:	f7ff fea5 	bl	8000ec4 <MX_DMA_Init>
  MX_ADC_Init();
 800117a:	f7ff fe1d 	bl	8000db8 <MX_ADC_Init>
  MX_TIM4_Init();
 800117e:	f000 f96d 	bl	800145c <MX_TIM4_Init>
  MX_USART2_UART_Init();
 8001182:	f000 f9a5 	bl	80014d0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8001186:	f7ff ff63 	bl	8001050 <MX_I2C1_Init>
  MX_SPI1_Init();
 800118a:	f000 f813 	bl	80011b4 <MX_SPI1_Init>
  MX_CRC_Init();
 800118e:	f7ff fe73 	bl	8000e78 <MX_CRC_Init>
  app_main();
 8001192:	f003 fd71 	bl	8004c78 <app_main>
	  __NOP();
 8001196:	bf00      	nop
  while (1)
 8001198:	e7fd      	b.n	8001196 <main+0x2e>
	...

0800119c <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM6) {
 800119c:	6802      	ldr	r2, [r0, #0]
 800119e:	4b03      	ldr	r3, [pc, #12]	; (80011ac <HAL_TIM_PeriodElapsedCallback+0x10>)
 80011a0:	429a      	cmp	r2, r3
 80011a2:	d101      	bne.n	80011a8 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 80011a4:	f000 ba32 	b.w	800160c <HAL_IncTick>
}
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop
 80011ac:	40001000 	.word	0x40001000

080011b0 <Error_Handler>:
 80011b0:	b672      	cpsid	i
  while (1)
 80011b2:	e7fe      	b.n	80011b2 <Error_Handler+0x2>

080011b4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80011b4:	b508      	push	{r3, lr}

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011b6:	f44f 7382 	mov.w	r3, #260	; 0x104
  hspi1.Instance = SPI1;
 80011ba:	480d      	ldr	r0, [pc, #52]	; (80011f0 <MX_SPI1_Init+0x3c>)
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011bc:	4a0d      	ldr	r2, [pc, #52]	; (80011f4 <MX_SPI1_Init+0x40>)
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80011be:	f44f 7100 	mov.w	r1, #512	; 0x200
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011c2:	e9c0 2300 	strd	r2, r3, [r0]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011c6:	2300      	movs	r3, #0
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80011c8:	2220      	movs	r2, #32
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011ca:	e9c0 3302 	strd	r3, r3, [r0, #8]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011ce:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011d2:	e9c0 3308 	strd	r3, r3, [r0, #32]
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011d6:	6283      	str	r3, [r0, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011d8:	230a      	movs	r3, #10
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80011da:	e9c0 1206 	strd	r1, r2, [r0, #24]
  hspi1.Init.CRCPolynomial = 10;
 80011de:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80011e0:	f001 ff08 	bl	8002ff4 <HAL_SPI_Init>
 80011e4:	b118      	cbz	r0, 80011ee <MX_SPI1_Init+0x3a>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80011e6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80011ea:	f7ff bfe1 	b.w	80011b0 <Error_Handler>
}
 80011ee:	bd08      	pop	{r3, pc}
 80011f0:	200001d0 	.word	0x200001d0
 80011f4:	40013000 	.word	0x40013000

080011f8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80011f8:	b510      	push	{r4, lr}
 80011fa:	4604      	mov	r4, r0
 80011fc:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011fe:	2214      	movs	r2, #20
 8001200:	2100      	movs	r1, #0
 8001202:	a803      	add	r0, sp, #12
 8001204:	f005 f90a 	bl	800641c <memset>
  if(spiHandle->Instance==SPI1)
 8001208:	6822      	ldr	r2, [r4, #0]
 800120a:	4b12      	ldr	r3, [pc, #72]	; (8001254 <HAL_SPI_MspInit+0x5c>)
 800120c:	429a      	cmp	r2, r3
 800120e:	d11f      	bne.n	8001250 <HAL_SPI_MspInit+0x58>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001210:	f503 3384 	add.w	r3, r3, #67584	; 0x10800
 8001214:	6a1a      	ldr	r2, [r3, #32]
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001216:	2103      	movs	r1, #3
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001218:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800121c:	621a      	str	r2, [r3, #32]
 800121e:	6a1a      	ldr	r2, [r3, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001220:	480d      	ldr	r0, [pc, #52]	; (8001258 <HAL_SPI_MspInit+0x60>)
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001222:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8001226:	9201      	str	r2, [sp, #4]
 8001228:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800122a:	69da      	ldr	r2, [r3, #28]
 800122c:	f042 0202 	orr.w	r2, r2, #2
 8001230:	61da      	str	r2, [r3, #28]
 8001232:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001234:	2238      	movs	r2, #56	; 0x38
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001236:	f003 0302 	and.w	r3, r3, #2
 800123a:	9302      	str	r3, [sp, #8]
 800123c:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800123e:	2302      	movs	r3, #2
 8001240:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001244:	2305      	movs	r3, #5
 8001246:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800124a:	a903      	add	r1, sp, #12
 800124c:	f000 fe70 	bl	8001f30 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001250:	b008      	add	sp, #32
 8001252:	bd10      	pop	{r4, pc}
 8001254:	40013000 	.word	0x40013000
 8001258:	40020400 	.word	0x40020400

0800125c <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800125c:	4b0f      	ldr	r3, [pc, #60]	; (800129c <HAL_MspInit+0x40>)
{
 800125e:	b084      	sub	sp, #16
  __HAL_RCC_COMP_CLK_ENABLE();
 8001260:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001262:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001266:	625a      	str	r2, [r3, #36]	; 0x24
 8001268:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800126a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800126e:	9201      	str	r2, [sp, #4]
 8001270:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001272:	6a1a      	ldr	r2, [r3, #32]
 8001274:	f042 0201 	orr.w	r2, r2, #1
 8001278:	621a      	str	r2, [r3, #32]
 800127a:	6a1a      	ldr	r2, [r3, #32]
 800127c:	f002 0201 	and.w	r2, r2, #1
 8001280:	9202      	str	r2, [sp, #8]
 8001282:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001284:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001286:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800128a:	625a      	str	r2, [r3, #36]	; 0x24
 800128c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800128e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001292:	9303      	str	r3, [sp, #12]
 8001294:	9b03      	ldr	r3, [sp, #12]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001296:	b004      	add	sp, #16
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	40023800 	.word	0x40023800

080012a0 <HAL_InitTick>:
  uint32_t              uwPrescalerValue = 0U;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80012a0:	4b20      	ldr	r3, [pc, #128]	; (8001324 <HAL_InitTick+0x84>)
{
 80012a2:	b570      	push	{r4, r5, r6, lr}
  __HAL_RCC_TIM6_CLK_ENABLE();
 80012a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
{
 80012a6:	b088      	sub	sp, #32
  __HAL_RCC_TIM6_CLK_ENABLE();
 80012a8:	f042 0210 	orr.w	r2, r2, #16
 80012ac:	625a      	str	r2, [r3, #36]	; 0x24
 80012ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
{
 80012b0:	4605      	mov	r5, r0
  __HAL_RCC_TIM6_CLK_ENABLE();
 80012b2:	f003 0310 	and.w	r3, r3, #16
 80012b6:	9302      	str	r3, [sp, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012b8:	a901      	add	r1, sp, #4
 80012ba:	a803      	add	r0, sp, #12
  __HAL_RCC_TIM6_CLK_ENABLE();
 80012bc:	9b02      	ldr	r3, [sp, #8]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80012be:	f001 fe7b 	bl	8002fb8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80012c2:	9b06      	ldr	r3, [sp, #24]
 80012c4:	bb43      	cbnz	r3, 8001318 <HAL_InitTick+0x78>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80012c6:	f001 fe57 	bl	8002f78 <HAL_RCC_GetPCLK1Freq>

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80012ca:	4e17      	ldr	r6, [pc, #92]	; (8001328 <HAL_InitTick+0x88>)
 80012cc:	4b17      	ldr	r3, [pc, #92]	; (800132c <HAL_InitTick+0x8c>)
 80012ce:	6033      	str	r3, [r6, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80012d0:	f240 33e7 	movw	r3, #999	; 0x3e7
 80012d4:	60f3      	str	r3, [r6, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80012d6:	4b16      	ldr	r3, [pc, #88]	; (8001330 <HAL_InitTick+0x90>)
 80012d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80012dc:	3b01      	subs	r3, #1
  htim6.Init.Prescaler = uwPrescalerValue;
 80012de:	6073      	str	r3, [r6, #4]
  htim6.Init.ClockDivision = 0;
 80012e0:	2300      	movs	r3, #0
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;

  status = HAL_TIM_Base_Init(&htim6);
 80012e2:	4630      	mov	r0, r6
  htim6.Init.ClockDivision = 0;
 80012e4:	6133      	str	r3, [r6, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e6:	60b3      	str	r3, [r6, #8]
  status = HAL_TIM_Base_Init(&htim6);
 80012e8:	f001 ff4f 	bl	800318a <HAL_TIM_Base_Init>
  if (status == HAL_OK)
 80012ec:	4604      	mov	r4, r0
 80012ee:	b980      	cbnz	r0, 8001312 <HAL_InitTick+0x72>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80012f0:	4630      	mov	r0, r6
 80012f2:	f001 ff6f 	bl	80031d4 <HAL_TIM_Base_Start_IT>
    if (status == HAL_OK)
 80012f6:	4604      	mov	r4, r0
 80012f8:	b958      	cbnz	r0, 8001312 <HAL_InitTick+0x72>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_IRQn);
 80012fa:	202b      	movs	r0, #43	; 0x2b
 80012fc:	f000 fc18 	bl	8001b30 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001300:	2d0f      	cmp	r5, #15
 8001302:	d80d      	bhi.n	8001320 <HAL_InitTick+0x80>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_IRQn, TickPriority, 0U);
 8001304:	4622      	mov	r2, r4
 8001306:	4629      	mov	r1, r5
 8001308:	202b      	movs	r0, #43	; 0x2b
 800130a:	f000 fbdf 	bl	8001acc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800130e:	4b09      	ldr	r3, [pc, #36]	; (8001334 <HAL_InitTick+0x94>)
 8001310:	601d      	str	r5, [r3, #0]
    }
  }

 /* Return function status */
  return status;
}
 8001312:	4620      	mov	r0, r4
 8001314:	b008      	add	sp, #32
 8001316:	bd70      	pop	{r4, r5, r6, pc}
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001318:	f001 fe2e 	bl	8002f78 <HAL_RCC_GetPCLK1Freq>
 800131c:	0040      	lsls	r0, r0, #1
 800131e:	e7d4      	b.n	80012ca <HAL_InitTick+0x2a>
        status = HAL_ERROR;
 8001320:	2401      	movs	r4, #1
 8001322:	e7f6      	b.n	8001312 <HAL_InitTick+0x72>
 8001324:	40023800 	.word	0x40023800
 8001328:	20000228 	.word	0x20000228
 800132c:	40001000 	.word	0x40001000
 8001330:	000f4240 	.word	0x000f4240
 8001334:	20000008 	.word	0x20000008

08001338 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001338:	e7fe      	b.n	8001338 <NMI_Handler>

0800133a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800133a:	e7fe      	b.n	800133a <HardFault_Handler>

0800133c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800133c:	e7fe      	b.n	800133c <MemManage_Handler>

0800133e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800133e:	e7fe      	b.n	800133e <BusFault_Handler>

08001340 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001340:	e7fe      	b.n	8001340 <UsageFault_Handler>

08001342 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001342:	4770      	bx	lr

08001344 <EXTI0_IRQHandler>:
void EXTI0_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SENS5_Pin);
 8001344:	2001      	movs	r0, #1
 8001346:	f000 bec5 	b.w	80020d4 <HAL_GPIO_EXTI_IRQHandler>

0800134a <EXTI1_IRQHandler>:
void EXTI1_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SENS6_Pin);
 800134a:	2002      	movs	r0, #2
 800134c:	f000 bec2 	b.w	80020d4 <HAL_GPIO_EXTI_IRQHandler>

08001350 <EXTI2_IRQHandler>:
void EXTI2_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SENS7_Pin);
 8001350:	2004      	movs	r0, #4
 8001352:	f000 bebf 	b.w	80020d4 <HAL_GPIO_EXTI_IRQHandler>

08001356 <EXTI4_IRQHandler>:
void EXTI4_IRQHandler(void)
{
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SENS1_Pin);
 8001356:	2010      	movs	r0, #16
 8001358:	f000 bebc 	b.w	80020d4 <HAL_GPIO_EXTI_IRQHandler>

0800135c <DMA1_Channel6_IRQHandler>:
void DMA1_Channel6_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel6_IRQn 0 */

  /* USER CODE END DMA1_Channel6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 800135c:	4801      	ldr	r0, [pc, #4]	; (8001364 <DMA1_Channel6_IRQHandler+0x8>)
 800135e:	f000 bc87 	b.w	8001c70 <HAL_DMA_IRQHandler>
 8001362:	bf00      	nop
 8001364:	200002ac 	.word	0x200002ac

08001368 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8001368:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SENS2_Pin);
 800136a:	2020      	movs	r0, #32
 800136c:	f000 feb2 	bl	80020d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SENS3_Pin);
 8001370:	2040      	movs	r0, #64	; 0x40
 8001372:	f000 feaf 	bl	80020d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SENS4_Pin);
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001376:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(SENS4_Pin);
 800137a:	2080      	movs	r0, #128	; 0x80
 800137c:	f000 beaa 	b.w	80020d4 <HAL_GPIO_EXTI_IRQHandler>

08001380 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001380:	b508      	push	{r3, lr}
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(SENS8_Pin);
 8001382:	f44f 6080 	mov.w	r0, #1024	; 0x400
 8001386:	f000 fea5 	bl	80020d4 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(SENS9_Pin);
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800138a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_GPIO_EXTI_IRQHandler(SENS9_Pin);
 800138e:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8001392:	f000 be9f 	b.w	80020d4 <HAL_GPIO_EXTI_IRQHandler>
	...

08001398 <TIM6_IRQHandler>:
void TIM6_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_IRQn 0 */

  /* USER CODE END TIM6_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001398:	4801      	ldr	r0, [pc, #4]	; (80013a0 <TIM6_IRQHandler+0x8>)
 800139a:	f002 b85d 	b.w	8003458 <HAL_TIM_IRQHandler>
 800139e:	bf00      	nop
 80013a0:	20000228 	.word	0x20000228

080013a4 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80013a4:	4a0b      	ldr	r2, [pc, #44]	; (80013d4 <_sbrk+0x30>)
{
 80013a6:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 80013a8:	6811      	ldr	r1, [r2, #0]
{
 80013aa:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 80013ac:	b909      	cbnz	r1, 80013b2 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 80013ae:	490a      	ldr	r1, [pc, #40]	; (80013d8 <_sbrk+0x34>)
 80013b0:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80013b2:	6810      	ldr	r0, [r2, #0]
 80013b4:	4909      	ldr	r1, [pc, #36]	; (80013dc <_sbrk+0x38>)
 80013b6:	4c0a      	ldr	r4, [pc, #40]	; (80013e0 <_sbrk+0x3c>)
 80013b8:	4403      	add	r3, r0
 80013ba:	1b09      	subs	r1, r1, r4
 80013bc:	428b      	cmp	r3, r1
 80013be:	d906      	bls.n	80013ce <_sbrk+0x2a>
  {
    errno = ENOMEM;
 80013c0:	f004 ffe4 	bl	800638c <__errno>
 80013c4:	230c      	movs	r3, #12
 80013c6:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 80013c8:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 80013cc:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 80013ce:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 80013d0:	e7fc      	b.n	80013cc <_sbrk+0x28>
 80013d2:	bf00      	nop
 80013d4:	20000268 	.word	0x20000268
 80013d8:	20002e40 	.word	0x20002e40
 80013dc:	20004000 	.word	0x20004000
 80013e0:	00000400 	.word	0x00000400

080013e4 <SystemInit>:
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013e4:	4770      	bx	lr
	...

080013e8 <HAL_TIM_PWM_MspInit>:
}

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{

  if(tim_pwmHandle->Instance==TIM4)
 80013e8:	6802      	ldr	r2, [r0, #0]
 80013ea:	4b08      	ldr	r3, [pc, #32]	; (800140c <HAL_TIM_PWM_MspInit+0x24>)
{
 80013ec:	b082      	sub	sp, #8
  if(tim_pwmHandle->Instance==TIM4)
 80013ee:	429a      	cmp	r2, r3
 80013f0:	d10a      	bne.n	8001408 <HAL_TIM_PWM_MspInit+0x20>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80013f2:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 80013f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013f8:	f042 0204 	orr.w	r2, r2, #4
 80013fc:	625a      	str	r2, [r3, #36]	; 0x24
 80013fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001400:	f003 0304 	and.w	r3, r3, #4
 8001404:	9301      	str	r3, [sp, #4]
 8001406:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8001408:	b002      	add	sp, #8
 800140a:	4770      	bx	lr
 800140c:	40000800 	.word	0x40000800

08001410 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001410:	b510      	push	{r4, lr}
 8001412:	4604      	mov	r4, r0
 8001414:	b086      	sub	sp, #24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001416:	2214      	movs	r2, #20
 8001418:	2100      	movs	r1, #0
 800141a:	a801      	add	r0, sp, #4
 800141c:	f004 fffe 	bl	800641c <memset>
  if(timHandle->Instance==TIM4)
 8001420:	6822      	ldr	r2, [r4, #0]
 8001422:	4b0c      	ldr	r3, [pc, #48]	; (8001454 <HAL_TIM_MspPostInit+0x44>)
 8001424:	429a      	cmp	r2, r3
 8001426:	d113      	bne.n	8001450 <HAL_TIM_MspPostInit+0x40>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001428:	f503 330c 	add.w	r3, r3, #143360	; 0x23000
 800142c:	69da      	ldr	r2, [r3, #28]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800142e:	480a      	ldr	r0, [pc, #40]	; (8001458 <HAL_TIM_MspPostInit+0x48>)
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001430:	f042 0202 	orr.w	r2, r2, #2
 8001434:	61da      	str	r2, [r3, #28]
 8001436:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001438:	2280      	movs	r2, #128	; 0x80
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800143a:	f003 0302 	and.w	r3, r3, #2
 800143e:	9300      	str	r3, [sp, #0]
 8001440:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001442:	2302      	movs	r3, #2
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001444:	a901      	add	r1, sp, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001446:	e9cd 2301 	strd	r2, r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800144a:	9305      	str	r3, [sp, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800144c:	f000 fd70 	bl	8001f30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001450:	b006      	add	sp, #24
 8001452:	bd10      	pop	{r4, pc}
 8001454:	40000800 	.word	0x40000800
 8001458:	40020400 	.word	0x40020400

0800145c <MX_TIM4_Init>:
{
 800145c:	b510      	push	{r4, lr}
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800145e:	2400      	movs	r4, #0
{
 8001460:	b086      	sub	sp, #24
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001462:	4621      	mov	r1, r4
 8001464:	2210      	movs	r2, #16
 8001466:	a802      	add	r0, sp, #8
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001468:	e9cd 4400 	strd	r4, r4, [sp]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800146c:	f004 ffd6 	bl	800641c <memset>
  htim4.Init.Prescaler = 32;
 8001470:	2320      	movs	r3, #32
  htim4.Instance = TIM4;
 8001472:	4815      	ldr	r0, [pc, #84]	; (80014c8 <MX_TIM4_Init+0x6c>)
  htim4.Init.Prescaler = 32;
 8001474:	4915      	ldr	r1, [pc, #84]	; (80014cc <MX_TIM4_Init+0x70>)
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001476:	6084      	str	r4, [r0, #8]
  htim4.Init.Prescaler = 32;
 8001478:	e9c0 1300 	strd	r1, r3, [r0]
  htim4.Init.Period = 137;
 800147c:	2389      	movs	r3, #137	; 0x89
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800147e:	e9c0 3403 	strd	r3, r4, [r0, #12]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001482:	2380      	movs	r3, #128	; 0x80
 8001484:	6143      	str	r3, [r0, #20]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001486:	f001 ff3a 	bl	80032fe <HAL_TIM_PWM_Init>
 800148a:	b108      	cbz	r0, 8001490 <MX_TIM4_Init+0x34>
    Error_Handler();
 800148c:	f7ff fe90 	bl	80011b0 <Error_Handler>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001490:	4669      	mov	r1, sp
 8001492:	480d      	ldr	r0, [pc, #52]	; (80014c8 <MX_TIM4_Init+0x6c>)
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001494:	e9cd 4400 	strd	r4, r4, [sp]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001498:	f002 f864 	bl	8003564 <HAL_TIMEx_MasterConfigSynchronization>
 800149c:	b108      	cbz	r0, 80014a2 <MX_TIM4_Init+0x46>
    Error_Handler();
 800149e:	f7ff fe87 	bl	80011b0 <Error_Handler>
  sConfigOC.Pulse = 0;
 80014a2:	2260      	movs	r2, #96	; 0x60
 80014a4:	2300      	movs	r3, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014a6:	4808      	ldr	r0, [pc, #32]	; (80014c8 <MX_TIM4_Init+0x6c>)
  sConfigOC.Pulse = 0;
 80014a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014ac:	a902      	add	r1, sp, #8
 80014ae:	2204      	movs	r2, #4
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014b0:	e9cd 3304 	strd	r3, r3, [sp, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80014b4:	f001 ff4b 	bl	800334e <HAL_TIM_PWM_ConfigChannel>
 80014b8:	b108      	cbz	r0, 80014be <MX_TIM4_Init+0x62>
    Error_Handler();
 80014ba:	f7ff fe79 	bl	80011b0 <Error_Handler>
  HAL_TIM_MspPostInit(&htim4);
 80014be:	4802      	ldr	r0, [pc, #8]	; (80014c8 <MX_TIM4_Init+0x6c>)
 80014c0:	f7ff ffa6 	bl	8001410 <HAL_TIM_MspPostInit>
}
 80014c4:	b006      	add	sp, #24
 80014c6:	bd10      	pop	{r4, pc}
 80014c8:	2000026c 	.word	0x2000026c
 80014cc:	40000800 	.word	0x40000800

080014d0 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80014d0:	b508      	push	{r3, lr}

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
 80014d2:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
  huart2.Instance = USART2;
 80014d6:	480a      	ldr	r0, [pc, #40]	; (8001500 <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 80014d8:	4a0a      	ldr	r2, [pc, #40]	; (8001504 <MX_USART2_UART_Init+0x34>)
 80014da:	e9c0 2300 	strd	r2, r3, [r0]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014de:	2300      	movs	r3, #0
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014e0:	220c      	movs	r2, #12
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014e2:	e9c0 3302 	strd	r3, r3, [r0, #8]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014e6:	e9c0 2305 	strd	r2, r3, [r0, #20]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014ea:	6103      	str	r3, [r0, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014ec:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014ee:	f002 f8f9 	bl	80036e4 <HAL_UART_Init>
 80014f2:	b118      	cbz	r0, 80014fc <MX_USART2_UART_Init+0x2c>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80014f8:	f7ff be5a 	b.w	80011b0 <Error_Handler>
}
 80014fc:	bd08      	pop	{r3, pc}
 80014fe:	bf00      	nop
 8001500:	200002f0 	.word	0x200002f0
 8001504:	40004400 	.word	0x40004400

08001508 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001508:	b530      	push	{r4, r5, lr}
 800150a:	4605      	mov	r5, r0
 800150c:	b089      	sub	sp, #36	; 0x24

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150e:	2214      	movs	r2, #20
 8001510:	2100      	movs	r1, #0
 8001512:	a803      	add	r0, sp, #12
 8001514:	f004 ff82 	bl	800641c <memset>
  if(uartHandle->Instance==USART2)
 8001518:	682a      	ldr	r2, [r5, #0]
 800151a:	4b1e      	ldr	r3, [pc, #120]	; (8001594 <HAL_UART_MspInit+0x8c>)
 800151c:	429a      	cmp	r2, r3
 800151e:	d136      	bne.n	800158e <HAL_UART_MspInit+0x86>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001520:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8001524:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001526:	2103      	movs	r1, #3
    __HAL_RCC_USART2_CLK_ENABLE();
 8001528:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 800152c:	625a      	str	r2, [r3, #36]	; 0x24
 800152e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001530:	4819      	ldr	r0, [pc, #100]	; (8001598 <HAL_UART_MspInit+0x90>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001532:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8001536:	9201      	str	r2, [sp, #4]
 8001538:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800153a:	69da      	ldr	r2, [r3, #28]

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Channel6;
 800153c:	4c17      	ldr	r4, [pc, #92]	; (800159c <HAL_UART_MspInit+0x94>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800153e:	f042 0201 	orr.w	r2, r2, #1
 8001542:	61da      	str	r2, [r3, #28]
 8001544:	69db      	ldr	r3, [r3, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001546:	220c      	movs	r2, #12
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001548:	f003 0301 	and.w	r3, r3, #1
 800154c:	9302      	str	r3, [sp, #8]
 800154e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001550:	2302      	movs	r3, #2
 8001552:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001556:	2307      	movs	r3, #7
 8001558:	e9cd 1306 	strd	r1, r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800155c:	a903      	add	r1, sp, #12
 800155e:	f000 fce7 	bl	8001f30 <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001562:	2300      	movs	r3, #0
 8001564:	480e      	ldr	r0, [pc, #56]	; (80015a0 <HAL_UART_MspInit+0x98>)
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
    hdma_usart2_rx.Init.MemInc = DMA_MINC_DISABLE;
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001566:	f04f 0c20 	mov.w	ip, #32
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800156a:	e9c4 0300 	strd	r0, r3, [r4]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_DISABLE;
 800156e:	e9c4 3302 	strd	r3, r3, [r4, #8]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001572:	e9c4 3304 	strd	r3, r3, [r4, #16]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 8001576:	f44f 5340 	mov.w	r3, #12288	; 0x3000
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800157a:	4620      	mov	r0, r4
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_VERY_HIGH;
 800157c:	e9c4 c306 	strd	ip, r3, [r4, #24]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001580:	f000 fb06 	bl	8001b90 <HAL_DMA_Init>
 8001584:	b108      	cbz	r0, 800158a <HAL_UART_MspInit+0x82>
    {
      Error_Handler();
 8001586:	f7ff fe13 	bl	80011b0 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 800158a:	63ac      	str	r4, [r5, #56]	; 0x38
 800158c:	6265      	str	r5, [r4, #36]	; 0x24

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800158e:	b009      	add	sp, #36	; 0x24
 8001590:	bd30      	pop	{r4, r5, pc}
 8001592:	bf00      	nop
 8001594:	40004400 	.word	0x40004400
 8001598:	40020000 	.word	0x40020000
 800159c:	200002ac 	.word	0x200002ac
 80015a0:	4002606c 	.word	0x4002606c

080015a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80015a4:	480c      	ldr	r0, [pc, #48]	; (80015d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80015a6:	490d      	ldr	r1, [pc, #52]	; (80015dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80015a8:	4a0d      	ldr	r2, [pc, #52]	; (80015e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80015aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80015ac:	e002      	b.n	80015b4 <LoopCopyDataInit>

080015ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80015ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80015b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80015b2:	3304      	adds	r3, #4

080015b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015b8:	d3f9      	bcc.n	80015ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015ba:	4a0a      	ldr	r2, [pc, #40]	; (80015e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80015bc:	4c0a      	ldr	r4, [pc, #40]	; (80015e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80015be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015c0:	e001      	b.n	80015c6 <LoopFillZerobss>

080015c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015c4:	3204      	adds	r2, #4

080015c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015c8:	d3fb      	bcc.n	80015c2 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80015ca:	f7ff ff0b 	bl	80013e4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80015ce:	f004 fee3 	bl	8006398 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80015d2:	f7ff fdc9 	bl	8001168 <main>
  bx lr
 80015d6:	4770      	bx	lr
  ldr r0, =_sdata
 80015d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015dc:	20000104 	.word	0x20000104
  ldr r2, =_sidata
 80015e0:	08007c44 	.word	0x08007c44
  ldr r2, =_sbss
 80015e4:	20000104 	.word	0x20000104
  ldr r4, =_ebss
 80015e8:	20002e3c 	.word	0x20002e3c

080015ec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015ec:	e7fe      	b.n	80015ec <ADC1_IRQHandler>

080015ee <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015ee:	b510      	push	{r4, lr}
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015f0:	2003      	movs	r0, #3
 80015f2:	f000 fa59 	bl	8001aa8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015f6:	200f      	movs	r0, #15
 80015f8:	f7ff fe52 	bl	80012a0 <HAL_InitTick>
 80015fc:	4604      	mov	r4, r0
 80015fe:	b918      	cbnz	r0, 8001608 <HAL_Init+0x1a>
    status = HAL_ERROR;
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001600:	f7ff fe2c 	bl	800125c <HAL_MspInit>
  }

  /* Return function status */
  return status;
}
 8001604:	4620      	mov	r0, r4
 8001606:	bd10      	pop	{r4, pc}
    status = HAL_ERROR;
 8001608:	2401      	movs	r4, #1
 800160a:	e7fb      	b.n	8001604 <HAL_Init+0x16>

0800160c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 800160c:	4a03      	ldr	r2, [pc, #12]	; (800161c <HAL_IncTick+0x10>)
 800160e:	4904      	ldr	r1, [pc, #16]	; (8001620 <HAL_IncTick+0x14>)
 8001610:	6813      	ldr	r3, [r2, #0]
 8001612:	6809      	ldr	r1, [r1, #0]
 8001614:	440b      	add	r3, r1
 8001616:	6013      	str	r3, [r2, #0]
}
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	20000334 	.word	0x20000334
 8001620:	20000004 	.word	0x20000004

08001624 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8001624:	4b01      	ldr	r3, [pc, #4]	; (800162c <HAL_GetTick+0x8>)
 8001626:	6818      	ldr	r0, [r3, #0]
}
 8001628:	4770      	bx	lr
 800162a:	bf00      	nop
 800162c:	20000334 	.word	0x20000334

08001630 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001630:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  uint32_t tmp_cr1 = 0;
  uint32_t tmp_cr2 = 0;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001632:	4604      	mov	r4, r0
 8001634:	b908      	cbnz	r0, 800163a <HAL_ADC_Init+0xa>
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
      
      tmp_hal_status = HAL_ERROR;
 8001636:	2001      	movs	r0, #1
 8001638:	e095      	b.n	8001766 <HAL_ADC_Init+0x136>
  if (hadc->State == HAL_ADC_STATE_RESET)
 800163a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 800163c:	b973      	cbnz	r3, 800165c <HAL_ADC_Init+0x2c>
    ADC_CLEAR_ERRORCODE(hadc);
 800163e:	6503      	str	r3, [r0, #80]	; 0x50
    hadc->Lock = HAL_UNLOCKED;
 8001640:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001644:	4b56      	ldr	r3, [pc, #344]	; (80017a0 <HAL_ADC_Init+0x170>)
 8001646:	6a1a      	ldr	r2, [r3, #32]
 8001648:	f042 0201 	orr.w	r2, r2, #1
 800164c:	621a      	str	r2, [r3, #32]
 800164e:	6a1b      	ldr	r3, [r3, #32]
 8001650:	f003 0301 	and.w	r3, r3, #1
 8001654:	9301      	str	r3, [sp, #4]
 8001656:	9b01      	ldr	r3, [sp, #4]
    HAL_ADC_MspInit(hadc);
 8001658:	f7ff fbe0 	bl	8000e1c <HAL_ADC_MspInit>
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800165c:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800165e:	06db      	lsls	r3, r3, #27
 8001660:	d4e9      	bmi.n	8001636 <HAL_ADC_Init+0x6>
    ADC_STATE_CLR_SET(hadc->State,
 8001662:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
    MODIFY_REG(ADC->CCR                 ,
 8001664:	4a4f      	ldr	r2, [pc, #316]	; (80017a4 <HAL_ADC_Init+0x174>)
    ADC_STATE_CLR_SET(hadc->State,
 8001666:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800166a:	f023 0302 	bic.w	r3, r3, #2
 800166e:	f043 0302 	orr.w	r3, r3, #2
 8001672:	64e3      	str	r3, [r4, #76]	; 0x4c
    MODIFY_REG(ADC->CCR                 ,
 8001674:	6853      	ldr	r3, [r2, #4]
 8001676:	6861      	ldr	r1, [r4, #4]
 8001678:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800167c:	430b      	orrs	r3, r1
 800167e:	6053      	str	r3, [r2, #4]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001680:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001684:	fa91 f1a1 	rbit	r1, r1
 8001688:	2302      	movs	r3, #2
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800168a:	fab1 f181 	clz	r1, r1
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 800168e:	f894 5024 	ldrb.w	r5, [r4, #36]	; 0x24
 8001692:	fa93 f3a3 	rbit	r3, r3
 8001696:	fab3 f383 	clz	r3, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800169a:	6960      	ldr	r0, [r4, #20]
 800169c:	68e2      	ldr	r2, [r4, #12]
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 800169e:	fa05 f303 	lsl.w	r3, r5, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80016a2:	4302      	orrs	r2, r0
 80016a4:	6a20      	ldr	r0, [r4, #32]
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 80016a6:	6926      	ldr	r6, [r4, #16]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80016a8:	4302      	orrs	r2, r0
 80016aa:	f894 003c 	ldrb.w	r0, [r4, #60]	; 0x3c
 80016ae:	fa00 f101 	lsl.w	r1, r0, r1
 80016b2:	430a      	orrs	r2, r1
                hadc->Init.ChannelsBank                                        |
 80016b4:	4313      	orrs	r3, r2
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016b6:	6b62      	ldr	r2, [r4, #52]	; 0x34
    if ((ADC_IS_ENABLE(hadc) == RESET))
 80016b8:	6820      	ldr	r0, [r4, #0]
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016ba:	2a10      	cmp	r2, #16
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80016bc:	bf1c      	itt	ne
 80016be:	6ba1      	ldrne	r1, [r4, #56]	; 0x38
 80016c0:	430a      	orrne	r2, r1
    if ((ADC_IS_ENABLE(hadc) == RESET))
 80016c2:	6801      	ldr	r1, [r0, #0]
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80016c4:	bf18      	it	ne
 80016c6:	4313      	orrne	r3, r2
    if ((ADC_IS_ENABLE(hadc) == RESET))
 80016c8:	f011 0140 	ands.w	r1, r1, #64	; 0x40
 80016cc:	d124      	bne.n	8001718 <HAL_ADC_Init+0xe8>
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 80016ce:	69a2      	ldr	r2, [r4, #24]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80016d0:	69e7      	ldr	r7, [r4, #28]
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 80016d2:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80016d4:	68a2      	ldr	r2, [r4, #8]
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 80016d6:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
      tmp_cr1 |= (hadc->Init.Resolution                     |
 80016da:	ea42 0207 	orr.w	r2, r2, r7
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 80016de:	d044      	beq.n	800176a <HAL_ADC_Init+0x13a>
 80016e0:	2e01      	cmp	r6, #1
 80016e2:	bf08      	it	eq
 80016e4:	f44f 7180 	moveq.w	r1, #256	; 0x100
                  hadc->Init.LowPowerAutoPowerOff           |
 80016e8:	430a      	orrs	r2, r1
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016ea:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
 80016ee:	2901      	cmp	r1, #1
 80016f0:	d10d      	bne.n	800170e <HAL_ADC_Init+0xde>
        if (hadc->Init.ContinuousConvMode == DISABLE)
 80016f2:	2d00      	cmp	r5, #0
 80016f4:	d13b      	bne.n	800176e <HAL_ADC_Init+0x13e>
 80016f6:	f44f 4160 	mov.w	r1, #57344	; 0xe000
 80016fa:	fa91 f1a1 	rbit	r1, r1
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 80016fe:	fab1 f581 	clz	r5, r1
 8001702:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8001704:	3901      	subs	r1, #1
 8001706:	40a9      	lsls	r1, r5
 8001708:	430a      	orrs	r2, r1
 800170a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
        MODIFY_REG(hadc->Instance->CR1,
 800170e:	6845      	ldr	r5, [r0, #4]
 8001710:	4925      	ldr	r1, [pc, #148]	; (80017a8 <HAL_ADC_Init+0x178>)
 8001712:	4029      	ands	r1, r5
 8001714:	430a      	orrs	r2, r1
 8001716:	6042      	str	r2, [r0, #4]
    MODIFY_REG(hadc->Instance->CR2    ,
 8001718:	6881      	ldr	r1, [r0, #8]
 800171a:	4a24      	ldr	r2, [pc, #144]	; (80017ac <HAL_ADC_Init+0x17c>)
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800171c:	f5b6 7f80 	cmp.w	r6, #256	; 0x100
    MODIFY_REG(hadc->Instance->CR2    ,
 8001720:	ea02 0201 	and.w	r2, r2, r1
 8001724:	ea42 0203 	orr.w	r2, r2, r3
 8001728:	6082      	str	r2, [r0, #8]
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 800172a:	d001      	beq.n	8001730 <HAL_ADC_Init+0x100>
 800172c:	2e01      	cmp	r6, #1
 800172e:	d127      	bne.n	8001780 <HAL_ADC_Init+0x150>
      MODIFY_REG(hadc->Instance->SQR1                         ,
 8001730:	6b05      	ldr	r5, [r0, #48]	; 0x30
 8001732:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 8001736:	fa92 f2a2 	rbit	r2, r2
 800173a:	fab2 f182 	clz	r1, r2
 800173e:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8001740:	3a01      	subs	r2, #1
 8001742:	408a      	lsls	r2, r1
 8001744:	f025 71f8 	bic.w	r1, r5, #32505856	; 0x1f00000
 8001748:	430a      	orrs	r2, r1
      MODIFY_REG(hadc->Instance->SQR1,
 800174a:	6302      	str	r2, [r0, #48]	; 0x30
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 800174c:	6881      	ldr	r1, [r0, #8]
 800174e:	4a18      	ldr	r2, [pc, #96]	; (80017b0 <HAL_ADC_Init+0x180>)
 8001750:	400a      	ands	r2, r1
 8001752:	429a      	cmp	r2, r3
 8001754:	d118      	bne.n	8001788 <HAL_ADC_Init+0x158>
      ADC_CLEAR_ERRORCODE(hadc);
 8001756:	2000      	movs	r0, #0
 8001758:	6520      	str	r0, [r4, #80]	; 0x50
      ADC_STATE_CLR_SET(hadc->State,
 800175a:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800175c:	f023 0303 	bic.w	r3, r3, #3
 8001760:	f043 0301 	orr.w	r3, r3, #1
 8001764:	64e3      	str	r3, [r4, #76]	; 0x4c
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Return function status */
  return tmp_hal_status;
}
 8001766:	b003      	add	sp, #12
 8001768:	bdf0      	pop	{r4, r5, r6, r7, pc}
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 800176a:	4631      	mov	r1, r6
 800176c:	e7bc      	b.n	80016e8 <HAL_ADC_Init+0xb8>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800176e:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8001770:	f041 0120 	orr.w	r1, r1, #32
 8001774:	64e1      	str	r1, [r4, #76]	; 0x4c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001776:	6d21      	ldr	r1, [r4, #80]	; 0x50
 8001778:	f041 0101 	orr.w	r1, r1, #1
 800177c:	6521      	str	r1, [r4, #80]	; 0x50
 800177e:	e7c6      	b.n	800170e <HAL_ADC_Init+0xde>
      MODIFY_REG(hadc->Instance->SQR1,
 8001780:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8001782:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8001786:	e7e0      	b.n	800174a <HAL_ADC_Init+0x11a>
      ADC_STATE_CLR_SET(hadc->State,
 8001788:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800178a:	f023 0312 	bic.w	r3, r3, #18
 800178e:	f043 0310 	orr.w	r3, r3, #16
 8001792:	64e3      	str	r3, [r4, #76]	; 0x4c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001794:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001796:	f043 0301 	orr.w	r3, r3, #1
 800179a:	6523      	str	r3, [r4, #80]	; 0x50
 800179c:	e74b      	b.n	8001636 <HAL_ADC_Init+0x6>
 800179e:	bf00      	nop
 80017a0:	40023800 	.word	0x40023800
 80017a4:	40012700 	.word	0x40012700
 80017a8:	fcfc16ff 	.word	0xfcfc16ff
 80017ac:	c0fff18d 	.word	0xc0fff18d
 80017b0:	bf80fffe 	.word	0xbf80fffe

080017b4 <HAL_ADC_PollForConversion>:
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80017b4:	6803      	ldr	r3, [r0, #0]
{
 80017b6:	b570      	push	{r4, r5, r6, lr}
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80017b8:	689a      	ldr	r2, [r3, #8]
{
 80017ba:	4604      	mov	r4, r0
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80017bc:	0552      	lsls	r2, r2, #21
{
 80017be:	460d      	mov	r5, r1
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80017c0:	d50b      	bpl.n	80017da <HAL_ADC_PollForConversion+0x26>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80017c2:	689b      	ldr	r3, [r3, #8]
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80017c4:	05de      	lsls	r6, r3, #23
 80017c6:	d508      	bpl.n	80017da <HAL_ADC_PollForConversion+0x26>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80017c8:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80017ca:	f043 0320 	orr.w	r3, r3, #32
 80017ce:	64c3      	str	r3, [r0, #76]	; 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80017d0:	2300      	movs	r3, #0
 80017d2:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
    
    return HAL_ERROR;
 80017d6:	2001      	movs	r0, #1
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
}
 80017d8:	bd70      	pop	{r4, r5, r6, pc}
  tickstart = HAL_GetTick();
 80017da:	f7ff ff23 	bl	8001624 <HAL_GetTick>
 80017de:	4606      	mov	r6, r0
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80017e0:	6823      	ldr	r3, [r4, #0]
 80017e2:	681a      	ldr	r2, [r3, #0]
 80017e4:	0791      	lsls	r1, r2, #30
 80017e6:	d50e      	bpl.n	8001806 <HAL_ADC_PollForConversion+0x52>
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80017e8:	69a2      	ldr	r2, [r4, #24]
 80017ea:	b912      	cbnz	r2, 80017f2 <HAL_ADC_PollForConversion+0x3e>
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80017ec:	f06f 0212 	mvn.w	r2, #18
 80017f0:	601a      	str	r2, [r3, #0]
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017f2:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 80017f4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017f8:	64e2      	str	r2, [r4, #76]	; 0x4c
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017fa:	689a      	ldr	r2, [r3, #8]
 80017fc:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8001800:	d017      	beq.n	8001832 <HAL_ADC_PollForConversion+0x7e>
  return HAL_OK;
 8001802:	2000      	movs	r0, #0
 8001804:	e7e8      	b.n	80017d8 <HAL_ADC_PollForConversion+0x24>
    if(Timeout != HAL_MAX_DELAY)
 8001806:	1c68      	adds	r0, r5, #1
 8001808:	d0eb      	beq.n	80017e2 <HAL_ADC_PollForConversion+0x2e>
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800180a:	b965      	cbnz	r5, 8001826 <HAL_ADC_PollForConversion+0x72>
        if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 800180c:	6823      	ldr	r3, [r4, #0]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f013 0302 	ands.w	r3, r3, #2
 8001814:	d1e4      	bne.n	80017e0 <HAL_ADC_PollForConversion+0x2c>
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001816:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
          return HAL_TIMEOUT;
 8001818:	2003      	movs	r0, #3
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800181a:	f042 0204 	orr.w	r2, r2, #4
 800181e:	64e2      	str	r2, [r4, #76]	; 0x4c
          __HAL_UNLOCK(hadc);
 8001820:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
          return HAL_TIMEOUT;
 8001824:	e7d8      	b.n	80017d8 <HAL_ADC_PollForConversion+0x24>
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8001826:	f7ff fefd 	bl	8001624 <HAL_GetTick>
 800182a:	1b80      	subs	r0, r0, r6
 800182c:	42a8      	cmp	r0, r5
 800182e:	d8ed      	bhi.n	800180c <HAL_ADC_PollForConversion+0x58>
 8001830:	e7d6      	b.n	80017e0 <HAL_ADC_PollForConversion+0x2c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001832:	f894 0024 	ldrb.w	r0, [r4, #36]	; 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001836:	2800      	cmp	r0, #0
 8001838:	d1e3      	bne.n	8001802 <HAL_ADC_PollForConversion+0x4e>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800183a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800183c:	f012 7ff8 	tst.w	r2, #32505856	; 0x1f00000
 8001840:	d002      	beq.n	8001848 <HAL_ADC_PollForConversion+0x94>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001842:	689b      	ldr	r3, [r3, #8]
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001844:	055a      	lsls	r2, r3, #21
 8001846:	d4dc      	bmi.n	8001802 <HAL_ADC_PollForConversion+0x4e>
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001848:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 800184a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800184e:	64e3      	str	r3, [r4, #76]	; 0x4c
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001850:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001852:	04db      	lsls	r3, r3, #19
 8001854:	d4d5      	bmi.n	8001802 <HAL_ADC_PollForConversion+0x4e>
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001856:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001858:	f043 0301 	orr.w	r3, r3, #1
 800185c:	64e3      	str	r3, [r4, #76]	; 0x4c
 800185e:	e7bb      	b.n	80017d8 <HAL_ADC_PollForConversion+0x24>

08001860 <HAL_ADC_GetValue>:

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001860:	6803      	ldr	r3, [r0, #0]
 8001862:	6d98      	ldr	r0, [r3, #88]	; 0x58
}
 8001864:	4770      	bx	lr
	...

08001868 <HAL_ADC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  __IO uint32_t wait_loop_index = 0;
 8001868:	2300      	movs	r3, #0
{
 800186a:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t wait_loop_index = 0;
 800186c:	9301      	str	r3, [sp, #4]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800186e:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
 8001872:	2b01      	cmp	r3, #1
 8001874:	f000 8099 	beq.w	80019aa <HAL_ADC_ConfigChannel+0x142>
 8001878:	2301      	movs	r3, #1
 800187a:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 800187e:	684d      	ldr	r5, [r1, #4]
  {
    MODIFY_REG(hadc->Instance->SQR5,
 8001880:	6804      	ldr	r4, [r0, #0]
  if (sConfig->Rank < 7)
 8001882:	2d06      	cmp	r5, #6
    MODIFY_REG(hadc->Instance->SQR5,
 8001884:	680a      	ldr	r2, [r1, #0]
 8001886:	eb05 0385 	add.w	r3, r5, r5, lsl #2
  if (sConfig->Rank < 7)
 800188a:	d822      	bhi.n	80018d2 <HAL_ADC_ConfigChannel+0x6a>
    MODIFY_REG(hadc->Instance->SQR5,
 800188c:	261f      	movs	r6, #31
 800188e:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8001890:	3b05      	subs	r3, #5
 8001892:	409e      	lsls	r6, r3
 8001894:	ea25 0506 	bic.w	r5, r5, r6
 8001898:	fa02 f303 	lsl.w	r3, r2, r3
 800189c:	432b      	orrs	r3, r5
 800189e:	6423      	str	r3, [r4, #64]	; 0x40
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 80018a0:	2a09      	cmp	r2, #9
 80018a2:	d848      	bhi.n	8001936 <HAL_ADC_ConfigChannel+0xce>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 80018a4:	2607      	movs	r6, #7
 80018a6:	6963      	ldr	r3, [r4, #20]
 80018a8:	688d      	ldr	r5, [r1, #8]
 80018aa:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80018ae:	4096      	lsls	r6, r2
 80018b0:	ea23 0306 	bic.w	r3, r3, r6
 80018b4:	fa05 f202 	lsl.w	r2, r5, r2
 80018b8:	431a      	orrs	r2, r3
 80018ba:	6162      	str	r2, [r4, #20]
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80018bc:	6809      	ldr	r1, [r1, #0]
 80018be:	f1a1 0310 	sub.w	r3, r1, #16
 80018c2:	2b01      	cmp	r3, #1
 80018c4:	d959      	bls.n	800197a <HAL_ADC_ConfigChannel+0x112>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018c6:	2300      	movs	r3, #0
 80018c8:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 80018cc:	4618      	mov	r0, r3
}
 80018ce:	b002      	add	sp, #8
 80018d0:	bd70      	pop	{r4, r5, r6, pc}
  else if (sConfig->Rank < 13)
 80018d2:	2d0c      	cmp	r5, #12
 80018d4:	d80a      	bhi.n	80018ec <HAL_ADC_ConfigChannel+0x84>
    MODIFY_REG(hadc->Instance->SQR4,
 80018d6:	261f      	movs	r6, #31
 80018d8:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80018da:	3b23      	subs	r3, #35	; 0x23
 80018dc:	409e      	lsls	r6, r3
 80018de:	ea25 0506 	bic.w	r5, r5, r6
 80018e2:	fa02 f303 	lsl.w	r3, r2, r3
 80018e6:	432b      	orrs	r3, r5
 80018e8:	63e3      	str	r3, [r4, #60]	; 0x3c
 80018ea:	e7d9      	b.n	80018a0 <HAL_ADC_ConfigChannel+0x38>
  else if (sConfig->Rank < 19)
 80018ec:	2d12      	cmp	r5, #18
 80018ee:	d80a      	bhi.n	8001906 <HAL_ADC_ConfigChannel+0x9e>
    MODIFY_REG(hadc->Instance->SQR3,
 80018f0:	261f      	movs	r6, #31
 80018f2:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 80018f4:	3b41      	subs	r3, #65	; 0x41
 80018f6:	409e      	lsls	r6, r3
 80018f8:	ea25 0506 	bic.w	r5, r5, r6
 80018fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001900:	432b      	orrs	r3, r5
 8001902:	63a3      	str	r3, [r4, #56]	; 0x38
 8001904:	e7cc      	b.n	80018a0 <HAL_ADC_ConfigChannel+0x38>
  else if (sConfig->Rank < 25)
 8001906:	2d18      	cmp	r5, #24
 8001908:	f04f 051f 	mov.w	r5, #31
 800190c:	d809      	bhi.n	8001922 <HAL_ADC_ConfigChannel+0xba>
    MODIFY_REG(hadc->Instance->SQR2,
 800190e:	6b66      	ldr	r6, [r4, #52]	; 0x34
 8001910:	3b5f      	subs	r3, #95	; 0x5f
 8001912:	409d      	lsls	r5, r3
 8001914:	ea26 0505 	bic.w	r5, r6, r5
 8001918:	fa02 f303 	lsl.w	r3, r2, r3
 800191c:	432b      	orrs	r3, r5
 800191e:	6363      	str	r3, [r4, #52]	; 0x34
 8001920:	e7be      	b.n	80018a0 <HAL_ADC_ConfigChannel+0x38>
    MODIFY_REG(hadc->Instance->SQR1,
 8001922:	6b26      	ldr	r6, [r4, #48]	; 0x30
 8001924:	3b7d      	subs	r3, #125	; 0x7d
 8001926:	409d      	lsls	r5, r3
 8001928:	ea26 0505 	bic.w	r5, r6, r5
 800192c:	fa02 f303 	lsl.w	r3, r2, r3
 8001930:	432b      	orrs	r3, r5
 8001932:	6323      	str	r3, [r4, #48]	; 0x30
 8001934:	e7b4      	b.n	80018a0 <HAL_ADC_ConfigChannel+0x38>
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8001936:	2a13      	cmp	r2, #19
 8001938:	d80d      	bhi.n	8001956 <HAL_ADC_ConfigChannel+0xee>
    MODIFY_REG(hadc->Instance->SMPR2,
 800193a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800193e:	f1a2 051e 	sub.w	r5, r2, #30
 8001942:	2207      	movs	r2, #7
 8001944:	6923      	ldr	r3, [r4, #16]
 8001946:	40aa      	lsls	r2, r5
 8001948:	ea23 0202 	bic.w	r2, r3, r2
 800194c:	688b      	ldr	r3, [r1, #8]
 800194e:	40ab      	lsls	r3, r5
 8001950:	431a      	orrs	r2, r3
 8001952:	6122      	str	r2, [r4, #16]
 8001954:	e7b2      	b.n	80018bc <HAL_ADC_ConfigChannel+0x54>
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8001956:	2a1a      	cmp	r2, #26
 8001958:	d80d      	bhi.n	8001976 <HAL_ADC_ConfigChannel+0x10e>
    MODIFY_REG(hadc->Instance->SMPR1,
 800195a:	2507      	movs	r5, #7
 800195c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8001960:	68e3      	ldr	r3, [r4, #12]
 8001962:	3a3c      	subs	r2, #60	; 0x3c
 8001964:	4095      	lsls	r5, r2
 8001966:	ea23 0305 	bic.w	r3, r3, r5
 800196a:	688d      	ldr	r5, [r1, #8]
 800196c:	fa05 f202 	lsl.w	r2, r5, r2
 8001970:	431a      	orrs	r2, r3
 8001972:	60e2      	str	r2, [r4, #12]
 8001974:	e7a2      	b.n	80018bc <HAL_ADC_ConfigChannel+0x54>
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8001976:	bf00      	nop
 8001978:	e7a0      	b.n	80018bc <HAL_ADC_ConfigChannel+0x54>
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 800197a:	4b0d      	ldr	r3, [pc, #52]	; (80019b0 <HAL_ADC_ConfigChannel+0x148>)
 800197c:	685a      	ldr	r2, [r3, #4]
 800197e:	0212      	lsls	r2, r2, #8
 8001980:	d4a1      	bmi.n	80018c6 <HAL_ADC_ConfigChannel+0x5e>
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8001982:	685a      	ldr	r2, [r3, #4]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001984:	2910      	cmp	r1, #16
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8001986:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800198a:	605a      	str	r2, [r3, #4]
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800198c:	d19b      	bne.n	80018c6 <HAL_ADC_ConfigChannel+0x5e>
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 800198e:	4b09      	ldr	r3, [pc, #36]	; (80019b4 <HAL_ADC_ConfigChannel+0x14c>)
 8001990:	4a09      	ldr	r2, [pc, #36]	; (80019b8 <HAL_ADC_ConfigChannel+0x150>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	fbb3 f3f2 	udiv	r3, r3, r2
 8001998:	220a      	movs	r2, #10
 800199a:	4353      	muls	r3, r2
            wait_loop_index--;
 800199c:	9301      	str	r3, [sp, #4]
          while(wait_loop_index != 0)
 800199e:	9b01      	ldr	r3, [sp, #4]
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d090      	beq.n	80018c6 <HAL_ADC_ConfigChannel+0x5e>
            wait_loop_index--;
 80019a4:	9b01      	ldr	r3, [sp, #4]
 80019a6:	3b01      	subs	r3, #1
 80019a8:	e7f8      	b.n	800199c <HAL_ADC_ConfigChannel+0x134>
  __HAL_LOCK(hadc);
 80019aa:	2002      	movs	r0, #2
 80019ac:	e78f      	b.n	80018ce <HAL_ADC_ConfigChannel+0x66>
 80019ae:	bf00      	nop
 80019b0:	40012700 	.word	0x40012700
 80019b4:	20000000 	.word	0x20000000
 80019b8:	000f4240 	.word	0x000f4240

080019bc <ADC_Enable>:
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
  uint32_t tickstart = 0;
  __IO uint32_t wait_loop_index = 0;
 80019bc:	2300      	movs	r3, #0
{
 80019be:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t wait_loop_index = 0;
 80019c0:	9301      	str	r3, [sp, #4]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80019c2:	6803      	ldr	r3, [r0, #0]
{
 80019c4:	4604      	mov	r4, r0
  if (ADC_IS_ENABLE(hadc) == RESET)
 80019c6:	681a      	ldr	r2, [r3, #0]
 80019c8:	0652      	lsls	r2, r2, #25
 80019ca:	d502      	bpl.n	80019d2 <ADC_Enable+0x16>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80019cc:	2000      	movs	r0, #0
}
 80019ce:	b003      	add	sp, #12
 80019d0:	bd30      	pop	{r4, r5, pc}
    __HAL_ADC_ENABLE(hadc);
 80019d2:	689a      	ldr	r2, [r3, #8]
 80019d4:	f042 0201 	orr.w	r2, r2, #1
 80019d8:	609a      	str	r2, [r3, #8]
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80019da:	4b15      	ldr	r3, [pc, #84]	; (8001a30 <ADC_Enable+0x74>)
 80019dc:	4a15      	ldr	r2, [pc, #84]	; (8001a34 <ADC_Enable+0x78>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	fbb3 f3f2 	udiv	r3, r3, r2
 80019e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
      wait_loop_index--;
 80019e8:	9301      	str	r3, [sp, #4]
    while(wait_loop_index != 0)
 80019ea:	9b01      	ldr	r3, [sp, #4]
 80019ec:	b9e3      	cbnz	r3, 8001a28 <ADC_Enable+0x6c>
    tickstart = HAL_GetTick();    
 80019ee:	f7ff fe19 	bl	8001624 <HAL_GetTick>
 80019f2:	4605      	mov	r5, r0
    while(ADC_IS_ENABLE(hadc) == RESET)
 80019f4:	6823      	ldr	r3, [r4, #0]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	065b      	lsls	r3, r3, #25
 80019fa:	d4e7      	bmi.n	80019cc <ADC_Enable+0x10>
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 80019fc:	f7ff fe12 	bl	8001624 <HAL_GetTick>
 8001a00:	1b40      	subs	r0, r0, r5
 8001a02:	2802      	cmp	r0, #2
 8001a04:	d9f6      	bls.n	80019f4 <ADC_Enable+0x38>
        if(ADC_IS_ENABLE(hadc) == RESET)
 8001a06:	6823      	ldr	r3, [r4, #0]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8001a0e:	d1f1      	bne.n	80019f4 <ADC_Enable+0x38>
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a10:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
          return HAL_ERROR;
 8001a12:	2001      	movs	r0, #1
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a14:	f042 0210 	orr.w	r2, r2, #16
 8001a18:	64e2      	str	r2, [r4, #76]	; 0x4c
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a1a:	6d22      	ldr	r2, [r4, #80]	; 0x50
          __HAL_UNLOCK(hadc);
 8001a1c:	f884 3048 	strb.w	r3, [r4, #72]	; 0x48
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001a20:	f042 0201 	orr.w	r2, r2, #1
 8001a24:	6522      	str	r2, [r4, #80]	; 0x50
          return HAL_ERROR;
 8001a26:	e7d2      	b.n	80019ce <ADC_Enable+0x12>
      wait_loop_index--;
 8001a28:	9b01      	ldr	r3, [sp, #4]
 8001a2a:	3b01      	subs	r3, #1
 8001a2c:	e7dc      	b.n	80019e8 <ADC_Enable+0x2c>
 8001a2e:	bf00      	nop
 8001a30:	20000000 	.word	0x20000000
 8001a34:	000f4240 	.word	0x000f4240

08001a38 <HAL_ADC_Start>:
{
 8001a38:	b510      	push	{r4, lr}
  __HAL_LOCK(hadc);
 8001a3a:	f890 3048 	ldrb.w	r3, [r0, #72]	; 0x48
{
 8001a3e:	4604      	mov	r4, r0
  __HAL_LOCK(hadc);
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d02e      	beq.n	8001aa2 <HAL_ADC_Start+0x6a>
 8001a44:	2301      	movs	r3, #1
 8001a46:	f880 3048 	strb.w	r3, [r0, #72]	; 0x48
  tmp_hal_status = ADC_Enable(hadc);
 8001a4a:	f7ff ffb7 	bl	80019bc <ADC_Enable>
  if (tmp_hal_status == HAL_OK)
 8001a4e:	bb38      	cbnz	r0, 8001aa0 <HAL_ADC_Start+0x68>
    ADC_STATE_CLR_SET(hadc->State,
 8001a50:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8001a52:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001a56:	f023 0301 	bic.w	r3, r3, #1
 8001a5a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a5e:	64e3      	str	r3, [r4, #76]	; 0x4c
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001a60:	6823      	ldr	r3, [r4, #0]
 8001a62:	685a      	ldr	r2, [r3, #4]
 8001a64:	0552      	lsls	r2, r2, #21
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001a66:	bf41      	itttt	mi
 8001a68:	6ce2      	ldrmi	r2, [r4, #76]	; 0x4c
 8001a6a:	f422 5240 	bicmi.w	r2, r2, #12288	; 0x3000
 8001a6e:	f442 5280 	orrmi.w	r2, r2, #4096	; 0x1000
 8001a72:	64e2      	strmi	r2, [r4, #76]	; 0x4c
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001a74:	6ce2      	ldr	r2, [r4, #76]	; 0x4c
 8001a76:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001a7a:	bf1c      	itt	ne
 8001a7c:	6d22      	ldrne	r2, [r4, #80]	; 0x50
 8001a7e:	f022 0206 	bicne.w	r2, r2, #6
      ADC_CLEAR_ERRORCODE(hadc);
 8001a82:	6522      	str	r2, [r4, #80]	; 0x50
    __HAL_UNLOCK(hadc);
 8001a84:	2200      	movs	r2, #0
 8001a86:	f884 2048 	strb.w	r2, [r4, #72]	; 0x48
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8001a8a:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001a8e:	601a      	str	r2, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8001a90:	689a      	ldr	r2, [r3, #8]
 8001a92:	f012 5f40 	tst.w	r2, #805306368	; 0x30000000
 8001a96:	d103      	bne.n	8001aa0 <HAL_ADC_Start+0x68>
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 8001a98:	689a      	ldr	r2, [r3, #8]
 8001a9a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001a9e:	609a      	str	r2, [r3, #8]
}
 8001aa0:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hadc);
 8001aa2:	2002      	movs	r0, #2
 8001aa4:	e7fc      	b.n	8001aa0 <HAL_ADC_Start+0x68>
	...

08001aa8 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aa8:	4907      	ldr	r1, [pc, #28]	; (8001ac8 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001aaa:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aac:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001aae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ab2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8001ab6:	0412      	lsls	r2, r2, #16
 8001ab8:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001abc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ac0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 8001ac4:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8001ac6:	4770      	bx	lr
 8001ac8:	e000ed00 	.word	0xe000ed00

08001acc <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001acc:	4b16      	ldr	r3, [pc, #88]	; (8001b28 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001ace:	b530      	push	{r4, r5, lr}
 8001ad0:	68dc      	ldr	r4, [r3, #12]
 8001ad2:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ad6:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ada:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001adc:	2b04      	cmp	r3, #4
 8001ade:	bf28      	it	cs
 8001ae0:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ae2:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ae4:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ae8:	bf98      	it	ls
 8001aea:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001aec:	fa05 f303 	lsl.w	r3, r5, r3
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001af0:	bf88      	it	hi
 8001af2:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001af4:	ea21 0303 	bic.w	r3, r1, r3
 8001af8:	40a3      	lsls	r3, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001afa:	fa05 f404 	lsl.w	r4, r5, r4
 8001afe:	ea22 0204 	bic.w	r2, r2, r4
  if ((int32_t)(IRQn) >= 0)
 8001b02:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b04:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b08:	bfac      	ite	ge
 8001b0a:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b0e:	4a07      	ldrlt	r2, [pc, #28]	; (8001b2c <HAL_NVIC_SetPriority+0x60>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b10:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8001b14:	b2db      	uxtb	r3, r3
 8001b16:	bfab      	itete	ge
 8001b18:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b1c:	f000 000f 	andlt.w	r0, r0, #15
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b20:	f880 3300 	strbge.w	r3, [r0, #768]	; 0x300
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b24:	5413      	strblt	r3, [r2, r0]
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8001b26:	bd30      	pop	{r4, r5, pc}
 8001b28:	e000ed00 	.word	0xe000ed00
 8001b2c:	e000ed14 	.word	0xe000ed14

08001b30 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8001b30:	2800      	cmp	r0, #0
 8001b32:	db08      	blt.n	8001b46 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b34:	2301      	movs	r3, #1
 8001b36:	0942      	lsrs	r2, r0, #5
 8001b38:	f000 001f 	and.w	r0, r0, #31
 8001b3c:	fa03 f000 	lsl.w	r0, r3, r0
 8001b40:	4b01      	ldr	r3, [pc, #4]	; (8001b48 <HAL_NVIC_EnableIRQ+0x18>)
 8001b42:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8001b46:	4770      	bx	lr
 8001b48:	e000e100 	.word	0xe000e100

08001b4c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8001b4c:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8001b4e:	4604      	mov	r4, r0
 8001b50:	b150      	cbz	r0, 8001b68 <HAL_CRC_Init+0x1c>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8001b52:	7943      	ldrb	r3, [r0, #5]
 8001b54:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001b58:	b913      	cbnz	r3, 8001b60 <HAL_CRC_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8001b5a:	7102      	strb	r2, [r0, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8001b5c:	f7ff f99c 	bl	8000e98 <HAL_CRC_MspInit>
  }

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001b60:	2301      	movs	r3, #1

  /* Return function status */
  return HAL_OK;
 8001b62:	2000      	movs	r0, #0
  hcrc->State = HAL_CRC_STATE_READY;
 8001b64:	7163      	strb	r3, [r4, #5]
}
 8001b66:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001b68:	2001      	movs	r0, #1
 8001b6a:	e7fc      	b.n	8001b66 <HAL_CRC_Init+0x1a>

08001b6c <HAL_CRC_Accumulate>:
  * @param  pBuffer pointer to the input data buffer.
  * @param  BufferLength input data buffer length (number of uint32_t words).
  * @retval uint32_t CRC (returned value LSBs for CRC shorter than 32 bits)
  */
uint32_t HAL_CRC_Accumulate(CRC_HandleTypeDef *hcrc, uint32_t pBuffer[], uint32_t BufferLength)
{
 8001b6c:	4603      	mov	r3, r0
  uint32_t index;      /* CRC input data buffer index */
  uint32_t temp = 0U;  /* CRC output (read from hcrc->Instance->DR register) */

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001b6e:	2002      	movs	r0, #2
{
 8001b70:	b510      	push	{r4, lr}
  hcrc->State = HAL_CRC_STATE_BUSY;
 8001b72:	7158      	strb	r0, [r3, #5]

  /* Enter Data to the CRC calculator */
  for (index = 0U; index < BufferLength; index++)
  {
    hcrc->Instance->DR = pBuffer[index];
 8001b74:	6818      	ldr	r0, [r3, #0]
 8001b76:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  for (index = 0U; index < BufferLength; index++)
 8001b7a:	4291      	cmp	r1, r2
 8001b7c:	d103      	bne.n	8001b86 <HAL_CRC_Accumulate+0x1a>
  }
  temp = hcrc->Instance->DR;

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001b7e:	2201      	movs	r2, #1
  temp = hcrc->Instance->DR;
 8001b80:	6800      	ldr	r0, [r0, #0]
  hcrc->State = HAL_CRC_STATE_READY;
 8001b82:	715a      	strb	r2, [r3, #5]

  /* Return the CRC computed value */
  return temp;
}
 8001b84:	bd10      	pop	{r4, pc}
    hcrc->Instance->DR = pBuffer[index];
 8001b86:	f851 4b04 	ldr.w	r4, [r1], #4
 8001b8a:	6004      	str	r4, [r0, #0]
  for (index = 0U; index < BufferLength; index++)
 8001b8c:	e7f5      	b.n	8001b7a <HAL_CRC_Accumulate+0xe>
	...

08001b90 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001b90:	b510      	push	{r4, lr}
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8001b92:	b348      	cbz	r0, 8001be8 <HAL_DMA_Init+0x58>
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* calculation of the channel index */
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8001b94:	2214      	movs	r2, #20
 8001b96:	6801      	ldr	r1, [r0, #0]
 8001b98:	4b14      	ldr	r3, [pc, #80]	; (8001bec <HAL_DMA_Init+0x5c>)
 8001b9a:	440b      	add	r3, r1
 8001b9c:	fbb3 f3f2 	udiv	r3, r3, r2
 8001ba0:	009b      	lsls	r3, r3, #2
 8001ba2:	6403      	str	r3, [r0, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8001ba4:	4b12      	ldr	r3, [pc, #72]	; (8001bf0 <HAL_DMA_Init+0x60>)
 8001ba6:	63c3      	str	r3, [r0, #60]	; 0x3c
#endif

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001ba8:	2302      	movs	r3, #2
 8001baa:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC    | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8001bae:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8001bb2:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bb4:	68c4      	ldr	r4, [r0, #12]
  tmp = hdma->Instance->CCR;
 8001bb6:	680a      	ldr	r2, [r1, #0]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bb8:	4323      	orrs	r3, r4
 8001bba:	6904      	ldr	r4, [r0, #16]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8001bbc:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001bc0:	4323      	orrs	r3, r4
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bc2:	6944      	ldr	r4, [r0, #20]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE   | DMA_CCR_PSIZE  |
 8001bc4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001bc8:	4323      	orrs	r3, r4
 8001bca:	6984      	ldr	r4, [r0, #24]
 8001bcc:	4323      	orrs	r3, r4
          hdma->Init.Mode                | hdma->Init.Priority;
 8001bce:	69c4      	ldr	r4, [r0, #28]
 8001bd0:	4323      	orrs	r3, r4
  tmp |=  hdma->Init.Direction        |
 8001bd2:	4313      	orrs	r3, r2

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8001bd4:	600b      	str	r3, [r1, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8001bd6:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001bd8:	2300      	movs	r3, #0
 8001bda:	6383      	str	r3, [r0, #56]	; 0x38

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001bdc:	f880 3020 	strb.w	r3, [r0, #32]
  hdma->State = HAL_DMA_STATE_READY;
 8001be0:	f880 2021 	strb.w	r2, [r0, #33]	; 0x21

  return HAL_OK;
 8001be4:	4618      	mov	r0, r3
}
 8001be6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001be8:	2001      	movs	r0, #1
 8001bea:	e7fc      	b.n	8001be6 <HAL_DMA_Init+0x56>
 8001bec:	bffd9ff8 	.word	0xbffd9ff8
 8001bf0:	40026000 	.word	0x40026000

08001bf4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001bf4:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001bf6:	f890 4020 	ldrb.w	r4, [r0, #32]
 8001bfa:	2c01      	cmp	r4, #1
 8001bfc:	d036      	beq.n	8001c6c <HAL_DMA_Start_IT+0x78>
 8001bfe:	2401      	movs	r4, #1
 8001c00:	f880 4020 	strb.w	r4, [r0, #32]

  if(HAL_DMA_STATE_READY == hdma->State)
 8001c04:	f890 4021 	ldrb.w	r4, [r0, #33]	; 0x21
 8001c08:	2600      	movs	r6, #0
 8001c0a:	2c01      	cmp	r4, #1
 8001c0c:	b2e5      	uxtb	r5, r4
 8001c0e:	f04f 0402 	mov.w	r4, #2
 8001c12:	d129      	bne.n	8001c68 <HAL_DMA_Start_IT+0x74>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c14:	f880 4021 	strb.w	r4, [r0, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001c18:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c1a:	6386      	str	r6, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE(hdma);
 8001c1c:	6826      	ldr	r6, [r4, #0]
 8001c1e:	f026 0601 	bic.w	r6, r6, #1
 8001c22:	6026      	str	r6, [r4, #0]
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001c24:	e9d0 670f 	ldrd	r6, r7, [r0, #60]	; 0x3c
 8001c28:	f007 071c 	and.w	r7, r7, #28
 8001c2c:	40bd      	lsls	r5, r7
 8001c2e:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001c30:	6063      	str	r3, [r4, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001c32:	6843      	ldr	r3, [r0, #4]
 8001c34:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 8001c36:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001c38:	bf0b      	itete	eq
 8001c3a:	60a2      	streq	r2, [r4, #8]
  }
  /* Peripheral to Memory */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8001c3c:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8001c3e:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8001c40:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 8001c42:	b14b      	cbz	r3, 8001c58 <HAL_DMA_Start_IT+0x64>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001c44:	6823      	ldr	r3, [r4, #0]
 8001c46:	f043 030e 	orr.w	r3, r3, #14
  HAL_StatusTypeDef status = HAL_OK;
 8001c4a:	2000      	movs	r0, #0
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001c4c:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8001c4e:	6823      	ldr	r3, [r4, #0]
 8001c50:	f043 0301 	orr.w	r3, r3, #1
 8001c54:	6023      	str	r3, [r4, #0]
}
 8001c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c58:	6823      	ldr	r3, [r4, #0]
 8001c5a:	f023 0304 	bic.w	r3, r3, #4
 8001c5e:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8001c60:	6823      	ldr	r3, [r4, #0]
 8001c62:	f043 030a 	orr.w	r3, r3, #10
 8001c66:	e7f0      	b.n	8001c4a <HAL_DMA_Start_IT+0x56>
    __HAL_UNLOCK(hdma);
 8001c68:	f880 6020 	strb.w	r6, [r0, #32]
  __HAL_LOCK(hdma);
 8001c6c:	2002      	movs	r0, #2
 8001c6e:	e7f2      	b.n	8001c56 <HAL_DMA_Start_IT+0x62>

08001c70 <HAL_DMA_IRQHandler>:
{
 8001c70:	b470      	push	{r4, r5, r6}
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001c72:	2404      	movs	r4, #4
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c74:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001c76:	6c02      	ldr	r2, [r0, #64]	; 0x40
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001c78:	680e      	ldr	r6, [r1, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001c7a:	f002 021c 	and.w	r2, r2, #28
  uint32_t source_it = hdma->Instance->CCR;
 8001c7e:	6803      	ldr	r3, [r0, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001c80:	4094      	lsls	r4, r2
 8001c82:	4234      	tst	r4, r6
  uint32_t source_it = hdma->Instance->CCR;
 8001c84:	681d      	ldr	r5, [r3, #0]
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8001c86:	d00e      	beq.n	8001ca6 <HAL_DMA_IRQHandler+0x36>
 8001c88:	f015 0f04 	tst.w	r5, #4
 8001c8c:	d00b      	beq.n	8001ca6 <HAL_DMA_IRQHandler+0x36>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001c8e:	681a      	ldr	r2, [r3, #0]
 8001c90:	0692      	lsls	r2, r2, #26
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8001c92:	bf5e      	ittt	pl
 8001c94:	681a      	ldrpl	r2, [r3, #0]
 8001c96:	f022 0204 	bicpl.w	r2, r2, #4
 8001c9a:	601a      	strpl	r2, [r3, #0]
    if(hdma->XferHalfCpltCallback != NULL)
 8001c9c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
    hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8001c9e:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 8001ca0:	b373      	cbz	r3, 8001d00 <HAL_DMA_IRQHandler+0x90>
}
 8001ca2:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8001ca4:	4718      	bx	r3
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8001ca6:	2402      	movs	r4, #2
 8001ca8:	4094      	lsls	r4, r2
 8001caa:	4234      	tst	r4, r6
 8001cac:	d012      	beq.n	8001cd4 <HAL_DMA_IRQHandler+0x64>
 8001cae:	f015 0f02 	tst.w	r5, #2
 8001cb2:	d00f      	beq.n	8001cd4 <HAL_DMA_IRQHandler+0x64>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	0695      	lsls	r5, r2, #26
 8001cb8:	d406      	bmi.n	8001cc8 <HAL_DMA_IRQHandler+0x58>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	f022 020a 	bic.w	r2, r2, #10
 8001cc0:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001cc8:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8001cca:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8001ccc:	f880 3020 	strb.w	r3, [r0, #32]
    if(hdma->XferCpltCallback != NULL)
 8001cd0:	6a83      	ldr	r3, [r0, #40]	; 0x28
 8001cd2:	e7e5      	b.n	8001ca0 <HAL_DMA_IRQHandler+0x30>
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8001cd4:	2408      	movs	r4, #8
 8001cd6:	4094      	lsls	r4, r2
 8001cd8:	4234      	tst	r4, r6
 8001cda:	d011      	beq.n	8001d00 <HAL_DMA_IRQHandler+0x90>
 8001cdc:	072c      	lsls	r4, r5, #28
 8001cde:	d50f      	bpl.n	8001d00 <HAL_DMA_IRQHandler+0x90>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ce0:	681c      	ldr	r4, [r3, #0]
 8001ce2:	f024 040e 	bic.w	r4, r4, #14
 8001ce6:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001ce8:	2301      	movs	r3, #1
 8001cea:	fa03 f202 	lsl.w	r2, r3, r2
 8001cee:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001cf0:	6383      	str	r3, [r0, #56]	; 0x38
    hdma->State = HAL_DMA_STATE_READY;
 8001cf2:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
    __HAL_UNLOCK(hdma);
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	f880 3020 	strb.w	r3, [r0, #32]
    if (hdma->XferErrorCallback != NULL)
 8001cfc:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8001cfe:	e7cf      	b.n	8001ca0 <HAL_DMA_IRQHandler+0x30>
}
 8001d00:	bc70      	pop	{r4, r5, r6}
 8001d02:	4770      	bx	lr

08001d04 <FLASH_SetErrorCode>:
  */
static void FLASH_SetErrorCode(void)
{
  uint32_t flags = 0U;
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 8001d04:	4a1b      	ldr	r2, [pc, #108]	; (8001d74 <FLASH_SetErrorCode+0x70>)
 8001d06:	6993      	ldr	r3, [r2, #24]
 8001d08:	f413 7380 	ands.w	r3, r3, #256	; 0x100
 8001d0c:	d006      	beq.n	8001d1c <FLASH_SetErrorCode+0x18>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8001d0e:	491a      	ldr	r1, [pc, #104]	; (8001d78 <FLASH_SetErrorCode+0x74>)
 8001d10:	694b      	ldr	r3, [r1, #20]
 8001d12:	f043 0302 	orr.w	r3, r3, #2
 8001d16:	614b      	str	r3, [r1, #20]
    flags |= FLASH_FLAG_WRPERR;
 8001d18:	f44f 7380 	mov.w	r3, #256	; 0x100
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8001d1c:	6992      	ldr	r2, [r2, #24]
 8001d1e:	0592      	lsls	r2, r2, #22
 8001d20:	d506      	bpl.n	8001d30 <FLASH_SetErrorCode+0x2c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001d22:	4915      	ldr	r1, [pc, #84]	; (8001d78 <FLASH_SetErrorCode+0x74>)
    flags |= FLASH_FLAG_PGAERR;
 8001d24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8001d28:	694a      	ldr	r2, [r1, #20]
 8001d2a:	f042 0201 	orr.w	r2, r2, #1
 8001d2e:	614a      	str	r2, [r1, #20]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 8001d30:	4910      	ldr	r1, [pc, #64]	; (8001d74 <FLASH_SetErrorCode+0x70>)
 8001d32:	698a      	ldr	r2, [r1, #24]
 8001d34:	0510      	lsls	r0, r2, #20
 8001d36:	d506      	bpl.n	8001d46 <FLASH_SetErrorCode+0x42>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001d38:	480f      	ldr	r0, [pc, #60]	; (8001d78 <FLASH_SetErrorCode+0x74>)
    flags |= FLASH_FLAG_OPTVERR;
 8001d3a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 8001d3e:	6942      	ldr	r2, [r0, #20]
 8001d40:	f042 0204 	orr.w	r2, r2, #4
 8001d44:	6142      	str	r2, [r0, #20]
  }

#if defined(FLASH_SR_RDERR)
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 8001d46:	698a      	ldr	r2, [r1, #24]
 8001d48:	0491      	lsls	r1, r2, #18
 8001d4a:	d506      	bpl.n	8001d5a <FLASH_SetErrorCode+0x56>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001d4c:	490a      	ldr	r1, [pc, #40]	; (8001d78 <FLASH_SetErrorCode+0x74>)
    flags |= FLASH_FLAG_RDERR;
 8001d4e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 8001d52:	694a      	ldr	r2, [r1, #20]
 8001d54:	f042 0210 	orr.w	r2, r2, #16
 8001d58:	614a      	str	r2, [r1, #20]
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTVUSR;
    flags |= FLASH_FLAG_OPTVERRUSR;
  }
#endif /* FLASH_SR_OPTVERRUSR */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 8001d5a:	4906      	ldr	r1, [pc, #24]	; (8001d74 <FLASH_SetErrorCode+0x70>)
 8001d5c:	698a      	ldr	r2, [r1, #24]
 8001d5e:	0552      	lsls	r2, r2, #21
 8001d60:	d506      	bpl.n	8001d70 <FLASH_SetErrorCode+0x6c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8001d62:	4805      	ldr	r0, [pc, #20]	; (8001d78 <FLASH_SetErrorCode+0x74>)
    flags |= FLASH_FLAG_SIZERR;
 8001d64:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 8001d68:	6942      	ldr	r2, [r0, #20]
 8001d6a:	f042 0208 	orr.w	r2, r2, #8
 8001d6e:	6142      	str	r2, [r0, #20]
  }
  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 8001d70:	618b      	str	r3, [r1, #24]
}
 8001d72:	4770      	bx	lr
 8001d74:	40023c00 	.word	0x40023c00
 8001d78:	20000338 	.word	0x20000338

08001d7c <FLASH_WaitForLastOperation>:
{
 8001d7c:	b570      	push	{r4, r5, r6, lr}
 8001d7e:	4605      	mov	r5, r0
  uint32_t tickstart = HAL_GetTick();
 8001d80:	f7ff fc50 	bl	8001624 <HAL_GetTick>
 8001d84:	4606      	mov	r6, r0
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 8001d86:	4c14      	ldr	r4, [pc, #80]	; (8001dd8 <FLASH_WaitForLastOperation+0x5c>)
 8001d88:	69a3      	ldr	r3, [r4, #24]
 8001d8a:	07db      	lsls	r3, r3, #31
 8001d8c:	d418      	bmi.n	8001dc0 <FLASH_WaitForLastOperation+0x44>
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8001d8e:	69a3      	ldr	r3, [r4, #24]
 8001d90:	079d      	lsls	r5, r3, #30
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001d92:	bf44      	itt	mi
 8001d94:	2302      	movmi	r3, #2
 8001d96:	61a3      	strmi	r3, [r4, #24]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001d98:	69a3      	ldr	r3, [r4, #24]
 8001d9a:	05d8      	lsls	r0, r3, #23
 8001d9c:	d40c      	bmi.n	8001db8 <FLASH_WaitForLastOperation+0x3c>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001d9e:	69a3      	ldr	r3, [r4, #24]
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)  || 
 8001da0:	0519      	lsls	r1, r3, #20
 8001da2:	d409      	bmi.n	8001db8 <FLASH_WaitForLastOperation+0x3c>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) || 
 8001da4:	69a3      	ldr	r3, [r4, #24]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR) || 
 8001da6:	049a      	lsls	r2, r3, #18
 8001da8:	d406      	bmi.n	8001db8 <FLASH_WaitForLastOperation+0x3c>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR) || 
 8001daa:	69a3      	ldr	r3, [r4, #24]
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) || 
 8001dac:	055b      	lsls	r3, r3, #21
 8001dae:	d403      	bmi.n	8001db8 <FLASH_WaitForLastOperation+0x3c>
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 8001db0:	69a0      	ldr	r0, [r4, #24]
     __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR) || 
 8001db2:	f410 7000 	ands.w	r0, r0, #512	; 0x200
 8001db6:	d007      	beq.n	8001dc8 <FLASH_WaitForLastOperation+0x4c>
    FLASH_SetErrorCode();
 8001db8:	f7ff ffa4 	bl	8001d04 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8001dbc:	2001      	movs	r0, #1
 8001dbe:	e003      	b.n	8001dc8 <FLASH_WaitForLastOperation+0x4c>
    if (Timeout != HAL_MAX_DELAY)
 8001dc0:	1c6a      	adds	r2, r5, #1
 8001dc2:	d0e1      	beq.n	8001d88 <FLASH_WaitForLastOperation+0xc>
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001dc4:	b90d      	cbnz	r5, 8001dca <FLASH_WaitForLastOperation+0x4e>
        return HAL_TIMEOUT;
 8001dc6:	2003      	movs	r0, #3
}
 8001dc8:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 8001dca:	f7ff fc2b 	bl	8001624 <HAL_GetTick>
 8001dce:	1b80      	subs	r0, r0, r6
 8001dd0:	42a8      	cmp	r0, r5
 8001dd2:	d9d9      	bls.n	8001d88 <FLASH_WaitForLastOperation+0xc>
 8001dd4:	e7f7      	b.n	8001dc6 <FLASH_WaitForLastOperation+0x4a>
 8001dd6:	bf00      	nop
 8001dd8:	40023c00 	.word	0x40023c00

08001ddc <HAL_FLASHEx_DATAEEPROM_Unlock>:
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 8001ddc:	4b05      	ldr	r3, [pc, #20]	; (8001df4 <HAL_FLASHEx_DATAEEPROM_Unlock+0x18>)
 8001dde:	685a      	ldr	r2, [r3, #4]
 8001de0:	07d2      	lsls	r2, r2, #31
  {
    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 8001de2:	bf41      	itttt	mi
 8001de4:	4a04      	ldrmi	r2, [pc, #16]	; (8001df8 <HAL_FLASHEx_DATAEEPROM_Unlock+0x1c>)
  }
  else
  {
    return HAL_ERROR;
  }
  return HAL_OK;
 8001de6:	2000      	movmi	r0, #0
    FLASH->PEKEYR = FLASH_PEKEY1;
 8001de8:	60da      	strmi	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 8001dea:	4a04      	ldrmi	r2, [pc, #16]	; (8001dfc <HAL_FLASHEx_DATAEEPROM_Unlock+0x20>)
    return HAL_ERROR;
 8001dec:	bf54      	ite	pl
 8001dee:	2001      	movpl	r0, #1
    FLASH->PEKEYR = FLASH_PEKEY2;
 8001df0:	60da      	strmi	r2, [r3, #12]
}
 8001df2:	4770      	bx	lr
 8001df4:	40023c00 	.word	0x40023c00
 8001df8:	89abcdef 	.word	0x89abcdef
 8001dfc:	02030405 	.word	0x02030405

08001e00 <HAL_FLASHEx_DATAEEPROM_Lock>:
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8001e00:	4a03      	ldr	r2, [pc, #12]	; (8001e10 <HAL_FLASHEx_DATAEEPROM_Lock+0x10>)

  return HAL_OK;
}
 8001e02:	2000      	movs	r0, #0
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 8001e04:	6853      	ldr	r3, [r2, #4]
 8001e06:	f043 0301 	orr.w	r3, r3, #1
 8001e0a:	6053      	str	r3, [r2, #4]
}
 8001e0c:	4770      	bx	lr
 8001e0e:	bf00      	nop
 8001e10:	40023c00 	.word	0x40023c00

08001e14 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t TypeErase, uint32_t Address)
{
 8001e14:	b538      	push	{r3, r4, r5, lr}
 8001e16:	4604      	mov	r4, r0
  /* Check the parameters */
  assert_param(IS_TYPEERASEDATA(TypeErase));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001e18:	f24c 3050 	movw	r0, #50000	; 0xc350
{
 8001e1c:	460d      	mov	r5, r1
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001e1e:	f7ff ffad 	bl	8001d7c <FLASH_WaitForLastOperation>

  if(status == HAL_OK)
 8001e22:	b990      	cbnz	r0, 8001e4a <HAL_FLASHEx_DATAEEPROM_Erase+0x36>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001e24:	4a09      	ldr	r2, [pc, #36]	; (8001e4c <HAL_FLASHEx_DATAEEPROM_Erase+0x38>)

    if(TypeErase == FLASH_TYPEERASEDATA_WORD)
 8001e26:	2c02      	cmp	r4, #2
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001e28:	6150      	str	r0, [r2, #20]
    if(TypeErase == FLASH_TYPEERASEDATA_WORD)
 8001e2a:	d106      	bne.n	8001e3a <HAL_FLASHEx_DATAEEPROM_Erase+0x26>
    {
      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 8001e2c:	6028      	str	r0, [r5, #0]
    {
      /* Write 00h to valid address in the data memory */
      *(__IO uint8_t *) Address = (uint8_t)0x00;
    }

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001e2e:	f24c 3050 	movw	r0, #50000	; 0xc350
  }

  /* Return the erase status */
  return status;
}
 8001e32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001e36:	f7ff bfa1 	b.w	8001d7c <FLASH_WaitForLastOperation>
    if(TypeErase == FLASH_TYPEERASEDATA_HALFWORD)
 8001e3a:	2c01      	cmp	r4, #1
 8001e3c:	d003      	beq.n	8001e46 <HAL_FLASHEx_DATAEEPROM_Erase+0x32>
    if(TypeErase == FLASH_TYPEERASEDATA_BYTE)
 8001e3e:	2c00      	cmp	r4, #0
 8001e40:	d1f5      	bne.n	8001e2e <HAL_FLASHEx_DATAEEPROM_Erase+0x1a>
      *(__IO uint8_t *) Address = (uint8_t)0x00;
 8001e42:	702c      	strb	r4, [r5, #0]
 8001e44:	e7f3      	b.n	8001e2e <HAL_FLASHEx_DATAEEPROM_Erase+0x1a>
      *(__IO uint16_t *) Address = (uint16_t)0x0000;
 8001e46:	8028      	strh	r0, [r5, #0]
    if(TypeErase == FLASH_TYPEERASEDATA_BYTE)
 8001e48:	e7f1      	b.n	8001e2e <HAL_FLASHEx_DATAEEPROM_Erase+0x1a>
}
 8001e4a:	bd38      	pop	{r3, r4, r5, pc}
 8001e4c:	20000338 	.word	0x20000338

08001e50 <HAL_FLASHEx_DATAEEPROM_Program>:
  *
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 8001e50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef status = HAL_ERROR;

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8001e54:	4c30      	ldr	r4, [pc, #192]	; (8001f18 <HAL_FLASHEx_DATAEEPROM_Program+0xc8>)
{
 8001e56:	4607      	mov	r7, r0
  __HAL_LOCK(&pFlash);
 8001e58:	7c23      	ldrb	r3, [r4, #16]
{
 8001e5a:	460e      	mov	r6, r1
  __HAL_LOCK(&pFlash);
 8001e5c:	2b01      	cmp	r3, #1
{
 8001e5e:	4615      	mov	r5, r2
  __HAL_LOCK(&pFlash);
 8001e60:	d058      	beq.n	8001f14 <HAL_FLASHEx_DATAEEPROM_Program+0xc4>
 8001e62:	f04f 0801 	mov.w	r8, #1

  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001e66:	f24c 3050 	movw	r0, #50000	; 0xc350
  __HAL_LOCK(&pFlash);
 8001e6a:	f884 8010 	strb.w	r8, [r4, #16]
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001e6e:	f7ff ff85 	bl	8001d7c <FLASH_WaitForLastOperation>

  if(status == HAL_OK)
 8001e72:	b9f8      	cbnz	r0, 8001eb4 <HAL_FLASHEx_DATAEEPROM_Program+0x64>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 8001e74:	2f02      	cmp	r7, #2
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8001e76:	6160      	str	r0, [r4, #20]
    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 8001e78:	d106      	bne.n	8001e88 <HAL_FLASHEx_DATAEEPROM_Program+0x38>

  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001e7a:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001e7e:	f7ff ff7d 	bl	8001d7c <FLASH_WaitForLastOperation>

  if(status == HAL_OK)
 8001e82:	b9b8      	cbnz	r0, 8001eb4 <HAL_FLASHEx_DATAEEPROM_Program+0x64>
    *(__IO uint32_t *)Address = Data;
 8001e84:	6035      	str	r5, [r6, #0]
 8001e86:	e011      	b.n	8001eac <HAL_FLASHEx_DATAEEPROM_Program+0x5c>
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 8001e88:	2f01      	cmp	r7, #1
 8001e8a:	d107      	bne.n	8001e9c <HAL_FLASHEx_DATAEEPROM_Program+0x4c>
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001e8c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001e90:	f7ff ff74 	bl	8001d7c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8001e94:	b970      	cbnz	r0, 8001eb4 <HAL_FLASHEx_DATAEEPROM_Program+0x64>
      status = FLASH_DATAEEPROM_FastProgramHalfWord(Address, (uint16_t) Data);
 8001e96:	b2ad      	uxth	r5, r5
    *(__IO uint16_t *)Address = Data;
 8001e98:	8035      	strh	r5, [r6, #0]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001e9a:	e007      	b.n	8001eac <HAL_FLASHEx_DATAEEPROM_Program+0x5c>
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 8001e9c:	b977      	cbnz	r7, 8001ebc <HAL_FLASHEx_DATAEEPROM_Program+0x6c>
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001e9e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001ea2:	f7ff ff6b 	bl	8001d7c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8001ea6:	b928      	cbnz	r0, 8001eb4 <HAL_FLASHEx_DATAEEPROM_Program+0x64>
      status = FLASH_DATAEEPROM_FastProgramByte(Address, (uint8_t) Data);
 8001ea8:	b2ed      	uxtb	r5, r5
    *(__IO uint8_t *)Address = Data;
 8001eaa:	7035      	strb	r5, [r6, #0]
    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001eac:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001eb0:	f7ff ff64 	bl	8001d7c <FLASH_WaitForLastOperation>
  __HAL_UNLOCK(&pFlash);
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	7423      	strb	r3, [r4, #16]
}
 8001eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTBYTE)
 8001ebc:	2f04      	cmp	r7, #4
 8001ebe:	d10b      	bne.n	8001ed8 <HAL_FLASHEx_DATAEEPROM_Program+0x88>
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001ec0:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001ec4:	f7ff ff5a 	bl	8001d7c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8001ec8:	2800      	cmp	r0, #0
 8001eca:	d1f3      	bne.n	8001eb4 <HAL_FLASHEx_DATAEEPROM_Program+0x64>
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 8001ecc:	4a13      	ldr	r2, [pc, #76]	; (8001f1c <HAL_FLASHEx_DATAEEPROM_Program+0xcc>)
 8001ece:	6853      	ldr	r3, [r2, #4]
 8001ed0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ed4:	6053      	str	r3, [r2, #4]
 8001ed6:	e7e7      	b.n	8001ea8 <HAL_FLASHEx_DATAEEPROM_Program+0x58>
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTHALFWORD)
 8001ed8:	2f08      	cmp	r7, #8
 8001eda:	d10b      	bne.n	8001ef4 <HAL_FLASHEx_DATAEEPROM_Program+0xa4>
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001edc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001ee0:	f7ff ff4c 	bl	8001d7c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8001ee4:	2800      	cmp	r0, #0
 8001ee6:	d1e5      	bne.n	8001eb4 <HAL_FLASHEx_DATAEEPROM_Program+0x64>
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 8001ee8:	4a0c      	ldr	r2, [pc, #48]	; (8001f1c <HAL_FLASHEx_DATAEEPROM_Program+0xcc>)
 8001eea:	6853      	ldr	r3, [r2, #4]
 8001eec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ef0:	6053      	str	r3, [r2, #4]
 8001ef2:	e7d0      	b.n	8001e96 <HAL_FLASHEx_DATAEEPROM_Program+0x46>
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_FASTWORD)
 8001ef4:	2f10      	cmp	r7, #16
 8001ef6:	d10b      	bne.n	8001f10 <HAL_FLASHEx_DATAEEPROM_Program+0xc0>
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 8001ef8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8001efc:	f7ff ff3e 	bl	8001d7c <FLASH_WaitForLastOperation>
  if(status == HAL_OK)
 8001f00:	2800      	cmp	r0, #0
 8001f02:	d1d7      	bne.n	8001eb4 <HAL_FLASHEx_DATAEEPROM_Program+0x64>
    CLEAR_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 8001f04:	4a05      	ldr	r2, [pc, #20]	; (8001f1c <HAL_FLASHEx_DATAEEPROM_Program+0xcc>)
 8001f06:	6853      	ldr	r3, [r2, #4]
 8001f08:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001f0c:	6053      	str	r3, [r2, #4]
 8001f0e:	e7b9      	b.n	8001e84 <HAL_FLASHEx_DATAEEPROM_Program+0x34>
      status = HAL_ERROR;
 8001f10:	4640      	mov	r0, r8
 8001f12:	e7cf      	b.n	8001eb4 <HAL_FLASHEx_DATAEEPROM_Program+0x64>
  __HAL_LOCK(&pFlash);
 8001f14:	2002      	movs	r0, #2
 8001f16:	e7cf      	b.n	8001eb8 <HAL_FLASHEx_DATAEEPROM_Program+0x68>
 8001f18:	20000338 	.word	0x20000338
 8001f1c:	40023c00 	.word	0x40023c00

08001f20 <HAL_FLASHEx_DATAEEPROM_EnableFixedTimeProgram>:
  SET_BIT(FLASH->PECR, FLASH_PECR_FTDW);
 8001f20:	4a02      	ldr	r2, [pc, #8]	; (8001f2c <HAL_FLASHEx_DATAEEPROM_EnableFixedTimeProgram+0xc>)
 8001f22:	6853      	ldr	r3, [r2, #4]
 8001f24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f28:	6053      	str	r3, [r2, #4]
}
 8001f2a:	4770      	bx	lr
 8001f2c:	40023c00 	.word	0x40023c00

08001f30 <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
  uint32_t position = 0x00;
 8001f30:	2300      	movs	r3, #0
{
 8001f32:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f36:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80020b0 <HAL_GPIO_Init+0x180>
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f3a:	4c5e      	ldr	r4, [pc, #376]	; (80020b4 <HAL_GPIO_Init+0x184>)
  while (((GPIO_Init->Pin) >> position) != 0)
 8001f3c:	680a      	ldr	r2, [r1, #0]
 8001f3e:	fa32 f503 	lsrs.w	r5, r2, r3
 8001f42:	d102      	bne.n	8001f4a <HAL_GPIO_Init+0x1a>
      }
    }

    position++;
  }
}
 8001f44:	b003      	add	sp, #12
 8001f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8001f4a:	2501      	movs	r5, #1
 8001f4c:	fa05 fe03 	lsl.w	lr, r5, r3
    if (iocurrent)
 8001f50:	ea1e 0202 	ands.w	r2, lr, r2
 8001f54:	f000 80a2 	beq.w	800209c <HAL_GPIO_Init+0x16c>
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001f58:	f04f 0c03 	mov.w	ip, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f5c:	684e      	ldr	r6, [r1, #4]
 8001f5e:	ea4f 0843 	mov.w	r8, r3, lsl #1
 8001f62:	f006 0503 	and.w	r5, r6, #3
 8001f66:	1e6f      	subs	r7, r5, #1
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001f68:	fa0c fc08 	lsl.w	ip, ip, r8
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f6c:	2f01      	cmp	r7, #1
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001f6e:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8001f72:	d834      	bhi.n	8001fde <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 8001f74:	6887      	ldr	r7, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001f76:	ea07 0a0c 	and.w	sl, r7, ip
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8001f7a:	68cf      	ldr	r7, [r1, #12]
 8001f7c:	fa07 f708 	lsl.w	r7, r7, r8
 8001f80:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8001f84:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8001f86:	6847      	ldr	r7, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8001f88:	ea27 0e0e 	bic.w	lr, r7, lr
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001f8c:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8001f90:	409f      	lsls	r7, r3
 8001f92:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8001f96:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8001f98:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f9a:	2d02      	cmp	r5, #2
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8001f9c:	ea07 0e0c 	and.w	lr, r7, ip
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8001fa0:	688f      	ldr	r7, [r1, #8]
 8001fa2:	fa07 f708 	lsl.w	r7, r7, r8
 8001fa6:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->PUPDR = temp;
 8001faa:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fac:	d119      	bne.n	8001fe2 <HAL_GPIO_Init+0xb2>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001fae:	f04f 0e0f 	mov.w	lr, #15
        temp = GPIOx->AFR[position >> 3];
 8001fb2:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 8001fb6:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001fba:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 8001fbe:	f8da 7020 	ldr.w	r7, [sl, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8001fc2:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 8001fc6:	fa0e fe0b 	lsl.w	lr, lr, fp
 8001fca:	ea27 0e0e 	bic.w	lr, r7, lr
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8001fce:	690f      	ldr	r7, [r1, #16]
 8001fd0:	fa07 f70b 	lsl.w	r7, r7, fp
 8001fd4:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->AFR[position >> 3] = temp;
 8001fd8:	f8ca 7020 	str.w	r7, [sl, #32]
 8001fdc:	e001      	b.n	8001fe2 <HAL_GPIO_Init+0xb2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001fde:	2d03      	cmp	r5, #3
 8001fe0:	d1da      	bne.n	8001f98 <HAL_GPIO_Init+0x68>
      temp = GPIOx->MODER;
 8001fe2:	6807      	ldr	r7, [r0, #0]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001fe4:	fa05 f508 	lsl.w	r5, r5, r8
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8001fe8:	ea07 070c 	and.w	r7, r7, ip
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001fec:	432f      	orrs	r7, r5
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001fee:	f416 3f40 	tst.w	r6, #196608	; 0x30000
      GPIOx->MODER = temp;
 8001ff2:	6007      	str	r7, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ff4:	d052      	beq.n	800209c <HAL_GPIO_Init+0x16c>
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8001ff6:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ffa:	f8d9 5020 	ldr.w	r5, [r9, #32]
 8001ffe:	f023 0703 	bic.w	r7, r3, #3
 8002002:	f045 0501 	orr.w	r5, r5, #1
 8002006:	f8c9 5020 	str.w	r5, [r9, #32]
 800200a:	f8d9 5020 	ldr.w	r5, [r9, #32]
 800200e:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8002012:	f005 0501 	and.w	r5, r5, #1
 8002016:	9501      	str	r5, [sp, #4]
 8002018:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800201c:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002020:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002022:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp = SYSCFG->EXTICR[position >> 2];
 8002026:	68bd      	ldr	r5, [r7, #8]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8002028:	fa0c fc0e 	lsl.w	ip, ip, lr
 800202c:	ea25 0c0c 	bic.w	ip, r5, ip
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002030:	4d21      	ldr	r5, [pc, #132]	; (80020b8 <HAL_GPIO_Init+0x188>)
 8002032:	42a8      	cmp	r0, r5
 8002034:	d034      	beq.n	80020a0 <HAL_GPIO_Init+0x170>
 8002036:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800203a:	42a8      	cmp	r0, r5
 800203c:	d032      	beq.n	80020a4 <HAL_GPIO_Init+0x174>
 800203e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002042:	42a8      	cmp	r0, r5
 8002044:	d030      	beq.n	80020a8 <HAL_GPIO_Init+0x178>
 8002046:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800204a:	42a8      	cmp	r0, r5
 800204c:	d02e      	beq.n	80020ac <HAL_GPIO_Init+0x17c>
 800204e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8002052:	42a8      	cmp	r0, r5
 8002054:	bf0c      	ite	eq
 8002056:	2504      	moveq	r5, #4
 8002058:	2505      	movne	r5, #5
 800205a:	fa05 f50e 	lsl.w	r5, r5, lr
 800205e:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8002062:	60bd      	str	r5, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002064:	43d7      	mvns	r7, r2
        temp = EXTI->IMR;
 8002066:	6825      	ldr	r5, [r4, #0]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002068:	f416 3f80 	tst.w	r6, #65536	; 0x10000
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800206c:	bf0c      	ite	eq
 800206e:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent);
 8002070:	4315      	orrne	r5, r2
        EXTI->IMR = temp;
 8002072:	6025      	str	r5, [r4, #0]
        temp = EXTI->EMR;
 8002074:	6865      	ldr	r5, [r4, #4]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002076:	f416 3f00 	tst.w	r6, #131072	; 0x20000
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800207a:	bf0c      	ite	eq
 800207c:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent);
 800207e:	4315      	orrne	r5, r2
        EXTI->EMR = temp;
 8002080:	6065      	str	r5, [r4, #4]
        temp = EXTI->RTSR;
 8002082:	68a5      	ldr	r5, [r4, #8]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002084:	f416 1f80 	tst.w	r6, #1048576	; 0x100000
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002088:	bf0c      	ite	eq
 800208a:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent);
 800208c:	4315      	orrne	r5, r2
        EXTI->RTSR = temp;
 800208e:	60a5      	str	r5, [r4, #8]
        temp = EXTI->FTSR;
 8002090:	68e5      	ldr	r5, [r4, #12]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002092:	02b6      	lsls	r6, r6, #10
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8002094:	bf54      	ite	pl
 8002096:	403d      	andpl	r5, r7
          SET_BIT(temp, iocurrent);
 8002098:	4315      	orrmi	r5, r2
        EXTI->FTSR = temp;
 800209a:	60e5      	str	r5, [r4, #12]
    position++;
 800209c:	3301      	adds	r3, #1
 800209e:	e74d      	b.n	8001f3c <HAL_GPIO_Init+0xc>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80020a0:	2500      	movs	r5, #0
 80020a2:	e7da      	b.n	800205a <HAL_GPIO_Init+0x12a>
 80020a4:	2501      	movs	r5, #1
 80020a6:	e7d8      	b.n	800205a <HAL_GPIO_Init+0x12a>
 80020a8:	2502      	movs	r5, #2
 80020aa:	e7d6      	b.n	800205a <HAL_GPIO_Init+0x12a>
 80020ac:	2503      	movs	r5, #3
 80020ae:	e7d4      	b.n	800205a <HAL_GPIO_Init+0x12a>
 80020b0:	40023800 	.word	0x40023800
 80020b4:	40010400 	.word	0x40010400
 80020b8:	40020000 	.word	0x40020000

080020bc <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80020bc:	6903      	ldr	r3, [r0, #16]
 80020be:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 80020c0:	bf14      	ite	ne
 80020c2:	2001      	movne	r0, #1
 80020c4:	2000      	moveq	r0, #0
 80020c6:	4770      	bx	lr

080020c8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80020c8:	b10a      	cbz	r2, 80020ce <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80020ca:	6181      	str	r1, [r0, #24]
  }
}
 80020cc:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 80020ce:	0409      	lsls	r1, r1, #16
 80020d0:	e7fb      	b.n	80020ca <HAL_GPIO_WritePin+0x2>

080020d2 <HAL_GPIO_EXTI_Callback>:
  UNUSED(GPIO_Pin);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80020d2:	4770      	bx	lr

080020d4 <HAL_GPIO_EXTI_IRQHandler>:
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80020d4:	4a04      	ldr	r2, [pc, #16]	; (80020e8 <HAL_GPIO_EXTI_IRQHandler+0x14>)
{
 80020d6:	b508      	push	{r3, lr}
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80020d8:	6951      	ldr	r1, [r2, #20]
 80020da:	4201      	tst	r1, r0
 80020dc:	d002      	beq.n	80020e4 <HAL_GPIO_EXTI_IRQHandler+0x10>
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80020de:	6150      	str	r0, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80020e0:	f7ff fff7 	bl	80020d2 <HAL_GPIO_EXTI_Callback>
}
 80020e4:	bd08      	pop	{r3, pc}
 80020e6:	bf00      	nop
 80020e8:	40010400 	.word	0x40010400

080020ec <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80020ec:	6801      	ldr	r1, [r0, #0]
 80020ee:	2200      	movs	r2, #0
 80020f0:	694b      	ldr	r3, [r1, #20]
 80020f2:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 80020f6:	d010      	beq.n	800211a <I2C_IsAcknowledgeFailed+0x2e>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80020f8:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80020fc:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 80020fe:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 8002100:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002102:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002106:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800210a:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800210c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002110:	f043 0304 	orr.w	r3, r3, #4
 8002114:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 8002116:	2001      	movs	r0, #1
 8002118:	4770      	bx	lr
  }
  return HAL_OK;
 800211a:	4618      	mov	r0, r3
}
 800211c:	4770      	bx	lr

0800211e <I2C_WaitOnFlagUntilTimeout>:
{
 800211e:	e92d 46f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r9, sl, lr}
 8002122:	4606      	mov	r6, r0
 8002124:	460f      	mov	r7, r1
 8002126:	4691      	mov	r9, r2
 8002128:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800212a:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800212e:	6833      	ldr	r3, [r6, #0]
 8002130:	f1ba 0f01 	cmp.w	sl, #1
 8002134:	bf0c      	ite	eq
 8002136:	695c      	ldreq	r4, [r3, #20]
 8002138:	699c      	ldrne	r4, [r3, #24]
 800213a:	ea27 0404 	bic.w	r4, r7, r4
 800213e:	b2a4      	uxth	r4, r4
 8002140:	fab4 f484 	clz	r4, r4
 8002144:	0964      	lsrs	r4, r4, #5
 8002146:	45a1      	cmp	r9, r4
 8002148:	d001      	beq.n	800214e <I2C_WaitOnFlagUntilTimeout+0x30>
  return HAL_OK;
 800214a:	2000      	movs	r0, #0
 800214c:	e017      	b.n	800217e <I2C_WaitOnFlagUntilTimeout+0x60>
    if (Timeout != HAL_MAX_DELAY)
 800214e:	1c6a      	adds	r2, r5, #1
 8002150:	d0ee      	beq.n	8002130 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002152:	f7ff fa67 	bl	8001624 <HAL_GetTick>
 8002156:	9b08      	ldr	r3, [sp, #32]
 8002158:	1ac0      	subs	r0, r0, r3
 800215a:	42a8      	cmp	r0, r5
 800215c:	d801      	bhi.n	8002162 <I2C_WaitOnFlagUntilTimeout+0x44>
 800215e:	2d00      	cmp	r5, #0
 8002160:	d1e5      	bne.n	800212e <I2C_WaitOnFlagUntilTimeout+0x10>
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002162:	2300      	movs	r3, #0
        hi2c->State             = HAL_I2C_STATE_READY;
 8002164:	2220      	movs	r2, #32
        return HAL_ERROR;
 8002166:	2001      	movs	r0, #1
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002168:	6333      	str	r3, [r6, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800216a:	f886 203d 	strb.w	r2, [r6, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800216e:	f886 303e 	strb.w	r3, [r6, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002172:	6c32      	ldr	r2, [r6, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002174:	f886 303c 	strb.w	r3, [r6, #60]	; 0x3c
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002178:	f042 0220 	orr.w	r2, r2, #32
 800217c:	6432      	str	r2, [r6, #64]	; 0x40
}
 800217e:	e8bd 86f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r9, sl, pc}

08002182 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 8002182:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002186:	4604      	mov	r4, r0
 8002188:	460f      	mov	r7, r1
 800218a:	4616      	mov	r6, r2
 800218c:	4698      	mov	r8, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800218e:	6825      	ldr	r5, [r4, #0]
 8002190:	6968      	ldr	r0, [r5, #20]
 8002192:	ea27 0000 	bic.w	r0, r7, r0
 8002196:	b280      	uxth	r0, r0
 8002198:	b1b8      	cbz	r0, 80021ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0x48>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800219a:	696b      	ldr	r3, [r5, #20]
 800219c:	055a      	lsls	r2, r3, #21
 800219e:	d516      	bpl.n	80021ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x4c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021a0:	682b      	ldr	r3, [r5, #0]
      hi2c->State               = HAL_I2C_STATE_READY;
 80021a2:	2220      	movs	r2, #32
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80021a8:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80021aa:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80021ae:	616b      	str	r3, [r5, #20]
      hi2c->PreviousState       = I2C_STATE_NONE;
 80021b0:	2300      	movs	r3, #0
 80021b2:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021b4:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021b8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80021bc:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80021be:	f042 0204 	orr.w	r2, r2, #4
        return HAL_ERROR;
 80021c2:	2001      	movs	r0, #1
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021c4:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80021c6:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80021ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if (Timeout != HAL_MAX_DELAY)
 80021ce:	1c73      	adds	r3, r6, #1
 80021d0:	d0de      	beq.n	8002190 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xe>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021d2:	f7ff fa27 	bl	8001624 <HAL_GetTick>
 80021d6:	eba0 0008 	sub.w	r0, r0, r8
 80021da:	42b0      	cmp	r0, r6
 80021dc:	d801      	bhi.n	80021e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
 80021de:	2e00      	cmp	r6, #0
 80021e0:	d1d5      	bne.n	800218e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80021e2:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80021e4:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80021e6:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80021e8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021ec:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021f0:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80021f2:	f042 0220 	orr.w	r2, r2, #32
 80021f6:	e7e4      	b.n	80021c2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x40>

080021f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 80021f8:	b570      	push	{r4, r5, r6, lr}
 80021fa:	4604      	mov	r4, r0
 80021fc:	460d      	mov	r5, r1
 80021fe:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002200:	6821      	ldr	r1, [r4, #0]
 8002202:	694b      	ldr	r3, [r1, #20]
 8002204:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8002208:	d001      	beq.n	800220e <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 800220a:	2000      	movs	r0, #0
 800220c:	e010      	b.n	8002230 <I2C_WaitOnRXNEFlagUntilTimeout+0x38>
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800220e:	694a      	ldr	r2, [r1, #20]
 8002210:	06d2      	lsls	r2, r2, #27
 8002212:	d50e      	bpl.n	8002232 <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002214:	f06f 0210 	mvn.w	r2, #16
 8002218:	614a      	str	r2, [r1, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 800221a:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 800221c:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800221e:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002222:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002226:	6c22      	ldr	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002228:	2001      	movs	r0, #1
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800222a:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800222c:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 8002230:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002232:	f7ff f9f7 	bl	8001624 <HAL_GetTick>
 8002236:	1b80      	subs	r0, r0, r6
 8002238:	42a8      	cmp	r0, r5
 800223a:	d801      	bhi.n	8002240 <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 800223c:	2d00      	cmp	r5, #0
 800223e:	d1df      	bne.n	8002200 <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002240:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8002242:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002244:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002246:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800224a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800224e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8002250:	f042 0220 	orr.w	r2, r2, #32
 8002254:	e7e8      	b.n	8002228 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

08002256 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8002256:	b570      	push	{r4, r5, r6, lr}
 8002258:	4604      	mov	r4, r0
 800225a:	460d      	mov	r5, r1
 800225c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800225e:	6823      	ldr	r3, [r4, #0]
 8002260:	695b      	ldr	r3, [r3, #20]
 8002262:	075b      	lsls	r3, r3, #29
 8002264:	d501      	bpl.n	800226a <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8002266:	2000      	movs	r0, #0
}
 8002268:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800226a:	4620      	mov	r0, r4
 800226c:	f7ff ff3e 	bl	80020ec <I2C_IsAcknowledgeFailed>
 8002270:	b9a8      	cbnz	r0, 800229e <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8002272:	1c6a      	adds	r2, r5, #1
 8002274:	d0f3      	beq.n	800225e <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002276:	f7ff f9d5 	bl	8001624 <HAL_GetTick>
 800227a:	1b80      	subs	r0, r0, r6
 800227c:	42a8      	cmp	r0, r5
 800227e:	d801      	bhi.n	8002284 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8002280:	2d00      	cmp	r5, #0
 8002282:	d1ec      	bne.n	800225e <I2C_WaitOnBTFFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002284:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8002286:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002288:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800228a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800228e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002292:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8002294:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002298:	f042 0220 	orr.w	r2, r2, #32
 800229c:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 800229e:	2001      	movs	r0, #1
 80022a0:	e7e2      	b.n	8002268 <I2C_WaitOnBTFFlagUntilTimeout+0x12>

080022a2 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 80022a2:	b570      	push	{r4, r5, r6, lr}
 80022a4:	4604      	mov	r4, r0
 80022a6:	460d      	mov	r5, r1
 80022a8:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80022aa:	6823      	ldr	r3, [r4, #0]
 80022ac:	695b      	ldr	r3, [r3, #20]
 80022ae:	061b      	lsls	r3, r3, #24
 80022b0:	d501      	bpl.n	80022b6 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 80022b2:	2000      	movs	r0, #0
}
 80022b4:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80022b6:	4620      	mov	r0, r4
 80022b8:	f7ff ff18 	bl	80020ec <I2C_IsAcknowledgeFailed>
 80022bc:	b9a8      	cbnz	r0, 80022ea <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 80022be:	1c6a      	adds	r2, r5, #1
 80022c0:	d0f3      	beq.n	80022aa <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80022c2:	f7ff f9af 	bl	8001624 <HAL_GetTick>
 80022c6:	1b80      	subs	r0, r0, r6
 80022c8:	42a8      	cmp	r0, r5
 80022ca:	d801      	bhi.n	80022d0 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 80022cc:	2d00      	cmp	r5, #0
 80022ce:	d1ec      	bne.n	80022aa <I2C_WaitOnTXEFlagUntilTimeout+0x8>
        hi2c->PreviousState       = I2C_STATE_NONE;
 80022d0:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 80022d2:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 80022d4:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80022d6:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80022da:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022de:	6c22      	ldr	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 80022e0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80022e4:	f042 0220 	orr.w	r2, r2, #32
 80022e8:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 80022ea:	2001      	movs	r0, #1
 80022ec:	e7e2      	b.n	80022b4 <I2C_WaitOnTXEFlagUntilTimeout+0x12>
	...

080022f0 <HAL_I2C_Init>:
{
 80022f0:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 80022f2:	4604      	mov	r4, r0
 80022f4:	b908      	cbnz	r0, 80022fa <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 80022f6:	2001      	movs	r0, #1
}
 80022f8:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80022fa:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80022fe:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002302:	b91b      	cbnz	r3, 800230c <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 8002304:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8002308:	f7fe fec0 	bl	800108c <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 800230c:	2324      	movs	r3, #36	; 0x24
 800230e:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8002312:	6823      	ldr	r3, [r4, #0]
 8002314:	681a      	ldr	r2, [r3, #0]
 8002316:	f022 0201 	bic.w	r2, r2, #1
 800231a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002322:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002324:	681a      	ldr	r2, [r3, #0]
 8002326:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800232a:	601a      	str	r2, [r3, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800232c:	f000 fe24 	bl	8002f78 <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002330:	4a3f      	ldr	r2, [pc, #252]	; (8002430 <HAL_I2C_Init+0x140>)
 8002332:	6863      	ldr	r3, [r4, #4]
 8002334:	4293      	cmp	r3, r2
 8002336:	bf94      	ite	ls
 8002338:	4a3e      	ldrls	r2, [pc, #248]	; (8002434 <HAL_I2C_Init+0x144>)
 800233a:	4a3f      	ldrhi	r2, [pc, #252]	; (8002438 <HAL_I2C_Init+0x148>)
 800233c:	4290      	cmp	r0, r2
 800233e:	bf8c      	ite	hi
 8002340:	2200      	movhi	r2, #0
 8002342:	2201      	movls	r2, #1
 8002344:	2a00      	cmp	r2, #0
 8002346:	d1d6      	bne.n	80022f6 <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002348:	4e39      	ldr	r6, [pc, #228]	; (8002430 <HAL_I2C_Init+0x140>)
  freqrange = I2C_FREQRANGE(pclk1);
 800234a:	493c      	ldr	r1, [pc, #240]	; (800243c <HAL_I2C_Init+0x14c>)
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800234c:	42b3      	cmp	r3, r6
  freqrange = I2C_FREQRANGE(pclk1);
 800234e:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002352:	bf88      	it	hi
 8002354:	f44f 7696 	movhi.w	r6, #300	; 0x12c
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002358:	6822      	ldr	r2, [r4, #0]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800235a:	f100 30ff 	add.w	r0, r0, #4294967295
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800235e:	6855      	ldr	r5, [r2, #4]
 8002360:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 8002364:	ea45 0501 	orr.w	r5, r5, r1
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002368:	bf82      	ittt	hi
 800236a:	4371      	mulhi	r1, r6
 800236c:	f44f 767a 	movhi.w	r6, #1000	; 0x3e8
 8002370:	fbb1 f1f6 	udivhi	r1, r1, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002374:	6055      	str	r5, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002376:	6a15      	ldr	r5, [r2, #32]
 8002378:	3101      	adds	r1, #1
 800237a:	f025 053f 	bic.w	r5, r5, #63	; 0x3f
 800237e:	4329      	orrs	r1, r5
 8002380:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002382:	69d1      	ldr	r1, [r2, #28]
 8002384:	4d2a      	ldr	r5, [pc, #168]	; (8002430 <HAL_I2C_Init+0x140>)
 8002386:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 800238a:	42ab      	cmp	r3, r5
 800238c:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8002390:	d832      	bhi.n	80023f8 <HAL_I2C_Init+0x108>
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	fbb0 f0f3 	udiv	r0, r0, r3
 8002398:	1c43      	adds	r3, r0, #1
 800239a:	f640 70fc 	movw	r0, #4092	; 0xffc
 800239e:	4203      	tst	r3, r0
 80023a0:	d042      	beq.n	8002428 <HAL_I2C_Init+0x138>
 80023a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80023a6:	430b      	orrs	r3, r1
 80023a8:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80023aa:	6811      	ldr	r1, [r2, #0]
 80023ac:	e9d4 3007 	ldrd	r3, r0, [r4, #28]
 80023b0:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80023b4:	4303      	orrs	r3, r0
 80023b6:	430b      	orrs	r3, r1
 80023b8:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80023ba:	6891      	ldr	r1, [r2, #8]
 80023bc:	e9d4 0303 	ldrd	r0, r3, [r4, #12]
 80023c0:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 80023c4:	4303      	orrs	r3, r0
 80023c6:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80023ca:	430b      	orrs	r3, r1
 80023cc:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80023ce:	68d1      	ldr	r1, [r2, #12]
 80023d0:	e9d4 3005 	ldrd	r3, r0, [r4, #20]
 80023d4:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80023d8:	4303      	orrs	r3, r0
 80023da:	430b      	orrs	r3, r1
 80023dc:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 80023de:	6813      	ldr	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023e0:	2000      	movs	r0, #0
  __HAL_I2C_ENABLE(hi2c);
 80023e2:	f043 0301 	orr.w	r3, r3, #1
 80023e6:	6013      	str	r3, [r2, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 80023e8:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80023ea:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80023ec:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80023f0:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80023f2:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 80023f6:	e77f      	b.n	80022f8 <HAL_I2C_Init+0x8>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80023f8:	68a5      	ldr	r5, [r4, #8]
 80023fa:	b955      	cbnz	r5, 8002412 <HAL_I2C_Init+0x122>
 80023fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8002400:	fbb0 f3f3 	udiv	r3, r0, r3
 8002404:	3301      	adds	r3, #1
 8002406:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800240a:	b17b      	cbz	r3, 800242c <HAL_I2C_Init+0x13c>
 800240c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002410:	e7c9      	b.n	80023a6 <HAL_I2C_Init+0xb6>
 8002412:	2519      	movs	r5, #25
 8002414:	436b      	muls	r3, r5
 8002416:	fbb0 f3f3 	udiv	r3, r0, r3
 800241a:	3301      	adds	r3, #1
 800241c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002420:	b123      	cbz	r3, 800242c <HAL_I2C_Init+0x13c>
 8002422:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002426:	e7be      	b.n	80023a6 <HAL_I2C_Init+0xb6>
 8002428:	2304      	movs	r3, #4
 800242a:	e7bc      	b.n	80023a6 <HAL_I2C_Init+0xb6>
 800242c:	2301      	movs	r3, #1
 800242e:	e7ba      	b.n	80023a6 <HAL_I2C_Init+0xb6>
 8002430:	000186a0 	.word	0x000186a0
 8002434:	001e847f 	.word	0x001e847f
 8002438:	003d08ff 	.word	0x003d08ff
 800243c:	000f4240 	.word	0x000f4240

08002440 <HAL_I2C_Master_Transmit>:
{
 8002440:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002444:	4604      	mov	r4, r0
 8002446:	b085      	sub	sp, #20
 8002448:	4698      	mov	r8, r3
 800244a:	460d      	mov	r5, r1
 800244c:	4691      	mov	r9, r2
 800244e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8002450:	f7ff f8e8 	bl	8001624 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002454:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8002458:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800245a:	2b20      	cmp	r3, #32
 800245c:	d004      	beq.n	8002468 <HAL_I2C_Master_Transmit+0x28>
    return HAL_BUSY;
 800245e:	2502      	movs	r5, #2
}
 8002460:	4628      	mov	r0, r5
 8002462:	b005      	add	sp, #20
 8002464:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002468:	9000      	str	r0, [sp, #0]
 800246a:	2319      	movs	r3, #25
 800246c:	2201      	movs	r2, #1
 800246e:	4620      	mov	r0, r4
 8002470:	495b      	ldr	r1, [pc, #364]	; (80025e0 <HAL_I2C_Master_Transmit+0x1a0>)
 8002472:	f7ff fe54 	bl	800211e <I2C_WaitOnFlagUntilTimeout>
 8002476:	2800      	cmp	r0, #0
 8002478:	d1f1      	bne.n	800245e <HAL_I2C_Master_Transmit+0x1e>
    __HAL_LOCK(hi2c);
 800247a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800247e:	2b01      	cmp	r3, #1
 8002480:	d0ed      	beq.n	800245e <HAL_I2C_Master_Transmit+0x1e>
 8002482:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002484:	6821      	ldr	r1, [r4, #0]
    __HAL_LOCK(hi2c);
 8002486:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800248a:	680b      	ldr	r3, [r1, #0]
 800248c:	07da      	lsls	r2, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 800248e:	bf5e      	ittt	pl
 8002490:	680b      	ldrpl	r3, [r1, #0]
 8002492:	f043 0301 	orrpl.w	r3, r3, #1
 8002496:	600b      	strpl	r3, [r1, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002498:	680b      	ldr	r3, [r1, #0]
 800249a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800249e:	600b      	str	r3, [r1, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80024a0:	2321      	movs	r3, #33	; 0x21
 80024a2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80024a6:	2310      	movs	r3, #16
 80024a8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80024ac:	2300      	movs	r3, #0
 80024ae:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 80024b0:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80024b4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 80024b6:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 80024ba:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80024bc:	4b49      	ldr	r3, [pc, #292]	; (80025e4 <HAL_I2C_Master_Transmit+0x1a4>)
 80024be:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80024c0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80024c2:	2b08      	cmp	r3, #8
 80024c4:	d004      	beq.n	80024d0 <HAL_I2C_Master_Transmit+0x90>
 80024c6:	2b01      	cmp	r3, #1
 80024c8:	d002      	beq.n	80024d0 <HAL_I2C_Master_Transmit+0x90>
 80024ca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80024ce:	d104      	bne.n	80024da <HAL_I2C_Master_Transmit+0x9a>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80024d0:	680b      	ldr	r3, [r1, #0]
 80024d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024d6:	600b      	str	r3, [r1, #0]
 80024d8:	e002      	b.n	80024e0 <HAL_I2C_Master_Transmit+0xa0>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80024da:	6b23      	ldr	r3, [r4, #48]	; 0x30
 80024dc:	2b12      	cmp	r3, #18
 80024de:	d0f7      	beq.n	80024d0 <HAL_I2C_Master_Transmit+0x90>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80024e0:	2200      	movs	r2, #0
 80024e2:	463b      	mov	r3, r7
 80024e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80024e8:	4620      	mov	r0, r4
 80024ea:	9600      	str	r6, [sp, #0]
 80024ec:	f7ff fe17 	bl	800211e <I2C_WaitOnFlagUntilTimeout>
 80024f0:	6822      	ldr	r2, [r4, #0]
 80024f2:	b138      	cbz	r0, 8002504 <HAL_I2C_Master_Transmit+0xc4>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80024f4:	6813      	ldr	r3, [r2, #0]
 80024f6:	05db      	lsls	r3, r3, #23
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80024f8:	bf44      	itt	mi
 80024fa:	f44f 7300 	movmi.w	r3, #512	; 0x200
 80024fe:	6423      	strmi	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 8002500:	2501      	movs	r5, #1
 8002502:	e7ad      	b.n	8002460 <HAL_I2C_Master_Transmit+0x20>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002504:	6923      	ldr	r3, [r4, #16]
 8002506:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800250a:	d121      	bne.n	8002550 <HAL_I2C_Master_Transmit+0x110>
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800250c:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
 8002510:	6115      	str	r5, [r2, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002512:	4633      	mov	r3, r6
 8002514:	463a      	mov	r2, r7
 8002516:	4620      	mov	r0, r4
 8002518:	4933      	ldr	r1, [pc, #204]	; (80025e8 <HAL_I2C_Master_Transmit+0x1a8>)
 800251a:	f7ff fe32 	bl	8002182 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800251e:	4605      	mov	r5, r0
 8002520:	2800      	cmp	r0, #0
 8002522:	d1ed      	bne.n	8002500 <HAL_I2C_Master_Transmit+0xc0>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002524:	6823      	ldr	r3, [r4, #0]
 8002526:	9003      	str	r0, [sp, #12]
 8002528:	695a      	ldr	r2, [r3, #20]
 800252a:	9203      	str	r2, [sp, #12]
 800252c:	699b      	ldr	r3, [r3, #24]
 800252e:	9303      	str	r3, [sp, #12]
 8002530:	9b03      	ldr	r3, [sp, #12]
    while (hi2c->XferSize > 0U)
 8002532:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002534:	b9f3      	cbnz	r3, 8002574 <HAL_I2C_Master_Transmit+0x134>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002536:	6821      	ldr	r1, [r4, #0]
 8002538:	680a      	ldr	r2, [r1, #0]
 800253a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800253e:	600a      	str	r2, [r1, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8002540:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8002542:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 8002546:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800254a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 800254e:	e787      	b.n	8002460 <HAL_I2C_Master_Transmit+0x20>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002550:	11eb      	asrs	r3, r5, #7
 8002552:	f003 0306 	and.w	r3, r3, #6
 8002556:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
 800255a:	6113      	str	r3, [r2, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800255c:	4620      	mov	r0, r4
 800255e:	4633      	mov	r3, r6
 8002560:	463a      	mov	r2, r7
 8002562:	4922      	ldr	r1, [pc, #136]	; (80025ec <HAL_I2C_Master_Transmit+0x1ac>)
 8002564:	f7ff fe0d 	bl	8002182 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002568:	2800      	cmp	r0, #0
 800256a:	d1c9      	bne.n	8002500 <HAL_I2C_Master_Transmit+0xc0>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800256c:	6823      	ldr	r3, [r4, #0]
 800256e:	b2ed      	uxtb	r5, r5
 8002570:	611d      	str	r5, [r3, #16]
 8002572:	e7ce      	b.n	8002512 <HAL_I2C_Master_Transmit+0xd2>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002574:	4632      	mov	r2, r6
 8002576:	4639      	mov	r1, r7
 8002578:	4620      	mov	r0, r4
 800257a:	f7ff fe92 	bl	80022a2 <I2C_WaitOnTXEFlagUntilTimeout>
 800257e:	b140      	cbz	r0, 8002592 <HAL_I2C_Master_Transmit+0x152>
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002580:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002582:	2b04      	cmp	r3, #4
 8002584:	d1bc      	bne.n	8002500 <HAL_I2C_Master_Transmit+0xc0>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002586:	6822      	ldr	r2, [r4, #0]
 8002588:	6813      	ldr	r3, [r2, #0]
 800258a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800258e:	6013      	str	r3, [r2, #0]
 8002590:	e7b6      	b.n	8002500 <HAL_I2C_Master_Transmit+0xc0>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002592:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002594:	6820      	ldr	r0, [r4, #0]
 8002596:	461a      	mov	r2, r3
 8002598:	f812 1b01 	ldrb.w	r1, [r2], #1
 800259c:	6101      	str	r1, [r0, #16]
      hi2c->pBuffPtr++;
 800259e:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 80025a0:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
 80025a2:	3a01      	subs	r2, #1
 80025a4:	b292      	uxth	r2, r2
 80025a6:	8562      	strh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 80025a8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025aa:	f8d0 c014 	ldr.w	ip, [r0, #20]
      hi2c->XferSize--;
 80025ae:	1e51      	subs	r1, r2, #1
 80025b0:	b289      	uxth	r1, r1
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025b2:	f01c 0f04 	tst.w	ip, #4
      hi2c->XferSize--;
 80025b6:	8521      	strh	r1, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80025b8:	d00a      	beq.n	80025d0 <HAL_I2C_Master_Transmit+0x190>
 80025ba:	b149      	cbz	r1, 80025d0 <HAL_I2C_Master_Transmit+0x190>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025bc:	7859      	ldrb	r1, [r3, #1]
        hi2c->pBuffPtr++;
 80025be:	3302      	adds	r3, #2
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80025c0:	6101      	str	r1, [r0, #16]
        hi2c->pBuffPtr++;
 80025c2:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 80025c4:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80025c6:	3a02      	subs	r2, #2
        hi2c->XferCount--;
 80025c8:	3b01      	subs	r3, #1
 80025ca:	b29b      	uxth	r3, r3
 80025cc:	8563      	strh	r3, [r4, #42]	; 0x2a
        hi2c->XferSize--;
 80025ce:	8522      	strh	r2, [r4, #40]	; 0x28
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80025d0:	4632      	mov	r2, r6
 80025d2:	4639      	mov	r1, r7
 80025d4:	4620      	mov	r0, r4
 80025d6:	f7ff fe3e 	bl	8002256 <I2C_WaitOnBTFFlagUntilTimeout>
 80025da:	2800      	cmp	r0, #0
 80025dc:	d0a9      	beq.n	8002532 <HAL_I2C_Master_Transmit+0xf2>
 80025de:	e7cf      	b.n	8002580 <HAL_I2C_Master_Transmit+0x140>
 80025e0:	00100002 	.word	0x00100002
 80025e4:	ffff0000 	.word	0xffff0000
 80025e8:	00010002 	.word	0x00010002
 80025ec:	00010008 	.word	0x00010008

080025f0 <HAL_I2C_Master_Receive>:
{
 80025f0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80025f4:	4604      	mov	r4, r0
 80025f6:	b089      	sub	sp, #36	; 0x24
 80025f8:	4698      	mov	r8, r3
 80025fa:	460e      	mov	r6, r1
 80025fc:	4691      	mov	r9, r2
 80025fe:	9f10      	ldr	r7, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8002600:	f7ff f810 	bl	8001624 <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8002604:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
  uint32_t tickstart = HAL_GetTick();
 8002608:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 800260a:	2b20      	cmp	r3, #32
 800260c:	d004      	beq.n	8002618 <HAL_I2C_Master_Receive+0x28>
    return HAL_BUSY;
 800260e:	2602      	movs	r6, #2
}
 8002610:	4630      	mov	r0, r6
 8002612:	b009      	add	sp, #36	; 0x24
 8002614:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002618:	9000      	str	r0, [sp, #0]
 800261a:	2319      	movs	r3, #25
 800261c:	2201      	movs	r2, #1
 800261e:	4620      	mov	r0, r4
 8002620:	4998      	ldr	r1, [pc, #608]	; (8002884 <HAL_I2C_Master_Receive+0x294>)
 8002622:	f7ff fd7c 	bl	800211e <I2C_WaitOnFlagUntilTimeout>
 8002626:	2800      	cmp	r0, #0
 8002628:	d1f1      	bne.n	800260e <HAL_I2C_Master_Receive+0x1e>
    __HAL_LOCK(hi2c);
 800262a:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 800262e:	2b01      	cmp	r3, #1
 8002630:	d0ed      	beq.n	800260e <HAL_I2C_Master_Receive+0x1e>
 8002632:	2301      	movs	r3, #1
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002634:	6821      	ldr	r1, [r4, #0]
    __HAL_LOCK(hi2c);
 8002636:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800263a:	680b      	ldr	r3, [r1, #0]
 800263c:	07db      	lsls	r3, r3, #31
      __HAL_I2C_ENABLE(hi2c);
 800263e:	bf5e      	ittt	pl
 8002640:	680b      	ldrpl	r3, [r1, #0]
 8002642:	f043 0301 	orrpl.w	r3, r3, #1
 8002646:	600b      	strpl	r3, [r1, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002648:	680b      	ldr	r3, [r1, #0]
 800264a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800264e:	600b      	str	r3, [r1, #0]
    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002650:	2322      	movs	r3, #34	; 0x22
 8002652:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002656:	2310      	movs	r3, #16
 8002658:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800265c:	2300      	movs	r3, #0
 800265e:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->XferCount   = Size;
 8002660:	f8a4 802a 	strh.w	r8, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002664:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
    hi2c->pBuffPtr    = pData;
 8002666:	f8c4 9024 	str.w	r9, [r4, #36]	; 0x24
    hi2c->XferSize    = hi2c->XferCount;
 800266a:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800266c:	4b86      	ldr	r3, [pc, #536]	; (8002888 <HAL_I2C_Master_Receive+0x298>)
 800266e:	62e3      	str	r3, [r4, #44]	; 0x2c
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002670:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002672:	680a      	ldr	r2, [r1, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002674:	2b08      	cmp	r3, #8
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002676:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800267a:	600a      	str	r2, [r1, #0]
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800267c:	d004      	beq.n	8002688 <HAL_I2C_Master_Receive+0x98>
 800267e:	2b01      	cmp	r3, #1
 8002680:	d002      	beq.n	8002688 <HAL_I2C_Master_Receive+0x98>
 8002682:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002686:	d104      	bne.n	8002692 <HAL_I2C_Master_Receive+0xa2>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002688:	680b      	ldr	r3, [r1, #0]
 800268a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800268e:	600b      	str	r3, [r1, #0]
 8002690:	e002      	b.n	8002698 <HAL_I2C_Master_Receive+0xa8>
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8002692:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8002694:	2b11      	cmp	r3, #17
 8002696:	d0f7      	beq.n	8002688 <HAL_I2C_Master_Receive+0x98>
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002698:	463b      	mov	r3, r7
 800269a:	2200      	movs	r2, #0
 800269c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80026a0:	4620      	mov	r0, r4
 80026a2:	9500      	str	r5, [sp, #0]
 80026a4:	f7ff fd3b 	bl	800211e <I2C_WaitOnFlagUntilTimeout>
 80026a8:	6823      	ldr	r3, [r4, #0]
 80026aa:	b138      	cbz	r0, 80026bc <HAL_I2C_Master_Receive+0xcc>
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026ac:	681b      	ldr	r3, [r3, #0]
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80026ae:	05d8      	lsls	r0, r3, #23
 80026b0:	d502      	bpl.n	80026b8 <HAL_I2C_Master_Receive+0xc8>
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80026b2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80026b6:	6423      	str	r3, [r4, #64]	; 0x40
      return HAL_ERROR;
 80026b8:	2601      	movs	r6, #1
 80026ba:	e7a9      	b.n	8002610 <HAL_I2C_Master_Receive+0x20>
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80026bc:	6922      	ldr	r2, [r4, #16]
 80026be:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
 80026c2:	d127      	bne.n	8002714 <HAL_I2C_Master_Receive+0x124>
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80026c4:	f046 0601 	orr.w	r6, r6, #1
 80026c8:	b2f6      	uxtb	r6, r6
 80026ca:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80026cc:	462b      	mov	r3, r5
 80026ce:	463a      	mov	r2, r7
 80026d0:	4620      	mov	r0, r4
 80026d2:	496e      	ldr	r1, [pc, #440]	; (800288c <HAL_I2C_Master_Receive+0x29c>)
 80026d4:	f7ff fd55 	bl	8002182 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80026d8:	4606      	mov	r6, r0
 80026da:	2800      	cmp	r0, #0
 80026dc:	d1ec      	bne.n	80026b8 <HAL_I2C_Master_Receive+0xc8>
    if (hi2c->XferSize == 0U)
 80026de:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026e0:	6821      	ldr	r1, [r4, #0]
    if (hi2c->XferSize == 0U)
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d14b      	bne.n	800277e <HAL_I2C_Master_Receive+0x18e>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80026e6:	9003      	str	r0, [sp, #12]
 80026e8:	694b      	ldr	r3, [r1, #20]
 80026ea:	9303      	str	r3, [sp, #12]
 80026ec:	698b      	ldr	r3, [r1, #24]
 80026ee:	9303      	str	r3, [sp, #12]
 80026f0:	9b03      	ldr	r3, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80026f2:	680b      	ldr	r3, [r1, #0]
 80026f4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026f8:	600b      	str	r3, [r1, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80026fa:	f8df 8194 	ldr.w	r8, [pc, #404]	; 8002890 <HAL_I2C_Master_Receive+0x2a0>
    while (hi2c->XferSize > 0U)
 80026fe:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002700:	2b00      	cmp	r3, #0
 8002702:	d164      	bne.n	80027ce <HAL_I2C_Master_Receive+0x1de>
    hi2c->State = HAL_I2C_STATE_READY;
 8002704:	2220      	movs	r2, #32
    __HAL_UNLOCK(hi2c);
 8002706:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    hi2c->State = HAL_I2C_STATE_READY;
 800270a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800270e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    return HAL_OK;
 8002712:	e77d      	b.n	8002610 <HAL_I2C_Master_Receive+0x20>
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002714:	ea4f 18e6 	mov.w	r8, r6, asr #7
 8002718:	f008 0806 	and.w	r8, r8, #6
 800271c:	f048 02f0 	orr.w	r2, r8, #240	; 0xf0
 8002720:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002722:	4620      	mov	r0, r4
 8002724:	462b      	mov	r3, r5
 8002726:	463a      	mov	r2, r7
 8002728:	495a      	ldr	r1, [pc, #360]	; (8002894 <HAL_I2C_Master_Receive+0x2a4>)
 800272a:	f7ff fd2a 	bl	8002182 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800272e:	2800      	cmp	r0, #0
 8002730:	d1c2      	bne.n	80026b8 <HAL_I2C_Master_Receive+0xc8>
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002732:	6823      	ldr	r3, [r4, #0]
 8002734:	b2f6      	uxtb	r6, r6
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002736:	463a      	mov	r2, r7
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002738:	611e      	str	r6, [r3, #16]
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800273a:	4620      	mov	r0, r4
 800273c:	462b      	mov	r3, r5
 800273e:	4953      	ldr	r1, [pc, #332]	; (800288c <HAL_I2C_Master_Receive+0x29c>)
 8002740:	f7ff fd1f 	bl	8002182 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002744:	4602      	mov	r2, r0
 8002746:	2800      	cmp	r0, #0
 8002748:	d1b6      	bne.n	80026b8 <HAL_I2C_Master_Receive+0xc8>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800274a:	6823      	ldr	r3, [r4, #0]
 800274c:	9007      	str	r0, [sp, #28]
 800274e:	6959      	ldr	r1, [r3, #20]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002750:	4620      	mov	r0, r4
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002752:	9107      	str	r1, [sp, #28]
 8002754:	6999      	ldr	r1, [r3, #24]
 8002756:	9107      	str	r1, [sp, #28]
 8002758:	9907      	ldr	r1, [sp, #28]
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800275a:	6819      	ldr	r1, [r3, #0]
 800275c:	f441 7180 	orr.w	r1, r1, #256	; 0x100
 8002760:	6019      	str	r1, [r3, #0]
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002762:	463b      	mov	r3, r7
 8002764:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002768:	9500      	str	r5, [sp, #0]
 800276a:	f7ff fcd8 	bl	800211e <I2C_WaitOnFlagUntilTimeout>
 800276e:	6822      	ldr	r2, [r4, #0]
 8002770:	b108      	cbz	r0, 8002776 <HAL_I2C_Master_Receive+0x186>
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002772:	6813      	ldr	r3, [r2, #0]
 8002774:	e79b      	b.n	80026ae <HAL_I2C_Master_Receive+0xbe>
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8002776:	f048 03f1 	orr.w	r3, r8, #241	; 0xf1
 800277a:	6113      	str	r3, [r2, #16]
 800277c:	e7a6      	b.n	80026cc <HAL_I2C_Master_Receive+0xdc>
    else if (hi2c->XferSize == 1U)
 800277e:	2b01      	cmp	r3, #1
 8002780:	d10a      	bne.n	8002798 <HAL_I2C_Master_Receive+0x1a8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002782:	680b      	ldr	r3, [r1, #0]
 8002784:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002788:	600b      	str	r3, [r1, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800278a:	9004      	str	r0, [sp, #16]
 800278c:	694b      	ldr	r3, [r1, #20]
 800278e:	9304      	str	r3, [sp, #16]
 8002790:	698b      	ldr	r3, [r1, #24]
 8002792:	9304      	str	r3, [sp, #16]
 8002794:	9b04      	ldr	r3, [sp, #16]
 8002796:	e7ac      	b.n	80026f2 <HAL_I2C_Master_Receive+0x102>
    else if (hi2c->XferSize == 2U)
 8002798:	2b02      	cmp	r3, #2
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800279a:	680b      	ldr	r3, [r1, #0]
    else if (hi2c->XferSize == 2U)
 800279c:	d10d      	bne.n	80027ba <HAL_I2C_Master_Receive+0x1ca>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800279e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80027a2:	600b      	str	r3, [r1, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80027a4:	680b      	ldr	r3, [r1, #0]
 80027a6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80027aa:	600b      	str	r3, [r1, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ac:	9005      	str	r0, [sp, #20]
 80027ae:	694b      	ldr	r3, [r1, #20]
 80027b0:	9305      	str	r3, [sp, #20]
 80027b2:	698b      	ldr	r3, [r1, #24]
 80027b4:	9305      	str	r3, [sp, #20]
 80027b6:	9b05      	ldr	r3, [sp, #20]
 80027b8:	e79f      	b.n	80026fa <HAL_I2C_Master_Receive+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80027ba:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027be:	600b      	str	r3, [r1, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027c0:	9006      	str	r0, [sp, #24]
 80027c2:	694b      	ldr	r3, [r1, #20]
 80027c4:	9306      	str	r3, [sp, #24]
 80027c6:	698b      	ldr	r3, [r1, #24]
 80027c8:	9306      	str	r3, [sp, #24]
 80027ca:	9b06      	ldr	r3, [sp, #24]
 80027cc:	e795      	b.n	80026fa <HAL_I2C_Master_Receive+0x10a>
      if (hi2c->XferSize <= 3U)
 80027ce:	2b03      	cmp	r3, #3
 80027d0:	d862      	bhi.n	8002898 <HAL_I2C_Master_Receive+0x2a8>
        if (hi2c->XferSize == 1U)
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d116      	bne.n	8002804 <HAL_I2C_Master_Receive+0x214>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027d6:	462a      	mov	r2, r5
 80027d8:	4639      	mov	r1, r7
 80027da:	4620      	mov	r0, r4
 80027dc:	f7ff fd0c 	bl	80021f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80027e0:	2800      	cmp	r0, #0
 80027e2:	f47f af69 	bne.w	80026b8 <HAL_I2C_Master_Receive+0xc8>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80027e6:	6823      	ldr	r3, [r4, #0]
 80027e8:	691a      	ldr	r2, [r3, #16]
 80027ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80027ec:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 80027ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80027f0:	3301      	adds	r3, #1
 80027f2:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 80027f4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80027f6:	3b01      	subs	r3, #1
 80027f8:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 80027fa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80027fc:	3b01      	subs	r3, #1
 80027fe:	b29b      	uxth	r3, r3
 8002800:	8563      	strh	r3, [r4, #42]	; 0x2a
 8002802:	e77c      	b.n	80026fe <HAL_I2C_Master_Receive+0x10e>
        else if (hi2c->XferSize == 2U)
 8002804:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002806:	f04f 0200 	mov.w	r2, #0
 800280a:	463b      	mov	r3, r7
 800280c:	4641      	mov	r1, r8
 800280e:	4620      	mov	r0, r4
 8002810:	9500      	str	r5, [sp, #0]
        else if (hi2c->XferSize == 2U)
 8002812:	d11a      	bne.n	800284a <HAL_I2C_Master_Receive+0x25a>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002814:	f7ff fc83 	bl	800211e <I2C_WaitOnFlagUntilTimeout>
 8002818:	2800      	cmp	r0, #0
 800281a:	f47f af4d 	bne.w	80026b8 <HAL_I2C_Master_Receive+0xc8>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800281e:	6823      	ldr	r3, [r4, #0]
 8002820:	681a      	ldr	r2, [r3, #0]
 8002822:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002826:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002828:	691a      	ldr	r2, [r3, #16]
 800282a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800282c:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 800282e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8002830:	1c53      	adds	r3, r2, #1
 8002832:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002834:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8002836:	3b01      	subs	r3, #1
 8002838:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 800283a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800283c:	3b01      	subs	r3, #1
 800283e:	b29b      	uxth	r3, r3
 8002840:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002842:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	7053      	strb	r3, [r2, #1]
 8002848:	e7d1      	b.n	80027ee <HAL_I2C_Master_Receive+0x1fe>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800284a:	f7ff fc68 	bl	800211e <I2C_WaitOnFlagUntilTimeout>
 800284e:	4602      	mov	r2, r0
 8002850:	2800      	cmp	r0, #0
 8002852:	f47f af31 	bne.w	80026b8 <HAL_I2C_Master_Receive+0xc8>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002856:	6823      	ldr	r3, [r4, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002858:	4620      	mov	r0, r4
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800285a:	6819      	ldr	r1, [r3, #0]
 800285c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8002860:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002862:	6919      	ldr	r1, [r3, #16]
 8002864:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8002866:	7019      	strb	r1, [r3, #0]
          hi2c->pBuffPtr++;
 8002868:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800286a:	4641      	mov	r1, r8
          hi2c->pBuffPtr++;
 800286c:	3301      	adds	r3, #1
 800286e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8002870:	8d23      	ldrh	r3, [r4, #40]	; 0x28
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002872:	9500      	str	r5, [sp, #0]
          hi2c->XferSize--;
 8002874:	3b01      	subs	r3, #1
 8002876:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8002878:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 800287a:	3b01      	subs	r3, #1
 800287c:	b29b      	uxth	r3, r3
 800287e:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002880:	463b      	mov	r3, r7
 8002882:	e7c7      	b.n	8002814 <HAL_I2C_Master_Receive+0x224>
 8002884:	00100002 	.word	0x00100002
 8002888:	ffff0000 	.word	0xffff0000
 800288c:	00010002 	.word	0x00010002
 8002890:	00010004 	.word	0x00010004
 8002894:	00010008 	.word	0x00010008
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002898:	462a      	mov	r2, r5
 800289a:	4639      	mov	r1, r7
 800289c:	4620      	mov	r0, r4
 800289e:	f7ff fcab 	bl	80021f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80028a2:	2800      	cmp	r0, #0
 80028a4:	f47f af08 	bne.w	80026b8 <HAL_I2C_Master_Receive+0xc8>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80028a8:	6823      	ldr	r3, [r4, #0]
 80028aa:	691a      	ldr	r2, [r3, #16]
 80028ac:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80028ae:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80028b0:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80028b2:	1c53      	adds	r3, r2, #1
 80028b4:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 80028b6:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 80028b8:	3b01      	subs	r3, #1
 80028ba:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 80028bc:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 80028be:	3b01      	subs	r3, #1
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80028c4:	6823      	ldr	r3, [r4, #0]
 80028c6:	6959      	ldr	r1, [r3, #20]
 80028c8:	0749      	lsls	r1, r1, #29
 80028ca:	f57f af18 	bpl.w	80026fe <HAL_I2C_Master_Receive+0x10e>
 80028ce:	e7b9      	b.n	8002844 <HAL_I2C_Master_Receive+0x254>

080028d0 <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80028d0:	4b1c      	ldr	r3, [pc, #112]	; (8002944 <RCC_SetFlashLatencyFromMSIRange+0x74>)
{
 80028d2:	b082      	sub	sp, #8
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80028d4:	689a      	ldr	r2, [r3, #8]
 80028d6:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 80028da:	d00c      	beq.n	80028f6 <RCC_SetFlashLatencyFromMSIRange+0x26>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80028dc:	2200      	movs	r2, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80028de:	491a      	ldr	r1, [pc, #104]	; (8002948 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 80028e0:	680b      	ldr	r3, [r1, #0]
 80028e2:	f023 0301 	bic.w	r3, r3, #1
 80028e6:	4313      	orrs	r3, r2
 80028e8:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80028ea:	6808      	ldr	r0, [r1, #0]
 80028ec:	f000 0001 	and.w	r0, r0, #1
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 80028f0:	4050      	eors	r0, r2
 80028f2:	b002      	add	sp, #8
 80028f4:	4770      	bx	lr
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80028f6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80028f8:	4914      	ldr	r1, [pc, #80]	; (800294c <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 80028fa:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 80028fe:	d00f      	beq.n	8002920 <RCC_SetFlashLatencyFromMSIRange+0x50>
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002900:	680a      	ldr	r2, [r1, #0]
 8002902:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8002906:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 800290a:	d1e7      	bne.n	80028dc <RCC_SetFlashLatencyFromMSIRange+0xc>
 800290c:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 8002910:	d1e4      	bne.n	80028dc <RCC_SetFlashLatencyFromMSIRange+0xc>
  __HAL_FLASH_SET_LATENCY(latency);
 8002912:	4a0d      	ldr	r2, [pc, #52]	; (8002948 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 8002914:	6813      	ldr	r3, [r2, #0]
 8002916:	f043 0304 	orr.w	r3, r3, #4
 800291a:	6013      	str	r3, [r2, #0]
      latency = FLASH_LATENCY_1; /* 1WS */
 800291c:	2201      	movs	r2, #1
 800291e:	e7de      	b.n	80028de <RCC_SetFlashLatencyFromMSIRange+0xe>
      __HAL_RCC_PWR_CLK_ENABLE();
 8002920:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002922:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002926:	625a      	str	r2, [r3, #36]	; 0x24
 8002928:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800292a:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 800292e:	9201      	str	r2, [sp, #4]
 8002930:	9a01      	ldr	r2, [sp, #4]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002932:	680a      	ldr	r2, [r1, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 8002934:	6a59      	ldr	r1, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8002936:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 800293a:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
 800293e:	6259      	str	r1, [r3, #36]	; 0x24
 8002940:	e7e1      	b.n	8002906 <RCC_SetFlashLatencyFromMSIRange+0x36>
 8002942:	bf00      	nop
 8002944:	40023800 	.word	0x40023800
 8002948:	40023c00 	.word	0x40023c00
 800294c:	40007000 	.word	0x40007000

08002950 <HAL_RCC_OscConfig>:
{
 8002950:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(RCC_OscInitStruct == NULL)
 8002954:	4604      	mov	r4, r0
 8002956:	2800      	cmp	r0, #0
 8002958:	d060      	beq.n	8002a1c <HAL_RCC_OscConfig+0xcc>
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800295a:	4b91      	ldr	r3, [pc, #580]	; (8002ba0 <HAL_RCC_OscConfig+0x250>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800295c:	6802      	ldr	r2, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800295e:	689e      	ldr	r6, [r3, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002960:	689f      	ldr	r7, [r3, #8]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002962:	07d0      	lsls	r0, r2, #31
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002964:	f006 060c 	and.w	r6, r6, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002968:	f407 3780 	and.w	r7, r7, #65536	; 0x10000
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800296c:	d44b      	bmi.n	8002a06 <HAL_RCC_OscConfig+0xb6>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800296e:	6823      	ldr	r3, [r4, #0]
 8002970:	0799      	lsls	r1, r3, #30
 8002972:	f100 8097 	bmi.w	8002aa4 <HAL_RCC_OscConfig+0x154>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002976:	6823      	ldr	r3, [r4, #0]
 8002978:	06d8      	lsls	r0, r3, #27
 800297a:	d536      	bpl.n	80029ea <HAL_RCC_OscConfig+0x9a>
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800297c:	2e00      	cmp	r6, #0
 800297e:	f040 80e0 	bne.w	8002b42 <HAL_RCC_OscConfig+0x1f2>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002982:	4d87      	ldr	r5, [pc, #540]	; (8002ba0 <HAL_RCC_OscConfig+0x250>)
 8002984:	682b      	ldr	r3, [r5, #0]
 8002986:	0599      	lsls	r1, r3, #22
 8002988:	d502      	bpl.n	8002990 <HAL_RCC_OscConfig+0x40>
 800298a:	69a3      	ldr	r3, [r4, #24]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d045      	beq.n	8002a1c <HAL_RCC_OscConfig+0xcc>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002990:	686b      	ldr	r3, [r5, #4]
 8002992:	6a20      	ldr	r0, [r4, #32]
 8002994:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8002998:	4298      	cmp	r0, r3
 800299a:	f240 80c0 	bls.w	8002b1e <HAL_RCC_OscConfig+0x1ce>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800299e:	f7ff ff97 	bl	80028d0 <RCC_SetFlashLatencyFromMSIRange>
 80029a2:	2800      	cmp	r0, #0
 80029a4:	d13a      	bne.n	8002a1c <HAL_RCC_OscConfig+0xcc>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80029a6:	686b      	ldr	r3, [r5, #4]
 80029a8:	6a22      	ldr	r2, [r4, #32]
 80029aa:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80029ae:	4313      	orrs	r3, r2
 80029b0:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80029b2:	686b      	ldr	r3, [r5, #4]
 80029b4:	69e2      	ldr	r2, [r4, #28]
 80029b6:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80029ba:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80029be:	606b      	str	r3, [r5, #4]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80029c0:	4b77      	ldr	r3, [pc, #476]	; (8002ba0 <HAL_RCC_OscConfig+0x250>)
 80029c2:	6899      	ldr	r1, [r3, #8]
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80029c4:	6a23      	ldr	r3, [r4, #32]
 80029c6:	0b5b      	lsrs	r3, r3, #13
 80029c8:	1c5a      	adds	r2, r3, #1
 80029ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029ce:	4093      	lsls	r3, r2
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80029d0:	f3c1 1203 	ubfx	r2, r1, #4, #4
 80029d4:	4973      	ldr	r1, [pc, #460]	; (8002ba4 <HAL_RCC_OscConfig+0x254>)
 80029d6:	5c8a      	ldrb	r2, [r1, r2]
 80029d8:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80029da:	4a73      	ldr	r2, [pc, #460]	; (8002ba8 <HAL_RCC_OscConfig+0x258>)
 80029dc:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 80029de:	4b73      	ldr	r3, [pc, #460]	; (8002bac <HAL_RCC_OscConfig+0x25c>)
 80029e0:	6818      	ldr	r0, [r3, #0]
 80029e2:	f7fe fc5d 	bl	80012a0 <HAL_InitTick>
        if(status != HAL_OK)
 80029e6:	2800      	cmp	r0, #0
 80029e8:	d130      	bne.n	8002a4c <HAL_RCC_OscConfig+0xfc>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029ea:	6823      	ldr	r3, [r4, #0]
 80029ec:	0718      	lsls	r0, r3, #28
 80029ee:	f100 80e1 	bmi.w	8002bb4 <HAL_RCC_OscConfig+0x264>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029f2:	6823      	ldr	r3, [r4, #0]
 80029f4:	0759      	lsls	r1, r3, #29
 80029f6:	f100 8101 	bmi.w	8002bfc <HAL_RCC_OscConfig+0x2ac>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80029fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80029fc:	2800      	cmp	r0, #0
 80029fe:	f040 8169 	bne.w	8002cd4 <HAL_RCC_OscConfig+0x384>
  return HAL_OK;
 8002a02:	2000      	movs	r0, #0
 8002a04:	e022      	b.n	8002a4c <HAL_RCC_OscConfig+0xfc>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002a06:	2e08      	cmp	r6, #8
 8002a08:	d002      	beq.n	8002a10 <HAL_RCC_OscConfig+0xc0>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002a0a:	2e0c      	cmp	r6, #12
 8002a0c:	d108      	bne.n	8002a20 <HAL_RCC_OscConfig+0xd0>
 8002a0e:	b13f      	cbz	r7, 8002a20 <HAL_RCC_OscConfig+0xd0>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	039a      	lsls	r2, r3, #14
 8002a14:	d5ab      	bpl.n	800296e <HAL_RCC_OscConfig+0x1e>
 8002a16:	6863      	ldr	r3, [r4, #4]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d1a8      	bne.n	800296e <HAL_RCC_OscConfig+0x1e>
          return HAL_ERROR;
 8002a1c:	2001      	movs	r0, #1
 8002a1e:	e015      	b.n	8002a4c <HAL_RCC_OscConfig+0xfc>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a20:	6862      	ldr	r2, [r4, #4]
 8002a22:	2a01      	cmp	r2, #1
 8002a24:	d115      	bne.n	8002a52 <HAL_RCC_OscConfig+0x102>
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002a2c:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002a2e:	f7fe fdf9 	bl	8001624 <HAL_GetTick>
 8002a32:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002a34:	f8df 8168 	ldr.w	r8, [pc, #360]	; 8002ba0 <HAL_RCC_OscConfig+0x250>
 8002a38:	f8d8 3000 	ldr.w	r3, [r8]
 8002a3c:	039b      	lsls	r3, r3, #14
 8002a3e:	d496      	bmi.n	800296e <HAL_RCC_OscConfig+0x1e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a40:	f7fe fdf0 	bl	8001624 <HAL_GetTick>
 8002a44:	1b40      	subs	r0, r0, r5
 8002a46:	2864      	cmp	r0, #100	; 0x64
 8002a48:	d9f6      	bls.n	8002a38 <HAL_RCC_OscConfig+0xe8>
            return HAL_TIMEOUT;
 8002a4a:	2003      	movs	r0, #3
}
 8002a4c:	b003      	add	sp, #12
 8002a4e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a52:	4d53      	ldr	r5, [pc, #332]	; (8002ba0 <HAL_RCC_OscConfig+0x250>)
 8002a54:	682b      	ldr	r3, [r5, #0]
 8002a56:	b9a2      	cbnz	r2, 8002a82 <HAL_RCC_OscConfig+0x132>
 8002a58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002a5c:	602b      	str	r3, [r5, #0]
 8002a5e:	682b      	ldr	r3, [r5, #0]
 8002a60:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002a64:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8002a66:	f7fe fddd 	bl	8001624 <HAL_GetTick>
 8002a6a:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8002a6c:	682b      	ldr	r3, [r5, #0]
 8002a6e:	0398      	lsls	r0, r3, #14
 8002a70:	f57f af7d 	bpl.w	800296e <HAL_RCC_OscConfig+0x1e>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a74:	f7fe fdd6 	bl	8001624 <HAL_GetTick>
 8002a78:	eba0 0008 	sub.w	r0, r0, r8
 8002a7c:	2864      	cmp	r0, #100	; 0x64
 8002a7e:	d9f5      	bls.n	8002a6c <HAL_RCC_OscConfig+0x11c>
 8002a80:	e7e3      	b.n	8002a4a <HAL_RCC_OscConfig+0xfa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a82:	2a05      	cmp	r2, #5
 8002a84:	bf0b      	itete	eq
 8002a86:	f443 2380 	orreq.w	r3, r3, #262144	; 0x40000
 8002a8a:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
 8002a8e:	602b      	streq	r3, [r5, #0]
 8002a90:	602b      	strne	r3, [r5, #0]
 8002a92:	bf0b      	itete	eq
 8002a94:	682b      	ldreq	r3, [r5, #0]
 8002a96:	682b      	ldrne	r3, [r5, #0]
 8002a98:	f443 3380 	orreq.w	r3, r3, #65536	; 0x10000
 8002a9c:	f423 2380 	bicne.w	r3, r3, #262144	; 0x40000
 8002aa0:	602b      	str	r3, [r5, #0]
 8002aa2:	e7c4      	b.n	8002a2e <HAL_RCC_OscConfig+0xde>
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002aa4:	2e04      	cmp	r6, #4
 8002aa6:	d002      	beq.n	8002aae <HAL_RCC_OscConfig+0x15e>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002aa8:	2e0c      	cmp	r6, #12
 8002aaa:	d10f      	bne.n	8002acc <HAL_RCC_OscConfig+0x17c>
 8002aac:	b977      	cbnz	r7, 8002acc <HAL_RCC_OscConfig+0x17c>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aae:	4a3c      	ldr	r2, [pc, #240]	; (8002ba0 <HAL_RCC_OscConfig+0x250>)
 8002ab0:	6813      	ldr	r3, [r2, #0]
 8002ab2:	0799      	lsls	r1, r3, #30
 8002ab4:	d502      	bpl.n	8002abc <HAL_RCC_OscConfig+0x16c>
 8002ab6:	68e3      	ldr	r3, [r4, #12]
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d1af      	bne.n	8002a1c <HAL_RCC_OscConfig+0xcc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002abc:	6853      	ldr	r3, [r2, #4]
 8002abe:	6921      	ldr	r1, [r4, #16]
 8002ac0:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8002ac4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8002ac8:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aca:	e754      	b.n	8002976 <HAL_RCC_OscConfig+0x26>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002acc:	68e2      	ldr	r2, [r4, #12]
 8002ace:	4b38      	ldr	r3, [pc, #224]	; (8002bb0 <HAL_RCC_OscConfig+0x260>)
 8002ad0:	b1b2      	cbz	r2, 8002b00 <HAL_RCC_OscConfig+0x1b0>
        __HAL_RCC_HSI_ENABLE();
 8002ad2:	2201      	movs	r2, #1
 8002ad4:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002ad6:	f7fe fda5 	bl	8001624 <HAL_GetTick>
 8002ada:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002adc:	4d30      	ldr	r5, [pc, #192]	; (8002ba0 <HAL_RCC_OscConfig+0x250>)
 8002ade:	682b      	ldr	r3, [r5, #0]
 8002ae0:	079a      	lsls	r2, r3, #30
 8002ae2:	d507      	bpl.n	8002af4 <HAL_RCC_OscConfig+0x1a4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae4:	686b      	ldr	r3, [r5, #4]
 8002ae6:	6922      	ldr	r2, [r4, #16]
 8002ae8:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 8002aec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8002af0:	606b      	str	r3, [r5, #4]
 8002af2:	e740      	b.n	8002976 <HAL_RCC_OscConfig+0x26>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002af4:	f7fe fd96 	bl	8001624 <HAL_GetTick>
 8002af8:	1bc0      	subs	r0, r0, r7
 8002afa:	2802      	cmp	r0, #2
 8002afc:	d9ef      	bls.n	8002ade <HAL_RCC_OscConfig+0x18e>
 8002afe:	e7a4      	b.n	8002a4a <HAL_RCC_OscConfig+0xfa>
        __HAL_RCC_HSI_DISABLE();
 8002b00:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8002b02:	f7fe fd8f 	bl	8001624 <HAL_GetTick>
 8002b06:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8002b08:	4f25      	ldr	r7, [pc, #148]	; (8002ba0 <HAL_RCC_OscConfig+0x250>)
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	079b      	lsls	r3, r3, #30
 8002b0e:	f57f af32 	bpl.w	8002976 <HAL_RCC_OscConfig+0x26>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b12:	f7fe fd87 	bl	8001624 <HAL_GetTick>
 8002b16:	1b40      	subs	r0, r0, r5
 8002b18:	2802      	cmp	r0, #2
 8002b1a:	d9f6      	bls.n	8002b0a <HAL_RCC_OscConfig+0x1ba>
 8002b1c:	e795      	b.n	8002a4a <HAL_RCC_OscConfig+0xfa>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b1e:	686b      	ldr	r3, [r5, #4]
 8002b20:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002b24:	4303      	orrs	r3, r0
 8002b26:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b28:	686b      	ldr	r3, [r5, #4]
 8002b2a:	69e2      	ldr	r2, [r4, #28]
 8002b2c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002b30:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002b34:	606b      	str	r3, [r5, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002b36:	f7ff fecb 	bl	80028d0 <RCC_SetFlashLatencyFromMSIRange>
 8002b3a:	2800      	cmp	r0, #0
 8002b3c:	f43f af40 	beq.w	80029c0 <HAL_RCC_OscConfig+0x70>
 8002b40:	e76c      	b.n	8002a1c <HAL_RCC_OscConfig+0xcc>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002b42:	69a2      	ldr	r2, [r4, #24]
 8002b44:	4b1a      	ldr	r3, [pc, #104]	; (8002bb0 <HAL_RCC_OscConfig+0x260>)
 8002b46:	b1e2      	cbz	r2, 8002b82 <HAL_RCC_OscConfig+0x232>
        __HAL_RCC_MSI_ENABLE();
 8002b48:	2201      	movs	r2, #1
 8002b4a:	621a      	str	r2, [r3, #32]
        tickstart = HAL_GetTick();
 8002b4c:	f7fe fd6a 	bl	8001624 <HAL_GetTick>
 8002b50:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002b52:	4d13      	ldr	r5, [pc, #76]	; (8002ba0 <HAL_RCC_OscConfig+0x250>)
 8002b54:	682b      	ldr	r3, [r5, #0]
 8002b56:	059a      	lsls	r2, r3, #22
 8002b58:	d50d      	bpl.n	8002b76 <HAL_RCC_OscConfig+0x226>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002b5a:	686b      	ldr	r3, [r5, #4]
 8002b5c:	6a22      	ldr	r2, [r4, #32]
 8002b5e:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8002b62:	4313      	orrs	r3, r2
 8002b64:	606b      	str	r3, [r5, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002b66:	686b      	ldr	r3, [r5, #4]
 8002b68:	69e2      	ldr	r2, [r4, #28]
 8002b6a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8002b6e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8002b72:	606b      	str	r3, [r5, #4]
 8002b74:	e739      	b.n	80029ea <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b76:	f7fe fd55 	bl	8001624 <HAL_GetTick>
 8002b7a:	1bc0      	subs	r0, r0, r7
 8002b7c:	2802      	cmp	r0, #2
 8002b7e:	d9e9      	bls.n	8002b54 <HAL_RCC_OscConfig+0x204>
 8002b80:	e763      	b.n	8002a4a <HAL_RCC_OscConfig+0xfa>
        __HAL_RCC_MSI_DISABLE();
 8002b82:	621a      	str	r2, [r3, #32]
        tickstart = HAL_GetTick();
 8002b84:	f7fe fd4e 	bl	8001624 <HAL_GetTick>
 8002b88:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8002b8a:	4f05      	ldr	r7, [pc, #20]	; (8002ba0 <HAL_RCC_OscConfig+0x250>)
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	059b      	lsls	r3, r3, #22
 8002b90:	f57f af2b 	bpl.w	80029ea <HAL_RCC_OscConfig+0x9a>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002b94:	f7fe fd46 	bl	8001624 <HAL_GetTick>
 8002b98:	1b40      	subs	r0, r0, r5
 8002b9a:	2802      	cmp	r0, #2
 8002b9c:	d9f6      	bls.n	8002b8c <HAL_RCC_OscConfig+0x23c>
 8002b9e:	e754      	b.n	8002a4a <HAL_RCC_OscConfig+0xfa>
 8002ba0:	40023800 	.word	0x40023800
 8002ba4:	08007860 	.word	0x08007860
 8002ba8:	20000000 	.word	0x20000000
 8002bac:	20000008 	.word	0x20000008
 8002bb0:	42470000 	.word	0x42470000
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002bb4:	6962      	ldr	r2, [r4, #20]
 8002bb6:	4b72      	ldr	r3, [pc, #456]	; (8002d80 <HAL_RCC_OscConfig+0x430>)
 8002bb8:	b182      	cbz	r2, 8002bdc <HAL_RCC_OscConfig+0x28c>
      __HAL_RCC_LSI_ENABLE();
 8002bba:	2201      	movs	r2, #1
 8002bbc:	f8c3 2680 	str.w	r2, [r3, #1664]	; 0x680
      tickstart = HAL_GetTick();
 8002bc0:	f7fe fd30 	bl	8001624 <HAL_GetTick>
 8002bc4:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8002bc6:	4f6f      	ldr	r7, [pc, #444]	; (8002d84 <HAL_RCC_OscConfig+0x434>)
 8002bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bca:	079a      	lsls	r2, r3, #30
 8002bcc:	f53f af11 	bmi.w	80029f2 <HAL_RCC_OscConfig+0xa2>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bd0:	f7fe fd28 	bl	8001624 <HAL_GetTick>
 8002bd4:	1b40      	subs	r0, r0, r5
 8002bd6:	2802      	cmp	r0, #2
 8002bd8:	d9f6      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x278>
 8002bda:	e736      	b.n	8002a4a <HAL_RCC_OscConfig+0xfa>
      __HAL_RCC_LSI_DISABLE();
 8002bdc:	f8c3 2680 	str.w	r2, [r3, #1664]	; 0x680
      tickstart = HAL_GetTick();
 8002be0:	f7fe fd20 	bl	8001624 <HAL_GetTick>
 8002be4:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8002be6:	4f67      	ldr	r7, [pc, #412]	; (8002d84 <HAL_RCC_OscConfig+0x434>)
 8002be8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002bea:	079b      	lsls	r3, r3, #30
 8002bec:	f57f af01 	bpl.w	80029f2 <HAL_RCC_OscConfig+0xa2>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002bf0:	f7fe fd18 	bl	8001624 <HAL_GetTick>
 8002bf4:	1b40      	subs	r0, r0, r5
 8002bf6:	2802      	cmp	r0, #2
 8002bf8:	d9f6      	bls.n	8002be8 <HAL_RCC_OscConfig+0x298>
 8002bfa:	e726      	b.n	8002a4a <HAL_RCC_OscConfig+0xfa>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bfc:	4b61      	ldr	r3, [pc, #388]	; (8002d84 <HAL_RCC_OscConfig+0x434>)
 8002bfe:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c00:	00d0      	lsls	r0, r2, #3
 8002c02:	d429      	bmi.n	8002c58 <HAL_RCC_OscConfig+0x308>
      pwrclkchanged = SET;
 8002c04:	f04f 0801 	mov.w	r8, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c08:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002c0a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8002c0e:	625a      	str	r2, [r3, #36]	; 0x24
 8002c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c16:	9301      	str	r3, [sp, #4]
 8002c18:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c1a:	4d5b      	ldr	r5, [pc, #364]	; (8002d88 <HAL_RCC_OscConfig+0x438>)
 8002c1c:	682b      	ldr	r3, [r5, #0]
 8002c1e:	05d9      	lsls	r1, r3, #23
 8002c20:	d51d      	bpl.n	8002c5e <HAL_RCC_OscConfig+0x30e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c22:	68a3      	ldr	r3, [r4, #8]
 8002c24:	4d57      	ldr	r5, [pc, #348]	; (8002d84 <HAL_RCC_OscConfig+0x434>)
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d129      	bne.n	8002c7e <HAL_RCC_OscConfig+0x32e>
 8002c2a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002c2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c30:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8002c32:	f7fe fcf7 	bl	8001624 <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c36:	f241 3988 	movw	r9, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8002c3a:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002c3c:	4f51      	ldr	r7, [pc, #324]	; (8002d84 <HAL_RCC_OscConfig+0x434>)
 8002c3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002c40:	059b      	lsls	r3, r3, #22
 8002c42:	d541      	bpl.n	8002cc8 <HAL_RCC_OscConfig+0x378>
    if(pwrclkchanged == SET)
 8002c44:	f1b8 0f00 	cmp.w	r8, #0
 8002c48:	f43f aed7 	beq.w	80029fa <HAL_RCC_OscConfig+0xaa>
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c4c:	4a4d      	ldr	r2, [pc, #308]	; (8002d84 <HAL_RCC_OscConfig+0x434>)
 8002c4e:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8002c50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c54:	6253      	str	r3, [r2, #36]	; 0x24
 8002c56:	e6d0      	b.n	80029fa <HAL_RCC_OscConfig+0xaa>
    FlagStatus       pwrclkchanged = RESET;
 8002c58:	f04f 0800 	mov.w	r8, #0
 8002c5c:	e7dd      	b.n	8002c1a <HAL_RCC_OscConfig+0x2ca>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002c5e:	682b      	ldr	r3, [r5, #0]
 8002c60:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c64:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8002c66:	f7fe fcdd 	bl	8001624 <HAL_GetTick>
 8002c6a:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c6c:	682b      	ldr	r3, [r5, #0]
 8002c6e:	05da      	lsls	r2, r3, #23
 8002c70:	d4d7      	bmi.n	8002c22 <HAL_RCC_OscConfig+0x2d2>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c72:	f7fe fcd7 	bl	8001624 <HAL_GetTick>
 8002c76:	1bc0      	subs	r0, r0, r7
 8002c78:	2864      	cmp	r0, #100	; 0x64
 8002c7a:	d9f7      	bls.n	8002c6c <HAL_RCC_OscConfig+0x31c>
 8002c7c:	e6e5      	b.n	8002a4a <HAL_RCC_OscConfig+0xfa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c7e:	b9ab      	cbnz	r3, 8002cac <HAL_RCC_OscConfig+0x35c>
 8002c80:	6b6b      	ldr	r3, [r5, #52]	; 0x34
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c82:	f241 3988 	movw	r9, #5000	; 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002c8a:	636b      	str	r3, [r5, #52]	; 0x34
 8002c8c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002c8e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002c92:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8002c94:	f7fe fcc6 	bl	8001624 <HAL_GetTick>
 8002c98:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8002c9a:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002c9c:	0598      	lsls	r0, r3, #22
 8002c9e:	d5d1      	bpl.n	8002c44 <HAL_RCC_OscConfig+0x2f4>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ca0:	f7fe fcc0 	bl	8001624 <HAL_GetTick>
 8002ca4:	1bc0      	subs	r0, r0, r7
 8002ca6:	4548      	cmp	r0, r9
 8002ca8:	d9f7      	bls.n	8002c9a <HAL_RCC_OscConfig+0x34a>
 8002caa:	e6ce      	b.n	8002a4a <HAL_RCC_OscConfig+0xfa>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002cac:	2b05      	cmp	r3, #5
 8002cae:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002cb0:	d103      	bne.n	8002cba <HAL_RCC_OscConfig+0x36a>
 8002cb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cb6:	636b      	str	r3, [r5, #52]	; 0x34
 8002cb8:	e7b7      	b.n	8002c2a <HAL_RCC_OscConfig+0x2da>
 8002cba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cbe:	636b      	str	r3, [r5, #52]	; 0x34
 8002cc0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8002cc2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002cc6:	e7b3      	b.n	8002c30 <HAL_RCC_OscConfig+0x2e0>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002cc8:	f7fe fcac 	bl	8001624 <HAL_GetTick>
 8002ccc:	1b40      	subs	r0, r0, r5
 8002cce:	4548      	cmp	r0, r9
 8002cd0:	d9b5      	bls.n	8002c3e <HAL_RCC_OscConfig+0x2ee>
 8002cd2:	e6ba      	b.n	8002a4a <HAL_RCC_OscConfig+0xfa>
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002cd4:	2e0c      	cmp	r6, #12
 8002cd6:	d03a      	beq.n	8002d4e <HAL_RCC_OscConfig+0x3fe>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cd8:	2200      	movs	r2, #0
 8002cda:	4b29      	ldr	r3, [pc, #164]	; (8002d80 <HAL_RCC_OscConfig+0x430>)
 8002cdc:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8002cde:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ce0:	d127      	bne.n	8002d32 <HAL_RCC_OscConfig+0x3e2>
        tickstart = HAL_GetTick();
 8002ce2:	f7fe fc9f 	bl	8001624 <HAL_GetTick>
 8002ce6:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002ce8:	4d26      	ldr	r5, [pc, #152]	; (8002d84 <HAL_RCC_OscConfig+0x434>)
 8002cea:	682b      	ldr	r3, [r5, #0]
 8002cec:	0199      	lsls	r1, r3, #6
 8002cee:	d41a      	bmi.n	8002d26 <HAL_RCC_OscConfig+0x3d6>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cf0:	68aa      	ldr	r2, [r5, #8]
 8002cf2:	e9d4 310a 	ldrd	r3, r1, [r4, #40]	; 0x28
 8002cf6:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 8002cfa:	430b      	orrs	r3, r1
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8002d00:	4313      	orrs	r3, r2
        __HAL_RCC_PLL_ENABLE();
 8002d02:	2201      	movs	r2, #1
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002d04:	60ab      	str	r3, [r5, #8]
        __HAL_RCC_PLL_ENABLE();
 8002d06:	4b1e      	ldr	r3, [pc, #120]	; (8002d80 <HAL_RCC_OscConfig+0x430>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d08:	4d1e      	ldr	r5, [pc, #120]	; (8002d84 <HAL_RCC_OscConfig+0x434>)
        __HAL_RCC_PLL_ENABLE();
 8002d0a:	661a      	str	r2, [r3, #96]	; 0x60
        tickstart = HAL_GetTick();
 8002d0c:	f7fe fc8a 	bl	8001624 <HAL_GetTick>
 8002d10:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002d12:	682b      	ldr	r3, [r5, #0]
 8002d14:	019a      	lsls	r2, r3, #6
 8002d16:	f53f ae74 	bmi.w	8002a02 <HAL_RCC_OscConfig+0xb2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d1a:	f7fe fc83 	bl	8001624 <HAL_GetTick>
 8002d1e:	1b00      	subs	r0, r0, r4
 8002d20:	2802      	cmp	r0, #2
 8002d22:	d9f6      	bls.n	8002d12 <HAL_RCC_OscConfig+0x3c2>
 8002d24:	e691      	b.n	8002a4a <HAL_RCC_OscConfig+0xfa>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d26:	f7fe fc7d 	bl	8001624 <HAL_GetTick>
 8002d2a:	1b80      	subs	r0, r0, r6
 8002d2c:	2802      	cmp	r0, #2
 8002d2e:	d9dc      	bls.n	8002cea <HAL_RCC_OscConfig+0x39a>
 8002d30:	e68b      	b.n	8002a4a <HAL_RCC_OscConfig+0xfa>
        tickstart = HAL_GetTick();
 8002d32:	f7fe fc77 	bl	8001624 <HAL_GetTick>
 8002d36:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8002d38:	4d12      	ldr	r5, [pc, #72]	; (8002d84 <HAL_RCC_OscConfig+0x434>)
 8002d3a:	682b      	ldr	r3, [r5, #0]
 8002d3c:	019b      	lsls	r3, r3, #6
 8002d3e:	f57f ae60 	bpl.w	8002a02 <HAL_RCC_OscConfig+0xb2>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d42:	f7fe fc6f 	bl	8001624 <HAL_GetTick>
 8002d46:	1b00      	subs	r0, r0, r4
 8002d48:	2802      	cmp	r0, #2
 8002d4a:	d9f6      	bls.n	8002d3a <HAL_RCC_OscConfig+0x3ea>
 8002d4c:	e67d      	b.n	8002a4a <HAL_RCC_OscConfig+0xfa>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002d4e:	2801      	cmp	r0, #1
 8002d50:	f43f ae7c 	beq.w	8002a4c <HAL_RCC_OscConfig+0xfc>
        pll_config = RCC->CFGR;
 8002d54:	4b0b      	ldr	r3, [pc, #44]	; (8002d84 <HAL_RCC_OscConfig+0x434>)
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d56:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        pll_config = RCC->CFGR;
 8002d58:	689b      	ldr	r3, [r3, #8]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d5a:	f403 3180 	and.w	r1, r3, #65536	; 0x10000
 8002d5e:	4291      	cmp	r1, r2
 8002d60:	f47f ae5c 	bne.w	8002a1c <HAL_RCC_OscConfig+0xcc>
 8002d64:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002d66:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d6a:	428a      	cmp	r2, r1
 8002d6c:	f47f ae56 	bne.w	8002a1c <HAL_RCC_OscConfig+0xcc>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002d70:	6b22      	ldr	r2, [r4, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8002d72:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8002d76:	4293      	cmp	r3, r2
 8002d78:	f43f ae43 	beq.w	8002a02 <HAL_RCC_OscConfig+0xb2>
 8002d7c:	e64e      	b.n	8002a1c <HAL_RCC_OscConfig+0xcc>
 8002d7e:	bf00      	nop
 8002d80:	42470000 	.word	0x42470000
 8002d84:	40023800 	.word	0x40023800
 8002d88:	40007000 	.word	0x40007000

08002d8c <HAL_RCC_GetSysClockFreq>:
{
 8002d8c:	b508      	push	{r3, lr}
  tmpreg = RCC->CFGR;
 8002d8e:	4b15      	ldr	r3, [pc, #84]	; (8002de4 <HAL_RCC_GetSysClockFreq+0x58>)
 8002d90:	689a      	ldr	r2, [r3, #8]
  switch (tmpreg & RCC_CFGR_SWS)
 8002d92:	f002 010c 	and.w	r1, r2, #12
 8002d96:	2908      	cmp	r1, #8
 8002d98:	d021      	beq.n	8002dde <HAL_RCC_GetSysClockFreq+0x52>
 8002d9a:	290c      	cmp	r1, #12
 8002d9c:	d003      	beq.n	8002da6 <HAL_RCC_GetSysClockFreq+0x1a>
 8002d9e:	2904      	cmp	r1, #4
 8002da0:	d115      	bne.n	8002dce <HAL_RCC_GetSysClockFreq+0x42>
      sysclockfreq = HSI_VALUE;
 8002da2:	4811      	ldr	r0, [pc, #68]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x5c>)
  return sysclockfreq;
 8002da4:	e012      	b.n	8002dcc <HAL_RCC_GetSysClockFreq+0x40>
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002da6:	689b      	ldr	r3, [r3, #8]
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002da8:	4810      	ldr	r0, [pc, #64]	; (8002dec <HAL_RCC_GetSysClockFreq+0x60>)
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002daa:	f413 3380 	ands.w	r3, r3, #65536	; 0x10000
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8002dae:	f3c2 4183 	ubfx	r1, r2, #18, #4
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002db2:	5c41      	ldrb	r1, [r0, r1]
 8002db4:	bf14      	ite	ne
 8002db6:	480e      	ldrne	r0, [pc, #56]	; (8002df0 <HAL_RCC_GetSysClockFreq+0x64>)
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002db8:	480b      	ldreq	r0, [pc, #44]	; (8002de8 <HAL_RCC_GetSysClockFreq+0x5c>)
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002dba:	f3c2 5281 	ubfx	r2, r2, #22, #2
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002dbe:	bf18      	it	ne
 8002dc0:	2300      	movne	r3, #0
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002dc2:	fba1 0100 	umull	r0, r1, r1, r0
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8002dc6:	3201      	adds	r2, #1
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8002dc8:	f7fd fe72 	bl	8000ab0 <__aeabi_uldivmod>
}
 8002dcc:	bd08      	pop	{r3, pc}
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8002dce:	6858      	ldr	r0, [r3, #4]
 8002dd0:	f3c0 3042 	ubfx	r0, r0, #13, #3
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8002dd4:	1c43      	adds	r3, r0, #1
 8002dd6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8002dda:	4098      	lsls	r0, r3
      break;
 8002ddc:	e7f6      	b.n	8002dcc <HAL_RCC_GetSysClockFreq+0x40>
  switch (tmpreg & RCC_CFGR_SWS)
 8002dde:	4804      	ldr	r0, [pc, #16]	; (8002df0 <HAL_RCC_GetSysClockFreq+0x64>)
 8002de0:	e7f4      	b.n	8002dcc <HAL_RCC_GetSysClockFreq+0x40>
 8002de2:	bf00      	nop
 8002de4:	40023800 	.word	0x40023800
 8002de8:	00f42400 	.word	0x00f42400
 8002dec:	08007878 	.word	0x08007878
 8002df0:	016e3600 	.word	0x016e3600

08002df4 <HAL_RCC_ClockConfig>:
{
 8002df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002df8:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 8002dfa:	4604      	mov	r4, r0
 8002dfc:	b910      	cbnz	r0, 8002e04 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 8002dfe:	2001      	movs	r0, #1
}
 8002e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e04:	4b57      	ldr	r3, [pc, #348]	; (8002f64 <HAL_RCC_ClockConfig+0x170>)
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	f002 0201 	and.w	r2, r2, #1
 8002e0c:	428a      	cmp	r2, r1
 8002e0e:	d32a      	bcc.n	8002e66 <HAL_RCC_ClockConfig+0x72>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e10:	6822      	ldr	r2, [r4, #0]
 8002e12:	0796      	lsls	r6, r2, #30
 8002e14:	d438      	bmi.n	8002e88 <HAL_RCC_ClockConfig+0x94>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e16:	07d0      	lsls	r0, r2, #31
 8002e18:	d43e      	bmi.n	8002e98 <HAL_RCC_ClockConfig+0xa4>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002e1a:	4b52      	ldr	r3, [pc, #328]	; (8002f64 <HAL_RCC_ClockConfig+0x170>)
 8002e1c:	681a      	ldr	r2, [r3, #0]
 8002e1e:	f002 0201 	and.w	r2, r2, #1
 8002e22:	42aa      	cmp	r2, r5
 8002e24:	f200 808c 	bhi.w	8002f40 <HAL_RCC_ClockConfig+0x14c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e28:	6822      	ldr	r2, [r4, #0]
 8002e2a:	0751      	lsls	r1, r2, #29
 8002e2c:	f100 8091 	bmi.w	8002f52 <HAL_RCC_ClockConfig+0x15e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e30:	0713      	lsls	r3, r2, #28
 8002e32:	d507      	bpl.n	8002e44 <HAL_RCC_ClockConfig+0x50>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e34:	4a4c      	ldr	r2, [pc, #304]	; (8002f68 <HAL_RCC_ClockConfig+0x174>)
 8002e36:	6921      	ldr	r1, [r4, #16]
 8002e38:	6893      	ldr	r3, [r2, #8]
 8002e3a:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8002e3e:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8002e42:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e44:	f7ff ffa2 	bl	8002d8c <HAL_RCC_GetSysClockFreq>
}
 8002e48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e4c:	4b46      	ldr	r3, [pc, #280]	; (8002f68 <HAL_RCC_ClockConfig+0x174>)
 8002e4e:	4a47      	ldr	r2, [pc, #284]	; (8002f6c <HAL_RCC_ClockConfig+0x178>)
 8002e50:	689b      	ldr	r3, [r3, #8]
 8002e52:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8002e56:	5cd3      	ldrb	r3, [r2, r3]
 8002e58:	40d8      	lsrs	r0, r3
 8002e5a:	4b45      	ldr	r3, [pc, #276]	; (8002f70 <HAL_RCC_ClockConfig+0x17c>)
 8002e5c:	6018      	str	r0, [r3, #0]
  status = HAL_InitTick(uwTickPrio);
 8002e5e:	4b45      	ldr	r3, [pc, #276]	; (8002f74 <HAL_RCC_ClockConfig+0x180>)
 8002e60:	6818      	ldr	r0, [r3, #0]
 8002e62:	f7fe ba1d 	b.w	80012a0 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e66:	2901      	cmp	r1, #1
 8002e68:	bf02      	ittt	eq
 8002e6a:	681a      	ldreq	r2, [r3, #0]
 8002e6c:	f042 0204 	orreq.w	r2, r2, #4
 8002e70:	601a      	streq	r2, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	f022 0201 	bic.w	r2, r2, #1
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	601a      	str	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f003 0301 	and.w	r3, r3, #1
 8002e82:	428b      	cmp	r3, r1
 8002e84:	d1bb      	bne.n	8002dfe <HAL_RCC_ClockConfig+0xa>
 8002e86:	e7c3      	b.n	8002e10 <HAL_RCC_ClockConfig+0x1c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e88:	4937      	ldr	r1, [pc, #220]	; (8002f68 <HAL_RCC_ClockConfig+0x174>)
 8002e8a:	68a0      	ldr	r0, [r4, #8]
 8002e8c:	688b      	ldr	r3, [r1, #8]
 8002e8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e92:	4303      	orrs	r3, r0
 8002e94:	608b      	str	r3, [r1, #8]
 8002e96:	e7be      	b.n	8002e16 <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e98:	6862      	ldr	r2, [r4, #4]
 8002e9a:	4b33      	ldr	r3, [pc, #204]	; (8002f68 <HAL_RCC_ClockConfig+0x174>)
 8002e9c:	2a02      	cmp	r2, #2
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002e9e:	681b      	ldr	r3, [r3, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ea0:	d11c      	bne.n	8002edc <HAL_RCC_ClockConfig+0xe8>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002ea2:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002ea6:	d0aa      	beq.n	8002dfe <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ea8:	4e2f      	ldr	r6, [pc, #188]	; (8002f68 <HAL_RCC_ClockConfig+0x174>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eaa:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002eae:	68b3      	ldr	r3, [r6, #8]
 8002eb0:	f023 0303 	bic.w	r3, r3, #3
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8002eb8:	f7fe fbb4 	bl	8001624 <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ebc:	6863      	ldr	r3, [r4, #4]
    tickstart = HAL_GetTick();
 8002ebe:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d118      	bne.n	8002ef6 <HAL_RCC_ClockConfig+0x102>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ec4:	68b3      	ldr	r3, [r6, #8]
 8002ec6:	f003 030c 	and.w	r3, r3, #12
 8002eca:	2b08      	cmp	r3, #8
 8002ecc:	d0a5      	beq.n	8002e1a <HAL_RCC_ClockConfig+0x26>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ece:	f7fe fba9 	bl	8001624 <HAL_GetTick>
 8002ed2:	1bc0      	subs	r0, r0, r7
 8002ed4:	4540      	cmp	r0, r8
 8002ed6:	d9f5      	bls.n	8002ec4 <HAL_RCC_ClockConfig+0xd0>
          return HAL_TIMEOUT;
 8002ed8:	2003      	movs	r0, #3
 8002eda:	e791      	b.n	8002e00 <HAL_RCC_ClockConfig+0xc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002edc:	2a03      	cmp	r2, #3
 8002ede:	d102      	bne.n	8002ee6 <HAL_RCC_ClockConfig+0xf2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002ee0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 8002ee4:	e7df      	b.n	8002ea6 <HAL_RCC_ClockConfig+0xb2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002ee6:	2a01      	cmp	r2, #1
 8002ee8:	d102      	bne.n	8002ef0 <HAL_RCC_ClockConfig+0xfc>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002eea:	f013 0f02 	tst.w	r3, #2
 8002eee:	e7da      	b.n	8002ea6 <HAL_RCC_ClockConfig+0xb2>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8002ef0:	f413 7f00 	tst.w	r3, #512	; 0x200
 8002ef4:	e7d7      	b.n	8002ea6 <HAL_RCC_ClockConfig+0xb2>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ef6:	2b03      	cmp	r3, #3
 8002ef8:	d10a      	bne.n	8002f10 <HAL_RCC_ClockConfig+0x11c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002efa:	68b3      	ldr	r3, [r6, #8]
 8002efc:	f003 030c 	and.w	r3, r3, #12
 8002f00:	2b0c      	cmp	r3, #12
 8002f02:	d08a      	beq.n	8002e1a <HAL_RCC_ClockConfig+0x26>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f04:	f7fe fb8e 	bl	8001624 <HAL_GetTick>
 8002f08:	1bc0      	subs	r0, r0, r7
 8002f0a:	4540      	cmp	r0, r8
 8002f0c:	d9f5      	bls.n	8002efa <HAL_RCC_ClockConfig+0x106>
 8002f0e:	e7e3      	b.n	8002ed8 <HAL_RCC_ClockConfig+0xe4>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d110      	bne.n	8002f36 <HAL_RCC_ClockConfig+0x142>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8002f14:	68b3      	ldr	r3, [r6, #8]
 8002f16:	f003 030c 	and.w	r3, r3, #12
 8002f1a:	2b04      	cmp	r3, #4
 8002f1c:	f43f af7d 	beq.w	8002e1a <HAL_RCC_ClockConfig+0x26>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f20:	f7fe fb80 	bl	8001624 <HAL_GetTick>
 8002f24:	1bc0      	subs	r0, r0, r7
 8002f26:	4540      	cmp	r0, r8
 8002f28:	d9f4      	bls.n	8002f14 <HAL_RCC_ClockConfig+0x120>
 8002f2a:	e7d5      	b.n	8002ed8 <HAL_RCC_ClockConfig+0xe4>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f2c:	f7fe fb7a 	bl	8001624 <HAL_GetTick>
 8002f30:	1bc0      	subs	r0, r0, r7
 8002f32:	4540      	cmp	r0, r8
 8002f34:	d8d0      	bhi.n	8002ed8 <HAL_RCC_ClockConfig+0xe4>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8002f36:	68b3      	ldr	r3, [r6, #8]
 8002f38:	f013 0f0c 	tst.w	r3, #12
 8002f3c:	d1f6      	bne.n	8002f2c <HAL_RCC_ClockConfig+0x138>
 8002f3e:	e76c      	b.n	8002e1a <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f40:	681a      	ldr	r2, [r3, #0]
 8002f42:	f022 0201 	bic.w	r2, r2, #1
 8002f46:	601a      	str	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	07da      	lsls	r2, r3, #31
 8002f4c:	f57f af6c 	bpl.w	8002e28 <HAL_RCC_ClockConfig+0x34>
 8002f50:	e755      	b.n	8002dfe <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f52:	4905      	ldr	r1, [pc, #20]	; (8002f68 <HAL_RCC_ClockConfig+0x174>)
 8002f54:	68e0      	ldr	r0, [r4, #12]
 8002f56:	688b      	ldr	r3, [r1, #8]
 8002f58:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002f5c:	4303      	orrs	r3, r0
 8002f5e:	608b      	str	r3, [r1, #8]
 8002f60:	e766      	b.n	8002e30 <HAL_RCC_ClockConfig+0x3c>
 8002f62:	bf00      	nop
 8002f64:	40023c00 	.word	0x40023c00
 8002f68:	40023800 	.word	0x40023800
 8002f6c:	08007860 	.word	0x08007860
 8002f70:	20000000 	.word	0x20000000
 8002f74:	20000008 	.word	0x20000008

08002f78 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002f78:	4b04      	ldr	r3, [pc, #16]	; (8002f8c <HAL_RCC_GetPCLK1Freq+0x14>)
 8002f7a:	4a05      	ldr	r2, [pc, #20]	; (8002f90 <HAL_RCC_GetPCLK1Freq+0x18>)
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8002f82:	5cd3      	ldrb	r3, [r2, r3]
 8002f84:	4a03      	ldr	r2, [pc, #12]	; (8002f94 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8002f86:	6810      	ldr	r0, [r2, #0]
}
 8002f88:	40d8      	lsrs	r0, r3
 8002f8a:	4770      	bx	lr
 8002f8c:	40023800 	.word	0x40023800
 8002f90:	08007870 	.word	0x08007870
 8002f94:	20000000 	.word	0x20000000

08002f98 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f98:	4b04      	ldr	r3, [pc, #16]	; (8002fac <HAL_RCC_GetPCLK2Freq+0x14>)
 8002f9a:	4a05      	ldr	r2, [pc, #20]	; (8002fb0 <HAL_RCC_GetPCLK2Freq+0x18>)
 8002f9c:	689b      	ldr	r3, [r3, #8]
 8002f9e:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8002fa2:	5cd3      	ldrb	r3, [r2, r3]
 8002fa4:	4a03      	ldr	r2, [pc, #12]	; (8002fb4 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8002fa6:	6810      	ldr	r0, [r2, #0]
}
 8002fa8:	40d8      	lsrs	r0, r3
 8002faa:	4770      	bx	lr
 8002fac:	40023800 	.word	0x40023800
 8002fb0:	08007870 	.word	0x08007870
 8002fb4:	20000000 	.word	0x20000000

08002fb8 <HAL_RCC_GetClockConfig>:
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002fb8:	230f      	movs	r3, #15
 8002fba:	6003      	str	r3, [r0, #0]
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002fbc:	4b0b      	ldr	r3, [pc, #44]	; (8002fec <HAL_RCC_GetClockConfig+0x34>)
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	f002 0203 	and.w	r2, r2, #3
 8002fc4:	6042      	str	r2, [r0, #4]
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
 8002fcc:	6082      	str	r2, [r0, #8]
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002fce:	689a      	ldr	r2, [r3, #8]
 8002fd0:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
 8002fd4:	60c2      	str	r2, [r0, #12]
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8002fd6:	689b      	ldr	r3, [r3, #8]
 8002fd8:	08db      	lsrs	r3, r3, #3
 8002fda:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002fde:	6103      	str	r3, [r0, #16]
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002fe0:	4b03      	ldr	r3, [pc, #12]	; (8002ff0 <HAL_RCC_GetClockConfig+0x38>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	600b      	str	r3, [r1, #0]
}
 8002fea:	4770      	bx	lr
 8002fec:	40023800 	.word	0x40023800
 8002ff0:	40023c00 	.word	0x40023c00

08002ff4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002ff4:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002ff6:	4604      	mov	r4, r0
 8002ff8:	2800      	cmp	r0, #0
 8002ffa:	d04d      	beq.n	8003098 <HAL_SPI_Init+0xa4>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on all devices in stm32l1xx serie.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE if TI mode is not supported */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002ffc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d146      	bne.n	8003090 <HAL_SPI_Init+0x9c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003002:	6842      	ldr	r2, [r0, #4]
 8003004:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8003008:	d000      	beq.n	800300c <HAL_SPI_Init+0x18>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800300a:	61c3      	str	r3, [r0, #28]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800300c:	2300      	movs	r3, #0
 800300e:	62a3      	str	r3, [r4, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003010:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
 8003014:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003018:	b923      	cbnz	r3, 8003024 <HAL_SPI_Init+0x30>

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800301a:	4620      	mov	r0, r4
    hspi->Lock = HAL_UNLOCKED;
 800301c:	f884 2050 	strb.w	r2, [r4, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8003020:	f7fe f8ea 	bl	80011f8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003024:	2302      	movs	r3, #2

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003026:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8003028:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 800302c:	680b      	ldr	r3, [r1, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800302e:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8003030:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003034:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003036:	6863      	ldr	r3, [r4, #4]
 8003038:	f400 4004 	and.w	r0, r0, #33792	; 0x8400
 800303c:	f403 7382 	and.w	r3, r3, #260	; 0x104
 8003040:	4303      	orrs	r3, r0
 8003042:	68e0      	ldr	r0, [r4, #12]
 8003044:	69a2      	ldr	r2, [r4, #24]
 8003046:	f400 6000 	and.w	r0, r0, #2048	; 0x800
 800304a:	4303      	orrs	r3, r0
 800304c:	6920      	ldr	r0, [r4, #16]
 800304e:	f000 0002 	and.w	r0, r0, #2
 8003052:	4303      	orrs	r3, r0
 8003054:	6960      	ldr	r0, [r4, #20]
 8003056:	f000 0001 	and.w	r0, r0, #1
 800305a:	4303      	orrs	r3, r0
 800305c:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8003060:	4303      	orrs	r3, r0
 8003062:	69e0      	ldr	r0, [r4, #28]
#if defined(SPI_CR2_FRF)
  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
#else
  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003064:	0c12      	lsrs	r2, r2, #16
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003066:	f000 0038 	and.w	r0, r0, #56	; 0x38
 800306a:	4303      	orrs	r3, r0
 800306c:	6a20      	ldr	r0, [r4, #32]
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800306e:	f002 0204 	and.w	r2, r2, #4
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003072:	f000 0080 	and.w	r0, r0, #128	; 0x80
 8003076:	4303      	orrs	r3, r0
 8003078:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 800307a:	f400 5000 	and.w	r0, r0, #8192	; 0x2000
 800307e:	4303      	orrs	r3, r0
 8003080:	600b      	str	r3, [r1, #0]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003082:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8003084:	2301      	movs	r3, #1
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003086:	604a      	str	r2, [r1, #4]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003088:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800308a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
}
 800308e:	bd10      	pop	{r4, pc}
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003090:	2300      	movs	r3, #0
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003092:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003096:	e7b9      	b.n	800300c <HAL_SPI_Init+0x18>
    return HAL_ERROR;
 8003098:	2001      	movs	r0, #1
 800309a:	e7f8      	b.n	800308e <HAL_SPI_Init+0x9a>

0800309c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800309c:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
  tmpcr1 = TIMx->CR1;
 80030a0:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80030a2:	d006      	beq.n	80030b2 <TIM_Base_SetConfig+0x16>
 80030a4:	4a18      	ldr	r2, [pc, #96]	; (8003108 <TIM_Base_SetConfig+0x6c>)
 80030a6:	4290      	cmp	r0, r2
 80030a8:	d003      	beq.n	80030b2 <TIM_Base_SetConfig+0x16>
 80030aa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80030ae:	4290      	cmp	r0, r2
 80030b0:	d10e      	bne.n	80030d0 <TIM_Base_SetConfig+0x34>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 80030b2:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80030b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030b8:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
    tmpcr1 |= Structure->CounterMode;
 80030bc:	ea43 0302 	orr.w	r3, r3, r2
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80030c0:	d011      	beq.n	80030e6 <TIM_Base_SetConfig+0x4a>
 80030c2:	4a11      	ldr	r2, [pc, #68]	; (8003108 <TIM_Base_SetConfig+0x6c>)
 80030c4:	4290      	cmp	r0, r2
 80030c6:	d00e      	beq.n	80030e6 <TIM_Base_SetConfig+0x4a>
 80030c8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80030cc:	4290      	cmp	r0, r2
 80030ce:	d00a      	beq.n	80030e6 <TIM_Base_SetConfig+0x4a>
 80030d0:	4a0e      	ldr	r2, [pc, #56]	; (800310c <TIM_Base_SetConfig+0x70>)
 80030d2:	4290      	cmp	r0, r2
 80030d4:	d007      	beq.n	80030e6 <TIM_Base_SetConfig+0x4a>
 80030d6:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80030da:	4290      	cmp	r0, r2
 80030dc:	d003      	beq.n	80030e6 <TIM_Base_SetConfig+0x4a>
 80030de:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80030e2:	4290      	cmp	r0, r2
 80030e4:	d103      	bne.n	80030ee <TIM_Base_SetConfig+0x52>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030e6:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 80030e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80030ec:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80030ee:	690a      	ldr	r2, [r1, #16]
 80030f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80030f4:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 80030f6:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030f8:	688b      	ldr	r3, [r1, #8]
 80030fa:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030fc:	680b      	ldr	r3, [r1, #0]
 80030fe:	6283      	str	r3, [r0, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003100:	2301      	movs	r3, #1
 8003102:	6143      	str	r3, [r0, #20]
}
 8003104:	4770      	bx	lr
 8003106:	bf00      	nop
 8003108:	40000400 	.word	0x40000400
 800310c:	40010800 	.word	0x40010800

08003110 <TIM_OC1_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003110:	6a03      	ldr	r3, [r0, #32]
{
 8003112:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003114:	f023 0301 	bic.w	r3, r3, #1
 8003118:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800311a:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800311c:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800311e:	6982      	ldr	r2, [r0, #24]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
  tmpccmrx &= ~TIM_CCMR1_CC1S;
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003120:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003122:	f022 0273 	bic.w	r2, r2, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003126:	432a      	orrs	r2, r5

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003128:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800312a:	f023 0302 	bic.w	r3, r3, #2

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800312e:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003130:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003132:	684a      	ldr	r2, [r1, #4]
  tmpccer |= OC_Config->OCPolarity;
 8003134:	432b      	orrs	r3, r5
  TIMx->CCR1 = OC_Config->Pulse;
 8003136:	6342      	str	r2, [r0, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003138:	6203      	str	r3, [r0, #32]
}
 800313a:	bd30      	pop	{r4, r5, pc}

0800313c <TIM_OC2_SetConfig>:
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800313c:	6a03      	ldr	r3, [r0, #32]
{
 800313e:	b530      	push	{r4, r5, lr}
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003140:	f023 0310 	bic.w	r3, r3, #16
 8003144:	6203      	str	r3, [r0, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003146:	6a03      	ldr	r3, [r0, #32]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003148:	6844      	ldr	r4, [r0, #4]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800314a:	6982      	ldr	r2, [r0, #24]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
  tmpccmrx &= ~TIM_CCMR1_CC2S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800314c:	680d      	ldr	r5, [r1, #0]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800314e:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003152:	ea42 2205 	orr.w	r2, r2, r5, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003156:	688d      	ldr	r5, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8003158:	f023 0320 	bic.w	r3, r3, #32

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800315c:	6044      	str	r4, [r0, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800315e:	6182      	str	r2, [r0, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003160:	684a      	ldr	r2, [r1, #4]
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003162:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  TIMx->CCR2 = OC_Config->Pulse;
 8003166:	6382      	str	r2, [r0, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003168:	6203      	str	r3, [r0, #32]
}
 800316a:	bd30      	pop	{r4, r5, pc}

0800316c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800316c:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800316e:	2401      	movs	r4, #1

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003170:	6a03      	ldr	r3, [r0, #32]
  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003172:	f001 011f 	and.w	r1, r1, #31
 8003176:	408c      	lsls	r4, r1
  TIMx->CCER &= ~tmp;
 8003178:	ea23 0304 	bic.w	r3, r3, r4
 800317c:	6203      	str	r3, [r0, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800317e:	6a03      	ldr	r3, [r0, #32]
 8003180:	408a      	lsls	r2, r1
 8003182:	431a      	orrs	r2, r3
 8003184:	6202      	str	r2, [r0, #32]
}
 8003186:	bd10      	pop	{r4, pc}

08003188 <HAL_TIM_Base_MspInit>:
}
 8003188:	4770      	bx	lr

0800318a <HAL_TIM_Base_Init>:
{
 800318a:	b510      	push	{r4, lr}
  if (htim == NULL)
 800318c:	4604      	mov	r4, r0
 800318e:	b1f0      	cbz	r0, 80031ce <HAL_TIM_Base_Init+0x44>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003190:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003194:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8003198:	b91b      	cbnz	r3, 80031a2 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800319a:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_Base_MspInit(htim);
 800319e:	f7ff fff3 	bl	8003188 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 80031a2:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031a4:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80031a6:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80031aa:	1d21      	adds	r1, r4, #4
 80031ac:	f7ff ff76 	bl	800309c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031b0:	2301      	movs	r3, #1
  return HAL_OK;
 80031b2:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80031b4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031b8:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
 80031bc:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
 80031c0:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80031c4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  htim->State = HAL_TIM_STATE_READY;
 80031c8:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 80031cc:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80031ce:	2001      	movs	r0, #1
 80031d0:	e7fc      	b.n	80031cc <HAL_TIM_Base_Init+0x42>
	...

080031d4 <HAL_TIM_Base_Start_IT>:
  if (htim->State != HAL_TIM_STATE_READY)
 80031d4:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80031d8:	2b01      	cmp	r3, #1
 80031da:	d120      	bne.n	800321e <HAL_TIM_Base_Start_IT+0x4a>
  htim->State = HAL_TIM_STATE_BUSY;
 80031dc:	2302      	movs	r3, #2
 80031de:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031e2:	6803      	ldr	r3, [r0, #0]
 80031e4:	68da      	ldr	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80031ea:	f042 0201 	orr.w	r2, r2, #1
 80031ee:	60da      	str	r2, [r3, #12]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031f0:	d00a      	beq.n	8003208 <HAL_TIM_Base_Start_IT+0x34>
 80031f2:	4a0c      	ldr	r2, [pc, #48]	; (8003224 <HAL_TIM_Base_Start_IT+0x50>)
 80031f4:	4293      	cmp	r3, r2
 80031f6:	d007      	beq.n	8003208 <HAL_TIM_Base_Start_IT+0x34>
 80031f8:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80031fc:	4293      	cmp	r3, r2
 80031fe:	d003      	beq.n	8003208 <HAL_TIM_Base_Start_IT+0x34>
 8003200:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 8003204:	4293      	cmp	r3, r2
 8003206:	d104      	bne.n	8003212 <HAL_TIM_Base_Start_IT+0x3e>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003208:	689a      	ldr	r2, [r3, #8]
 800320a:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800320e:	2a06      	cmp	r2, #6
 8003210:	d003      	beq.n	800321a <HAL_TIM_Base_Start_IT+0x46>
    __HAL_TIM_ENABLE(htim);
 8003212:	681a      	ldr	r2, [r3, #0]
 8003214:	f042 0201 	orr.w	r2, r2, #1
 8003218:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800321a:	2000      	movs	r0, #0
}
 800321c:	4770      	bx	lr
    return HAL_ERROR;
 800321e:	2001      	movs	r0, #1
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	40000400 	.word	0x40000400

08003228 <HAL_TIM_OC_Start>:
{
 8003228:	b510      	push	{r4, lr}
 800322a:	4604      	mov	r4, r0
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800322c:	b929      	cbnz	r1, 800323a <HAL_TIM_OC_Start+0x12>
 800322e:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
 8003232:	2b01      	cmp	r3, #1
 8003234:	d01d      	beq.n	8003272 <HAL_TIM_OC_Start+0x4a>
    return HAL_ERROR;
 8003236:	2001      	movs	r0, #1
}
 8003238:	bd10      	pop	{r4, pc}
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800323a:	2904      	cmp	r1, #4
 800323c:	d107      	bne.n	800324e <HAL_TIM_OC_Start+0x26>
 800323e:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
 8003242:	2b01      	cmp	r3, #1
 8003244:	d1f7      	bne.n	8003236 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003246:	2302      	movs	r3, #2
 8003248:	f880 303b 	strb.w	r3, [r0, #59]	; 0x3b
 800324c:	e014      	b.n	8003278 <HAL_TIM_OC_Start+0x50>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800324e:	2908      	cmp	r1, #8
 8003250:	d107      	bne.n	8003262 <HAL_TIM_OC_Start+0x3a>
 8003252:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003256:	2b01      	cmp	r3, #1
 8003258:	d1ed      	bne.n	8003236 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800325a:	2302      	movs	r3, #2
 800325c:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
 8003260:	e00a      	b.n	8003278 <HAL_TIM_OC_Start+0x50>
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003262:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8003266:	2b01      	cmp	r3, #1
 8003268:	d1e5      	bne.n	8003236 <HAL_TIM_OC_Start+0xe>
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800326a:	2302      	movs	r3, #2
 800326c:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
 8003270:	e002      	b.n	8003278 <HAL_TIM_OC_Start+0x50>
 8003272:	2302      	movs	r3, #2
 8003274:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003278:	2201      	movs	r2, #1
 800327a:	6820      	ldr	r0, [r4, #0]
 800327c:	f7ff ff76 	bl	800316c <TIM_CCxChannelCmd>
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003280:	6823      	ldr	r3, [r4, #0]
 8003282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003286:	d00a      	beq.n	800329e <HAL_TIM_OC_Start+0x76>
 8003288:	4a0a      	ldr	r2, [pc, #40]	; (80032b4 <HAL_TIM_OC_Start+0x8c>)
 800328a:	4293      	cmp	r3, r2
 800328c:	d007      	beq.n	800329e <HAL_TIM_OC_Start+0x76>
 800328e:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8003292:	4293      	cmp	r3, r2
 8003294:	d003      	beq.n	800329e <HAL_TIM_OC_Start+0x76>
 8003296:	f502 3280 	add.w	r2, r2, #65536	; 0x10000
 800329a:	4293      	cmp	r3, r2
 800329c:	d104      	bne.n	80032a8 <HAL_TIM_OC_Start+0x80>
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800329e:	689a      	ldr	r2, [r3, #8]
 80032a0:	f002 0207 	and.w	r2, r2, #7
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80032a4:	2a06      	cmp	r2, #6
 80032a6:	d003      	beq.n	80032b0 <HAL_TIM_OC_Start+0x88>
    __HAL_TIM_ENABLE(htim);
 80032a8:	681a      	ldr	r2, [r3, #0]
 80032aa:	f042 0201 	orr.w	r2, r2, #1
 80032ae:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 80032b0:	2000      	movs	r0, #0
 80032b2:	e7c1      	b.n	8003238 <HAL_TIM_OC_Start+0x10>
 80032b4:	40000400 	.word	0x40000400

080032b8 <HAL_TIM_OC_Stop>:
{
 80032b8:	b538      	push	{r3, r4, r5, lr}
 80032ba:	4604      	mov	r4, r0
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80032bc:	2200      	movs	r2, #0
 80032be:	6800      	ldr	r0, [r0, #0]
{
 80032c0:	460d      	mov	r5, r1
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80032c2:	f7ff ff53 	bl	800316c <TIM_CCxChannelCmd>
  __HAL_TIM_DISABLE(htim);
 80032c6:	f241 1211 	movw	r2, #4369	; 0x1111
 80032ca:	6823      	ldr	r3, [r4, #0]
 80032cc:	6a19      	ldr	r1, [r3, #32]
 80032ce:	4211      	tst	r1, r2
 80032d0:	bf02      	ittt	eq
 80032d2:	681a      	ldreq	r2, [r3, #0]
 80032d4:	f022 0201 	biceq.w	r2, r2, #1
 80032d8:	601a      	streq	r2, [r3, #0]
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80032da:	2301      	movs	r3, #1
 80032dc:	b91d      	cbnz	r5, 80032e6 <HAL_TIM_OC_Stop+0x2e>
 80032de:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
}
 80032e2:	2000      	movs	r0, #0
 80032e4:	bd38      	pop	{r3, r4, r5, pc}
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80032e6:	2d04      	cmp	r5, #4
 80032e8:	d102      	bne.n	80032f0 <HAL_TIM_OC_Stop+0x38>
 80032ea:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
 80032ee:	e7f8      	b.n	80032e2 <HAL_TIM_OC_Stop+0x2a>
 80032f0:	2d08      	cmp	r5, #8
 80032f2:	bf0c      	ite	eq
 80032f4:	f884 303c 	strbeq.w	r3, [r4, #60]	; 0x3c
 80032f8:	f884 303d 	strbne.w	r3, [r4, #61]	; 0x3d
 80032fc:	e7f1      	b.n	80032e2 <HAL_TIM_OC_Stop+0x2a>

080032fe <HAL_TIM_PWM_Init>:
{
 80032fe:	b510      	push	{r4, lr}
  if (htim == NULL)
 8003300:	4604      	mov	r4, r0
 8003302:	b1f0      	cbz	r0, 8003342 <HAL_TIM_PWM_Init+0x44>
  if (htim->State == HAL_TIM_STATE_RESET)
 8003304:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8003308:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800330c:	b91b      	cbnz	r3, 8003316 <HAL_TIM_PWM_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800330e:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_TIM_PWM_MspInit(htim);
 8003312:	f7fe f869 	bl	80013e8 <HAL_TIM_PWM_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 8003316:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003318:	6820      	ldr	r0, [r4, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 800331a:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800331e:	1d21      	adds	r1, r4, #4
 8003320:	f7ff febc 	bl	800309c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003324:	2301      	movs	r3, #1
  return HAL_OK;
 8003326:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003328:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800332c:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
 8003330:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
 8003334:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 8003338:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  htim->State = HAL_TIM_STATE_READY;
 800333c:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
}
 8003340:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8003342:	2001      	movs	r0, #1
 8003344:	e7fc      	b.n	8003340 <HAL_TIM_PWM_Init+0x42>

08003346 <HAL_TIM_PWM_Start>:
 8003346:	f7ff bf6f 	b.w	8003228 <HAL_TIM_OC_Start>

0800334a <HAL_TIM_PWM_Stop>:
 800334a:	f7ff bfb5 	b.w	80032b8 <HAL_TIM_OC_Stop>

0800334e <HAL_TIM_PWM_ConfigChannel>:
{
 800334e:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(htim);
 8003350:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
{
 8003354:	4605      	mov	r5, r0
  __HAL_LOCK(htim);
 8003356:	2b01      	cmp	r3, #1
{
 8003358:	460c      	mov	r4, r1
  __HAL_LOCK(htim);
 800335a:	d077      	beq.n	800344c <HAL_TIM_PWM_ConfigChannel+0xfe>
 800335c:	2301      	movs	r3, #1
  switch (Channel)
 800335e:	2a08      	cmp	r2, #8
  __HAL_LOCK(htim);
 8003360:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  switch (Channel)
 8003364:	d04f      	beq.n	8003406 <HAL_TIM_PWM_ConfigChannel+0xb8>
 8003366:	d806      	bhi.n	8003376 <HAL_TIM_PWM_ConfigChannel+0x28>
 8003368:	b35a      	cbz	r2, 80033c2 <HAL_TIM_PWM_ConfigChannel+0x74>
 800336a:	2a04      	cmp	r2, #4
 800336c:	d03a      	beq.n	80033e4 <HAL_TIM_PWM_ConfigChannel+0x96>
  __HAL_UNLOCK(htim);
 800336e:	2000      	movs	r0, #0
 8003370:	f885 0038 	strb.w	r0, [r5, #56]	; 0x38
}
 8003374:	bd70      	pop	{r4, r5, r6, pc}
  switch (Channel)
 8003376:	2a0c      	cmp	r2, #12
 8003378:	d1f9      	bne.n	800336e <HAL_TIM_PWM_ConfigChannel+0x20>
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800337a:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800337c:	6826      	ldr	r6, [r4, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800337e:	6a1a      	ldr	r2, [r3, #32]
 8003380:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003384:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8003386:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003388:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 800338a:	69d9      	ldr	r1, [r3, #28]
  tmpccer &= ~TIM_CCER_CC4P;
 800338c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003390:	f421 41e6 	bic.w	r1, r1, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003394:	ea41 2106 	orr.w	r1, r1, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003398:	68a6      	ldr	r6, [r4, #8]
  TIMx->CR2 = tmpcr2;
 800339a:	6058      	str	r0, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 800339c:	61d9      	str	r1, [r3, #28]
  TIMx->CCR4 = OC_Config->Pulse;
 800339e:	6861      	ldr	r1, [r4, #4]
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80033a0:	ea42 3206 	orr.w	r2, r2, r6, lsl #12
  TIMx->CCR4 = OC_Config->Pulse;
 80033a4:	6419      	str	r1, [r3, #64]	; 0x40
  TIMx->CCER = tmpccer;
 80033a6:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80033a8:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033aa:	68e1      	ldr	r1, [r4, #12]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80033ac:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033b0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80033b2:	69da      	ldr	r2, [r3, #28]
 80033b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033b8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033ba:	69da      	ldr	r2, [r3, #28]
 80033bc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80033c0:	e042      	b.n	8003448 <HAL_TIM_PWM_ConfigChannel+0xfa>
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80033c2:	6800      	ldr	r0, [r0, #0]
 80033c4:	f7ff fea4 	bl	8003110 <TIM_OC1_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80033c8:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80033ca:	68c9      	ldr	r1, [r1, #12]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80033cc:	699a      	ldr	r2, [r3, #24]
 80033ce:	f042 0208 	orr.w	r2, r2, #8
 80033d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80033d4:	699a      	ldr	r2, [r3, #24]
 80033d6:	f022 0204 	bic.w	r2, r2, #4
 80033da:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80033dc:	699a      	ldr	r2, [r3, #24]
 80033de:	430a      	orrs	r2, r1
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80033e0:	619a      	str	r2, [r3, #24]
      break;
 80033e2:	e7c4      	b.n	800336e <HAL_TIM_PWM_ConfigChannel+0x20>
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80033e4:	6800      	ldr	r0, [r0, #0]
 80033e6:	f7ff fea9 	bl	800313c <TIM_OC2_SetConfig>
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80033ea:	682b      	ldr	r3, [r5, #0]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80033ec:	68c9      	ldr	r1, [r1, #12]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80033ee:	699a      	ldr	r2, [r3, #24]
 80033f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80033f4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80033f6:	699a      	ldr	r2, [r3, #24]
 80033f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80033fc:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80033fe:	699a      	ldr	r2, [r3, #24]
 8003400:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003404:	e7ec      	b.n	80033e0 <HAL_TIM_PWM_ConfigChannel+0x92>
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003406:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8003408:	6826      	ldr	r6, [r4, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800340a:	6a1a      	ldr	r2, [r3, #32]
 800340c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003410:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8003412:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8003414:	6858      	ldr	r0, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8003416:	69d9      	ldr	r1, [r3, #28]
  tmpccer &= ~TIM_CCER_CC3P;
 8003418:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800341c:	f021 0173 	bic.w	r1, r1, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8003420:	4331      	orrs	r1, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003422:	68a6      	ldr	r6, [r4, #8]
  TIMx->CR2 = tmpcr2;
 8003424:	6058      	str	r0, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 8003426:	61d9      	str	r1, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 8003428:	6861      	ldr	r1, [r4, #4]
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800342a:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  TIMx->CCR3 = OC_Config->Pulse;
 800342e:	63d9      	str	r1, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8003430:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003432:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003434:	68e1      	ldr	r1, [r4, #12]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003436:	f042 0208 	orr.w	r2, r2, #8
 800343a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800343c:	69da      	ldr	r2, [r3, #28]
 800343e:	f022 0204 	bic.w	r2, r2, #4
 8003442:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003444:	69da      	ldr	r2, [r3, #28]
 8003446:	430a      	orrs	r2, r1
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003448:	61da      	str	r2, [r3, #28]
      break;
 800344a:	e790      	b.n	800336e <HAL_TIM_PWM_ConfigChannel+0x20>
  __HAL_LOCK(htim);
 800344c:	2002      	movs	r0, #2
 800344e:	e791      	b.n	8003374 <HAL_TIM_PWM_ConfigChannel+0x26>

08003450 <HAL_TIM_OC_DelayElapsedCallback>:
 8003450:	4770      	bx	lr

08003452 <HAL_TIM_IC_CaptureCallback>:
 8003452:	4770      	bx	lr

08003454 <HAL_TIM_PWM_PulseFinishedCallback>:
 8003454:	4770      	bx	lr

08003456 <HAL_TIM_TriggerCallback>:
 8003456:	4770      	bx	lr

08003458 <HAL_TIM_IRQHandler>:
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003458:	6803      	ldr	r3, [r0, #0]
{
 800345a:	b510      	push	{r4, lr}
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800345c:	691a      	ldr	r2, [r3, #16]
{
 800345e:	4604      	mov	r4, r0
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003460:	0791      	lsls	r1, r2, #30
 8003462:	d50e      	bpl.n	8003482 <HAL_TIM_IRQHandler+0x2a>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003464:	68da      	ldr	r2, [r3, #12]
 8003466:	0792      	lsls	r2, r2, #30
 8003468:	d50b      	bpl.n	8003482 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800346a:	f06f 0202 	mvn.w	r2, #2
 800346e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003470:	2201      	movs	r2, #1
 8003472:	7602      	strb	r2, [r0, #24]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003474:	699b      	ldr	r3, [r3, #24]
 8003476:	0799      	lsls	r1, r3, #30
 8003478:	d05c      	beq.n	8003534 <HAL_TIM_IRQHandler+0xdc>
          HAL_TIM_IC_CaptureCallback(htim);
 800347a:	f7ff ffea 	bl	8003452 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800347e:	2300      	movs	r3, #0
 8003480:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003482:	6823      	ldr	r3, [r4, #0]
 8003484:	691a      	ldr	r2, [r3, #16]
 8003486:	0752      	lsls	r2, r2, #29
 8003488:	d510      	bpl.n	80034ac <HAL_TIM_IRQHandler+0x54>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800348a:	68da      	ldr	r2, [r3, #12]
 800348c:	0750      	lsls	r0, r2, #29
 800348e:	d50d      	bpl.n	80034ac <HAL_TIM_IRQHandler+0x54>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003490:	f06f 0204 	mvn.w	r2, #4
 8003494:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003496:	2202      	movs	r2, #2
 8003498:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800349a:	699b      	ldr	r3, [r3, #24]
        HAL_TIM_IC_CaptureCallback(htim);
 800349c:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800349e:	f413 7f40 	tst.w	r3, #768	; 0x300
 80034a2:	d04d      	beq.n	8003540 <HAL_TIM_IRQHandler+0xe8>
        HAL_TIM_IC_CaptureCallback(htim);
 80034a4:	f7ff ffd5 	bl	8003452 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034a8:	2300      	movs	r3, #0
 80034aa:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034ac:	6823      	ldr	r3, [r4, #0]
 80034ae:	691a      	ldr	r2, [r3, #16]
 80034b0:	0711      	lsls	r1, r2, #28
 80034b2:	d50f      	bpl.n	80034d4 <HAL_TIM_IRQHandler+0x7c>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80034b4:	68da      	ldr	r2, [r3, #12]
 80034b6:	0712      	lsls	r2, r2, #28
 80034b8:	d50c      	bpl.n	80034d4 <HAL_TIM_IRQHandler+0x7c>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80034ba:	f06f 0208 	mvn.w	r2, #8
 80034be:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80034c0:	2204      	movs	r2, #4
 80034c2:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034c4:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80034c6:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80034c8:	079b      	lsls	r3, r3, #30
 80034ca:	d03f      	beq.n	800354c <HAL_TIM_IRQHandler+0xf4>
        HAL_TIM_IC_CaptureCallback(htim);
 80034cc:	f7ff ffc1 	bl	8003452 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034d0:	2300      	movs	r3, #0
 80034d2:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80034d4:	6823      	ldr	r3, [r4, #0]
 80034d6:	691a      	ldr	r2, [r3, #16]
 80034d8:	06d0      	lsls	r0, r2, #27
 80034da:	d510      	bpl.n	80034fe <HAL_TIM_IRQHandler+0xa6>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80034dc:	68da      	ldr	r2, [r3, #12]
 80034de:	06d1      	lsls	r1, r2, #27
 80034e0:	d50d      	bpl.n	80034fe <HAL_TIM_IRQHandler+0xa6>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80034e2:	f06f 0210 	mvn.w	r2, #16
 80034e6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80034e8:	2208      	movs	r2, #8
 80034ea:	7622      	strb	r2, [r4, #24]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034ec:	69db      	ldr	r3, [r3, #28]
        HAL_TIM_IC_CaptureCallback(htim);
 80034ee:	4620      	mov	r0, r4
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80034f0:	f413 7f40 	tst.w	r3, #768	; 0x300
 80034f4:	d030      	beq.n	8003558 <HAL_TIM_IRQHandler+0x100>
        HAL_TIM_IC_CaptureCallback(htim);
 80034f6:	f7ff ffac 	bl	8003452 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034fa:	2300      	movs	r3, #0
 80034fc:	7623      	strb	r3, [r4, #24]
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80034fe:	6823      	ldr	r3, [r4, #0]
 8003500:	691a      	ldr	r2, [r3, #16]
 8003502:	07d2      	lsls	r2, r2, #31
 8003504:	d508      	bpl.n	8003518 <HAL_TIM_IRQHandler+0xc0>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003506:	68da      	ldr	r2, [r3, #12]
 8003508:	07d0      	lsls	r0, r2, #31
 800350a:	d505      	bpl.n	8003518 <HAL_TIM_IRQHandler+0xc0>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800350c:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 8003510:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003512:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8003514:	f7fd fe42 	bl	800119c <HAL_TIM_PeriodElapsedCallback>
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003518:	6823      	ldr	r3, [r4, #0]
 800351a:	691a      	ldr	r2, [r3, #16]
 800351c:	0651      	lsls	r1, r2, #25
 800351e:	d508      	bpl.n	8003532 <HAL_TIM_IRQHandler+0xda>
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003520:	68da      	ldr	r2, [r3, #12]
 8003522:	0652      	lsls	r2, r2, #25
 8003524:	d505      	bpl.n	8003532 <HAL_TIM_IRQHandler+0xda>
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003526:	f06f 0240 	mvn.w	r2, #64	; 0x40
      HAL_TIM_TriggerCallback(htim);
 800352a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800352c:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800352e:	f7ff ff92 	bl	8003456 <HAL_TIM_TriggerCallback>
}
 8003532:	bd10      	pop	{r4, pc}
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003534:	f7ff ff8c 	bl	8003450 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003538:	4620      	mov	r0, r4
 800353a:	f7ff ff8b 	bl	8003454 <HAL_TIM_PWM_PulseFinishedCallback>
 800353e:	e79e      	b.n	800347e <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003540:	f7ff ff86 	bl	8003450 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003544:	4620      	mov	r0, r4
 8003546:	f7ff ff85 	bl	8003454 <HAL_TIM_PWM_PulseFinishedCallback>
 800354a:	e7ad      	b.n	80034a8 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800354c:	f7ff ff80 	bl	8003450 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003550:	4620      	mov	r0, r4
 8003552:	f7ff ff7f 	bl	8003454 <HAL_TIM_PWM_PulseFinishedCallback>
 8003556:	e7bb      	b.n	80034d0 <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003558:	f7ff ff7a 	bl	8003450 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800355c:	4620      	mov	r0, r4
 800355e:	f7ff ff79 	bl	8003454 <HAL_TIM_PWM_PulseFinishedCallback>
 8003562:	e7ca      	b.n	80034fa <HAL_TIM_IRQHandler+0xa2>

08003564 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003564:	b530      	push	{r4, r5, lr}
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003566:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
{
 800356a:	4602      	mov	r2, r0
  __HAL_LOCK(htim);
 800356c:	2b01      	cmp	r3, #1
 800356e:	f04f 0002 	mov.w	r0, #2
 8003572:	d022      	beq.n	80035ba <HAL_TIMEx_MasterConfigSynchronization+0x56>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003574:	6813      	ldr	r3, [r2, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8003576:	f882 0039 	strb.w	r0, [r2, #57]	; 0x39
  tmpcr2 = htim->Instance->CR2;
 800357a:	685c      	ldr	r4, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800357c:	680d      	ldr	r5, [r1, #0]
  tmpcr2 &= ~TIM_CR2_MMS;
 800357e:	f024 0470 	bic.w	r4, r4, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003582:	432c      	orrs	r4, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
  tmpsmcr = htim->Instance->SMCR;
 8003588:	6898      	ldr	r0, [r3, #8]
  htim->Instance->CR2 = tmpcr2;
 800358a:	605c      	str	r4, [r3, #4]
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800358c:	d00a      	beq.n	80035a4 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 800358e:	4c0b      	ldr	r4, [pc, #44]	; (80035bc <HAL_TIMEx_MasterConfigSynchronization+0x58>)
 8003590:	42a3      	cmp	r3, r4
 8003592:	d007      	beq.n	80035a4 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 8003594:	f504 6480 	add.w	r4, r4, #1024	; 0x400
 8003598:	42a3      	cmp	r3, r4
 800359a:	d003      	beq.n	80035a4 <HAL_TIMEx_MasterConfigSynchronization+0x40>
 800359c:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 80035a0:	42a3      	cmp	r3, r4
 80035a2:	d104      	bne.n	80035ae <HAL_TIMEx_MasterConfigSynchronization+0x4a>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035a4:	6849      	ldr	r1, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035a6:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035aa:	4301      	orrs	r1, r0

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035ac:	6099      	str	r1, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80035ae:	2301      	movs	r3, #1

  __HAL_UNLOCK(htim);
 80035b0:	2000      	movs	r0, #0
  htim->State = HAL_TIM_STATE_READY;
 80035b2:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
  __HAL_UNLOCK(htim);
 80035b6:	f882 0038 	strb.w	r0, [r2, #56]	; 0x38

  return HAL_OK;
}
 80035ba:	bd30      	pop	{r4, r5, pc}
 80035bc:	40000400 	.word	0x40000400

080035c0 <UART_EndRxTransfer>:
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80035c0:	6803      	ldr	r3, [r0, #0]
 80035c2:	68da      	ldr	r2, [r3, #12]
 80035c4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80035c8:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035ca:	695a      	ldr	r2, [r3, #20]
 80035cc:	f022 0201 	bic.w	r2, r2, #1
 80035d0:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035d2:	6b02      	ldr	r2, [r0, #48]	; 0x30
 80035d4:	2a01      	cmp	r2, #1
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035d6:	bf02      	ittt	eq
 80035d8:	68da      	ldreq	r2, [r3, #12]
 80035da:	f022 0210 	biceq.w	r2, r2, #16
 80035de:	60da      	streq	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035e0:	2320      	movs	r3, #32
 80035e2:	f880 303e 	strb.w	r3, [r0, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035e6:	2300      	movs	r3, #0
 80035e8:	6303      	str	r3, [r0, #48]	; 0x30
}
 80035ea:	4770      	bx	lr

080035ec <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80035ec:	b510      	push	{r4, lr}
 80035ee:	4604      	mov	r4, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035f0:	6802      	ldr	r2, [r0, #0]
 80035f2:	68c1      	ldr	r1, [r0, #12]
 80035f4:	6913      	ldr	r3, [r2, #16]
 80035f6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80035fa:	430b      	orrs	r3, r1
 80035fc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80035fe:	6883      	ldr	r3, [r0, #8]
 8003600:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 8003602:	68d1      	ldr	r1, [r2, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003604:	4303      	orrs	r3, r0
 8003606:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8003608:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800360c:	4303      	orrs	r3, r0
 800360e:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 8003610:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003614:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8003616:	430b      	orrs	r3, r1
 8003618:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800361a:	6953      	ldr	r3, [r2, #20]
 800361c:	69a1      	ldr	r1, [r4, #24]
 800361e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003622:	430b      	orrs	r3, r1
 8003624:	6153      	str	r3, [r2, #20]


  if((huart->Instance == USART1))
 8003626:	4b1a      	ldr	r3, [pc, #104]	; (8003690 <UART_SetConfig+0xa4>)
 8003628:	429a      	cmp	r2, r3
 800362a:	d120      	bne.n	800366e <UART_SetConfig+0x82>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800362c:	f7ff fcb4 	bl	8002f98 <HAL_RCC_GetPCLK2Freq>
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003630:	2319      	movs	r3, #25
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003632:	69e1      	ldr	r1, [r4, #28]
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003634:	4343      	muls	r3, r0
 8003636:	e9d4 2000 	ldrd	r2, r0, [r4]
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800363a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800363e:	f04f 0164 	mov.w	r1, #100	; 0x64
 8003642:	d117      	bne.n	8003674 <UART_SetConfig+0x88>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003644:	0040      	lsls	r0, r0, #1
 8003646:	fbb3 f0f0 	udiv	r0, r3, r0
 800364a:	fbb0 f4f1 	udiv	r4, r0, r1
 800364e:	fb01 0314 	mls	r3, r1, r4, r0
 8003652:	00db      	lsls	r3, r3, #3
 8003654:	3332      	adds	r3, #50	; 0x32
 8003656:	fbb3 f3f1 	udiv	r3, r3, r1
 800365a:	f003 0107 	and.w	r1, r3, #7
 800365e:	005b      	lsls	r3, r3, #1
 8003660:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 8003664:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003668:	440b      	add	r3, r1
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800366a:	6093      	str	r3, [r2, #8]
  }
}
 800366c:	bd10      	pop	{r4, pc}
    pclk = HAL_RCC_GetPCLK1Freq();
 800366e:	f7ff fc83 	bl	8002f78 <HAL_RCC_GetPCLK1Freq>
 8003672:	e7dd      	b.n	8003630 <UART_SetConfig+0x44>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003674:	0080      	lsls	r0, r0, #2
 8003676:	fbb3 f0f0 	udiv	r0, r3, r0
 800367a:	fbb0 f4f1 	udiv	r4, r0, r1
 800367e:	fb01 0314 	mls	r3, r1, r4, r0
 8003682:	011b      	lsls	r3, r3, #4
 8003684:	3332      	adds	r3, #50	; 0x32
 8003686:	fbb3 f3f1 	udiv	r3, r3, r1
 800368a:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800368e:	e7ec      	b.n	800366a <UART_SetConfig+0x7e>
 8003690:	40013800 	.word	0x40013800

08003694 <UART_WaitOnFlagUntilTimeout.constprop.0>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8003694:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003696:	4604      	mov	r4, r0
 8003698:	460e      	mov	r6, r1
 800369a:	4617      	mov	r7, r2
 800369c:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800369e:	6822      	ldr	r2, [r4, #0]
 80036a0:	6813      	ldr	r3, [r2, #0]
 80036a2:	ea36 0303 	bics.w	r3, r6, r3
 80036a6:	d101      	bne.n	80036ac <UART_WaitOnFlagUntilTimeout.constprop.0+0x18>
  return HAL_OK;
 80036a8:	2000      	movs	r0, #0
 80036aa:	e014      	b.n	80036d6 <UART_WaitOnFlagUntilTimeout.constprop.0+0x42>
    if (Timeout != HAL_MAX_DELAY)
 80036ac:	1c6b      	adds	r3, r5, #1
 80036ae:	d0f7      	beq.n	80036a0 <UART_WaitOnFlagUntilTimeout.constprop.0+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80036b0:	b995      	cbnz	r5, 80036d8 <UART_WaitOnFlagUntilTimeout.constprop.0+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036b2:	6823      	ldr	r3, [r4, #0]
        __HAL_UNLOCK(huart);
 80036b4:	2003      	movs	r0, #3
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036b6:	68da      	ldr	r2, [r3, #12]
 80036b8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80036bc:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036be:	695a      	ldr	r2, [r3, #20]
 80036c0:	f022 0201 	bic.w	r2, r2, #1
 80036c4:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 80036c6:	2320      	movs	r3, #32
 80036c8:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80036cc:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        __HAL_UNLOCK(huart);
 80036d0:	2300      	movs	r3, #0
 80036d2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 80036d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80036d8:	f7fd ffa4 	bl	8001624 <HAL_GetTick>
 80036dc:	1bc0      	subs	r0, r0, r7
 80036de:	4285      	cmp	r5, r0
 80036e0:	d2dd      	bcs.n	800369e <UART_WaitOnFlagUntilTimeout.constprop.0+0xa>
 80036e2:	e7e6      	b.n	80036b2 <UART_WaitOnFlagUntilTimeout.constprop.0+0x1e>

080036e4 <HAL_UART_Init>:
{
 80036e4:	b510      	push	{r4, lr}
  if (huart == NULL)
 80036e6:	4604      	mov	r4, r0
 80036e8:	b340      	cbz	r0, 800373c <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80036ea:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80036ee:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80036f2:	b91b      	cbnz	r3, 80036fc <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80036f4:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 80036f8:	f7fd ff06 	bl	8001508 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 80036fc:	2324      	movs	r3, #36	; 0x24
  __HAL_UART_DISABLE(huart);
 80036fe:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8003700:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8003704:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8003706:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8003708:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800370c:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800370e:	f7ff ff6d 	bl	80035ec <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003712:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003714:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003716:	691a      	ldr	r2, [r3, #16]
 8003718:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800371c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800371e:	695a      	ldr	r2, [r3, #20]
 8003720:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003724:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8003726:	68da      	ldr	r2, [r3, #12]
 8003728:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800372c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800372e:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003730:	6420      	str	r0, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003732:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003736:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
}
 800373a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800373c:	2001      	movs	r0, #1
 800373e:	e7fc      	b.n	800373a <HAL_UART_Init+0x56>

08003740 <HAL_UART_Transmit>:
{
 8003740:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003744:	4699      	mov	r9, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8003746:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
{
 800374a:	4604      	mov	r4, r0
  if (huart->gState == HAL_UART_STATE_READY)
 800374c:	2b20      	cmp	r3, #32
{
 800374e:	460e      	mov	r6, r1
 8003750:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8003752:	d148      	bne.n	80037e6 <HAL_UART_Transmit+0xa6>
    if ((pData == NULL) || (Size == 0U))
 8003754:	2900      	cmp	r1, #0
 8003756:	d044      	beq.n	80037e2 <HAL_UART_Transmit+0xa2>
 8003758:	2a00      	cmp	r2, #0
 800375a:	d042      	beq.n	80037e2 <HAL_UART_Transmit+0xa2>
    __HAL_LOCK(huart);
 800375c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8003760:	2b01      	cmp	r3, #1
 8003762:	d040      	beq.n	80037e6 <HAL_UART_Transmit+0xa6>
 8003764:	2301      	movs	r3, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003766:	2500      	movs	r5, #0
    __HAL_LOCK(huart);
 8003768:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800376c:	2321      	movs	r3, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800376e:	6405      	str	r5, [r0, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003770:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    tickstart = HAL_GetTick();
 8003774:	f7fd ff56 	bl	8001624 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003778:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800377a:	4680      	mov	r8, r0
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800377c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->TxXferSize = Size;
 8003780:	84a7      	strh	r7, [r4, #36]	; 0x24
    huart->TxXferCount = Size;
 8003782:	84e7      	strh	r7, [r4, #38]	; 0x26
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003784:	d103      	bne.n	800378e <HAL_UART_Transmit+0x4e>
 8003786:	6923      	ldr	r3, [r4, #16]
 8003788:	b90b      	cbnz	r3, 800378e <HAL_UART_Transmit+0x4e>
 800378a:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 800378c:	461e      	mov	r6, r3
    __HAL_UNLOCK(huart);
 800378e:	2300      	movs	r3, #0
 8003790:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    while (huart->TxXferCount > 0U)
 8003794:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8003796:	b29b      	uxth	r3, r3
 8003798:	b953      	cbnz	r3, 80037b0 <HAL_UART_Transmit+0x70>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800379a:	464b      	mov	r3, r9
 800379c:	4642      	mov	r2, r8
 800379e:	2140      	movs	r1, #64	; 0x40
 80037a0:	4620      	mov	r0, r4
 80037a2:	f7ff ff77 	bl	8003694 <UART_WaitOnFlagUntilTimeout.constprop.0>
 80037a6:	b950      	cbnz	r0, 80037be <HAL_UART_Transmit+0x7e>
    huart->gState = HAL_UART_STATE_READY;
 80037a8:	2320      	movs	r3, #32
 80037aa:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    return HAL_OK;
 80037ae:	e007      	b.n	80037c0 <HAL_UART_Transmit+0x80>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80037b0:	464b      	mov	r3, r9
 80037b2:	4642      	mov	r2, r8
 80037b4:	2180      	movs	r1, #128	; 0x80
 80037b6:	4620      	mov	r0, r4
 80037b8:	f7ff ff6c 	bl	8003694 <UART_WaitOnFlagUntilTimeout.constprop.0>
 80037bc:	b110      	cbz	r0, 80037c4 <HAL_UART_Transmit+0x84>
        return HAL_TIMEOUT;
 80037be:	2003      	movs	r0, #3
}
 80037c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037c4:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 80037c6:	b94e      	cbnz	r6, 80037dc <HAL_UART_Transmit+0x9c>
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80037c8:	f835 3b02 	ldrh.w	r3, [r5], #2
 80037cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80037d0:	6053      	str	r3, [r2, #4]
      huart->TxXferCount--;
 80037d2:	8ce1      	ldrh	r1, [r4, #38]	; 0x26
 80037d4:	3901      	subs	r1, #1
 80037d6:	b289      	uxth	r1, r1
 80037d8:	84e1      	strh	r1, [r4, #38]	; 0x26
 80037da:	e7db      	b.n	8003794 <HAL_UART_Transmit+0x54>
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80037dc:	f816 3b01 	ldrb.w	r3, [r6], #1
 80037e0:	e7f6      	b.n	80037d0 <HAL_UART_Transmit+0x90>
      return  HAL_ERROR;
 80037e2:	2001      	movs	r0, #1
 80037e4:	e7ec      	b.n	80037c0 <HAL_UART_Transmit+0x80>
    return HAL_BUSY;
 80037e6:	2002      	movs	r0, #2
 80037e8:	e7ea      	b.n	80037c0 <HAL_UART_Transmit+0x80>

080037ea <HAL_UART_RxHalfCpltCallback>:
 80037ea:	4770      	bx	lr

080037ec <HAL_UART_ErrorCallback>:
 80037ec:	4770      	bx	lr

080037ee <UART_DMAError>:
{
 80037ee:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80037f0:	6a40      	ldr	r0, [r0, #36]	; 0x24
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80037f2:	6803      	ldr	r3, [r0, #0]
 80037f4:	695a      	ldr	r2, [r3, #20]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80037f6:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
 80037fa:	2921      	cmp	r1, #33	; 0x21
 80037fc:	d10a      	bne.n	8003814 <UART_DMAError+0x26>
 80037fe:	0612      	lsls	r2, r2, #24
 8003800:	d508      	bpl.n	8003814 <UART_DMAError+0x26>
    huart->TxXferCount = 0x00U;
 8003802:	2200      	movs	r2, #0
 8003804:	84c2      	strh	r2, [r0, #38]	; 0x26
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8003806:	68da      	ldr	r2, [r3, #12]
 8003808:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800380c:	60da      	str	r2, [r3, #12]
  huart->gState = HAL_UART_STATE_READY;
 800380e:	2220      	movs	r2, #32
 8003810:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003814:	695b      	ldr	r3, [r3, #20]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8003816:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 800381a:	2a22      	cmp	r2, #34	; 0x22
 800381c:	d105      	bne.n	800382a <UART_DMAError+0x3c>
 800381e:	065b      	lsls	r3, r3, #25
 8003820:	d503      	bpl.n	800382a <UART_DMAError+0x3c>
    huart->RxXferCount = 0x00U;
 8003822:	2300      	movs	r3, #0
 8003824:	85c3      	strh	r3, [r0, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8003826:	f7ff fecb 	bl	80035c0 <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800382a:	6c03      	ldr	r3, [r0, #64]	; 0x40
 800382c:	f043 0310 	orr.w	r3, r3, #16
 8003830:	6403      	str	r3, [r0, #64]	; 0x40
  HAL_UART_ErrorCallback(huart);
 8003832:	f7ff ffdb 	bl	80037ec <HAL_UART_ErrorCallback>
}
 8003836:	bd08      	pop	{r3, pc}

08003838 <HAL_UARTEx_RxEventCallback>:
}
 8003838:	4770      	bx	lr

0800383a <UART_DMARxHalfCplt>:
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800383a:	6a40      	ldr	r0, [r0, #36]	; 0x24
{
 800383c:	b508      	push	{r3, lr}
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800383e:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003840:	2b01      	cmp	r3, #1
 8003842:	d104      	bne.n	800384e <UART_DMARxHalfCplt+0x14>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8003844:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 8003846:	0849      	lsrs	r1, r1, #1
 8003848:	f7ff fff6 	bl	8003838 <HAL_UARTEx_RxEventCallback>
}
 800384c:	bd08      	pop	{r3, pc}
    HAL_UART_RxHalfCpltCallback(huart);
 800384e:	f7ff ffcc 	bl	80037ea <HAL_UART_RxHalfCpltCallback>
}
 8003852:	e7fb      	b.n	800384c <UART_DMARxHalfCplt+0x12>

08003854 <UART_DMAReceiveCplt>:
{
 8003854:	b508      	push	{r3, lr}
 8003856:	4603      	mov	r3, r0
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003858:	681b      	ldr	r3, [r3, #0]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800385a:	6a40      	ldr	r0, [r0, #36]	; 0x24
  if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f013 0320 	ands.w	r3, r3, #32
 8003862:	d117      	bne.n	8003894 <UART_DMAReceiveCplt+0x40>
    huart->RxXferCount = 0U;
 8003864:	85c3      	strh	r3, [r0, #46]	; 0x2e
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003866:	6803      	ldr	r3, [r0, #0]
 8003868:	68da      	ldr	r2, [r3, #12]
 800386a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800386e:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003870:	695a      	ldr	r2, [r3, #20]
 8003872:	f022 0201 	bic.w	r2, r2, #1
 8003876:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003878:	695a      	ldr	r2, [r3, #20]
 800387a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800387e:	615a      	str	r2, [r3, #20]
    huart->RxState = HAL_UART_STATE_READY;
 8003880:	2220      	movs	r2, #32
 8003882:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003886:	6b02      	ldr	r2, [r0, #48]	; 0x30
 8003888:	2a01      	cmp	r2, #1
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800388a:	bf02      	ittt	eq
 800388c:	68da      	ldreq	r2, [r3, #12]
 800388e:	f022 0210 	biceq.w	r2, r2, #16
 8003892:	60da      	streq	r2, [r3, #12]
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003894:	6b03      	ldr	r3, [r0, #48]	; 0x30
 8003896:	2b01      	cmp	r3, #1
 8003898:	d103      	bne.n	80038a2 <UART_DMAReceiveCplt+0x4e>
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800389a:	8d81      	ldrh	r1, [r0, #44]	; 0x2c
 800389c:	f7ff ffcc 	bl	8003838 <HAL_UARTEx_RxEventCallback>
}
 80038a0:	bd08      	pop	{r3, pc}
    HAL_UART_RxCpltCallback(huart);
 80038a2:	f002 fb9d 	bl	8005fe0 <HAL_UART_RxCpltCallback>
}
 80038a6:	e7fb      	b.n	80038a0 <UART_DMAReceiveCplt+0x4c>

080038a8 <UART_Start_Receive_DMA>:
{
 80038a8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80038aa:	4613      	mov	r3, r2
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038ac:	2500      	movs	r5, #0
  huart->RxXferSize = Size;
 80038ae:	8582      	strh	r2, [r0, #44]	; 0x2c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80038b0:	2222      	movs	r2, #34	; 0x22
{
 80038b2:	4604      	mov	r4, r0
  huart->pRxBuffPtr = pData;
 80038b4:	6281      	str	r1, [r0, #40]	; 0x28
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038b6:	6405      	str	r5, [r0, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80038b8:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80038bc:	6b80      	ldr	r0, [r0, #56]	; 0x38
 80038be:	4a12      	ldr	r2, [pc, #72]	; (8003908 <UART_Start_Receive_DMA+0x60>)
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80038c0:	6826      	ldr	r6, [r4, #0]
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80038c2:	6282      	str	r2, [r0, #40]	; 0x28
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80038c4:	4a11      	ldr	r2, [pc, #68]	; (800390c <UART_Start_Receive_DMA+0x64>)
 80038c6:	62c2      	str	r2, [r0, #44]	; 0x2c
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80038c8:	4a11      	ldr	r2, [pc, #68]	; (8003910 <UART_Start_Receive_DMA+0x68>)
  huart->hdmarx->XferAbortCallback = NULL;
 80038ca:	e9c0 250c 	strd	r2, r5, [r0, #48]	; 0x30
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80038ce:	460a      	mov	r2, r1
 80038d0:	1d31      	adds	r1, r6, #4
 80038d2:	f7fe f98f 	bl	8001bf4 <HAL_DMA_Start_IT>
}
 80038d6:	4628      	mov	r0, r5
  __HAL_UART_CLEAR_OREFLAG(huart);
 80038d8:	6823      	ldr	r3, [r4, #0]
 80038da:	9501      	str	r5, [sp, #4]
 80038dc:	681a      	ldr	r2, [r3, #0]
 80038de:	9201      	str	r2, [sp, #4]
 80038e0:	685a      	ldr	r2, [r3, #4]
  __HAL_UNLOCK(huart);
 80038e2:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  __HAL_UART_CLEAR_OREFLAG(huart);
 80038e6:	9201      	str	r2, [sp, #4]
 80038e8:	9a01      	ldr	r2, [sp, #4]
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80038ea:	68da      	ldr	r2, [r3, #12]
 80038ec:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80038f0:	60da      	str	r2, [r3, #12]
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80038f2:	695a      	ldr	r2, [r3, #20]
 80038f4:	f042 0201 	orr.w	r2, r2, #1
 80038f8:	615a      	str	r2, [r3, #20]
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80038fa:	695a      	ldr	r2, [r3, #20]
 80038fc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003900:	615a      	str	r2, [r3, #20]
}
 8003902:	b002      	add	sp, #8
 8003904:	bd70      	pop	{r4, r5, r6, pc}
 8003906:	bf00      	nop
 8003908:	08003855 	.word	0x08003855
 800390c:	0800383b 	.word	0x0800383b
 8003910:	080037ef 	.word	0x080037ef

08003914 <HAL_UART_Receive_DMA>:
{
 8003914:	b470      	push	{r4, r5, r6}
  if (huart->RxState == HAL_UART_STATE_READY)
 8003916:	f890 603e 	ldrb.w	r6, [r0, #62]	; 0x3e
 800391a:	2e20      	cmp	r6, #32
 800391c:	d110      	bne.n	8003940 <HAL_UART_Receive_DMA+0x2c>
    if ((pData == NULL) || (Size == 0U))
 800391e:	b161      	cbz	r1, 800393a <HAL_UART_Receive_DMA+0x26>
 8003920:	b15a      	cbz	r2, 800393a <HAL_UART_Receive_DMA+0x26>
    __HAL_LOCK(huart);
 8003922:	f890 403c 	ldrb.w	r4, [r0, #60]	; 0x3c
 8003926:	2c01      	cmp	r4, #1
 8003928:	d00a      	beq.n	8003940 <HAL_UART_Receive_DMA+0x2c>
 800392a:	2401      	movs	r4, #1
 800392c:	f880 403c 	strb.w	r4, [r0, #60]	; 0x3c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003930:	2400      	movs	r4, #0
 8003932:	6304      	str	r4, [r0, #48]	; 0x30
}
 8003934:	bc70      	pop	{r4, r5, r6}
    return(UART_Start_Receive_DMA(huart, pData, Size));
 8003936:	f7ff bfb7 	b.w	80038a8 <UART_Start_Receive_DMA>
      return HAL_ERROR;
 800393a:	2001      	movs	r0, #1
}
 800393c:	bc70      	pop	{r4, r5, r6}
 800393e:	4770      	bx	lr
    return HAL_BUSY;
 8003940:	2002      	movs	r0, #2
 8003942:	e7fb      	b.n	800393c <HAL_UART_Receive_DMA+0x28>

08003944 <vListInitialise>:
     * as the only list entry. */
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */

    /* The list end value is the highest possible value in the list to
     * ensure it remains at the end of the list. */
    pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003944:	f04f 32ff 	mov.w	r2, #4294967295
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003948:	f100 0308 	add.w	r3, r0, #8

    /* The list end next and previous pointers point to itself so we know
     * when the list is empty. */
    pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );     /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800394c:	e9c0 2302 	strd	r2, r3, [r0, #8]
    pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003950:	6043      	str	r3, [r0, #4]
    pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003952:	6103      	str	r3, [r0, #16]

    pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003954:	2300      	movs	r3, #0
 8003956:	6003      	str	r3, [r0, #0]

    /* Write known values into the list if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
    listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003958:	4770      	bx	lr

0800395a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
    /* Make sure the list item is not recorded as being on a list. */
    pxItem->pxContainer = NULL;
 800395a:	2300      	movs	r3, #0
 800395c:	6103      	str	r3, [r0, #16]

    /* Write known values into the list item if
     * configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
    listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
    listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800395e:	4770      	bx	lr

08003960 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList,
                     ListItem_t * const pxNewListItem )
{
    ListItem_t * const pxIndex = pxList->pxIndex;
 8003960:	6843      	ldr	r3, [r0, #4]

    /* Insert a new list item into pxList, but rather than sort the list,
     * makes the new list item the last item to be removed by a call to
     * listGET_OWNER_OF_NEXT_ENTRY(). */
    pxNewListItem->pxNext = pxIndex;
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003962:	689a      	ldr	r2, [r3, #8]
    pxNewListItem->pxNext = pxIndex;
 8003964:	604b      	str	r3, [r1, #4]
    pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003966:	608a      	str	r2, [r1, #8]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003968:	689a      	ldr	r2, [r3, #8]
 800396a:	6051      	str	r1, [r2, #4]
    pxIndex->pxPrevious = pxNewListItem;
 800396c:	6099      	str	r1, [r3, #8]

    /* Remember which list the item is in. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
 800396e:	6803      	ldr	r3, [r0, #0]
    pxNewListItem->pxContainer = pxList;
 8003970:	6108      	str	r0, [r1, #16]
    ( pxList->uxNumberOfItems )++;
 8003972:	3301      	adds	r3, #1
 8003974:	6003      	str	r3, [r0, #0]
}
 8003976:	4770      	bx	lr

08003978 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList,
                  ListItem_t * const pxNewListItem )
{
 8003978:	b530      	push	{r4, r5, lr}
    ListItem_t * pxIterator;
    const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800397a:	680c      	ldr	r4, [r1, #0]
     * new list item should be placed after it.  This ensures that TCBs which are
     * stored in ready lists (all of which have the same xItemValue value) get a
     * share of the CPU.  However, if the xItemValue is the same as the back marker
     * the iteration loop below will not end.  Therefore the value is checked
     * first, and the algorithm slightly modified if necessary. */
    if( xValueOfInsertion == portMAX_DELAY )
 800397c:	1c63      	adds	r3, r4, #1
 800397e:	d10a      	bne.n	8003996 <vListInsert+0x1e>
    {
        pxIterator = pxList->xListEnd.pxPrevious;
 8003980:	6903      	ldr	r3, [r0, #16]
            /* There is nothing to do here, just iterating to the wanted
             * insertion position. */
        }
    }

    pxNewListItem->pxNext = pxIterator->pxNext;
 8003982:	685a      	ldr	r2, [r3, #4]
 8003984:	604a      	str	r2, [r1, #4]
    pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003986:	6091      	str	r1, [r2, #8]
    pxNewListItem->pxPrevious = pxIterator;
 8003988:	608b      	str	r3, [r1, #8]
    pxIterator->pxNext = pxNewListItem;
 800398a:	6059      	str	r1, [r3, #4]

    /* Remember which list the item is in.  This allows fast removal of the
     * item later. */
    pxNewListItem->pxContainer = pxList;

    ( pxList->uxNumberOfItems )++;
 800398c:	6803      	ldr	r3, [r0, #0]
    pxNewListItem->pxContainer = pxList;
 800398e:	6108      	str	r0, [r1, #16]
    ( pxList->uxNumberOfItems )++;
 8003990:	3301      	adds	r3, #1
 8003992:	6003      	str	r3, [r0, #0]
}
 8003994:	bd30      	pop	{r4, r5, pc}
        for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003996:	f100 0208 	add.w	r2, r0, #8
 800399a:	4613      	mov	r3, r2
 800399c:	6852      	ldr	r2, [r2, #4]
 800399e:	6815      	ldr	r5, [r2, #0]
 80039a0:	42a5      	cmp	r5, r4
 80039a2:	d9fa      	bls.n	800399a <vListInsert+0x22>
 80039a4:	e7ed      	b.n	8003982 <vListInsert+0xa>

080039a6 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
 * item. */
    List_t * const pxList = pxItemToRemove->pxContainer;
 80039a6:	6903      	ldr	r3, [r0, #16]

    pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80039a8:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 80039ac:	608a      	str	r2, [r1, #8]
    pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80039ae:	6051      	str	r1, [r2, #4]

    /* Only used during decision coverage testing. */
    mtCOVERAGE_TEST_DELAY();

    /* Make sure the index is left pointing to a valid item. */
    if( pxList->pxIndex == pxItemToRemove )
 80039b0:	6859      	ldr	r1, [r3, #4]
 80039b2:	4281      	cmp	r1, r0
    {
        pxList->pxIndex = pxItemToRemove->pxPrevious;
 80039b4:	bf08      	it	eq
 80039b6:	605a      	streq	r2, [r3, #4]
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }

    pxItemToRemove->pxContainer = NULL;
 80039b8:	2200      	movs	r2, #0
 80039ba:	6102      	str	r2, [r0, #16]
    ( pxList->uxNumberOfItems )--;
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	3a01      	subs	r2, #1
 80039c0:	601a      	str	r2, [r3, #0]

    return pxList->uxNumberOfItems;
 80039c2:	6818      	ldr	r0, [r3, #0]
}
 80039c4:	4770      	bx	lr

080039c6 <prvIsQueueEmpty>:
    taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t * pxQueue )
{
 80039c6:	b510      	push	{r4, lr}
 80039c8:	4604      	mov	r4, r0
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 80039ca:	f000 fffb 	bl	80049c4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0 )
 80039ce:	6ba4      	ldr	r4, [r4, #56]	; 0x38
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
 80039d0:	f001 f808 	bl	80049e4 <vPortExitCritical>

    return xReturn;
}
 80039d4:	fab4 f084 	clz	r0, r4
 80039d8:	0940      	lsrs	r0, r0, #5
 80039da:	bd10      	pop	{r4, pc}

080039dc <prvCopyDataToQueue>:
{
 80039dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039de:	4615      	mov	r5, r2
    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80039e0:	6c02      	ldr	r2, [r0, #64]	; 0x40
{
 80039e2:	4604      	mov	r4, r0
    uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80039e4:	6b86      	ldr	r6, [r0, #56]	; 0x38
    if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80039e6:	b952      	cbnz	r2, 80039fe <prvCopyDataToQueue+0x22>
                if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80039e8:	6807      	ldr	r7, [r0, #0]
 80039ea:	bb47      	cbnz	r7, 8003a3e <prvCopyDataToQueue+0x62>
                    xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80039ec:	6880      	ldr	r0, [r0, #8]
 80039ee:	f000 ff1b 	bl	8004828 <xTaskPriorityDisinherit>
 80039f2:	4605      	mov	r5, r0
                    pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80039f4:	60a7      	str	r7, [r4, #8]
    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80039f6:	3601      	adds	r6, #1
}
 80039f8:	4628      	mov	r0, r5
    pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80039fa:	63a6      	str	r6, [r4, #56]	; 0x38
}
 80039fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if( xPosition == queueSEND_TO_BACK )
 80039fe:	b965      	cbnz	r5, 8003a1a <prvCopyDataToQueue+0x3e>
        ( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003a00:	6840      	ldr	r0, [r0, #4]
 8003a02:	f002 fcfd 	bl	8006400 <memcpy>
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003a06:	6863      	ldr	r3, [r4, #4]
 8003a08:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003a0a:	4413      	add	r3, r2
        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003a0c:	68a2      	ldr	r2, [r4, #8]
        pxQueue->pcWriteTo += pxQueue->uxItemSize;                                                       /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003a0e:	6063      	str	r3, [r4, #4]
        if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail )                                             /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003a10:	4293      	cmp	r3, r2
 8003a12:	d3f0      	bcc.n	80039f6 <prvCopyDataToQueue+0x1a>
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003a14:	6823      	ldr	r3, [r4, #0]
 8003a16:	6063      	str	r3, [r4, #4]
 8003a18:	e7ed      	b.n	80039f6 <prvCopyDataToQueue+0x1a>
        ( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003a1a:	68c0      	ldr	r0, [r0, #12]
 8003a1c:	f002 fcf0 	bl	8006400 <memcpy>
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003a20:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8003a22:	68e3      	ldr	r3, [r4, #12]
 8003a24:	4251      	negs	r1, r2
 8003a26:	1a9b      	subs	r3, r3, r2
        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003a28:	6822      	ldr	r2, [r4, #0]
        pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003a2a:	60e3      	str	r3, [r4, #12]
        if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003a2c:	4293      	cmp	r3, r2
            pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003a2e:	bf3e      	ittt	cc
 8003a30:	68a3      	ldrcc	r3, [r4, #8]
 8003a32:	185b      	addcc	r3, r3, r1
 8003a34:	60e3      	strcc	r3, [r4, #12]
        if( xPosition == queueOVERWRITE )
 8003a36:	2d02      	cmp	r5, #2
 8003a38:	d101      	bne.n	8003a3e <prvCopyDataToQueue+0x62>
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a3a:	b116      	cbz	r6, 8003a42 <prvCopyDataToQueue+0x66>
                --uxMessagesWaiting;
 8003a3c:	3e01      	subs	r6, #1
    BaseType_t xReturn = pdFALSE;
 8003a3e:	2500      	movs	r5, #0
 8003a40:	e7d9      	b.n	80039f6 <prvCopyDataToQueue+0x1a>
 8003a42:	4635      	mov	r5, r6
 8003a44:	e7d7      	b.n	80039f6 <prvCopyDataToQueue+0x1a>

08003a46 <prvCopyDataFromQueue>:
{
 8003a46:	4603      	mov	r3, r0
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003a48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8003a4a:	4608      	mov	r0, r1
 8003a4c:	b410      	push	{r4}
    if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003a4e:	b162      	cbz	r2, 8003a6a <prvCopyDataFromQueue+0x24>
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003a50:	68dc      	ldr	r4, [r3, #12]
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003a52:	6899      	ldr	r1, [r3, #8]
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003a54:	4414      	add	r4, r2
        if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003a56:	428c      	cmp	r4, r1
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003a58:	bf28      	it	cs
 8003a5a:	6819      	ldrcs	r1, [r3, #0]
        pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize;           /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003a5c:	60dc      	str	r4, [r3, #12]
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003a5e:	bf28      	it	cs
 8003a60:	60d9      	strcs	r1, [r3, #12]
        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003a62:	68d9      	ldr	r1, [r3, #12]
}
 8003a64:	bc10      	pop	{r4}
        ( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003a66:	f002 bccb 	b.w	8006400 <memcpy>
}
 8003a6a:	bc10      	pop	{r4}
 8003a6c:	4770      	bx	lr

08003a6e <prvUnlockQueue>:
{
 8003a6e:	b570      	push	{r4, r5, r6, lr}
 8003a70:	4604      	mov	r4, r0
    taskENTER_CRITICAL();
 8003a72:	f000 ffa7 	bl	80049c4 <vPortEnterCritical>
        int8_t cTxLock = pxQueue->cTxLock;
 8003a76:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003a7a:	f104 0624 	add.w	r6, r4, #36	; 0x24
        int8_t cTxLock = pxQueue->cTxLock;
 8003a7e:	b26d      	sxtb	r5, r5
        while( cTxLock > queueLOCKED_UNMODIFIED )
 8003a80:	2d00      	cmp	r5, #0
 8003a82:	dc14      	bgt.n	8003aae <prvUnlockQueue+0x40>
        pxQueue->cTxLock = queueUNLOCKED;
 8003a84:	23ff      	movs	r3, #255	; 0xff
 8003a86:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
    taskEXIT_CRITICAL();
 8003a8a:	f000 ffab 	bl	80049e4 <vPortExitCritical>
    taskENTER_CRITICAL();
 8003a8e:	f000 ff99 	bl	80049c4 <vPortEnterCritical>
        int8_t cRxLock = pxQueue->cRxLock;
 8003a92:	f894 5044 	ldrb.w	r5, [r4, #68]	; 0x44
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a96:	f104 0610 	add.w	r6, r4, #16
        int8_t cRxLock = pxQueue->cRxLock;
 8003a9a:	b26d      	sxtb	r5, r5
        while( cRxLock > queueLOCKED_UNMODIFIED )
 8003a9c:	2d00      	cmp	r5, #0
 8003a9e:	dc12      	bgt.n	8003ac6 <prvUnlockQueue+0x58>
        pxQueue->cRxLock = queueUNLOCKED;
 8003aa0:	23ff      	movs	r3, #255	; 0xff
 8003aa2:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
}
 8003aa6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    taskEXIT_CRITICAL();
 8003aaa:	f000 bf9b 	b.w	80049e4 <vPortExitCritical>
                    if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003aae:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d0e7      	beq.n	8003a84 <prvUnlockQueue+0x16>
                        if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ab4:	4630      	mov	r0, r6
 8003ab6:	f000 fdcd 	bl	8004654 <xTaskRemoveFromEventList>
 8003aba:	b108      	cbz	r0, 8003ac0 <prvUnlockQueue+0x52>
                            vTaskMissedYield();
 8003abc:	f000 fe5c 	bl	8004778 <vTaskMissedYield>
            --cTxLock;
 8003ac0:	3d01      	subs	r5, #1
 8003ac2:	b26d      	sxtb	r5, r5
 8003ac4:	e7dc      	b.n	8003a80 <prvUnlockQueue+0x12>
            if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003ac6:	6923      	ldr	r3, [r4, #16]
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d0e9      	beq.n	8003aa0 <prvUnlockQueue+0x32>
                if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003acc:	4630      	mov	r0, r6
 8003ace:	f000 fdc1 	bl	8004654 <xTaskRemoveFromEventList>
 8003ad2:	b108      	cbz	r0, 8003ad8 <prvUnlockQueue+0x6a>
                    vTaskMissedYield();
 8003ad4:	f000 fe50 	bl	8004778 <vTaskMissedYield>
                --cRxLock;
 8003ad8:	3d01      	subs	r5, #1
 8003ada:	b26d      	sxtb	r5, r5
 8003adc:	e7de      	b.n	8003a9c <prvUnlockQueue+0x2e>

08003ade <xQueueGenericReset>:
{
 8003ade:	b570      	push	{r4, r5, r6, lr}
 8003ae0:	460e      	mov	r6, r1
    if( ( pxQueue != NULL ) &&
 8003ae2:	4604      	mov	r4, r0
 8003ae4:	b310      	cbz	r0, 8003b2c <xQueueGenericReset+0x4e>
        ( pxQueue->uxLength >= 1U ) &&
 8003ae6:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
    if( ( pxQueue != NULL ) &&
 8003ae8:	b300      	cbz	r0, 8003b2c <xQueueGenericReset+0x4e>
        ( ( SIZE_MAX / pxQueue->uxLength ) >= pxQueue->uxItemSize ) )
 8003aea:	6c25      	ldr	r5, [r4, #64]	; 0x40
 8003aec:	fba5 3500 	umull	r3, r5, r5, r0
 8003af0:	b9dd      	cbnz	r5, 8003b2a <xQueueGenericReset+0x4c>
        taskENTER_CRITICAL();
 8003af2:	f000 ff67 	bl	80049c4 <vPortEnterCritical>
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003af6:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	; 0x3c
 8003afa:	434b      	muls	r3, r1
 8003afc:	6822      	ldr	r2, [r4, #0]
            pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003afe:	63a5      	str	r5, [r4, #56]	; 0x38
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b00:	18d0      	adds	r0, r2, r3
            pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b02:	1a5b      	subs	r3, r3, r1
 8003b04:	4413      	add	r3, r2
 8003b06:	60e3      	str	r3, [r4, #12]
            pxQueue->cRxLock = queueUNLOCKED;
 8003b08:	23ff      	movs	r3, #255	; 0xff
            pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b0a:	60a0      	str	r0, [r4, #8]
            pxQueue->cRxLock = queueUNLOCKED;
 8003b0c:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
            pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b10:	6062      	str	r2, [r4, #4]
            pxQueue->cTxLock = queueUNLOCKED;
 8003b12:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
            if( xNewQueue == pdFALSE )
 8003b16:	b156      	cbz	r6, 8003b2e <xQueueGenericReset+0x50>
                vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003b18:	f104 0010 	add.w	r0, r4, #16
 8003b1c:	f7ff ff12 	bl	8003944 <vListInitialise>
                vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003b20:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003b24:	f7ff ff0e 	bl	8003944 <vListInitialise>
 8003b28:	e012      	b.n	8003b50 <xQueueGenericReset+0x72>
        xReturn = pdFAIL;
 8003b2a:	2000      	movs	r0, #0
}
 8003b2c:	bd70      	pop	{r4, r5, r6, pc}
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b2e:	6923      	ldr	r3, [r4, #16]
 8003b30:	b173      	cbz	r3, 8003b50 <xQueueGenericReset+0x72>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b32:	f104 0010 	add.w	r0, r4, #16
 8003b36:	f000 fd8d 	bl	8004654 <xTaskRemoveFromEventList>
 8003b3a:	b148      	cbz	r0, 8003b50 <xQueueGenericReset+0x72>
                        queueYIELD_IF_USING_PREEMPTION();
 8003b3c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003b40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b44:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003b48:	f3bf 8f4f 	dsb	sy
 8003b4c:	f3bf 8f6f 	isb	sy
        taskEXIT_CRITICAL();
 8003b50:	f000 ff48 	bl	80049e4 <vPortExitCritical>
 8003b54:	2001      	movs	r0, #1
 8003b56:	e7e9      	b.n	8003b2c <xQueueGenericReset+0x4e>

08003b58 <xQueueGenericCreate>:
    {
 8003b58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b5a:	460d      	mov	r5, r1
 8003b5c:	4617      	mov	r7, r2
        if( ( uxQueueLength > ( UBaseType_t ) 0 ) &&
 8003b5e:	4606      	mov	r6, r0
 8003b60:	b910      	cbnz	r0, 8003b68 <xQueueGenericCreate+0x10>
        Queue_t * pxNewQueue = NULL;
 8003b62:	2400      	movs	r4, #0
    }
 8003b64:	4620      	mov	r0, r4
 8003b66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003b68:	fba0 2301 	umull	r2, r3, r0, r1
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d1f8      	bne.n	8003b62 <xQueueGenericCreate+0xa>
            ( ( SIZE_MAX - sizeof( Queue_t ) ) >= ( uxQueueLength * uxItemSize ) ) )
 8003b70:	4348      	muls	r0, r1
            ( ( SIZE_MAX / uxQueueLength ) >= uxItemSize ) &&
 8003b72:	f110 0f51 	cmn.w	r0, #81	; 0x51
 8003b76:	d8f4      	bhi.n	8003b62 <xQueueGenericCreate+0xa>
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003b78:	3050      	adds	r0, #80	; 0x50
 8003b7a:	f000 ffcd 	bl	8004b18 <pvPortMalloc>
            if( pxNewQueue != NULL )
 8003b7e:	4604      	mov	r4, r0
 8003b80:	2800      	cmp	r0, #0
 8003b82:	d0ee      	beq.n	8003b62 <xQueueGenericCreate+0xa>
    if( uxItemSize == ( UBaseType_t ) 0 )
 8003b84:	b15d      	cbz	r5, 8003b9e <xQueueGenericCreate+0x46>
                pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b86:	f100 0350 	add.w	r3, r0, #80	; 0x50
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003b8a:	2101      	movs	r1, #1
 8003b8c:	4620      	mov	r0, r4
    pxNewQueue->uxItemSize = uxItemSize;
 8003b8e:	e9c4 650f 	strd	r6, r5, [r4, #60]	; 0x3c
 8003b92:	6023      	str	r3, [r4, #0]
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003b94:	f7ff ffa3 	bl	8003ade <xQueueGenericReset>
            pxNewQueue->ucQueueType = ucQueueType;
 8003b98:	f884 704c 	strb.w	r7, [r4, #76]	; 0x4c
        return pxNewQueue;
 8003b9c:	e7e2      	b.n	8003b64 <xQueueGenericCreate+0xc>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	e7f3      	b.n	8003b8a <xQueueGenericCreate+0x32>

08003ba2 <xQueueGenericSend>:
{
 8003ba2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003ba6:	f04f 0800 	mov.w	r8, #0
{
 8003baa:	4604      	mov	r4, r0
 8003bac:	460f      	mov	r7, r1
 8003bae:	461e      	mov	r6, r3
        prvLockQueue( pxQueue );
 8003bb0:	46c1      	mov	r9, r8
{
 8003bb2:	b085      	sub	sp, #20
 8003bb4:	9201      	str	r2, [sp, #4]
        taskENTER_CRITICAL();
 8003bb6:	f000 ff05 	bl	80049c4 <vPortEnterCritical>
            if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003bba:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003bbc:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003bbe:	429a      	cmp	r2, r3
 8003bc0:	d301      	bcc.n	8003bc6 <xQueueGenericSend+0x24>
 8003bc2:	2e02      	cmp	r6, #2
 8003bc4:	d11b      	bne.n	8003bfe <xQueueGenericSend+0x5c>
                        xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003bc6:	4632      	mov	r2, r6
 8003bc8:	4639      	mov	r1, r7
 8003bca:	4620      	mov	r0, r4
 8003bcc:	f7ff ff06 	bl	80039dc <prvCopyDataToQueue>
                        if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003bd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8003bd2:	b11b      	cbz	r3, 8003bdc <xQueueGenericSend+0x3a>
                            if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003bd4:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003bd8:	f000 fd3c 	bl	8004654 <xTaskRemoveFromEventList>
                        else if( xYieldRequired != pdFALSE )
 8003bdc:	b148      	cbz	r0, 8003bf2 <xQueueGenericSend+0x50>
                            queueYIELD_IF_USING_PREEMPTION();
 8003bde:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003be2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003be6:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003bea:	f3bf 8f4f 	dsb	sy
 8003bee:	f3bf 8f6f 	isb	sy
                taskEXIT_CRITICAL();
 8003bf2:	f000 fef7 	bl	80049e4 <vPortExitCritical>
                return pdPASS;
 8003bf6:	2001      	movs	r0, #1
}
 8003bf8:	b005      	add	sp, #20
 8003bfa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
                if( xTicksToWait == ( TickType_t ) 0 )
 8003bfe:	9d01      	ldr	r5, [sp, #4]
 8003c00:	b91d      	cbnz	r5, 8003c0a <xQueueGenericSend+0x68>
                    taskEXIT_CRITICAL();
 8003c02:	f000 feef 	bl	80049e4 <vPortExitCritical>
            return errQUEUE_FULL;
 8003c06:	2000      	movs	r0, #0
 8003c08:	e7f6      	b.n	8003bf8 <xQueueGenericSend+0x56>
                else if( xEntryTimeSet == pdFALSE )
 8003c0a:	f1b8 0f00 	cmp.w	r8, #0
 8003c0e:	d102      	bne.n	8003c16 <xQueueGenericSend+0x74>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003c10:	a802      	add	r0, sp, #8
 8003c12:	f000 fd7d 	bl	8004710 <vTaskInternalSetTimeOutState>
        taskEXIT_CRITICAL();
 8003c16:	f000 fee5 	bl	80049e4 <vPortExitCritical>
        vTaskSuspendAll();
 8003c1a:	f000 fb77 	bl	800430c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003c1e:	f000 fed1 	bl	80049c4 <vPortEnterCritical>
 8003c22:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003c26:	2bff      	cmp	r3, #255	; 0xff
 8003c28:	bf08      	it	eq
 8003c2a:	f884 9044 	strbeq.w	r9, [r4, #68]	; 0x44
 8003c2e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003c32:	2bff      	cmp	r3, #255	; 0xff
 8003c34:	bf08      	it	eq
 8003c36:	f884 9045 	strbeq.w	r9, [r4, #69]	; 0x45
 8003c3a:	f000 fed3 	bl	80049e4 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c3e:	a901      	add	r1, sp, #4
 8003c40:	a802      	add	r0, sp, #8
 8003c42:	f000 fd71 	bl	8004728 <xTaskCheckForTimeOut>
 8003c46:	bb40      	cbnz	r0, 8003c9a <xQueueGenericSend+0xf8>

static BaseType_t prvIsQueueFull( const Queue_t * pxQueue )
{
    BaseType_t xReturn;

    taskENTER_CRITICAL();
 8003c48:	f000 febc 	bl	80049c4 <vPortEnterCritical>
    {
        if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003c4c:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8003c4e:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d10f      	bne.n	8003c74 <xQueueGenericSend+0xd2>
        else
        {
            xReturn = pdFALSE;
        }
    }
    taskEXIT_CRITICAL();
 8003c54:	f000 fec6 	bl	80049e4 <vPortExitCritical>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003c58:	9901      	ldr	r1, [sp, #4]
 8003c5a:	f104 0010 	add.w	r0, r4, #16
 8003c5e:	f000 fce9 	bl	8004634 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003c62:	4620      	mov	r0, r4
 8003c64:	f7ff ff03 	bl	8003a6e <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 8003c68:	f000 fc08 	bl	800447c <xTaskResumeAll>
 8003c6c:	b150      	cbz	r0, 8003c84 <xQueueGenericSend+0xe2>
{
 8003c6e:	f04f 0801 	mov.w	r8, #1
 8003c72:	e7a0      	b.n	8003bb6 <xQueueGenericSend+0x14>
    taskEXIT_CRITICAL();
 8003c74:	f000 feb6 	bl	80049e4 <vPortExitCritical>
                prvUnlockQueue( pxQueue );
 8003c78:	4620      	mov	r0, r4
 8003c7a:	f7ff fef8 	bl	8003a6e <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003c7e:	f000 fbfd 	bl	800447c <xTaskResumeAll>
 8003c82:	e7f4      	b.n	8003c6e <xQueueGenericSend+0xcc>
                    portYIELD_WITHIN_API();
 8003c84:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003c88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c8c:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003c90:	f3bf 8f4f 	dsb	sy
 8003c94:	f3bf 8f6f 	isb	sy
 8003c98:	e7e9      	b.n	8003c6e <xQueueGenericSend+0xcc>
            prvUnlockQueue( pxQueue );
 8003c9a:	4620      	mov	r0, r4
 8003c9c:	f7ff fee7 	bl	8003a6e <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003ca0:	f000 fbec 	bl	800447c <xTaskResumeAll>
 8003ca4:	e7af      	b.n	8003c06 <xQueueGenericSend+0x64>

08003ca6 <xQueueCreateMutex>:
    {
 8003ca6:	b570      	push	{r4, r5, r6, lr}
 8003ca8:	4606      	mov	r6, r0
            pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003caa:	2050      	movs	r0, #80	; 0x50
 8003cac:	f000 ff34 	bl	8004b18 <pvPortMalloc>
            if( pxNewQueue != NULL )
 8003cb0:	4604      	mov	r4, r0
 8003cb2:	b188      	cbz	r0, 8003cd8 <xQueueCreateMutex+0x32>
    pxNewQueue->uxItemSize = uxItemSize;
 8003cb4:	2500      	movs	r5, #0
 8003cb6:	2101      	movs	r1, #1
        pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003cb8:	6000      	str	r0, [r0, #0]
    pxNewQueue->uxItemSize = uxItemSize;
 8003cba:	e9c0 150f 	strd	r1, r5, [r0, #60]	; 0x3c
    ( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003cbe:	f7ff ff0e 	bl	8003ade <xQueueGenericReset>
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003cc2:	462b      	mov	r3, r5
 8003cc4:	462a      	mov	r2, r5
 8003cc6:	4629      	mov	r1, r5
 8003cc8:	4620      	mov	r0, r4
            pxNewQueue->ucQueueType = ucQueueType;
 8003cca:	f884 604c 	strb.w	r6, [r4, #76]	; 0x4c
            pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8003cce:	60a5      	str	r5, [r4, #8]
            pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8003cd0:	6025      	str	r5, [r4, #0]
            pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8003cd2:	60e5      	str	r5, [r4, #12]
            ( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8003cd4:	f7ff ff65 	bl	8003ba2 <xQueueGenericSend>
    }
 8003cd8:	4620      	mov	r0, r4
 8003cda:	bd70      	pop	{r4, r5, r6, pc}

08003cdc <xQueueReceive>:
{
 8003cdc:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
    BaseType_t xEntryTimeSet = pdFALSE;
 8003ce0:	2700      	movs	r7, #0
{
 8003ce2:	4604      	mov	r4, r0
 8003ce4:	460e      	mov	r6, r1
        prvLockQueue( pxQueue );
 8003ce6:	46b8      	mov	r8, r7
{
 8003ce8:	9201      	str	r2, [sp, #4]
        taskENTER_CRITICAL();
 8003cea:	f000 fe6b 	bl	80049c4 <vPortEnterCritical>
            const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003cee:	6ba5      	ldr	r5, [r4, #56]	; 0x38
            if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003cf0:	b1e5      	cbz	r5, 8003d2c <xQueueReceive+0x50>
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003cf2:	4631      	mov	r1, r6
 8003cf4:	4620      	mov	r0, r4
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003cf6:	3d01      	subs	r5, #1
                prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003cf8:	f7ff fea5 	bl	8003a46 <prvCopyDataFromQueue>
                pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003cfc:	63a5      	str	r5, [r4, #56]	; 0x38
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cfe:	6923      	ldr	r3, [r4, #16]
 8003d00:	b173      	cbz	r3, 8003d20 <xQueueReceive+0x44>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d02:	f104 0010 	add.w	r0, r4, #16
 8003d06:	f000 fca5 	bl	8004654 <xTaskRemoveFromEventList>
 8003d0a:	b148      	cbz	r0, 8003d20 <xQueueReceive+0x44>
                        queueYIELD_IF_USING_PREEMPTION();
 8003d0c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003d10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d14:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003d18:	f3bf 8f4f 	dsb	sy
 8003d1c:	f3bf 8f6f 	isb	sy
                taskEXIT_CRITICAL();
 8003d20:	f000 fe60 	bl	80049e4 <vPortExitCritical>
                return pdPASS;
 8003d24:	2001      	movs	r0, #1
}
 8003d26:	b004      	add	sp, #16
 8003d28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if( xTicksToWait == ( TickType_t ) 0 )
 8003d2c:	9d01      	ldr	r5, [sp, #4]
 8003d2e:	b91d      	cbnz	r5, 8003d38 <xQueueReceive+0x5c>
                    taskEXIT_CRITICAL();
 8003d30:	f000 fe58 	bl	80049e4 <vPortExitCritical>
                return errQUEUE_EMPTY;
 8003d34:	2000      	movs	r0, #0
 8003d36:	e7f6      	b.n	8003d26 <xQueueReceive+0x4a>
                else if( xEntryTimeSet == pdFALSE )
 8003d38:	b917      	cbnz	r7, 8003d40 <xQueueReceive+0x64>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003d3a:	a802      	add	r0, sp, #8
 8003d3c:	f000 fce8 	bl	8004710 <vTaskInternalSetTimeOutState>
        taskEXIT_CRITICAL();
 8003d40:	f000 fe50 	bl	80049e4 <vPortExitCritical>
        vTaskSuspendAll();
 8003d44:	f000 fae2 	bl	800430c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003d48:	f000 fe3c 	bl	80049c4 <vPortEnterCritical>
 8003d4c:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003d50:	2bff      	cmp	r3, #255	; 0xff
 8003d52:	bf08      	it	eq
 8003d54:	f884 8044 	strbeq.w	r8, [r4, #68]	; 0x44
 8003d58:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003d5c:	2bff      	cmp	r3, #255	; 0xff
 8003d5e:	bf08      	it	eq
 8003d60:	f884 8045 	strbeq.w	r8, [r4, #69]	; 0x45
 8003d64:	f000 fe3e 	bl	80049e4 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003d68:	a901      	add	r1, sp, #4
 8003d6a:	a802      	add	r0, sp, #8
 8003d6c:	f000 fcdc 	bl	8004728 <xTaskCheckForTimeOut>
 8003d70:	bb00      	cbnz	r0, 8003db4 <xQueueReceive+0xd8>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d72:	4620      	mov	r0, r4
 8003d74:	f7ff fe27 	bl	80039c6 <prvIsQueueEmpty>
 8003d78:	b1b0      	cbz	r0, 8003da8 <xQueueReceive+0xcc>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003d7a:	9901      	ldr	r1, [sp, #4]
 8003d7c:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003d80:	f000 fc58 	bl	8004634 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003d84:	4620      	mov	r0, r4
 8003d86:	f7ff fe72 	bl	8003a6e <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 8003d8a:	f000 fb77 	bl	800447c <xTaskResumeAll>
 8003d8e:	b948      	cbnz	r0, 8003da4 <xQueueReceive+0xc8>
                    portYIELD_WITHIN_API();
 8003d90:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003d94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d98:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003d9c:	f3bf 8f4f 	dsb	sy
 8003da0:	f3bf 8f6f 	isb	sy
{
 8003da4:	2701      	movs	r7, #1
 8003da6:	e7a0      	b.n	8003cea <xQueueReceive+0xe>
                prvUnlockQueue( pxQueue );
 8003da8:	4620      	mov	r0, r4
 8003daa:	f7ff fe60 	bl	8003a6e <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003dae:	f000 fb65 	bl	800447c <xTaskResumeAll>
 8003db2:	e7f7      	b.n	8003da4 <xQueueReceive+0xc8>
            prvUnlockQueue( pxQueue );
 8003db4:	4620      	mov	r0, r4
 8003db6:	f7ff fe5a 	bl	8003a6e <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003dba:	f000 fb5f 	bl	800447c <xTaskResumeAll>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003dbe:	4620      	mov	r0, r4
 8003dc0:	f7ff fe01 	bl	80039c6 <prvIsQueueEmpty>
 8003dc4:	2800      	cmp	r0, #0
 8003dc6:	d0ed      	beq.n	8003da4 <xQueueReceive+0xc8>
 8003dc8:	e7b4      	b.n	8003d34 <xQueueReceive+0x58>

08003dca <xQueueSemaphoreTake>:
{
 8003dca:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
        BaseType_t xInheritanceOccurred = pdFALSE;
 8003dce:	2500      	movs	r5, #0
{
 8003dd0:	4604      	mov	r4, r0
    BaseType_t xEntryTimeSet = pdFALSE;
 8003dd2:	462f      	mov	r7, r5
        prvLockQueue( pxQueue );
 8003dd4:	462e      	mov	r6, r5
{
 8003dd6:	9101      	str	r1, [sp, #4]
        taskENTER_CRITICAL();
 8003dd8:	f000 fdf4 	bl	80049c4 <vPortEnterCritical>
            const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003ddc:	6ba3      	ldr	r3, [r4, #56]	; 0x38
            if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003dde:	b1f3      	cbz	r3, 8003e1e <xQueueSemaphoreTake+0x54>
                pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003de0:	3b01      	subs	r3, #1
 8003de2:	63a3      	str	r3, [r4, #56]	; 0x38
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003de4:	6823      	ldr	r3, [r4, #0]
 8003de6:	b913      	cbnz	r3, 8003dee <xQueueSemaphoreTake+0x24>
                            pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003de8:	f000 fd9a 	bl	8004920 <pvTaskIncrementMutexHeldCount>
 8003dec:	60a0      	str	r0, [r4, #8]
                if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003dee:	6923      	ldr	r3, [r4, #16]
 8003df0:	b173      	cbz	r3, 8003e10 <xQueueSemaphoreTake+0x46>
                    if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003df2:	f104 0010 	add.w	r0, r4, #16
 8003df6:	f000 fc2d 	bl	8004654 <xTaskRemoveFromEventList>
 8003dfa:	b148      	cbz	r0, 8003e10 <xQueueSemaphoreTake+0x46>
                        queueYIELD_IF_USING_PREEMPTION();
 8003dfc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003e00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e04:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003e08:	f3bf 8f4f 	dsb	sy
 8003e0c:	f3bf 8f6f 	isb	sy
                taskEXIT_CRITICAL();
 8003e10:	f000 fde8 	bl	80049e4 <vPortExitCritical>
                return pdPASS;
 8003e14:	2501      	movs	r5, #1
}
 8003e16:	4628      	mov	r0, r5
 8003e18:	b004      	add	sp, #16
 8003e1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                if( xTicksToWait == ( TickType_t ) 0 )
 8003e1e:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8003e22:	f1b8 0f00 	cmp.w	r8, #0
 8003e26:	d103      	bne.n	8003e30 <xQueueSemaphoreTake+0x66>
                            taskEXIT_CRITICAL();
 8003e28:	f000 fddc 	bl	80049e4 <vPortExitCritical>
                return errQUEUE_EMPTY;
 8003e2c:	2500      	movs	r5, #0
 8003e2e:	e7f2      	b.n	8003e16 <xQueueSemaphoreTake+0x4c>
                else if( xEntryTimeSet == pdFALSE )
 8003e30:	b917      	cbnz	r7, 8003e38 <xQueueSemaphoreTake+0x6e>
                    vTaskInternalSetTimeOutState( &xTimeOut );
 8003e32:	a802      	add	r0, sp, #8
 8003e34:	f000 fc6c 	bl	8004710 <vTaskInternalSetTimeOutState>
        taskEXIT_CRITICAL();
 8003e38:	f000 fdd4 	bl	80049e4 <vPortExitCritical>
        vTaskSuspendAll();
 8003e3c:	f000 fa66 	bl	800430c <vTaskSuspendAll>
        prvLockQueue( pxQueue );
 8003e40:	f000 fdc0 	bl	80049c4 <vPortEnterCritical>
 8003e44:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 8003e48:	2bff      	cmp	r3, #255	; 0xff
 8003e4a:	bf08      	it	eq
 8003e4c:	f884 6044 	strbeq.w	r6, [r4, #68]	; 0x44
 8003e50:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8003e54:	2bff      	cmp	r3, #255	; 0xff
 8003e56:	bf08      	it	eq
 8003e58:	f884 6045 	strbeq.w	r6, [r4, #69]	; 0x45
 8003e5c:	f000 fdc2 	bl	80049e4 <vPortExitCritical>
        if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e60:	a901      	add	r1, sp, #4
 8003e62:	a802      	add	r0, sp, #8
 8003e64:	f000 fc60 	bl	8004728 <xTaskCheckForTimeOut>
 8003e68:	bb50      	cbnz	r0, 8003ec0 <xQueueSemaphoreTake+0xf6>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003e6a:	4620      	mov	r0, r4
 8003e6c:	f7ff fdab 	bl	80039c6 <prvIsQueueEmpty>
 8003e70:	b300      	cbz	r0, 8003eb4 <xQueueSemaphoreTake+0xea>
                        if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003e72:	6823      	ldr	r3, [r4, #0]
 8003e74:	b93b      	cbnz	r3, 8003e86 <xQueueSemaphoreTake+0xbc>
                            taskENTER_CRITICAL();
 8003e76:	f000 fda5 	bl	80049c4 <vPortEnterCritical>
                                xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003e7a:	68a0      	ldr	r0, [r4, #8]
 8003e7c:	f000 fc82 	bl	8004784 <xTaskPriorityInherit>
 8003e80:	4605      	mov	r5, r0
                            taskEXIT_CRITICAL();
 8003e82:	f000 fdaf 	bl	80049e4 <vPortExitCritical>
                vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003e86:	9901      	ldr	r1, [sp, #4]
 8003e88:	f104 0024 	add.w	r0, r4, #36	; 0x24
 8003e8c:	f000 fbd2 	bl	8004634 <vTaskPlaceOnEventList>
                prvUnlockQueue( pxQueue );
 8003e90:	4620      	mov	r0, r4
 8003e92:	f7ff fdec 	bl	8003a6e <prvUnlockQueue>
                if( xTaskResumeAll() == pdFALSE )
 8003e96:	f000 faf1 	bl	800447c <xTaskResumeAll>
 8003e9a:	b948      	cbnz	r0, 8003eb0 <xQueueSemaphoreTake+0xe6>
                    portYIELD_WITHIN_API();
 8003e9c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003ea0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ea4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003ea8:	f3bf 8f4f 	dsb	sy
 8003eac:	f3bf 8f6f 	isb	sy
{
 8003eb0:	2701      	movs	r7, #1
 8003eb2:	e791      	b.n	8003dd8 <xQueueSemaphoreTake+0xe>
                prvUnlockQueue( pxQueue );
 8003eb4:	4620      	mov	r0, r4
 8003eb6:	f7ff fdda 	bl	8003a6e <prvUnlockQueue>
                ( void ) xTaskResumeAll();
 8003eba:	f000 fadf 	bl	800447c <xTaskResumeAll>
 8003ebe:	e7f7      	b.n	8003eb0 <xQueueSemaphoreTake+0xe6>
            prvUnlockQueue( pxQueue );
 8003ec0:	4620      	mov	r0, r4
 8003ec2:	f7ff fdd4 	bl	8003a6e <prvUnlockQueue>
            ( void ) xTaskResumeAll();
 8003ec6:	f000 fad9 	bl	800447c <xTaskResumeAll>
            if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003eca:	4620      	mov	r0, r4
 8003ecc:	f7ff fd7b 	bl	80039c6 <prvIsQueueEmpty>
 8003ed0:	2800      	cmp	r0, #0
 8003ed2:	d0ed      	beq.n	8003eb0 <xQueueSemaphoreTake+0xe6>
                        if( xInheritanceOccurred != pdFALSE )
 8003ed4:	2d00      	cmp	r5, #0
 8003ed6:	d09e      	beq.n	8003e16 <xQueueSemaphoreTake+0x4c>
                            taskENTER_CRITICAL();
 8003ed8:	f000 fd74 	bl	80049c4 <vPortEnterCritical>
        if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003edc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8003ede:	b119      	cbz	r1, 8003ee8 <xQueueSemaphoreTake+0x11e>
            uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003ee0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8003ee2:	6819      	ldr	r1, [r3, #0]
 8003ee4:	f1c1 0105 	rsb	r1, r1, #5
                                vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003ee8:	68a0      	ldr	r0, [r4, #8]
 8003eea:	f000 fcd7 	bl	800489c <vTaskPriorityDisinheritAfterTimeout>
 8003eee:	e79b      	b.n	8003e28 <xQueueSemaphoreTake+0x5e>

08003ef0 <prvAddCurrentTaskToDelayedList>:
#endif /* if ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( INCLUDE_xTaskGetIdleTaskHandle == 1 ) ) */
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait,
                                            const BaseType_t xCanBlockIndefinitely )
{
 8003ef0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    TickType_t xTimeToWake;
    const TickType_t xConstTickCount = xTickCount;
 8003ef2:	4b21      	ldr	r3, [pc, #132]	; (8003f78 <prvAddCurrentTaskToDelayedList+0x88>)
        }
    #endif

    /* Remove the task from the ready list before adding it to the blocked list
     * as the same list item is used for both lists. */
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003ef4:	4c21      	ldr	r4, [pc, #132]	; (8003f7c <prvAddCurrentTaskToDelayedList+0x8c>)
{
 8003ef6:	4606      	mov	r6, r0
    const TickType_t xConstTickCount = xTickCount;
 8003ef8:	681d      	ldr	r5, [r3, #0]
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003efa:	6820      	ldr	r0, [r4, #0]
{
 8003efc:	460f      	mov	r7, r1
    if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003efe:	3004      	adds	r0, #4
 8003f00:	f7ff fd51 	bl	80039a6 <uxListRemove>
 8003f04:	b940      	cbnz	r0, 8003f18 <prvAddCurrentTaskToDelayedList+0x28>
    {
        /* The current task must be in a ready list, so there is no need to
         * check, and the port reset macro can be called directly. */
        portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8003f06:	6822      	ldr	r2, [r4, #0]
 8003f08:	491d      	ldr	r1, [pc, #116]	; (8003f80 <prvAddCurrentTaskToDelayedList+0x90>)
 8003f0a:	6ad0      	ldr	r0, [r2, #44]	; 0x2c
 8003f0c:	2201      	movs	r2, #1
 8003f0e:	680b      	ldr	r3, [r1, #0]
 8003f10:	4082      	lsls	r2, r0
 8003f12:	ea23 0302 	bic.w	r3, r3, r2
 8003f16:	600b      	str	r3, [r1, #0]
        mtCOVERAGE_TEST_MARKER();
    }

    #if ( INCLUDE_vTaskSuspend == 1 )
        {
            if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003f18:	1c73      	adds	r3, r6, #1
 8003f1a:	d114      	bne.n	8003f46 <prvAddCurrentTaskToDelayedList+0x56>
 8003f1c:	b19f      	cbz	r7, 8003f46 <prvAddCurrentTaskToDelayedList+0x56>
            {
                /* Add the task to the suspended task list instead of a delayed task
                 * list to ensure it is not woken by a timing event.  It will block
                 * indefinitely. */
                listINSERT_END( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f1e:	4b19      	ldr	r3, [pc, #100]	; (8003f84 <prvAddCurrentTaskToDelayedList+0x94>)
 8003f20:	6821      	ldr	r1, [r4, #0]
 8003f22:	685a      	ldr	r2, [r3, #4]
 8003f24:	6890      	ldr	r0, [r2, #8]
 8003f26:	608a      	str	r2, [r1, #8]
 8003f28:	6821      	ldr	r1, [r4, #0]
 8003f2a:	60c8      	str	r0, [r1, #12]
 8003f2c:	6821      	ldr	r1, [r4, #0]
 8003f2e:	6890      	ldr	r0, [r2, #8]
 8003f30:	3104      	adds	r1, #4
 8003f32:	6041      	str	r1, [r0, #4]
 8003f34:	6821      	ldr	r1, [r4, #0]
 8003f36:	3104      	adds	r1, #4
 8003f38:	6091      	str	r1, [r2, #8]
 8003f3a:	6822      	ldr	r2, [r4, #0]
 8003f3c:	6153      	str	r3, [r2, #20]
 8003f3e:	681a      	ldr	r2, [r3, #0]
 8003f40:	3201      	adds	r2, #1
 8003f42:	601a      	str	r2, [r3, #0]

            /* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
            ( void ) xCanBlockIndefinitely;
        }
    #endif /* INCLUDE_vTaskSuspend */
}
 8003f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003f46:	6823      	ldr	r3, [r4, #0]
 8003f48:	19ad      	adds	r5, r5, r6
 8003f4a:	605d      	str	r5, [r3, #4]
                if( xTimeToWake < xConstTickCount )
 8003f4c:	d307      	bcc.n	8003f5e <prvAddCurrentTaskToDelayedList+0x6e>
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f4e:	4b0e      	ldr	r3, [pc, #56]	; (8003f88 <prvAddCurrentTaskToDelayedList+0x98>)
 8003f50:	6818      	ldr	r0, [r3, #0]
 8003f52:	6821      	ldr	r1, [r4, #0]
}
 8003f54:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
                    vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f58:	3104      	adds	r1, #4
 8003f5a:	f7ff bd0d 	b.w	8003978 <vListInsert>
                    vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003f5e:	4b0b      	ldr	r3, [pc, #44]	; (8003f8c <prvAddCurrentTaskToDelayedList+0x9c>)
 8003f60:	6818      	ldr	r0, [r3, #0]
 8003f62:	6821      	ldr	r1, [r4, #0]
 8003f64:	3104      	adds	r1, #4
 8003f66:	f7ff fd07 	bl	8003978 <vListInsert>
                    if( xTimeToWake < xNextTaskUnblockTime )
 8003f6a:	4b09      	ldr	r3, [pc, #36]	; (8003f90 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	42aa      	cmp	r2, r5
                        xNextTaskUnblockTime = xTimeToWake;
 8003f70:	bf88      	it	hi
 8003f72:	601d      	strhi	r5, [r3, #0]
}
 8003f74:	e7e6      	b.n	8003f44 <prvAddCurrentTaskToDelayedList+0x54>
 8003f76:	bf00      	nop
 8003f78:	2000044c 	.word	0x2000044c
 8003f7c:	20000350 	.word	0x20000350
 8003f80:	200003d0 	.word	0x200003d0
 8003f84:	20000424 	.word	0x20000424
 8003f88:	20000358 	.word	0x20000358
 8003f8c:	20000354 	.word	0x20000354
 8003f90:	20000400 	.word	0x20000400

08003f94 <prvResetNextTaskUnblockTime>:
    if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f94:	4a06      	ldr	r2, [pc, #24]	; (8003fb0 <prvResetNextTaskUnblockTime+0x1c>)
 8003f96:	6813      	ldr	r3, [r2, #0]
 8003f98:	6819      	ldr	r1, [r3, #0]
 8003f9a:	4b06      	ldr	r3, [pc, #24]	; (8003fb4 <prvResetNextTaskUnblockTime+0x20>)
 8003f9c:	b919      	cbnz	r1, 8003fa6 <prvResetNextTaskUnblockTime+0x12>
        xNextTaskUnblockTime = portMAX_DELAY;
 8003f9e:	f04f 32ff 	mov.w	r2, #4294967295
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003fa2:	601a      	str	r2, [r3, #0]
}
 8003fa4:	4770      	bx	lr
        xNextTaskUnblockTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxDelayedTaskList );
 8003fa6:	6812      	ldr	r2, [r2, #0]
 8003fa8:	68d2      	ldr	r2, [r2, #12]
 8003faa:	6812      	ldr	r2, [r2, #0]
 8003fac:	e7f9      	b.n	8003fa2 <prvResetNextTaskUnblockTime+0xe>
 8003fae:	bf00      	nop
 8003fb0:	20000354 	.word	0x20000354
 8003fb4:	20000400 	.word	0x20000400

08003fb8 <prvIdleTask>:
{
 8003fb8:	b580      	push	{r7, lr}
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003fba:	4c15      	ldr	r4, [pc, #84]	; (8004010 <prvIdleTask+0x58>)
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fbc:	4f15      	ldr	r7, [pc, #84]	; (8004014 <prvIdleTask+0x5c>)
                    --uxCurrentNumberOfTasks;
 8003fbe:	4e16      	ldr	r6, [pc, #88]	; (8004018 <prvIdleTask+0x60>)
            while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003fc0:	6823      	ldr	r3, [r4, #0]
 8003fc2:	b973      	cbnz	r3, 8003fe2 <prvIdleTask+0x2a>
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003fc4:	4b15      	ldr	r3, [pc, #84]	; (800401c <prvIdleTask+0x64>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2b01      	cmp	r3, #1
 8003fca:	d9f8      	bls.n	8003fbe <prvIdleTask+0x6>
                    taskYIELD();
 8003fcc:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8003fd0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fd4:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8003fd8:	f3bf 8f4f 	dsb	sy
 8003fdc:	f3bf 8f6f 	isb	sy
 8003fe0:	e7ed      	b.n	8003fbe <prvIdleTask+0x6>
                taskENTER_CRITICAL();
 8003fe2:	f000 fcef 	bl	80049c4 <vPortEnterCritical>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	68dd      	ldr	r5, [r3, #12]
                    ( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fea:	1d28      	adds	r0, r5, #4
 8003fec:	f7ff fcdb 	bl	80039a6 <uxListRemove>
                    --uxCurrentNumberOfTasks;
 8003ff0:	6833      	ldr	r3, [r6, #0]
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	6033      	str	r3, [r6, #0]
                    --uxDeletedTasksWaitingCleanUp;
 8003ff6:	6823      	ldr	r3, [r4, #0]
 8003ff8:	3b01      	subs	r3, #1
 8003ffa:	6023      	str	r3, [r4, #0]
                taskEXIT_CRITICAL();
 8003ffc:	f000 fcf2 	bl	80049e4 <vPortExitCritical>
                vPortFreeStack( pxTCB->pxStack );
 8004000:	6b28      	ldr	r0, [r5, #48]	; 0x30
 8004002:	f000 fe0d 	bl	8004c20 <vPortFree>
                vPortFree( pxTCB );
 8004006:	4628      	mov	r0, r5
 8004008:	f000 fe0a 	bl	8004c20 <vPortFree>
    }
 800400c:	e7d8      	b.n	8003fc0 <prvIdleTask+0x8>
 800400e:	bf00      	nop
 8004010:	200003c4 	.word	0x200003c4
 8004014:	20000438 	.word	0x20000438
 8004018:	200003c0 	.word	0x200003c0
 800401c:	2000035c 	.word	0x2000035c

08004020 <xTaskCreate>:
    {
 8004020:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004024:	0096      	lsls	r6, r2, #2
    {
 8004026:	4607      	mov	r7, r0
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004028:	4630      	mov	r0, r6
    {
 800402a:	460d      	mov	r5, r1
 800402c:	4698      	mov	r8, r3
                pxStack = pvPortMallocStack( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800402e:	f000 fd73 	bl	8004b18 <pvPortMalloc>
                if( pxStack != NULL )
 8004032:	4682      	mov	sl, r0
 8004034:	b1a0      	cbz	r0, 8004060 <xTaskCreate+0x40>
                    pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004036:	205c      	movs	r0, #92	; 0x5c
 8004038:	f000 fd6e 	bl	8004b18 <pvPortMalloc>
                    if( pxNewTCB != NULL )
 800403c:	4604      	mov	r4, r0
 800403e:	b160      	cbz	r0, 800405a <xTaskCreate+0x3a>
                        pxNewTCB->pxStack = pxStack;
 8004040:	f8c0 a030 	str.w	sl, [r0, #48]	; 0x30
            ( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004044:	4632      	mov	r2, r6
 8004046:	21a5      	movs	r1, #165	; 0xa5
 8004048:	4650      	mov	r0, sl
 800404a:	f002 f9e7 	bl	800641c <memset>
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800404e:	f8d4 b030 	ldr.w	fp, [r4, #48]	; 0x30
    if( pcName != NULL )
 8004052:	b945      	cbnz	r5, 8004066 <xTaskCreate+0x46>
        pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004054:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
 8004058:	e013      	b.n	8004082 <xTaskCreate+0x62>
                        vPortFreeStack( pxStack );
 800405a:	4650      	mov	r0, sl
 800405c:	f000 fde0 	bl	8004c20 <vPortFree>
            xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004060:	f04f 35ff 	mov.w	r5, #4294967295
 8004064:	e095      	b.n	8004192 <xTaskCreate+0x172>
 8004066:	1e6b      	subs	r3, r5, #1
 8004068:	f104 0234 	add.w	r2, r4, #52	; 0x34
 800406c:	350f      	adds	r5, #15
            pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800406e:	f813 0f01 	ldrb.w	r0, [r3, #1]!
 8004072:	f802 0b01 	strb.w	r0, [r2], #1
            if( pcName[ x ] == ( char ) 0x00 )
 8004076:	b108      	cbz	r0, 800407c <xTaskCreate+0x5c>
        for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004078:	42ab      	cmp	r3, r5
 800407a:	d1f8      	bne.n	800406e <xTaskCreate+0x4e>
        pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800407c:	2300      	movs	r3, #0
 800407e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
    if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004082:	9d0a      	ldr	r5, [sp, #40]	; 0x28
            pxNewTCB->uxMutexesHeld = 0;
 8004084:	f04f 0900 	mov.w	r9, #0
 8004088:	2d04      	cmp	r5, #4
 800408a:	bf28      	it	cs
 800408c:	2504      	movcs	r5, #4
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800408e:	f104 0a04 	add.w	sl, r4, #4
 8004092:	4650      	mov	r0, sl
    pxNewTCB->uxPriority = uxPriority;
 8004094:	62e5      	str	r5, [r4, #44]	; 0x2c
            pxNewTCB->uxBasePriority = uxPriority;
 8004096:	64e5      	str	r5, [r4, #76]	; 0x4c
            pxNewTCB->uxMutexesHeld = 0;
 8004098:	f8c4 9050 	str.w	r9, [r4, #80]	; 0x50
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800409c:	3e04      	subs	r6, #4
    vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800409e:	f7ff fc5c 	bl	800395a <vListInitialiseItem>
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040a2:	f1c5 0505 	rsb	r5, r5, #5
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80040a6:	f104 0018 	add.w	r0, r4, #24
            pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80040aa:	445e      	add	r6, fp
    vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80040ac:	f7ff fc55 	bl	800395a <vListInitialiseItem>
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80040b0:	4642      	mov	r2, r8
 80040b2:	4639      	mov	r1, r7
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80040b4:	6124      	str	r4, [r4, #16]
    listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040b6:	61a5      	str	r5, [r4, #24]
    listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80040b8:	6264      	str	r4, [r4, #36]	; 0x24
            memset( ( void * ) &( pxNewTCB->ulNotifiedValue[ 0 ] ), 0x00, sizeof( pxNewTCB->ulNotifiedValue ) );
 80040ba:	f8c4 9054 	str.w	r9, [r4, #84]	; 0x54
            memset( ( void * ) &( pxNewTCB->ucNotifyState[ 0 ] ), 0x00, sizeof( pxNewTCB->ucNotifyState ) );
 80040be:	f884 9058 	strb.w	r9, [r4, #88]	; 0x58
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80040c2:	f026 0007 	bic.w	r0, r6, #7
 80040c6:	f000 fc57 	bl	8004978 <pxPortInitialiseStack>
    if( pxCreatedTask != NULL )
 80040ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
                    pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80040cc:	6020      	str	r0, [r4, #0]
    if( pxCreatedTask != NULL )
 80040ce:	b103      	cbz	r3, 80040d2 <xTaskCreate+0xb2>
        *pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80040d0:	601c      	str	r4, [r3, #0]
    taskENTER_CRITICAL();
 80040d2:	f000 fc77 	bl	80049c4 <vPortEnterCritical>
        uxCurrentNumberOfTasks++;
 80040d6:	4b36      	ldr	r3, [pc, #216]	; (80041b0 <xTaskCreate+0x190>)
        if( pxCurrentTCB == NULL )
 80040d8:	4e36      	ldr	r6, [pc, #216]	; (80041b4 <xTaskCreate+0x194>)
        uxCurrentNumberOfTasks++;
 80040da:	681a      	ldr	r2, [r3, #0]
 80040dc:	4f36      	ldr	r7, [pc, #216]	; (80041b8 <xTaskCreate+0x198>)
 80040de:	3201      	adds	r2, #1
 80040e0:	601a      	str	r2, [r3, #0]
        if( pxCurrentTCB == NULL )
 80040e2:	6835      	ldr	r5, [r6, #0]
 80040e4:	2d00      	cmp	r5, #0
 80040e6:	d157      	bne.n	8004198 <xTaskCreate+0x178>
            pxCurrentTCB = pxNewTCB;
 80040e8:	6034      	str	r4, [r6, #0]
            if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d11f      	bne.n	8004130 <xTaskCreate+0x110>
 80040f0:	46b8      	mov	r8, r7
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80040f2:	4640      	mov	r0, r8
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80040f4:	3501      	adds	r5, #1
        vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80040f6:	f7ff fc25 	bl	8003944 <vListInitialise>
    for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80040fa:	2d05      	cmp	r5, #5
 80040fc:	f108 0814 	add.w	r8, r8, #20
 8004100:	d1f7      	bne.n	80040f2 <xTaskCreate+0xd2>
    vListInitialise( &xDelayedTaskList1 );
 8004102:	f8df 80b8 	ldr.w	r8, [pc, #184]	; 80041bc <xTaskCreate+0x19c>
    vListInitialise( &xDelayedTaskList2 );
 8004106:	4d2e      	ldr	r5, [pc, #184]	; (80041c0 <xTaskCreate+0x1a0>)
    vListInitialise( &xDelayedTaskList1 );
 8004108:	4640      	mov	r0, r8
 800410a:	f7ff fc1b 	bl	8003944 <vListInitialise>
    vListInitialise( &xDelayedTaskList2 );
 800410e:	4628      	mov	r0, r5
 8004110:	f7ff fc18 	bl	8003944 <vListInitialise>
    vListInitialise( &xPendingReadyList );
 8004114:	482b      	ldr	r0, [pc, #172]	; (80041c4 <xTaskCreate+0x1a4>)
 8004116:	f7ff fc15 	bl	8003944 <vListInitialise>
            vListInitialise( &xTasksWaitingTermination );
 800411a:	482b      	ldr	r0, [pc, #172]	; (80041c8 <xTaskCreate+0x1a8>)
 800411c:	f7ff fc12 	bl	8003944 <vListInitialise>
            vListInitialise( &xSuspendedTaskList );
 8004120:	482a      	ldr	r0, [pc, #168]	; (80041cc <xTaskCreate+0x1ac>)
 8004122:	f7ff fc0f 	bl	8003944 <vListInitialise>
    pxDelayedTaskList = &xDelayedTaskList1;
 8004126:	4b2a      	ldr	r3, [pc, #168]	; (80041d0 <xTaskCreate+0x1b0>)
 8004128:	f8c3 8000 	str.w	r8, [r3]
    pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800412c:	4b29      	ldr	r3, [pc, #164]	; (80041d4 <xTaskCreate+0x1b4>)
 800412e:	601d      	str	r5, [r3, #0]
        prvAddTaskToReadyList( pxNewTCB );
 8004130:	2501      	movs	r5, #1
        uxTaskNumber++;
 8004132:	4a29      	ldr	r2, [pc, #164]	; (80041d8 <xTaskCreate+0x1b8>)
        prvAddTaskToReadyList( pxNewTCB );
 8004134:	4929      	ldr	r1, [pc, #164]	; (80041dc <xTaskCreate+0x1bc>)
        uxTaskNumber++;
 8004136:	6813      	ldr	r3, [r2, #0]
        prvAddTaskToReadyList( pxNewTCB );
 8004138:	6808      	ldr	r0, [r1, #0]
        uxTaskNumber++;
 800413a:	3301      	adds	r3, #1
                pxNewTCB->uxTCBNumber = uxTaskNumber;
 800413c:	6463      	str	r3, [r4, #68]	; 0x44
        uxTaskNumber++;
 800413e:	6013      	str	r3, [r2, #0]
        prvAddTaskToReadyList( pxNewTCB );
 8004140:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8004142:	fa05 f203 	lsl.w	r2, r5, r3
 8004146:	4302      	orrs	r2, r0
 8004148:	600a      	str	r2, [r1, #0]
 800414a:	2214      	movs	r2, #20
 800414c:	4353      	muls	r3, r2
 800414e:	18f8      	adds	r0, r7, r3
 8004150:	6842      	ldr	r2, [r0, #4]
 8004152:	6891      	ldr	r1, [r2, #8]
 8004154:	60a2      	str	r2, [r4, #8]
 8004156:	60e1      	str	r1, [r4, #12]
 8004158:	6891      	ldr	r1, [r2, #8]
 800415a:	f8c1 a004 	str.w	sl, [r1, #4]
 800415e:	f8c2 a008 	str.w	sl, [r2, #8]
 8004162:	58fa      	ldr	r2, [r7, r3]
 8004164:	6160      	str	r0, [r4, #20]
 8004166:	442a      	add	r2, r5
 8004168:	50fa      	str	r2, [r7, r3]
    taskEXIT_CRITICAL();
 800416a:	f000 fc3b 	bl	80049e4 <vPortExitCritical>
    if( xSchedulerRunning != pdFALSE )
 800416e:	4b1c      	ldr	r3, [pc, #112]	; (80041e0 <xTaskCreate+0x1c0>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	b173      	cbz	r3, 8004192 <xTaskCreate+0x172>
        if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004174:	6833      	ldr	r3, [r6, #0]
 8004176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004178:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 800417a:	429a      	cmp	r2, r3
 800417c:	d209      	bcs.n	8004192 <xTaskCreate+0x172>
            taskYIELD_IF_USING_PREEMPTION();
 800417e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004182:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004186:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800418a:	f3bf 8f4f 	dsb	sy
 800418e:	f3bf 8f6f 	isb	sy
    }
 8004192:	4628      	mov	r0, r5
 8004194:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if( xSchedulerRunning == pdFALSE )
 8004198:	4b11      	ldr	r3, [pc, #68]	; (80041e0 <xTaskCreate+0x1c0>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1c7      	bne.n	8004130 <xTaskCreate+0x110>
                if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80041a0:	6833      	ldr	r3, [r6, #0]
 80041a2:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80041a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041a6:	429a      	cmp	r2, r3
                    pxCurrentTCB = pxNewTCB;
 80041a8:	bf28      	it	cs
 80041aa:	6034      	strcs	r4, [r6, #0]
 80041ac:	e7c0      	b.n	8004130 <xTaskCreate+0x110>
 80041ae:	bf00      	nop
 80041b0:	200003c0 	.word	0x200003c0
 80041b4:	20000350 	.word	0x20000350
 80041b8:	2000035c 	.word	0x2000035c
 80041bc:	200003d4 	.word	0x200003d4
 80041c0:	200003e8 	.word	0x200003e8
 80041c4:	2000040c 	.word	0x2000040c
 80041c8:	20000438 	.word	0x20000438
 80041cc:	20000424 	.word	0x20000424
 80041d0:	20000354 	.word	0x20000354
 80041d4:	20000358 	.word	0x20000358
 80041d8:	200003cc 	.word	0x200003cc
 80041dc:	200003d0 	.word	0x200003d0
 80041e0:	20000420 	.word	0x20000420

080041e4 <vTaskDelete>:
    {
 80041e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041e6:	4604      	mov	r4, r0
 80041e8:	4d27      	ldr	r5, [pc, #156]	; (8004288 <vTaskDelete+0xa4>)
        taskENTER_CRITICAL();
 80041ea:	f000 fbeb 	bl	80049c4 <vPortEnterCritical>
            pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80041ee:	b904      	cbnz	r4, 80041f2 <vTaskDelete+0xe>
 80041f0:	682c      	ldr	r4, [r5, #0]
            if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80041f2:	1d26      	adds	r6, r4, #4
 80041f4:	4630      	mov	r0, r6
 80041f6:	f7ff fbd6 	bl	80039a6 <uxListRemove>
 80041fa:	b960      	cbnz	r0, 8004216 <vTaskDelete+0x32>
                taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80041fc:	2014      	movs	r0, #20
 80041fe:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
 8004200:	4b22      	ldr	r3, [pc, #136]	; (800428c <vTaskDelete+0xa8>)
 8004202:	4378      	muls	r0, r7
 8004204:	581b      	ldr	r3, [r3, r0]
 8004206:	b933      	cbnz	r3, 8004216 <vTaskDelete+0x32>
 8004208:	2201      	movs	r2, #1
 800420a:	4921      	ldr	r1, [pc, #132]	; (8004290 <vTaskDelete+0xac>)
 800420c:	40ba      	lsls	r2, r7
 800420e:	680b      	ldr	r3, [r1, #0]
 8004210:	ea23 0302 	bic.w	r3, r3, r2
 8004214:	600b      	str	r3, [r1, #0]
            if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004216:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004218:	b11b      	cbz	r3, 8004222 <vTaskDelete+0x3e>
                ( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800421a:	f104 0018 	add.w	r0, r4, #24
 800421e:	f7ff fbc2 	bl	80039a6 <uxListRemove>
            uxTaskNumber++;
 8004222:	4a1c      	ldr	r2, [pc, #112]	; (8004294 <vTaskDelete+0xb0>)
 8004224:	6813      	ldr	r3, [r2, #0]
 8004226:	3301      	adds	r3, #1
 8004228:	6013      	str	r3, [r2, #0]
            if( pxTCB == pxCurrentTCB )
 800422a:	682b      	ldr	r3, [r5, #0]
 800422c:	42a3      	cmp	r3, r4
 800422e:	d123      	bne.n	8004278 <vTaskDelete+0x94>
                vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8004230:	4631      	mov	r1, r6
 8004232:	4819      	ldr	r0, [pc, #100]	; (8004298 <vTaskDelete+0xb4>)
 8004234:	f7ff fb94 	bl	8003960 <vListInsertEnd>
                ++uxDeletedTasksWaitingCleanUp;
 8004238:	4a18      	ldr	r2, [pc, #96]	; (800429c <vTaskDelete+0xb8>)
 800423a:	6813      	ldr	r3, [r2, #0]
 800423c:	3301      	adds	r3, #1
 800423e:	6013      	str	r3, [r2, #0]
        taskEXIT_CRITICAL();
 8004240:	f000 fbd0 	bl	80049e4 <vPortExitCritical>
        if( pxTCB != pxCurrentTCB )
 8004244:	682b      	ldr	r3, [r5, #0]
 8004246:	42a3      	cmp	r3, r4
 8004248:	d005      	beq.n	8004256 <vTaskDelete+0x72>
                vPortFreeStack( pxTCB->pxStack );
 800424a:	6b20      	ldr	r0, [r4, #48]	; 0x30
 800424c:	f000 fce8 	bl	8004c20 <vPortFree>
                vPortFree( pxTCB );
 8004250:	4620      	mov	r0, r4
 8004252:	f000 fce5 	bl	8004c20 <vPortFree>
        if( xSchedulerRunning != pdFALSE )
 8004256:	4b12      	ldr	r3, [pc, #72]	; (80042a0 <vTaskDelete+0xbc>)
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	b163      	cbz	r3, 8004276 <vTaskDelete+0x92>
            if( pxTCB == pxCurrentTCB )
 800425c:	682b      	ldr	r3, [r5, #0]
 800425e:	42a3      	cmp	r3, r4
 8004260:	d109      	bne.n	8004276 <vTaskDelete+0x92>
                portYIELD_WITHIN_API();
 8004262:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004266:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800426a:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 800426e:	f3bf 8f4f 	dsb	sy
 8004272:	f3bf 8f6f 	isb	sy
    }
 8004276:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                --uxCurrentNumberOfTasks;
 8004278:	4a0a      	ldr	r2, [pc, #40]	; (80042a4 <vTaskDelete+0xc0>)
 800427a:	6813      	ldr	r3, [r2, #0]
 800427c:	3b01      	subs	r3, #1
 800427e:	6013      	str	r3, [r2, #0]
                prvResetNextTaskUnblockTime();
 8004280:	f7ff fe88 	bl	8003f94 <prvResetNextTaskUnblockTime>
 8004284:	e7dc      	b.n	8004240 <vTaskDelete+0x5c>
 8004286:	bf00      	nop
 8004288:	20000350 	.word	0x20000350
 800428c:	2000035c 	.word	0x2000035c
 8004290:	200003d0 	.word	0x200003d0
 8004294:	200003cc 	.word	0x200003cc
 8004298:	20000438 	.word	0x20000438
 800429c:	200003c4 	.word	0x200003c4
 80042a0:	20000420 	.word	0x20000420
 80042a4:	200003c0 	.word	0x200003c0

080042a8 <vTaskStartScheduler>:
{
 80042a8:	b513      	push	{r0, r1, r4, lr}
            xReturn = xTaskCreate( prvIdleTask,
 80042aa:	2400      	movs	r4, #0
 80042ac:	4b10      	ldr	r3, [pc, #64]	; (80042f0 <vTaskStartScheduler+0x48>)
 80042ae:	2246      	movs	r2, #70	; 0x46
 80042b0:	9301      	str	r3, [sp, #4]
 80042b2:	4910      	ldr	r1, [pc, #64]	; (80042f4 <vTaskStartScheduler+0x4c>)
 80042b4:	4623      	mov	r3, r4
 80042b6:	4810      	ldr	r0, [pc, #64]	; (80042f8 <vTaskStartScheduler+0x50>)
 80042b8:	9400      	str	r4, [sp, #0]
 80042ba:	f7ff feb1 	bl	8004020 <xTaskCreate>
    if( xReturn == pdPASS )
 80042be:	2801      	cmp	r0, #1
 80042c0:	d111      	bne.n	80042e6 <vTaskStartScheduler+0x3e>

    portFORCE_INLINE static void vPortRaiseBASEPRI( void )
    {
        uint32_t ulNewBASEPRI;

        __asm volatile
 80042c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c6:	f383 8811 	msr	BASEPRI, r3
 80042ca:	f3bf 8f6f 	isb	sy
 80042ce:	f3bf 8f4f 	dsb	sy
        xNextTaskUnblockTime = portMAX_DELAY;
 80042d2:	f04f 32ff 	mov.w	r2, #4294967295
 80042d6:	4b09      	ldr	r3, [pc, #36]	; (80042fc <vTaskStartScheduler+0x54>)
 80042d8:	601a      	str	r2, [r3, #0]
        xSchedulerRunning = pdTRUE;
 80042da:	4b09      	ldr	r3, [pc, #36]	; (8004300 <vTaskStartScheduler+0x58>)
 80042dc:	6018      	str	r0, [r3, #0]
        xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80042de:	4b09      	ldr	r3, [pc, #36]	; (8004304 <vTaskStartScheduler+0x5c>)
 80042e0:	601c      	str	r4, [r3, #0]
        if( xPortStartScheduler() != pdFALSE )
 80042e2:	f000 fbd7 	bl	8004a94 <xPortStartScheduler>
    ( void ) uxTopUsedPriority;
 80042e6:	4b08      	ldr	r3, [pc, #32]	; (8004308 <vTaskStartScheduler+0x60>)
 80042e8:	681b      	ldr	r3, [r3, #0]
}
 80042ea:	b002      	add	sp, #8
 80042ec:	bd10      	pop	{r4, pc}
 80042ee:	bf00      	nop
 80042f0:	200003fc 	.word	0x200003fc
 80042f4:	08007881 	.word	0x08007881
 80042f8:	08003fb9 	.word	0x08003fb9
 80042fc:	20000400 	.word	0x20000400
 8004300:	20000420 	.word	0x20000420
 8004304:	2000044c 	.word	0x2000044c
 8004308:	2000000c 	.word	0x2000000c

0800430c <vTaskSuspendAll>:
    ++uxSchedulerSuspended;
 800430c:	4a02      	ldr	r2, [pc, #8]	; (8004318 <vTaskSuspendAll+0xc>)
 800430e:	6813      	ldr	r3, [r2, #0]
 8004310:	3301      	adds	r3, #1
 8004312:	6013      	str	r3, [r2, #0]
}
 8004314:	4770      	bx	lr
 8004316:	bf00      	nop
 8004318:	200003c8 	.word	0x200003c8

0800431c <xTaskIncrementTick>:
{
 800431c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004320:	4b4b      	ldr	r3, [pc, #300]	; (8004450 <xTaskIncrementTick+0x134>)
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	2b00      	cmp	r3, #0
 8004326:	f040 808c 	bne.w	8004442 <xTaskIncrementTick+0x126>
        const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800432a:	4b4a      	ldr	r3, [pc, #296]	; (8004454 <xTaskIncrementTick+0x138>)
 800432c:	681c      	ldr	r4, [r3, #0]
 800432e:	3401      	adds	r4, #1
        xTickCount = xConstTickCount;
 8004330:	601c      	str	r4, [r3, #0]
        if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004332:	b95c      	cbnz	r4, 800434c <xTaskIncrementTick+0x30>
            taskSWITCH_DELAYED_LISTS();
 8004334:	4a48      	ldr	r2, [pc, #288]	; (8004458 <xTaskIncrementTick+0x13c>)
 8004336:	4b49      	ldr	r3, [pc, #292]	; (800445c <xTaskIncrementTick+0x140>)
 8004338:	6811      	ldr	r1, [r2, #0]
 800433a:	6818      	ldr	r0, [r3, #0]
 800433c:	6010      	str	r0, [r2, #0]
 800433e:	4a48      	ldr	r2, [pc, #288]	; (8004460 <xTaskIncrementTick+0x144>)
 8004340:	6019      	str	r1, [r3, #0]
 8004342:	6813      	ldr	r3, [r2, #0]
 8004344:	3301      	adds	r3, #1
 8004346:	6013      	str	r3, [r2, #0]
 8004348:	f7ff fe24 	bl	8003f94 <prvResetNextTaskUnblockTime>
        if( xConstTickCount >= xNextTaskUnblockTime )
 800434c:	f8df c114 	ldr.w	ip, [pc, #276]	; 8004464 <xTaskIncrementTick+0x148>
    BaseType_t xSwitchRequired = pdFALSE;
 8004350:	2000      	movs	r0, #0
        if( xConstTickCount >= xNextTaskUnblockTime )
 8004352:	f8dc 3000 	ldr.w	r3, [ip]
 8004356:	4a44      	ldr	r2, [pc, #272]	; (8004468 <xTaskIncrementTick+0x14c>)
 8004358:	429c      	cmp	r4, r3
 800435a:	f8df 9110 	ldr.w	r9, [pc, #272]	; 800446c <xTaskIncrementTick+0x150>
 800435e:	d20f      	bcs.n	8004380 <xTaskIncrementTick+0x64>
                if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004360:	2114      	movs	r1, #20
 8004362:	f8d9 3000 	ldr.w	r3, [r9]
 8004366:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004368:	434b      	muls	r3, r1
 800436a:	58d3      	ldr	r3, [r2, r3]
                    xSwitchRequired = pdTRUE;
 800436c:	2b02      	cmp	r3, #2
                if( xYieldPending != pdFALSE )
 800436e:	4b40      	ldr	r3, [pc, #256]	; (8004470 <xTaskIncrementTick+0x154>)
                    xSwitchRequired = pdTRUE;
 8004370:	bf28      	it	cs
 8004372:	2001      	movcs	r0, #1
                if( xYieldPending != pdFALSE )
 8004374:	681b      	ldr	r3, [r3, #0]
                    xSwitchRequired = pdTRUE;
 8004376:	2b00      	cmp	r3, #0
 8004378:	bf18      	it	ne
 800437a:	2001      	movne	r0, #1
}
 800437c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 8004380:	4683      	mov	fp, r0
                if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004382:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8004458 <xTaskIncrementTick+0x13c>
 8004386:	f8d8 3000 	ldr.w	r3, [r8]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	b923      	cbnz	r3, 8004398 <xTaskIncrementTick+0x7c>
                    xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800438e:	f04f 33ff 	mov.w	r3, #4294967295
 8004392:	f8cc 3000 	str.w	r3, [ip]
                    break;
 8004396:	e7e3      	b.n	8004360 <xTaskIncrementTick+0x44>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004398:	f8d8 3000 	ldr.w	r3, [r8]
 800439c:	68db      	ldr	r3, [r3, #12]
 800439e:	68db      	ldr	r3, [r3, #12]
                    xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80043a0:	6859      	ldr	r1, [r3, #4]
                    if( xConstTickCount < xItemValue )
 80043a2:	428c      	cmp	r4, r1
 80043a4:	d202      	bcs.n	80043ac <xTaskIncrementTick+0x90>
                        xNextTaskUnblockTime = xItemValue;
 80043a6:	f8cc 1000 	str.w	r1, [ip]
                        break; /*lint !e9011 Code structure here is deemed easier to understand with multiple breaks. */
 80043aa:	e7d9      	b.n	8004360 <xTaskIncrementTick+0x44>
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80043ac:	695d      	ldr	r5, [r3, #20]
 80043ae:	e9d3 1702 	ldrd	r1, r7, [r3, #8]
 80043b2:	608f      	str	r7, [r1, #8]
 80043b4:	6079      	str	r1, [r7, #4]
 80043b6:	6869      	ldr	r1, [r5, #4]
 80043b8:	1d1e      	adds	r6, r3, #4
 80043ba:	42b1      	cmp	r1, r6
 80043bc:	6829      	ldr	r1, [r5, #0]
 80043be:	bf08      	it	eq
 80043c0:	606f      	streq	r7, [r5, #4]
 80043c2:	3901      	subs	r1, #1
 80043c4:	f8c3 b014 	str.w	fp, [r3, #20]
 80043c8:	6029      	str	r1, [r5, #0]
                    if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80043ca:	6a9d      	ldr	r5, [r3, #40]	; 0x28
 80043cc:	b195      	cbz	r5, 80043f4 <xTaskIncrementTick+0xd8>
                        listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80043ce:	e9d3 1707 	ldrd	r1, r7, [r3, #28]
 80043d2:	608f      	str	r7, [r1, #8]
 80043d4:	f8d3 a020 	ldr.w	sl, [r3, #32]
 80043d8:	f103 0718 	add.w	r7, r3, #24
 80043dc:	f8ca 1004 	str.w	r1, [sl, #4]
 80043e0:	6869      	ldr	r1, [r5, #4]
 80043e2:	42b9      	cmp	r1, r7
 80043e4:	6829      	ldr	r1, [r5, #0]
 80043e6:	bf08      	it	eq
 80043e8:	f8c5 a004 	streq.w	sl, [r5, #4]
 80043ec:	3901      	subs	r1, #1
 80043ee:	f8c3 b028 	str.w	fp, [r3, #40]	; 0x28
 80043f2:	6029      	str	r1, [r5, #0]
                    prvAddTaskToReadyList( pxTCB );
 80043f4:	2101      	movs	r1, #1
 80043f6:	f8df e07c 	ldr.w	lr, [pc, #124]	; 8004474 <xTaskIncrementTick+0x158>
 80043fa:	6add      	ldr	r5, [r3, #44]	; 0x2c
 80043fc:	f8de 7000 	ldr.w	r7, [lr]
 8004400:	40a9      	lsls	r1, r5
 8004402:	4339      	orrs	r1, r7
 8004404:	f8ce 1000 	str.w	r1, [lr]
 8004408:	2114      	movs	r1, #20
 800440a:	fb01 fa05 	mul.w	sl, r1, r5
 800440e:	eb02 070a 	add.w	r7, r2, sl
 8004412:	6879      	ldr	r1, [r7, #4]
 8004414:	f8d1 e008 	ldr.w	lr, [r1, #8]
 8004418:	6099      	str	r1, [r3, #8]
 800441a:	f8c3 e00c 	str.w	lr, [r3, #12]
 800441e:	f8d1 e008 	ldr.w	lr, [r1, #8]
 8004422:	f8ce 6004 	str.w	r6, [lr, #4]
 8004426:	608e      	str	r6, [r1, #8]
 8004428:	615f      	str	r7, [r3, #20]
 800442a:	f852 300a 	ldr.w	r3, [r2, sl]
 800442e:	3301      	adds	r3, #1
 8004430:	f842 300a 	str.w	r3, [r2, sl]
                            if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004434:	f8d9 3000 	ldr.w	r3, [r9]
 8004438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                                xSwitchRequired = pdTRUE;
 800443a:	429d      	cmp	r5, r3
 800443c:	bf28      	it	cs
 800443e:	2001      	movcs	r0, #1
 8004440:	e7a1      	b.n	8004386 <xTaskIncrementTick+0x6a>
        ++xPendedTicks;
 8004442:	4a0d      	ldr	r2, [pc, #52]	; (8004478 <xTaskIncrementTick+0x15c>)
    BaseType_t xSwitchRequired = pdFALSE;
 8004444:	2000      	movs	r0, #0
        ++xPendedTicks;
 8004446:	6813      	ldr	r3, [r2, #0]
 8004448:	3301      	adds	r3, #1
 800444a:	6013      	str	r3, [r2, #0]
    return xSwitchRequired;
 800444c:	e796      	b.n	800437c <xTaskIncrementTick+0x60>
 800444e:	bf00      	nop
 8004450:	200003c8 	.word	0x200003c8
 8004454:	2000044c 	.word	0x2000044c
 8004458:	20000354 	.word	0x20000354
 800445c:	20000358 	.word	0x20000358
 8004460:	20000404 	.word	0x20000404
 8004464:	20000400 	.word	0x20000400
 8004468:	2000035c 	.word	0x2000035c
 800446c:	20000350 	.word	0x20000350
 8004470:	20000450 	.word	0x20000450
 8004474:	200003d0 	.word	0x200003d0
 8004478:	20000408 	.word	0x20000408

0800447c <xTaskResumeAll>:
{
 800447c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    taskENTER_CRITICAL();
 8004480:	f000 faa0 	bl	80049c4 <vPortEnterCritical>
        --uxSchedulerSuspended;
 8004484:	4b3f      	ldr	r3, [pc, #252]	; (8004584 <xTaskResumeAll+0x108>)
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	3a01      	subs	r2, #1
 800448a:	601a      	str	r2, [r3, #0]
        if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	b12b      	cbz	r3, 800449c <xTaskResumeAll+0x20>
    BaseType_t xAlreadyYielded = pdFALSE;
 8004490:	2400      	movs	r4, #0
    taskEXIT_CRITICAL();
 8004492:	f000 faa7 	bl	80049e4 <vPortExitCritical>
}
 8004496:	4620      	mov	r0, r4
 8004498:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
            if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800449c:	4a3a      	ldr	r2, [pc, #232]	; (8004588 <xTaskResumeAll+0x10c>)
 800449e:	6812      	ldr	r2, [r2, #0]
 80044a0:	2a00      	cmp	r2, #0
 80044a2:	d0f5      	beq.n	8004490 <xTaskResumeAll+0x14>
                    prvAddTaskToReadyList( pxTCB );
 80044a4:	f04f 0c01 	mov.w	ip, #1
 80044a8:	f04f 0e14 	mov.w	lr, #20
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80044ac:	4d37      	ldr	r5, [pc, #220]	; (800458c <xTaskResumeAll+0x110>)
                    prvAddTaskToReadyList( pxTCB );
 80044ae:	4e38      	ldr	r6, [pc, #224]	; (8004590 <xTaskResumeAll+0x114>)
 80044b0:	4938      	ldr	r1, [pc, #224]	; (8004594 <xTaskResumeAll+0x118>)
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80044b2:	f8df 80e4 	ldr.w	r8, [pc, #228]	; 8004598 <xTaskResumeAll+0x11c>
                        xYieldPending = pdTRUE;
 80044b6:	f8df 90e4 	ldr.w	r9, [pc, #228]	; 800459c <xTaskResumeAll+0x120>
 80044ba:	e040      	b.n	800453e <xTaskResumeAll+0xc2>
                    pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044bc:	68eb      	ldr	r3, [r5, #12]
 80044be:	68db      	ldr	r3, [r3, #12]
                    listREMOVE_ITEM( &( pxTCB->xEventListItem ) );
 80044c0:	6a98      	ldr	r0, [r3, #40]	; 0x28
 80044c2:	e9d3 2407 	ldrd	r2, r4, [r3, #28]
 80044c6:	6094      	str	r4, [r2, #8]
 80044c8:	6062      	str	r2, [r4, #4]
 80044ca:	6842      	ldr	r2, [r0, #4]
 80044cc:	f103 0718 	add.w	r7, r3, #24
 80044d0:	42ba      	cmp	r2, r7
 80044d2:	f04f 0200 	mov.w	r2, #0
 80044d6:	bf08      	it	eq
 80044d8:	6044      	streq	r4, [r0, #4]
 80044da:	629a      	str	r2, [r3, #40]	; 0x28
 80044dc:	6802      	ldr	r2, [r0, #0]
 80044de:	3a01      	subs	r2, #1
 80044e0:	6002      	str	r2, [r0, #0]
                    listREMOVE_ITEM( &( pxTCB->xStateListItem ) );
 80044e2:	6958      	ldr	r0, [r3, #20]
 80044e4:	e9d3 2402 	ldrd	r2, r4, [r3, #8]
 80044e8:	6094      	str	r4, [r2, #8]
 80044ea:	6062      	str	r2, [r4, #4]
 80044ec:	6842      	ldr	r2, [r0, #4]
 80044ee:	f103 0a04 	add.w	sl, r3, #4
 80044f2:	4552      	cmp	r2, sl
 80044f4:	6802      	ldr	r2, [r0, #0]
 80044f6:	bf08      	it	eq
 80044f8:	6044      	streq	r4, [r0, #4]
 80044fa:	3a01      	subs	r2, #1
 80044fc:	6002      	str	r2, [r0, #0]
                    prvAddTaskToReadyList( pxTCB );
 80044fe:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004500:	6834      	ldr	r4, [r6, #0]
 8004502:	fa0c f200 	lsl.w	r2, ip, r0
 8004506:	4322      	orrs	r2, r4
 8004508:	fb0e f400 	mul.w	r4, lr, r0
 800450c:	190f      	adds	r7, r1, r4
 800450e:	6032      	str	r2, [r6, #0]
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8004516:	609a      	str	r2, [r3, #8]
 8004518:	f8c3 b00c 	str.w	fp, [r3, #12]
 800451c:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8004520:	f8cb a004 	str.w	sl, [fp, #4]
 8004524:	f8c2 a008 	str.w	sl, [r2, #8]
 8004528:	590a      	ldr	r2, [r1, r4]
 800452a:	615f      	str	r7, [r3, #20]
 800452c:	3201      	adds	r2, #1
 800452e:	510a      	str	r2, [r1, r4]
                    if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004530:	f8d8 2000 	ldr.w	r2, [r8]
 8004534:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004536:	4290      	cmp	r0, r2
 8004538:	d301      	bcc.n	800453e <xTaskResumeAll+0xc2>
                        xYieldPending = pdTRUE;
 800453a:	f8c9 c000 	str.w	ip, [r9]
                while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800453e:	682a      	ldr	r2, [r5, #0]
 8004540:	2a00      	cmp	r2, #0
 8004542:	d1bb      	bne.n	80044bc <xTaskResumeAll+0x40>
                if( pxTCB != NULL )
 8004544:	b10b      	cbz	r3, 800454a <xTaskResumeAll+0xce>
                    prvResetNextTaskUnblockTime();
 8004546:	f7ff fd25 	bl	8003f94 <prvResetNextTaskUnblockTime>
                    TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800454a:	4d15      	ldr	r5, [pc, #84]	; (80045a0 <xTaskResumeAll+0x124>)
 800454c:	682c      	ldr	r4, [r5, #0]
                    if( xPendedCounts > ( TickType_t ) 0U )
 800454e:	b144      	cbz	r4, 8004562 <xTaskResumeAll+0xe6>
                                xYieldPending = pdTRUE;
 8004550:	2701      	movs	r7, #1
 8004552:	4e12      	ldr	r6, [pc, #72]	; (800459c <xTaskResumeAll+0x120>)
                            if( xTaskIncrementTick() != pdFALSE )
 8004554:	f7ff fee2 	bl	800431c <xTaskIncrementTick>
 8004558:	b100      	cbz	r0, 800455c <xTaskResumeAll+0xe0>
                                xYieldPending = pdTRUE;
 800455a:	6037      	str	r7, [r6, #0]
                        } while( xPendedCounts > ( TickType_t ) 0U );
 800455c:	3c01      	subs	r4, #1
 800455e:	d1f9      	bne.n	8004554 <xTaskResumeAll+0xd8>
                        xPendedTicks = 0;
 8004560:	602c      	str	r4, [r5, #0]
                if( xYieldPending != pdFALSE )
 8004562:	4b0e      	ldr	r3, [pc, #56]	; (800459c <xTaskResumeAll+0x120>)
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d092      	beq.n	8004490 <xTaskResumeAll+0x14>
                    taskYIELD_IF_USING_PREEMPTION();
 800456a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 800456e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004572:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 8004576:	f3bf 8f4f 	dsb	sy
 800457a:	f3bf 8f6f 	isb	sy
                            xAlreadyYielded = pdTRUE;
 800457e:	2401      	movs	r4, #1
 8004580:	e787      	b.n	8004492 <xTaskResumeAll+0x16>
 8004582:	bf00      	nop
 8004584:	200003c8 	.word	0x200003c8
 8004588:	200003c0 	.word	0x200003c0
 800458c:	2000040c 	.word	0x2000040c
 8004590:	200003d0 	.word	0x200003d0
 8004594:	2000035c 	.word	0x2000035c
 8004598:	20000350 	.word	0x20000350
 800459c:	20000450 	.word	0x20000450
 80045a0:	20000408 	.word	0x20000408

080045a4 <vTaskDelay>:
    {
 80045a4:	b508      	push	{r3, lr}
        if( xTicksToDelay > ( TickType_t ) 0U )
 80045a6:	b950      	cbnz	r0, 80045be <vTaskDelay+0x1a>
            portYIELD_WITHIN_API();
 80045a8:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 80045ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045b0:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
 80045b4:	f3bf 8f4f 	dsb	sy
 80045b8:	f3bf 8f6f 	isb	sy
    }
 80045bc:	bd08      	pop	{r3, pc}
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80045be:	2100      	movs	r1, #0
            vTaskSuspendAll();
 80045c0:	f7ff fea4 	bl	800430c <vTaskSuspendAll>
                prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80045c4:	f7ff fc94 	bl	8003ef0 <prvAddCurrentTaskToDelayedList>
            xAlreadyYielded = xTaskResumeAll();
 80045c8:	f7ff ff58 	bl	800447c <xTaskResumeAll>
        if( xAlreadyYielded == pdFALSE )
 80045cc:	2800      	cmp	r0, #0
 80045ce:	d0eb      	beq.n	80045a8 <vTaskDelay+0x4>
 80045d0:	e7f4      	b.n	80045bc <vTaskDelay+0x18>
	...

080045d4 <vTaskSwitchContext>:
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80045d4:	4b12      	ldr	r3, [pc, #72]	; (8004620 <vTaskSwitchContext+0x4c>)
{
 80045d6:	b530      	push	{r4, r5, lr}
    if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80045d8:	681a      	ldr	r2, [r3, #0]
 80045da:	4b12      	ldr	r3, [pc, #72]	; (8004624 <vTaskSwitchContext+0x50>)
 80045dc:	b112      	cbz	r2, 80045e4 <vTaskSwitchContext+0x10>
        xYieldPending = pdTRUE;
 80045de:	2201      	movs	r2, #1
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045e0:	601a      	str	r2, [r3, #0]
}
 80045e2:	bd30      	pop	{r4, r5, pc}
        xYieldPending = pdFALSE;
 80045e4:	601a      	str	r2, [r3, #0]
        taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045e6:	4b10      	ldr	r3, [pc, #64]	; (8004628 <vTaskSwitchContext+0x54>)
 80045e8:	681b      	ldr	r3, [r3, #0]
            __asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80045ea:	fab3 f383 	clz	r3, r3
 80045ee:	2514      	movs	r5, #20
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	f1c3 031f 	rsb	r3, r3, #31
 80045f6:	fb05 f203 	mul.w	r2, r5, r3
 80045fa:	490c      	ldr	r1, [pc, #48]	; (800462c <vTaskSwitchContext+0x58>)
 80045fc:	1888      	adds	r0, r1, r2
 80045fe:	6844      	ldr	r4, [r0, #4]
 8004600:	3208      	adds	r2, #8
 8004602:	6864      	ldr	r4, [r4, #4]
 8004604:	440a      	add	r2, r1
 8004606:	4294      	cmp	r4, r2
 8004608:	fb05 1303 	mla	r3, r5, r3, r1
 800460c:	bf08      	it	eq
 800460e:	6862      	ldreq	r2, [r4, #4]
 8004610:	6044      	str	r4, [r0, #4]
 8004612:	bf08      	it	eq
 8004614:	6042      	streq	r2, [r0, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	68da      	ldr	r2, [r3, #12]
 800461a:	4b05      	ldr	r3, [pc, #20]	; (8004630 <vTaskSwitchContext+0x5c>)
 800461c:	e7e0      	b.n	80045e0 <vTaskSwitchContext+0xc>
 800461e:	bf00      	nop
 8004620:	200003c8 	.word	0x200003c8
 8004624:	20000450 	.word	0x20000450
 8004628:	200003d0 	.word	0x200003d0
 800462c:	2000035c 	.word	0x2000035c
 8004630:	20000350 	.word	0x20000350

08004634 <vTaskPlaceOnEventList>:
{
 8004634:	b510      	push	{r4, lr}
 8004636:	460c      	mov	r4, r1
    vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004638:	4b05      	ldr	r3, [pc, #20]	; (8004650 <vTaskPlaceOnEventList+0x1c>)
 800463a:	6819      	ldr	r1, [r3, #0]
 800463c:	3118      	adds	r1, #24
 800463e:	f7ff f99b 	bl	8003978 <vListInsert>
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004642:	4620      	mov	r0, r4
}
 8004644:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004648:	2101      	movs	r1, #1
 800464a:	f7ff bc51 	b.w	8003ef0 <prvAddCurrentTaskToDelayedList>
 800464e:	bf00      	nop
 8004650:	20000350 	.word	0x20000350

08004654 <xTaskRemoveFromEventList>:
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004654:	68c3      	ldr	r3, [r0, #12]
{
 8004656:	b5f0      	push	{r4, r5, r6, r7, lr}
    pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004658:	68db      	ldr	r3, [r3, #12]
    listREMOVE_ITEM( &( pxUnblockedTCB->xEventListItem ) );
 800465a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800465c:	e9d3 0107 	ldrd	r0, r1, [r3, #28]
 8004660:	6081      	str	r1, [r0, #8]
 8004662:	6048      	str	r0, [r1, #4]
 8004664:	6850      	ldr	r0, [r2, #4]
 8004666:	f103 0418 	add.w	r4, r3, #24
 800466a:	42a0      	cmp	r0, r4
 800466c:	bf08      	it	eq
 800466e:	6051      	streq	r1, [r2, #4]
 8004670:	2100      	movs	r1, #0
 8004672:	6299      	str	r1, [r3, #40]	; 0x28
 8004674:	6811      	ldr	r1, [r2, #0]
 8004676:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
 8004678:	3901      	subs	r1, #1
 800467a:	6011      	str	r1, [r2, #0]
    if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800467c:	4a1e      	ldr	r2, [pc, #120]	; (80046f8 <xTaskRemoveFromEventList+0xa4>)
 800467e:	6812      	ldr	r2, [r2, #0]
 8004680:	2a00      	cmp	r2, #0
 8004682:	d12c      	bne.n	80046de <xTaskRemoveFromEventList+0x8a>
        listREMOVE_ITEM( &( pxUnblockedTCB->xStateListItem ) );
 8004684:	e9d3 4102 	ldrd	r4, r1, [r3, #8]
 8004688:	695a      	ldr	r2, [r3, #20]
 800468a:	60a1      	str	r1, [r4, #8]
 800468c:	68d9      	ldr	r1, [r3, #12]
 800468e:	1d1d      	adds	r5, r3, #4
 8004690:	604c      	str	r4, [r1, #4]
 8004692:	6854      	ldr	r4, [r2, #4]
 8004694:	42ac      	cmp	r4, r5
 8004696:	bf08      	it	eq
 8004698:	6051      	streq	r1, [r2, #4]
 800469a:	6811      	ldr	r1, [r2, #0]
 800469c:	3901      	subs	r1, #1
 800469e:	6011      	str	r1, [r2, #0]
        prvAddTaskToReadyList( pxUnblockedTCB );
 80046a0:	2201      	movs	r2, #1
 80046a2:	4916      	ldr	r1, [pc, #88]	; (80046fc <xTaskRemoveFromEventList+0xa8>)
 80046a4:	4082      	lsls	r2, r0
 80046a6:	680c      	ldr	r4, [r1, #0]
 80046a8:	4322      	orrs	r2, r4
 80046aa:	600a      	str	r2, [r1, #0]
 80046ac:	2214      	movs	r2, #20
 80046ae:	4342      	muls	r2, r0
 80046b0:	4c13      	ldr	r4, [pc, #76]	; (8004700 <xTaskRemoveFromEventList+0xac>)
 80046b2:	18a6      	adds	r6, r4, r2
 80046b4:	6871      	ldr	r1, [r6, #4]
 80046b6:	688f      	ldr	r7, [r1, #8]
 80046b8:	6099      	str	r1, [r3, #8]
 80046ba:	60df      	str	r7, [r3, #12]
 80046bc:	688f      	ldr	r7, [r1, #8]
 80046be:	607d      	str	r5, [r7, #4]
 80046c0:	608d      	str	r5, [r1, #8]
 80046c2:	615e      	str	r6, [r3, #20]
 80046c4:	58a3      	ldr	r3, [r4, r2]
 80046c6:	3301      	adds	r3, #1
 80046c8:	50a3      	str	r3, [r4, r2]
    if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80046ca:	4b0e      	ldr	r3, [pc, #56]	; (8004704 <xTaskRemoveFromEventList+0xb0>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046d0:	4298      	cmp	r0, r3
        xYieldPending = pdTRUE;
 80046d2:	bf85      	ittet	hi
 80046d4:	2001      	movhi	r0, #1
 80046d6:	4b0c      	ldrhi	r3, [pc, #48]	; (8004708 <xTaskRemoveFromEventList+0xb4>)
        xReturn = pdFALSE;
 80046d8:	2000      	movls	r0, #0
        xYieldPending = pdTRUE;
 80046da:	6018      	strhi	r0, [r3, #0]
}
 80046dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
        listINSERT_END( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80046de:	4a0b      	ldr	r2, [pc, #44]	; (800470c <xTaskRemoveFromEventList+0xb8>)
 80046e0:	6851      	ldr	r1, [r2, #4]
 80046e2:	688d      	ldr	r5, [r1, #8]
 80046e4:	61d9      	str	r1, [r3, #28]
 80046e6:	621d      	str	r5, [r3, #32]
 80046e8:	688d      	ldr	r5, [r1, #8]
 80046ea:	606c      	str	r4, [r5, #4]
 80046ec:	608c      	str	r4, [r1, #8]
 80046ee:	629a      	str	r2, [r3, #40]	; 0x28
 80046f0:	6813      	ldr	r3, [r2, #0]
 80046f2:	3301      	adds	r3, #1
 80046f4:	6013      	str	r3, [r2, #0]
 80046f6:	e7e8      	b.n	80046ca <xTaskRemoveFromEventList+0x76>
 80046f8:	200003c8 	.word	0x200003c8
 80046fc:	200003d0 	.word	0x200003d0
 8004700:	2000035c 	.word	0x2000035c
 8004704:	20000350 	.word	0x20000350
 8004708:	20000450 	.word	0x20000450
 800470c:	2000040c 	.word	0x2000040c

08004710 <vTaskInternalSetTimeOutState>:
    pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004710:	4b03      	ldr	r3, [pc, #12]	; (8004720 <vTaskInternalSetTimeOutState+0x10>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	6003      	str	r3, [r0, #0]
    pxTimeOut->xTimeOnEntering = xTickCount;
 8004716:	4b03      	ldr	r3, [pc, #12]	; (8004724 <vTaskInternalSetTimeOutState+0x14>)
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	6043      	str	r3, [r0, #4]
}
 800471c:	4770      	bx	lr
 800471e:	bf00      	nop
 8004720:	20000404 	.word	0x20000404
 8004724:	2000044c 	.word	0x2000044c

08004728 <xTaskCheckForTimeOut>:
{
 8004728:	b570      	push	{r4, r5, r6, lr}
 800472a:	460d      	mov	r5, r1
 800472c:	4604      	mov	r4, r0
    taskENTER_CRITICAL();
 800472e:	f000 f949 	bl	80049c4 <vPortEnterCritical>
        const TickType_t xConstTickCount = xTickCount;
 8004732:	4b0f      	ldr	r3, [pc, #60]	; (8004770 <xTaskCheckForTimeOut+0x48>)
 8004734:	6819      	ldr	r1, [r3, #0]
            if( *pxTicksToWait == portMAX_DELAY )
 8004736:	682b      	ldr	r3, [r5, #0]
 8004738:	1c5a      	adds	r2, r3, #1
 800473a:	d017      	beq.n	800476c <xTaskCheckForTimeOut+0x44>
        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800473c:	480d      	ldr	r0, [pc, #52]	; (8004774 <xTaskCheckForTimeOut+0x4c>)
 800473e:	6826      	ldr	r6, [r4, #0]
 8004740:	6800      	ldr	r0, [r0, #0]
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004742:	6862      	ldr	r2, [r4, #4]
        if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004744:	4286      	cmp	r6, r0
 8004746:	d008      	beq.n	800475a <xTaskCheckForTimeOut+0x32>
 8004748:	428a      	cmp	r2, r1
 800474a:	d806      	bhi.n	800475a <xTaskCheckForTimeOut+0x32>
            *pxTicksToWait = ( TickType_t ) 0;
 800474c:	2300      	movs	r3, #0
            xReturn = pdTRUE;
 800474e:	2401      	movs	r4, #1
            *pxTicksToWait = ( TickType_t ) 0;
 8004750:	602b      	str	r3, [r5, #0]
    taskEXIT_CRITICAL();
 8004752:	f000 f947 	bl	80049e4 <vPortExitCritical>
}
 8004756:	4620      	mov	r0, r4
 8004758:	bd70      	pop	{r4, r5, r6, pc}
        const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800475a:	1a88      	subs	r0, r1, r2
        else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800475c:	4283      	cmp	r3, r0
 800475e:	d9f5      	bls.n	800474c <xTaskCheckForTimeOut+0x24>
            *pxTicksToWait -= xElapsedTime;
 8004760:	1a5b      	subs	r3, r3, r1
 8004762:	4413      	add	r3, r2
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004764:	4620      	mov	r0, r4
            *pxTicksToWait -= xElapsedTime;
 8004766:	602b      	str	r3, [r5, #0]
            vTaskInternalSetTimeOutState( pxTimeOut );
 8004768:	f7ff ffd2 	bl	8004710 <vTaskInternalSetTimeOutState>
                xReturn = pdFALSE;
 800476c:	2400      	movs	r4, #0
 800476e:	e7f0      	b.n	8004752 <xTaskCheckForTimeOut+0x2a>
 8004770:	2000044c 	.word	0x2000044c
 8004774:	20000404 	.word	0x20000404

08004778 <vTaskMissedYield>:
    xYieldPending = pdTRUE;
 8004778:	2201      	movs	r2, #1
 800477a:	4b01      	ldr	r3, [pc, #4]	; (8004780 <vTaskMissedYield+0x8>)
 800477c:	601a      	str	r2, [r3, #0]
}
 800477e:	4770      	bx	lr
 8004780:	20000450 	.word	0x20000450

08004784 <xTaskPriorityInherit>:
    {
 8004784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if( pxMutexHolder != NULL )
 8004786:	4604      	mov	r4, r0
 8004788:	2800      	cmp	r0, #0
 800478a:	d038      	beq.n	80047fe <xTaskPriorityInherit+0x7a>
            if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800478c:	4d23      	ldr	r5, [pc, #140]	; (800481c <xTaskPriorityInherit+0x98>)
 800478e:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 8004790:	682a      	ldr	r2, [r5, #0]
 8004792:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8004794:	4293      	cmp	r3, r2
 8004796:	d238      	bcs.n	800480a <xTaskPriorityInherit+0x86>
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004798:	6982      	ldr	r2, [r0, #24]
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800479a:	4e21      	ldr	r6, [pc, #132]	; (8004820 <xTaskPriorityInherit+0x9c>)
                if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800479c:	2a00      	cmp	r2, #0
                    listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800479e:	bfa1      	itttt	ge
 80047a0:	682a      	ldrge	r2, [r5, #0]
 80047a2:	6ad2      	ldrge	r2, [r2, #44]	; 0x2c
 80047a4:	f1c2 0205 	rsbge	r2, r2, #5
 80047a8:	6182      	strge	r2, [r0, #24]
                if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80047aa:	2214      	movs	r2, #20
 80047ac:	fb02 6303 	mla	r3, r2, r3, r6
 80047b0:	6942      	ldr	r2, [r0, #20]
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d124      	bne.n	8004800 <xTaskPriorityInherit+0x7c>
                    if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80047b6:	1d07      	adds	r7, r0, #4
 80047b8:	4638      	mov	r0, r7
 80047ba:	f7ff f8f4 	bl	80039a6 <uxListRemove>
 80047be:	4a19      	ldr	r2, [pc, #100]	; (8004824 <xTaskPriorityInherit+0xa0>)
 80047c0:	b930      	cbnz	r0, 80047d0 <xTaskPriorityInherit+0x4c>
                        portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 80047c2:	2101      	movs	r1, #1
 80047c4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 80047c6:	6813      	ldr	r3, [r2, #0]
 80047c8:	4081      	lsls	r1, r0
 80047ca:	ea23 0301 	bic.w	r3, r3, r1
 80047ce:	6013      	str	r3, [r2, #0]
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 80047d0:	2001      	movs	r0, #1
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80047d2:	682b      	ldr	r3, [r5, #0]
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 80047d4:	6815      	ldr	r5, [r2, #0]
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80047d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 80047d8:	fa00 f103 	lsl.w	r1, r0, r3
 80047dc:	4329      	orrs	r1, r5
 80047de:	6011      	str	r1, [r2, #0]
 80047e0:	2214      	movs	r2, #20
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80047e2:	62e3      	str	r3, [r4, #44]	; 0x2c
                    prvAddTaskToReadyList( pxMutexHolderTCB );
 80047e4:	4353      	muls	r3, r2
 80047e6:	18f1      	adds	r1, r6, r3
 80047e8:	684a      	ldr	r2, [r1, #4]
 80047ea:	6895      	ldr	r5, [r2, #8]
 80047ec:	60a2      	str	r2, [r4, #8]
 80047ee:	60e5      	str	r5, [r4, #12]
 80047f0:	6895      	ldr	r5, [r2, #8]
 80047f2:	606f      	str	r7, [r5, #4]
 80047f4:	6097      	str	r7, [r2, #8]
 80047f6:	58f2      	ldr	r2, [r6, r3]
 80047f8:	6161      	str	r1, [r4, #20]
 80047fa:	4402      	add	r2, r0
 80047fc:	50f2      	str	r2, [r6, r3]
    }
 80047fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
                    pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004800:	682b      	ldr	r3, [r5, #0]
 8004802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004804:	62c3      	str	r3, [r0, #44]	; 0x2c
                xReturn = pdTRUE;
 8004806:	2001      	movs	r0, #1
 8004808:	e7f9      	b.n	80047fe <xTaskPriorityInherit+0x7a>
                if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800480a:	682b      	ldr	r3, [r5, #0]
 800480c:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
 800480e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8004810:	42a0      	cmp	r0, r4
 8004812:	bf2c      	ite	cs
 8004814:	2000      	movcs	r0, #0
 8004816:	2001      	movcc	r0, #1
 8004818:	e7f1      	b.n	80047fe <xTaskPriorityInherit+0x7a>
 800481a:	bf00      	nop
 800481c:	20000350 	.word	0x20000350
 8004820:	2000035c 	.word	0x2000035c
 8004824:	200003d0 	.word	0x200003d0

08004828 <xTaskPriorityDisinherit>:
    {
 8004828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        if( pxMutexHolder != NULL )
 800482a:	4604      	mov	r4, r0
 800482c:	b908      	cbnz	r0, 8004832 <xTaskPriorityDisinherit+0xa>
        BaseType_t xReturn = pdFALSE;
 800482e:	2000      	movs	r0, #0
    }
 8004830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            ( pxTCB->uxMutexesHeld )--;
 8004832:	6d03      	ldr	r3, [r0, #80]	; 0x50
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004834:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
 8004836:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
            ( pxTCB->uxMutexesHeld )--;
 8004838:	3b01      	subs	r3, #1
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800483a:	4291      	cmp	r1, r2
            ( pxTCB->uxMutexesHeld )--;
 800483c:	6503      	str	r3, [r0, #80]	; 0x50
            if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800483e:	d0f6      	beq.n	800482e <xTaskPriorityDisinherit+0x6>
                if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004840:	2b00      	cmp	r3, #0
 8004842:	d1f4      	bne.n	800482e <xTaskPriorityDisinherit+0x6>
                    if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004844:	1d05      	adds	r5, r0, #4
 8004846:	4628      	mov	r0, r5
 8004848:	f7ff f8ad 	bl	80039a6 <uxListRemove>
 800484c:	4a11      	ldr	r2, [pc, #68]	; (8004894 <xTaskPriorityDisinherit+0x6c>)
 800484e:	b930      	cbnz	r0, 800485e <xTaskPriorityDisinherit+0x36>
                        portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8004850:	2101      	movs	r1, #1
 8004852:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8004854:	6813      	ldr	r3, [r2, #0]
 8004856:	4081      	lsls	r1, r0
 8004858:	ea23 0301 	bic.w	r3, r3, r1
 800485c:	6013      	str	r3, [r2, #0]
                    prvAddTaskToReadyList( pxTCB );
 800485e:	2001      	movs	r0, #1
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004860:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
                    prvAddTaskToReadyList( pxTCB );
 8004862:	6816      	ldr	r6, [r2, #0]
                    listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004864:	f1c3 0105 	rsb	r1, r3, #5
 8004868:	61a1      	str	r1, [r4, #24]
                    prvAddTaskToReadyList( pxTCB );
 800486a:	fa00 f103 	lsl.w	r1, r0, r3
 800486e:	4331      	orrs	r1, r6
 8004870:	6011      	str	r1, [r2, #0]
 8004872:	2214      	movs	r2, #20
                    pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004874:	62e3      	str	r3, [r4, #44]	; 0x2c
                    prvAddTaskToReadyList( pxTCB );
 8004876:	4353      	muls	r3, r2
 8004878:	4907      	ldr	r1, [pc, #28]	; (8004898 <xTaskPriorityDisinherit+0x70>)
 800487a:	18ce      	adds	r6, r1, r3
 800487c:	6872      	ldr	r2, [r6, #4]
 800487e:	6897      	ldr	r7, [r2, #8]
 8004880:	60a2      	str	r2, [r4, #8]
 8004882:	60e7      	str	r7, [r4, #12]
 8004884:	6897      	ldr	r7, [r2, #8]
 8004886:	607d      	str	r5, [r7, #4]
 8004888:	6095      	str	r5, [r2, #8]
 800488a:	58ca      	ldr	r2, [r1, r3]
 800488c:	6166      	str	r6, [r4, #20]
 800488e:	4402      	add	r2, r0
 8004890:	50ca      	str	r2, [r1, r3]
        return xReturn;
 8004892:	e7cd      	b.n	8004830 <xTaskPriorityDisinherit+0x8>
 8004894:	200003d0 	.word	0x200003d0
 8004898:	2000035c 	.word	0x2000035c

0800489c <vTaskPriorityDisinheritAfterTimeout>:
    {
 800489c:	b570      	push	{r4, r5, r6, lr}
        if( pxMutexHolder != NULL )
 800489e:	4604      	mov	r4, r0
 80048a0:	2800      	cmp	r0, #0
 80048a2:	d038      	beq.n	8004916 <vTaskPriorityDisinheritAfterTimeout+0x7a>
            if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80048a4:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
 80048a6:	4299      	cmp	r1, r3
 80048a8:	bf38      	it	cc
 80048aa:	4619      	movcc	r1, r3
            if( pxTCB->uxPriority != uxPriorityToUse )
 80048ac:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 80048ae:	428b      	cmp	r3, r1
 80048b0:	d031      	beq.n	8004916 <vTaskPriorityDisinheritAfterTimeout+0x7a>
                if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80048b2:	6d02      	ldr	r2, [r0, #80]	; 0x50
 80048b4:	2a01      	cmp	r2, #1
 80048b6:	d12e      	bne.n	8004916 <vTaskPriorityDisinheritAfterTimeout+0x7a>
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80048b8:	6982      	ldr	r2, [r0, #24]
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80048ba:	4d17      	ldr	r5, [pc, #92]	; (8004918 <vTaskPriorityDisinheritAfterTimeout+0x7c>)
                    if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80048bc:	2a00      	cmp	r2, #0
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80048be:	f04f 0214 	mov.w	r2, #20
 80048c2:	fb02 5303 	mla	r3, r2, r3, r5
 80048c6:	6942      	ldr	r2, [r0, #20]
                    pxTCB->uxPriority = uxPriorityToUse;
 80048c8:	62c1      	str	r1, [r0, #44]	; 0x2c
                        listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80048ca:	bfa4      	itt	ge
 80048cc:	f1c1 0105 	rsbge	r1, r1, #5
 80048d0:	6181      	strge	r1, [r0, #24]
                    if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80048d2:	429a      	cmp	r2, r3
 80048d4:	d11f      	bne.n	8004916 <vTaskPriorityDisinheritAfterTimeout+0x7a>
                        if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048d6:	1d06      	adds	r6, r0, #4
 80048d8:	4630      	mov	r0, r6
 80048da:	f7ff f864 	bl	80039a6 <uxListRemove>
 80048de:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 80048e0:	490e      	ldr	r1, [pc, #56]	; (800491c <vTaskPriorityDisinheritAfterTimeout+0x80>)
 80048e2:	b928      	cbnz	r0, 80048f0 <vTaskPriorityDisinheritAfterTimeout+0x54>
                            portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 80048e4:	2001      	movs	r0, #1
 80048e6:	680a      	ldr	r2, [r1, #0]
 80048e8:	4098      	lsls	r0, r3
 80048ea:	ea22 0200 	bic.w	r2, r2, r0
 80048ee:	600a      	str	r2, [r1, #0]
                        prvAddTaskToReadyList( pxTCB );
 80048f0:	2201      	movs	r2, #1
 80048f2:	6808      	ldr	r0, [r1, #0]
 80048f4:	409a      	lsls	r2, r3
 80048f6:	4302      	orrs	r2, r0
 80048f8:	600a      	str	r2, [r1, #0]
 80048fa:	2214      	movs	r2, #20
 80048fc:	4353      	muls	r3, r2
 80048fe:	18e9      	adds	r1, r5, r3
 8004900:	684a      	ldr	r2, [r1, #4]
 8004902:	6890      	ldr	r0, [r2, #8]
 8004904:	60a2      	str	r2, [r4, #8]
 8004906:	60e0      	str	r0, [r4, #12]
 8004908:	6890      	ldr	r0, [r2, #8]
 800490a:	6046      	str	r6, [r0, #4]
 800490c:	6096      	str	r6, [r2, #8]
 800490e:	58ea      	ldr	r2, [r5, r3]
 8004910:	6161      	str	r1, [r4, #20]
 8004912:	3201      	adds	r2, #1
 8004914:	50ea      	str	r2, [r5, r3]
    }
 8004916:	bd70      	pop	{r4, r5, r6, pc}
 8004918:	2000035c 	.word	0x2000035c
 800491c:	200003d0 	.word	0x200003d0

08004920 <pvTaskIncrementMutexHeldCount>:
        if( pxCurrentTCB != NULL )
 8004920:	4b04      	ldr	r3, [pc, #16]	; (8004934 <pvTaskIncrementMutexHeldCount+0x14>)
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	b11a      	cbz	r2, 800492e <pvTaskIncrementMutexHeldCount+0xe>
            ( pxCurrentTCB->uxMutexesHeld )++;
 8004926:	6819      	ldr	r1, [r3, #0]
 8004928:	6d0a      	ldr	r2, [r1, #80]	; 0x50
 800492a:	3201      	adds	r2, #1
 800492c:	650a      	str	r2, [r1, #80]	; 0x50
        return pxCurrentTCB;
 800492e:	6818      	ldr	r0, [r3, #0]
    }
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	20000350 	.word	0x20000350

08004938 <prvTaskExitError>:
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
    volatile uint32_t ulDummy = 0UL;
 8004938:	2300      	movs	r3, #0
{
 800493a:	b082      	sub	sp, #8
    volatile uint32_t ulDummy = 0UL;
 800493c:	9301      	str	r3, [sp, #4]
        __asm volatile
 800493e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004942:	f383 8811 	msr	BASEPRI, r3
 8004946:	f3bf 8f6f 	isb	sy
 800494a:	f3bf 8f4f 	dsb	sy
     * Artificially force an assert() to be triggered if configASSERT() is
     * defined, then stop here so application writers can catch the error. */
    configASSERT( uxCriticalNesting == ~0UL );
    portDISABLE_INTERRUPTS();

    while( ulDummy == 0 )
 800494e:	9b01      	ldr	r3, [sp, #4]
 8004950:	2b00      	cmp	r3, #0
 8004952:	d0fc      	beq.n	800494e <prvTaskExitError+0x16>
         * about code appearing after this function is called - making ulDummy
         * volatile makes the compiler think the function could return and
         * therefore not output an 'unreachable code' warning for code that appears
         * after it. */
    }
}
 8004954:	b002      	add	sp, #8
 8004956:	4770      	bx	lr

08004958 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
    __asm volatile (
 8004958:	4806      	ldr	r0, [pc, #24]	; (8004974 <prvPortStartFirstTask+0x1c>)
 800495a:	6800      	ldr	r0, [r0, #0]
 800495c:	6800      	ldr	r0, [r0, #0]
 800495e:	f380 8808 	msr	MSP, r0
 8004962:	b662      	cpsie	i
 8004964:	b661      	cpsie	f
 8004966:	f3bf 8f4f 	dsb	sy
 800496a:	f3bf 8f6f 	isb	sy
 800496e:	df00      	svc	0
 8004970:	bf00      	nop
 8004972:	0000      	.short	0x0000
 8004974:	e000ed08 	.word	0xe000ed08

08004978 <pxPortInitialiseStack>:
    *pxTopOfStack = portINITIAL_XPSR;                                    /* xPSR */
 8004978:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800497c:	f840 3c04 	str.w	r3, [r0, #-4]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 8004980:	4b05      	ldr	r3, [pc, #20]	; (8004998 <pxPortInitialiseStack+0x20>)
    *pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK; /* PC */
 8004982:	f021 0101 	bic.w	r1, r1, #1
 8004986:	f840 1c08 	str.w	r1, [r0, #-8]
    *pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;             /* LR */
 800498a:	f840 3c0c 	str.w	r3, [r0, #-12]
    *pxTopOfStack = ( StackType_t ) pvParameters;                        /* R0 */
 800498e:	f840 2c20 	str.w	r2, [r0, #-32]
}
 8004992:	3840      	subs	r0, #64	; 0x40
 8004994:	4770      	bx	lr
 8004996:	bf00      	nop
 8004998:	08004939 	.word	0x08004939
 800499c:	00000000 	.word	0x00000000

080049a0 <SVC_Handler>:
    __asm volatile (
 80049a0:	4b07      	ldr	r3, [pc, #28]	; (80049c0 <pxCurrentTCBConst2>)
 80049a2:	6819      	ldr	r1, [r3, #0]
 80049a4:	6808      	ldr	r0, [r1, #0]
 80049a6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80049aa:	f380 8809 	msr	PSP, r0
 80049ae:	f3bf 8f6f 	isb	sy
 80049b2:	f04f 0000 	mov.w	r0, #0
 80049b6:	f380 8811 	msr	BASEPRI, r0
 80049ba:	f04e 0e0d 	orr.w	lr, lr, #13
 80049be:	4770      	bx	lr

080049c0 <pxCurrentTCBConst2>:
 80049c0:	20000350 	.word	0x20000350

080049c4 <vPortEnterCritical>:
 80049c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c8:	f383 8811 	msr	BASEPRI, r3
 80049cc:	f3bf 8f6f 	isb	sy
 80049d0:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
    portDISABLE_INTERRUPTS();
    uxCriticalNesting++;
 80049d4:	4a02      	ldr	r2, [pc, #8]	; (80049e0 <vPortEnterCritical+0x1c>)
 80049d6:	6813      	ldr	r3, [r2, #0]
 80049d8:	3301      	adds	r3, #1
 80049da:	6013      	str	r3, [r2, #0]
     * assert function also uses a critical section. */
    if( uxCriticalNesting == 1 )
    {
        configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
    }
}
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	20000010 	.word	0x20000010

080049e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
    configASSERT( uxCriticalNesting );
    uxCriticalNesting--;
 80049e4:	4a03      	ldr	r2, [pc, #12]	; (80049f4 <vPortExitCritical+0x10>)
 80049e6:	6813      	ldr	r3, [r2, #0]
 80049e8:	3b01      	subs	r3, #1
 80049ea:	6013      	str	r3, [r2, #0]

    if( uxCriticalNesting == 0 )
 80049ec:	b90b      	cbnz	r3, 80049f2 <vPortExitCritical+0xe>
    }
/*-----------------------------------------------------------*/

    portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
    {
        __asm volatile
 80049ee:	f383 8811 	msr	BASEPRI, r3
    {
        portENABLE_INTERRUPTS();
    }
}
 80049f2:	4770      	bx	lr
 80049f4:	20000010 	.word	0x20000010
	...

08004a00 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
    /* This is a naked function. */

    __asm volatile
 8004a00:	f3ef 8009 	mrs	r0, PSP
 8004a04:	f3bf 8f6f 	isb	sy
 8004a08:	4b0d      	ldr	r3, [pc, #52]	; (8004a40 <pxCurrentTCBConst>)
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004a10:	6010      	str	r0, [r2, #0]
 8004a12:	e92d 4008 	stmdb	sp!, {r3, lr}
 8004a16:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004a1a:	f380 8811 	msr	BASEPRI, r0
 8004a1e:	f7ff fdd9 	bl	80045d4 <vTaskSwitchContext>
 8004a22:	f04f 0000 	mov.w	r0, #0
 8004a26:	f380 8811 	msr	BASEPRI, r0
 8004a2a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8004a2e:	6819      	ldr	r1, [r3, #0]
 8004a30:	6808      	ldr	r0, [r1, #0]
 8004a32:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8004a36:	f380 8809 	msr	PSP, r0
 8004a3a:	f3bf 8f6f 	isb	sy
 8004a3e:	4770      	bx	lr

08004a40 <pxCurrentTCBConst>:
 8004a40:	20000350 	.word	0x20000350

08004a44 <SysTick_Handler>:
    );
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004a44:	b508      	push	{r3, lr}
        __asm volatile
 8004a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a4a:	f383 8811 	msr	BASEPRI, r3
 8004a4e:	f3bf 8f6f 	isb	sy
 8004a52:	f3bf 8f4f 	dsb	sy
     * save and then restore the interrupt mask value as its value is already
     * known. */
    portDISABLE_INTERRUPTS();
    {
        /* Increment the RTOS tick. */
        if( xTaskIncrementTick() != pdFALSE )
 8004a56:	f7ff fc61 	bl	800431c <xTaskIncrementTick>
 8004a5a:	b128      	cbz	r0, 8004a68 <SysTick_Handler+0x24>
        {
            /* A context switch is required.  Context switching is performed in
             * the PendSV interrupt.  Pend the PendSV interrupt. */
            portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004a5c:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
 8004a60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a64:	f8c3 2d04 	str.w	r2, [r3, #3332]	; 0xd04
        __asm volatile
 8004a68:	2300      	movs	r3, #0
 8004a6a:	f383 8811 	msr	BASEPRI, r3
        }
    }
    portENABLE_INTERRUPTS();
}
 8004a6e:	bd08      	pop	{r3, pc}

08004a70 <vPortSetupTimerInterrupt>:
            ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
        }
    #endif /* configUSE_TICKLESS_IDLE */

    /* Stop and clear the SysTick. */
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004a70:	f04f 22e0 	mov.w	r2, #3758153728	; 0xe000e000
 8004a74:	2300      	movs	r3, #0
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;

    /* Configure SysTick to interrupt at the requested rate. */
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004a76:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
    portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004a7a:	6113      	str	r3, [r2, #16]
    portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004a7c:	6193      	str	r3, [r2, #24]
    portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004a7e:	4b04      	ldr	r3, [pc, #16]	; (8004a90 <vPortSetupTimerInterrupt+0x20>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a86:	3b01      	subs	r3, #1
 8004a88:	6153      	str	r3, [r2, #20]
    portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004a8a:	2307      	movs	r3, #7
 8004a8c:	6113      	str	r3, [r2, #16]
}
 8004a8e:	4770      	bx	lr
 8004a90:	20000000 	.word	0x20000000

08004a94 <xPortStartScheduler>:
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004a94:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
{
 8004a98:	b510      	push	{r4, lr}
    uxCriticalNesting = 0;
 8004a9a:	2400      	movs	r4, #0
    portNVIC_SHPR3_REG |= portNVIC_PENDSV_PRI;
 8004a9c:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8004aa0:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
 8004aa4:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
    portNVIC_SHPR3_REG |= portNVIC_SYSTICK_PRI;
 8004aa8:	f8d3 2d20 	ldr.w	r2, [r3, #3360]	; 0xd20
 8004aac:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
 8004ab0:	f8c3 2d20 	str.w	r2, [r3, #3360]	; 0xd20
    vPortSetupTimerInterrupt();
 8004ab4:	f7ff ffdc 	bl	8004a70 <vPortSetupTimerInterrupt>
    uxCriticalNesting = 0;
 8004ab8:	4b04      	ldr	r3, [pc, #16]	; (8004acc <xPortStartScheduler+0x38>)
 8004aba:	601c      	str	r4, [r3, #0]
    prvPortStartFirstTask();
 8004abc:	f7ff ff4c 	bl	8004958 <prvPortStartFirstTask>
    vTaskSwitchContext();
 8004ac0:	f7ff fd88 	bl	80045d4 <vTaskSwitchContext>
    prvTaskExitError();
 8004ac4:	f7ff ff38 	bl	8004938 <prvTaskExitError>
}
 8004ac8:	4620      	mov	r0, r4
 8004aca:	bd10      	pop	{r4, pc}
 8004acc:	20000010 	.word	0x20000010

08004ad0 <prvInsertBlockIntoFreeList>:
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t * pxBlockToInsert ) /* PRIVILEGED_FUNCTION */
{
 8004ad0:	b510      	push	{r4, lr}
    BlockLink_t * pxIterator;
    uint8_t * puc;

    /* Iterate through the list until a block is found that has a higher address
     * than the block being inserted. */
    for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004ad2:	4b0f      	ldr	r3, [pc, #60]	; (8004b10 <prvInsertBlockIntoFreeList+0x40>)
 8004ad4:	461a      	mov	r2, r3
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	4283      	cmp	r3, r0
 8004ada:	d3fb      	bcc.n	8004ad4 <prvInsertBlockIntoFreeList+0x4>

    /* Do the block being inserted, and the block it is being inserted after
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxIterator;

    if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004adc:	6854      	ldr	r4, [r2, #4]
 8004ade:	1911      	adds	r1, r2, r4
 8004ae0:	4288      	cmp	r0, r1
    {
        pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004ae2:	bf01      	itttt	eq
 8004ae4:	6841      	ldreq	r1, [r0, #4]
 8004ae6:	4610      	moveq	r0, r2
 8004ae8:	1909      	addeq	r1, r1, r4
 8004aea:	6051      	streq	r1, [r2, #4]

    /* Do the block being inserted, and the block it is being inserted before
     * make a contiguous block of memory? */
    puc = ( uint8_t * ) pxBlockToInsert;

    if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004aec:	6844      	ldr	r4, [r0, #4]
 8004aee:	1901      	adds	r1, r0, r4
 8004af0:	428b      	cmp	r3, r1
 8004af2:	d107      	bne.n	8004b04 <prvInsertBlockIntoFreeList+0x34>
    {
        if( pxIterator->pxNextFreeBlock != pxEnd )
 8004af4:	4907      	ldr	r1, [pc, #28]	; (8004b14 <prvInsertBlockIntoFreeList+0x44>)
 8004af6:	6809      	ldr	r1, [r1, #0]
 8004af8:	428b      	cmp	r3, r1
        {
            /* Form one big block from the two blocks. */
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004afa:	bf1f      	itttt	ne
 8004afc:	6859      	ldrne	r1, [r3, #4]
            pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004afe:	681b      	ldrne	r3, [r3, #0]
            pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004b00:	1909      	addne	r1, r1, r4
 8004b02:	6041      	strne	r1, [r0, #4]

    /* If the block being inserted plugged a gab, so was merged with the block
     * before and the block after, then it's pxNextFreeBlock pointer will have
     * already been set, and should not be set here as that would make it point
     * to itself. */
    if( pxIterator != pxBlockToInsert )
 8004b04:	4290      	cmp	r0, r2
        pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004b06:	6003      	str	r3, [r0, #0]
    {
        pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004b08:	bf18      	it	ne
 8004b0a:	6010      	strne	r0, [r2, #0]
    }
    else
    {
        mtCOVERAGE_TEST_MARKER();
    }
}
 8004b0c:	bd10      	pop	{r4, pc}
 8004b0e:	bf00      	nop
 8004b10:	20002c6c 	.word	0x20002c6c
 8004b14:	20000454 	.word	0x20000454

08004b18 <pvPortMalloc>:
{
 8004b18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b1c:	4605      	mov	r5, r0
    vTaskSuspendAll();
 8004b1e:	f7ff fbf5 	bl	800430c <vTaskSuspendAll>
        if( pxEnd == NULL )
 8004b22:	4938      	ldr	r1, [pc, #224]	; (8004c04 <pvPortMalloc+0xec>)
 8004b24:	4c38      	ldr	r4, [pc, #224]	; (8004c08 <pvPortMalloc+0xf0>)
 8004b26:	680b      	ldr	r3, [r1, #0]
 8004b28:	bb0b      	cbnz	r3, 8004b6e <pvPortMalloc+0x56>
    uxAddress = ( size_t ) ucHeap;
 8004b2a:	4a38      	ldr	r2, [pc, #224]	; (8004c0c <pvPortMalloc+0xf4>)
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004b2c:	4e38      	ldr	r6, [pc, #224]	; (8004c10 <pvPortMalloc+0xf8>)
    if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004b2e:	0750      	lsls	r0, r2, #29
        uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004b30:	bf1d      	ittte	ne
 8004b32:	1dd0      	addne	r0, r2, #7
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b34:	f020 0007 	bicne.w	r0, r0, #7
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004b38:	f502 5320 	addne.w	r3, r2, #10240	; 0x2800
    size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004b3c:	f44f 5320 	moveq.w	r3, #10240	; 0x2800
        uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b40:	bf1c      	itt	ne
 8004b42:	4602      	movne	r2, r0
        xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004b44:	1a1b      	subne	r3, r3, r0
    xStart.xBlockSize = ( size_t ) 0;
 8004b46:	2000      	movs	r0, #0
    uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004b48:	4413      	add	r3, r2
    uxAddress -= xHeapStructSize;
 8004b4a:	3b08      	subs	r3, #8
    uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004b4c:	f023 0307 	bic.w	r3, r3, #7
    xStart.xBlockSize = ( size_t ) 0;
 8004b50:	6070      	str	r0, [r6, #4]
    xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004b52:	6032      	str	r2, [r6, #0]
    pxEnd->pxNextFreeBlock = NULL;
 8004b54:	e9c3 0000 	strd	r0, r0, [r3]
    pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004b58:	1a98      	subs	r0, r3, r2
    pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004b5a:	e9c2 3000 	strd	r3, r0, [r2]
    pxEnd = ( void * ) uxAddress;
 8004b5e:	600b      	str	r3, [r1, #0]
    xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b60:	4b2c      	ldr	r3, [pc, #176]	; (8004c14 <pvPortMalloc+0xfc>)
 8004b62:	6018      	str	r0, [r3, #0]
    xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004b64:	4b2c      	ldr	r3, [pc, #176]	; (8004c18 <pvPortMalloc+0x100>)
 8004b66:	6018      	str	r0, [r3, #0]
    xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004b68:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8004b6c:	6023      	str	r3, [r4, #0]
        if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004b6e:	6827      	ldr	r7, [r4, #0]
 8004b70:	ea17 0405 	ands.w	r4, r7, r5
 8004b74:	d143      	bne.n	8004bfe <pvPortMalloc+0xe6>
            if( ( xWantedSize > 0 ) &&
 8004b76:	1e6b      	subs	r3, r5, #1
 8004b78:	330a      	adds	r3, #10
 8004b7a:	d808      	bhi.n	8004b8e <pvPortMalloc+0x76>
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004b7c:	076a      	lsls	r2, r5, #29
                xWantedSize += xHeapStructSize;
 8004b7e:	f105 0308 	add.w	r3, r5, #8
                if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004b82:	d036      	beq.n	8004bf2 <pvPortMalloc+0xda>
                    if( ( xWantedSize + ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) ) )
 8004b84:	f023 0207 	bic.w	r2, r3, #7
 8004b88:	3208      	adds	r2, #8
 8004b8a:	429a      	cmp	r2, r3
 8004b8c:	d830      	bhi.n	8004bf0 <pvPortMalloc+0xd8>
    ( void ) xTaskResumeAll();
 8004b8e:	f7ff fc75 	bl	800447c <xTaskResumeAll>
}
 8004b92:	4620      	mov	r0, r4
 8004b94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
                pxBlock = xStart.pxNextFreeBlock;
 8004b98:	4a1d      	ldr	r2, [pc, #116]	; (8004c10 <pvPortMalloc+0xf8>)
 8004b9a:	6815      	ldr	r5, [r2, #0]
                while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004b9c:	6868      	ldr	r0, [r5, #4]
 8004b9e:	4298      	cmp	r0, r3
 8004ba0:	d201      	bcs.n	8004ba6 <pvPortMalloc+0x8e>
 8004ba2:	682c      	ldr	r4, [r5, #0]
 8004ba4:	bb0c      	cbnz	r4, 8004bea <pvPortMalloc+0xd2>
                if( pxBlock != pxEnd )
 8004ba6:	6809      	ldr	r1, [r1, #0]
 8004ba8:	42a9      	cmp	r1, r5
 8004baa:	d028      	beq.n	8004bfe <pvPortMalloc+0xe6>
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004bac:	6829      	ldr	r1, [r5, #0]
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004bae:	6814      	ldr	r4, [r2, #0]
                    pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004bb0:	6011      	str	r1, [r2, #0]
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004bb2:	1ac2      	subs	r2, r0, r3
 8004bb4:	2a10      	cmp	r2, #16
                    pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004bb6:	f104 0408 	add.w	r4, r4, #8
                    if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004bba:	d904      	bls.n	8004bc6 <pvPortMalloc+0xae>
                        pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004bbc:	18e8      	adds	r0, r5, r3
                        pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004bbe:	6042      	str	r2, [r0, #4]
                        pxBlock->xBlockSize = xWantedSize;
 8004bc0:	606b      	str	r3, [r5, #4]
                        prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004bc2:	f7ff ff85 	bl	8004ad0 <prvInsertBlockIntoFreeList>
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004bc6:	686b      	ldr	r3, [r5, #4]
                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004bc8:	4a12      	ldr	r2, [pc, #72]	; (8004c14 <pvPortMalloc+0xfc>)
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004bca:	1af6      	subs	r6, r6, r3
                    pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004bcc:	433b      	orrs	r3, r7
 8004bce:	606b      	str	r3, [r5, #4]
                    pxBlock->pxNextFreeBlock = NULL;
 8004bd0:	2300      	movs	r3, #0
                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004bd2:	6811      	ldr	r1, [r2, #0]
                    pxBlock->pxNextFreeBlock = NULL;
 8004bd4:	602b      	str	r3, [r5, #0]
                    if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004bd6:	428e      	cmp	r6, r1
                        xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004bd8:	bf38      	it	cc
 8004bda:	6016      	strcc	r6, [r2, #0]
                    xNumberOfSuccessfulAllocations++;
 8004bdc:	4a0f      	ldr	r2, [pc, #60]	; (8004c1c <pvPortMalloc+0x104>)
                    xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004bde:	f8c8 6000 	str.w	r6, [r8]
                    xNumberOfSuccessfulAllocations++;
 8004be2:	6813      	ldr	r3, [r2, #0]
 8004be4:	3301      	adds	r3, #1
 8004be6:	6013      	str	r3, [r2, #0]
 8004be8:	e7d1      	b.n	8004b8e <pvPortMalloc+0x76>
 8004bea:	462a      	mov	r2, r5
 8004bec:	4625      	mov	r5, r4
 8004bee:	e7d5      	b.n	8004b9c <pvPortMalloc+0x84>
 8004bf0:	4613      	mov	r3, r2
            if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004bf2:	f8df 8024 	ldr.w	r8, [pc, #36]	; 8004c18 <pvPortMalloc+0x100>
 8004bf6:	f8d8 6000 	ldr.w	r6, [r8]
 8004bfa:	429e      	cmp	r6, r3
 8004bfc:	d2cc      	bcs.n	8004b98 <pvPortMalloc+0x80>
    void * pvReturn = NULL;
 8004bfe:	2400      	movs	r4, #0
 8004c00:	e7c5      	b.n	8004b8e <pvPortMalloc+0x76>
 8004c02:	bf00      	nop
 8004c04:	20000454 	.word	0x20000454
 8004c08:	20002c58 	.word	0x20002c58
 8004c0c:	20000458 	.word	0x20000458
 8004c10:	20002c6c 	.word	0x20002c6c
 8004c14:	20002c60 	.word	0x20002c60
 8004c18:	20002c5c 	.word	0x20002c5c
 8004c1c:	20002c64 	.word	0x20002c64

08004c20 <vPortFree>:
{
 8004c20:	b510      	push	{r4, lr}
    if( pv != NULL )
 8004c22:	4604      	mov	r4, r0
 8004c24:	b300      	cbz	r0, 8004c68 <vPortFree+0x48>
        if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004c26:	4a11      	ldr	r2, [pc, #68]	; (8004c6c <vPortFree+0x4c>)
 8004c28:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8004c2c:	6812      	ldr	r2, [r2, #0]
 8004c2e:	4213      	tst	r3, r2
 8004c30:	d01a      	beq.n	8004c68 <vPortFree+0x48>
            if( pxLink->pxNextFreeBlock == NULL )
 8004c32:	f850 1c08 	ldr.w	r1, [r0, #-8]
 8004c36:	b9b9      	cbnz	r1, 8004c68 <vPortFree+0x48>
                pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004c38:	ea23 0302 	bic.w	r3, r3, r2
 8004c3c:	f840 3c04 	str.w	r3, [r0, #-4]
                vTaskSuspendAll();
 8004c40:	f7ff fb64 	bl	800430c <vTaskSuspendAll>
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004c44:	4a0a      	ldr	r2, [pc, #40]	; (8004c70 <vPortFree+0x50>)
 8004c46:	f854 3c04 	ldr.w	r3, [r4, #-4]
 8004c4a:	6811      	ldr	r1, [r2, #0]
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c4c:	f1a4 0008 	sub.w	r0, r4, #8
                    xFreeBytesRemaining += pxLink->xBlockSize;
 8004c50:	440b      	add	r3, r1
 8004c52:	6013      	str	r3, [r2, #0]
                    prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c54:	f7ff ff3c 	bl	8004ad0 <prvInsertBlockIntoFreeList>
}
 8004c58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                    xNumberOfSuccessfulFrees++;
 8004c5c:	4a05      	ldr	r2, [pc, #20]	; (8004c74 <vPortFree+0x54>)
 8004c5e:	6813      	ldr	r3, [r2, #0]
 8004c60:	3301      	adds	r3, #1
 8004c62:	6013      	str	r3, [r2, #0]
                ( void ) xTaskResumeAll();
 8004c64:	f7ff bc0a 	b.w	800447c <xTaskResumeAll>
}
 8004c68:	bd10      	pop	{r4, pc}
 8004c6a:	bf00      	nop
 8004c6c:	20002c58 	.word	0x20002c58
 8004c70:	20002c5c 	.word	0x20002c5c
 8004c74:	20002c68 	.word	0x20002c68

08004c78 <app_main>:
#include "init_task.h"
#include "stm32l1xx.h"


void app_main()
{
 8004c78:	b508      	push	{r3, lr}

	init_task_create();
 8004c7a:	f000 fdb3 	bl	80057e4 <init_task_create>

	vTaskStartScheduler();
 8004c7e:	f7ff fb13 	bl	80042a8 <vTaskStartScheduler>

	/*Should not reach here*/
	while(1)
	{
		__NOP();
 8004c82:	bf00      	nop
	while(1)
 8004c84:	e7fd      	b.n	8004c82 <app_main+0xa>
	...

08004c88 <interface_init>:
QueueHandle_t		rsp_msg_queue;
QueueHandle_t		sms_queue;
SemaphoreHandle_t	numpad_mutex;

void interface_init()
{
 8004c88:	b510      	push	{r4, lr}
	lcd_queue 		= xQueueCreate(3, sizeof(lcd_data));
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	2123      	movs	r1, #35	; 0x23
 8004c8e:	2003      	movs	r0, #3
 8004c90:	f7fe ff62 	bl	8003b58 <xQueueGenericCreate>
 8004c94:	4b1b      	ldr	r3, [pc, #108]	; (8004d04 <interface_init+0x7c>)
	io_queue 		= xQueueCreate(3, sizeof(io_state_data));
 8004c96:	2200      	movs	r2, #0
	lcd_queue 		= xQueueCreate(3, sizeof(lcd_data));
 8004c98:	6018      	str	r0, [r3, #0]
	io_queue 		= xQueueCreate(3, sizeof(io_state_data));
 8004c9a:	2108      	movs	r1, #8
 8004c9c:	2003      	movs	r0, #3
 8004c9e:	f7fe ff5b 	bl	8003b58 <xQueueGenericCreate>
 8004ca2:	4b19      	ldr	r3, [pc, #100]	; (8004d08 <interface_init+0x80>)
	key_queue 		= xQueueCreate(3, sizeof(uint8_t));
 8004ca4:	2200      	movs	r2, #0
	io_queue 		= xQueueCreate(3, sizeof(io_state_data));
 8004ca6:	6018      	str	r0, [r3, #0]
	key_queue 		= xQueueCreate(3, sizeof(uint8_t));
 8004ca8:	2101      	movs	r1, #1
 8004caa:	2003      	movs	r0, #3
 8004cac:	f7fe ff54 	bl	8003b58 <xQueueGenericCreate>
 8004cb0:	4b16      	ldr	r3, [pc, #88]	; (8004d0c <interface_init+0x84>)
	config_queue 	= xQueueCreate(2, sizeof(bool));
 8004cb2:	2200      	movs	r2, #0
	key_queue 		= xQueueCreate(3, sizeof(uint8_t));
 8004cb4:	6018      	str	r0, [r3, #0]
	config_queue 	= xQueueCreate(2, sizeof(bool));
 8004cb6:	2101      	movs	r1, #1
 8004cb8:	2002      	movs	r0, #2
 8004cba:	f7fe ff4d 	bl	8003b58 <xQueueGenericCreate>
 8004cbe:	4b14      	ldr	r3, [pc, #80]	; (8004d10 <interface_init+0x88>)
	msg_queue 		= xQueueCreate(2, sizeof(msg_data));
 8004cc0:	2200      	movs	r2, #0
	config_queue 	= xQueueCreate(2, sizeof(bool));
 8004cc2:	6018      	str	r0, [r3, #0]
	msg_queue 		= xQueueCreate(2, sizeof(msg_data));
 8004cc4:	2180      	movs	r1, #128	; 0x80
 8004cc6:	2002      	movs	r0, #2
 8004cc8:	f7fe ff46 	bl	8003b58 <xQueueGenericCreate>
 8004ccc:	4b11      	ldr	r3, [pc, #68]	; (8004d14 <interface_init+0x8c>)
	rsp_msg_queue 	= xQueueCreate(2, sizeof(msg_data));
 8004cce:	2200      	movs	r2, #0
	msg_queue 		= xQueueCreate(2, sizeof(msg_data));
 8004cd0:	6018      	str	r0, [r3, #0]
	rsp_msg_queue 	= xQueueCreate(2, sizeof(msg_data));
 8004cd2:	2180      	movs	r1, #128	; 0x80
 8004cd4:	2002      	movs	r0, #2
 8004cd6:	f7fe ff3f 	bl	8003b58 <xQueueGenericCreate>
 8004cda:	4b0f      	ldr	r3, [pc, #60]	; (8004d18 <interface_init+0x90>)
	sms_queue 		= xQueueCreate(2, sizeof(msg_data));
 8004cdc:	2200      	movs	r2, #0
 8004cde:	2180      	movs	r1, #128	; 0x80
	rsp_msg_queue 	= xQueueCreate(2, sizeof(msg_data));
 8004ce0:	6018      	str	r0, [r3, #0]
	sms_queue 		= xQueueCreate(2, sizeof(msg_data));
 8004ce2:	2002      	movs	r0, #2
 8004ce4:	f7fe ff38 	bl	8003b58 <xQueueGenericCreate>
 8004ce8:	4b0c      	ldr	r3, [pc, #48]	; (8004d1c <interface_init+0x94>)
 8004cea:	6018      	str	r0, [r3, #0]
	numpad_mutex 	= xSemaphoreCreateMutex();
 8004cec:	2001      	movs	r0, #1
 8004cee:	f7fe ffda 	bl	8003ca6 <xQueueCreateMutex>
	xSemaphoreGive(numpad_mutex);
}
 8004cf2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	numpad_mutex 	= xSemaphoreCreateMutex();
 8004cf6:	4b0a      	ldr	r3, [pc, #40]	; (8004d20 <interface_init+0x98>)
 8004cf8:	6018      	str	r0, [r3, #0]
	xSemaphoreGive(numpad_mutex);
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	461a      	mov	r2, r3
 8004cfe:	4619      	mov	r1, r3
 8004d00:	f7fe bf4f 	b.w	8003ba2 <xQueueGenericSend>
 8004d04:	20002c80 	.word	0x20002c80
 8004d08:	20002c78 	.word	0x20002c78
 8004d0c:	20002c7c 	.word	0x20002c7c
 8004d10:	20002c74 	.word	0x20002c74
 8004d14:	20002c84 	.word	0x20002c84
 8004d18:	20002c8c 	.word	0x20002c8c
 8004d1c:	20002c90 	.word	0x20002c90
 8004d20:	20002c88 	.word	0x20002c88

08004d24 <AT_callback_func>:
}

static bool AT_callback_func(uint8_t * data, void * return_data)
{
	return true;
}
 8004d24:	2001      	movs	r0, #1
 8004d26:	4770      	bx	lr

08004d28 <AT_CREG_callback_func>:
	return true;
}

static bool AT_CREG_callback_func(uint8_t * data, void * return_data)
{
	if(return_data == NULL)
 8004d28:	460a      	mov	r2, r1
{
 8004d2a:	b508      	push	{r3, lr}
	if(return_data == NULL)
 8004d2c:	b111      	cbz	r1, 8004d34 <AT_CREG_callback_func+0xc>
		return true;

	uint8_t * status = (uint8_t*)return_data;

	sscanf((char*)data, "+CREG %*[^,],%[^,],", status);
 8004d2e:	4902      	ldr	r1, [pc, #8]	; (8004d38 <AT_CREG_callback_func+0x10>)
 8004d30:	f001 fb9c 	bl	800646c <siscanf>

	return true;
}
 8004d34:	2001      	movs	r0, #1
 8004d36:	bd08      	pop	{r3, pc}
 8004d38:	08007886 	.word	0x08007886

08004d3c <data_callback_func>:
	return (M66_send_cmd(cmd_buffer, strlen(cmd_buffer), 600, NULL, NULL) ? CMD_OK : CMD_ERROR);

}

static bool data_callback_func(uint8_t * data, void * return_data)
{
 8004d3c:	b510      	push	{r4, lr}
 8004d3e:	4604      	mov	r4, r0
 8004d40:	b0a0      	sub	sp, #128	; 0x80
	/*Send the data to be parsed*/
	msg_data msg = {0};
 8004d42:	2280      	movs	r2, #128	; 0x80
 8004d44:	4668      	mov	r0, sp
 8004d46:	4909      	ldr	r1, [pc, #36]	; (8004d6c <data_callback_func+0x30>)
 8004d48:	f001 fb5a 	bl	8006400 <memcpy>
	sscanf((char*)data, "\r\n%[^\r\n]\r\n", msg.text);
 8004d4c:	466a      	mov	r2, sp
 8004d4e:	4620      	mov	r0, r4
 8004d50:	4907      	ldr	r1, [pc, #28]	; (8004d70 <data_callback_func+0x34>)
 8004d52:	f001 fb8b 	bl	800646c <siscanf>
	xQueueSend(msg_queue, (void*)&msg, pdMS_TO_TICKS(100));
 8004d56:	4807      	ldr	r0, [pc, #28]	; (8004d74 <data_callback_func+0x38>)
 8004d58:	2300      	movs	r3, #0
 8004d5a:	2264      	movs	r2, #100	; 0x64
 8004d5c:	4669      	mov	r1, sp
 8004d5e:	6800      	ldr	r0, [r0, #0]
 8004d60:	f7fe ff1f 	bl	8003ba2 <xQueueGenericSend>
	return true;
}
 8004d64:	2001      	movs	r0, #1
 8004d66:	b020      	add	sp, #128	; 0x80
 8004d68:	bd10      	pop	{r4, pc}
 8004d6a:	bf00      	nop
 8004d6c:	080076d4 	.word	0x080076d4
 8004d70:	080078af 	.word	0x080078af
 8004d74:	20002c84 	.word	0x20002c84

08004d78 <AT_CPIN_callback_func>:
{
 8004d78:	b510      	push	{r4, lr}
	if(return_data == NULL)
 8004d7a:	460c      	mov	r4, r1
 8004d7c:	b139      	cbz	r1, 8004d8e <AT_CPIN_callback_func+0x16>
	*status = false;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	700b      	strb	r3, [r1, #0]
	if(strcmp((char*)data, "+CPIN: READY") == 0)
 8004d82:	4904      	ldr	r1, [pc, #16]	; (8004d94 <AT_CPIN_callback_func+0x1c>)
 8004d84:	f7fb f9fc 	bl	8000180 <strcmp>
 8004d88:	b908      	cbnz	r0, 8004d8e <AT_CPIN_callback_func+0x16>
		*status = true;
 8004d8a:	2301      	movs	r3, #1
 8004d8c:	7023      	strb	r3, [r4, #0]
}
 8004d8e:	2001      	movs	r0, #1
 8004d90:	bd10      	pop	{r4, pc}
 8004d92:	bf00      	nop
 8004d94:	0800789a 	.word	0x0800789a

08004d98 <M66_send_cmd.part.0>:
static bool M66_send_cmd(const char * cmd, uint16_t len, uint32_t delay_ms, const m66_cmd_callback * cmd_callback, void * return_data)
 8004d98:	b570      	push	{r4, r5, r6, lr}
 8004d9a:	4614      	mov	r4, r2
	m66_ctrl_local->data_send((uint8_t*)cmd, len);
 8004d9c:	4e22      	ldr	r6, [pc, #136]	; (8004e28 <M66_send_cmd.part.0+0x90>)
static bool M66_send_cmd(const char * cmd, uint16_t len, uint32_t delay_ms, const m66_cmd_callback * cmd_callback, void * return_data)
 8004d9e:	461d      	mov	r5, r3
	m66_ctrl_local->data_send((uint8_t*)cmd, len);
 8004da0:	6833      	ldr	r3, [r6, #0]
static bool M66_send_cmd(const char * cmd, uint16_t len, uint32_t delay_ms, const m66_cmd_callback * cmd_callback, void * return_data)
 8004da2:	b0c4      	sub	sp, #272	; 0x110
	m66_ctrl_local->data_send((uint8_t*)cmd, len);
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	4798      	blx	r3
	m66_ctrl_local->delay(delay_ms);
 8004da8:	4620      	mov	r0, r4
	uint8_t data_buffer[CIRC_BUFF_SIZE] = {0};
 8004daa:	2400      	movs	r4, #0
	m66_ctrl_local->delay(delay_ms);
 8004dac:	6833      	ldr	r3, [r6, #0]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	4798      	blx	r3
	uint8_t data_buffer[CIRC_BUFF_SIZE] = {0};
 8004db2:	227c      	movs	r2, #124	; 0x7c
 8004db4:	4621      	mov	r1, r4
 8004db6:	a805      	add	r0, sp, #20
 8004db8:	9404      	str	r4, [sp, #16]
 8004dba:	f001 fb2f 	bl	800641c <memset>
	uint8_t cmd_data[CIRC_BUFF_SIZE] = {0};
 8004dbe:	227c      	movs	r2, #124	; 0x7c
 8004dc0:	4621      	mov	r1, r4
 8004dc2:	a825      	add	r0, sp, #148	; 0x94
 8004dc4:	9424      	str	r4, [sp, #144]	; 0x90
 8004dc6:	f001 fb29 	bl	800641c <memset>
	circbuffer_get_all(data_buffer);
 8004dca:	a804      	add	r0, sp, #16
	uint8_t cmd_result[10] = {0};
 8004dcc:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8004dd0:	f8ad 400c 	strh.w	r4, [sp, #12]
	circbuffer_get_all(data_buffer);
 8004dd4:	f000 fa42 	bl	800525c <circbuffer_get_all>
	if(sscanf((char*)data_buffer, "\r\n%[^\r\n]\r\n%[^\r\n]\r\n", cmd_data, cmd_result) != 2)
 8004dd8:	4914      	ldr	r1, [pc, #80]	; (8004e2c <M66_send_cmd.part.0+0x94>)
 8004dda:	ab01      	add	r3, sp, #4
 8004ddc:	aa24      	add	r2, sp, #144	; 0x90
 8004dde:	a804      	add	r0, sp, #16
 8004de0:	f001 fb44 	bl	800646c <siscanf>
 8004de4:	2802      	cmp	r0, #2
 8004de6:	d017      	beq.n	8004e18 <M66_send_cmd.part.0+0x80>
		if(sscanf((char*)data_buffer, "\r\n%[^\r\n]\r\n", cmd_result) != 1)
 8004de8:	4911      	ldr	r1, [pc, #68]	; (8004e30 <M66_send_cmd.part.0+0x98>)
 8004dea:	aa01      	add	r2, sp, #4
 8004dec:	a804      	add	r0, sp, #16
 8004dee:	f001 fb3d 	bl	800646c <siscanf>
 8004df2:	2801      	cmp	r0, #1
 8004df4:	d10a      	bne.n	8004e0c <M66_send_cmd.part.0+0x74>
	bool result = false;
 8004df6:	2400      	movs	r4, #0
	if(strcmp((char*)cmd_result, "OK") == 0)
 8004df8:	490e      	ldr	r1, [pc, #56]	; (8004e34 <M66_send_cmd.part.0+0x9c>)
 8004dfa:	a801      	add	r0, sp, #4
 8004dfc:	f7fb f9c0 	bl	8000180 <strcmp>
		result = true;
 8004e00:	2800      	cmp	r0, #0
}
 8004e02:	bf14      	ite	ne
 8004e04:	4620      	movne	r0, r4
 8004e06:	2001      	moveq	r0, #1
 8004e08:	b044      	add	sp, #272	; 0x110
 8004e0a:	bd70      	pop	{r4, r5, r6, pc}
			sscanf((char*)data_buffer, "%[^\r\n]\r\n", cmd_result);
 8004e0c:	490a      	ldr	r1, [pc, #40]	; (8004e38 <M66_send_cmd.part.0+0xa0>)
 8004e0e:	aa01      	add	r2, sp, #4
 8004e10:	a804      	add	r0, sp, #16
 8004e12:	f001 fb2b 	bl	800646c <siscanf>
 8004e16:	e7ef      	b.n	8004df8 <M66_send_cmd.part.0+0x60>
	else if(cmd_callback != NULL)
 8004e18:	2d00      	cmp	r5, #0
 8004e1a:	d0ec      	beq.n	8004df6 <M66_send_cmd.part.0+0x5e>
		result = cmd_callback->callback_function(cmd_data, return_data);
 8004e1c:	692b      	ldr	r3, [r5, #16]
 8004e1e:	9948      	ldr	r1, [sp, #288]	; 0x120
 8004e20:	a824      	add	r0, sp, #144	; 0x90
 8004e22:	4798      	blx	r3
 8004e24:	4604      	mov	r4, r0
 8004e26:	e7e7      	b.n	8004df8 <M66_send_cmd.part.0+0x60>
 8004e28:	20002c94 	.word	0x20002c94
 8004e2c:	080078a7 	.word	0x080078a7
 8004e30:	080078af 	.word	0x080078af
 8004e34:	08007a47 	.word	0x08007a47
 8004e38:	080078b1 	.word	0x080078b1

08004e3c <M66_send_cmd.constprop.0>:
static bool M66_send_cmd(const char * cmd, uint16_t len, uint32_t delay_ms, const m66_cmd_callback * cmd_callback, void * return_data)
 8004e3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
	if((cmd == NULL) || (len == 0) || (len > MAX_CMD_LEN))
 8004e3e:	b150      	cbz	r0, 8004e56 <M66_send_cmd.constprop.0+0x1a>
 8004e40:	1e4d      	subs	r5, r1, #1
 8004e42:	2d7f      	cmp	r5, #127	; 0x7f
 8004e44:	d807      	bhi.n	8004e56 <M66_send_cmd.constprop.0+0x1a>
 8004e46:	9300      	str	r3, [sp, #0]
 8004e48:	4613      	mov	r3, r2
 8004e4a:	f44f 7216 	mov.w	r2, #600	; 0x258
 8004e4e:	f7ff ffa3 	bl	8004d98 <M66_send_cmd.part.0>
}
 8004e52:	b003      	add	sp, #12
 8004e54:	bd30      	pop	{r4, r5, pc}
		return false;
 8004e56:	2000      	movs	r0, #0
 8004e58:	e7fb      	b.n	8004e52 <M66_send_cmd.constprop.0+0x16>
	...

08004e5c <QBTIND_callback_func>:
{
 8004e5c:	b510      	push	{r4, lr}
	char type[10] = {0};
 8004e5e:	2400      	movs	r4, #0
{
 8004e60:	b08c      	sub	sp, #48	; 0x30
	sscanf((char*)data, "\r\n%*[^ ] %[^,],%*[^,],%*[^\r\n]\r\n", type);
 8004e62:	4916      	ldr	r1, [pc, #88]	; (8004ebc <QBTIND_callback_func+0x60>)
 8004e64:	aa01      	add	r2, sp, #4
	char type[10] = {0};
 8004e66:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8004e6a:	f8ad 400c 	strh.w	r4, [sp, #12]
	sscanf((char*)data, "\r\n%*[^ ] %[^,],%*[^,],%*[^\r\n]\r\n", type);
 8004e6e:	f001 fafd 	bl	800646c <siscanf>
	char cmd_buffer[32] = {0};
 8004e72:	4621      	mov	r1, r4
 8004e74:	221c      	movs	r2, #28
 8004e76:	a805      	add	r0, sp, #20
 8004e78:	9404      	str	r4, [sp, #16]
 8004e7a:	f001 facf 	bl	800641c <memset>
	if(strcmp(type, "\"pair\"") == 0)
 8004e7e:	4910      	ldr	r1, [pc, #64]	; (8004ec0 <QBTIND_callback_func+0x64>)
 8004e80:	a801      	add	r0, sp, #4
 8004e82:	f7fb f97d 	bl	8000180 <strcmp>
 8004e86:	b988      	cbnz	r0, 8004eac <QBTIND_callback_func+0x50>
		sprintf(cmd_buffer, "AT+QBTPAIRCNF=1\r\n");
 8004e88:	490e      	ldr	r1, [pc, #56]	; (8004ec4 <QBTIND_callback_func+0x68>)
		sprintf(cmd_buffer, "AT+QBTACPT=1,2\r\n");
 8004e8a:	a804      	add	r0, sp, #16
 8004e8c:	f001 fb1a 	bl	80064c4 <strcpy>
	return (M66_send_cmd(cmd_buffer, strlen(cmd_buffer), 600, NULL, NULL) ? CMD_OK : CMD_ERROR);
 8004e90:	a804      	add	r0, sp, #16
 8004e92:	f7fb f97f 	bl	8000194 <strlen>
 8004e96:	2300      	movs	r3, #0
 8004e98:	b281      	uxth	r1, r0
 8004e9a:	461a      	mov	r2, r3
 8004e9c:	a804      	add	r0, sp, #16
 8004e9e:	f7ff ffcd 	bl	8004e3c <M66_send_cmd.constprop.0>
 8004ea2:	f080 0001 	eor.w	r0, r0, #1
}
 8004ea6:	b2c0      	uxtb	r0, r0
 8004ea8:	b00c      	add	sp, #48	; 0x30
 8004eaa:	bd10      	pop	{r4, pc}
	else if(strcmp(type, "\"conn\"") == 0)
 8004eac:	4906      	ldr	r1, [pc, #24]	; (8004ec8 <QBTIND_callback_func+0x6c>)
 8004eae:	a801      	add	r0, sp, #4
 8004eb0:	f7fb f966 	bl	8000180 <strcmp>
 8004eb4:	2800      	cmp	r0, #0
 8004eb6:	d1eb      	bne.n	8004e90 <QBTIND_callback_func+0x34>
		sprintf(cmd_buffer, "AT+QBTACPT=1,2\r\n");
 8004eb8:	4904      	ldr	r1, [pc, #16]	; (8004ecc <QBTIND_callback_func+0x70>)
 8004eba:	e7e6      	b.n	8004e8a <QBTIND_callback_func+0x2e>
 8004ebc:	080078ba 	.word	0x080078ba
 8004ec0:	080078da 	.word	0x080078da
 8004ec4:	080078e1 	.word	0x080078e1
 8004ec8:	080078f3 	.word	0x080078f3
 8004ecc:	080078fa 	.word	0x080078fa

08004ed0 <M66_ctrl_init>:
	m66_ctrl_local = m66_ctrl_struct;
 8004ed0:	4b01      	ldr	r3, [pc, #4]	; (8004ed8 <M66_ctrl_init+0x8>)
 8004ed2:	6018      	str	r0, [r3, #0]
}
 8004ed4:	4770      	bx	lr
 8004ed6:	bf00      	nop
 8004ed8:	20002c94 	.word	0x20002c94

08004edc <M66_check_URC>:
{
 8004edc:	b530      	push	{r4, r5, lr}
	uint8_t data_buffer[CIRC_BUFF_SIZE] = {0};
 8004ede:	2500      	movs	r5, #0
{
 8004ee0:	b0a1      	sub	sp, #132	; 0x84
	uint8_t data_buffer[CIRC_BUFF_SIZE] = {0};
 8004ee2:	4629      	mov	r1, r5
 8004ee4:	227c      	movs	r2, #124	; 0x7c
		ptr = (uint8_t*)strstr((char*)data_buffer, urc_callbacks[i].header);
 8004ee6:	4c0d      	ldr	r4, [pc, #52]	; (8004f1c <M66_check_URC+0x40>)
	uint8_t data_buffer[CIRC_BUFF_SIZE] = {0};
 8004ee8:	a801      	add	r0, sp, #4
 8004eea:	9500      	str	r5, [sp, #0]
 8004eec:	f001 fa96 	bl	800641c <memset>
	circbuffer_get_all(data_buffer);
 8004ef0:	4668      	mov	r0, sp
 8004ef2:	f000 f9b3 	bl	800525c <circbuffer_get_all>
		ptr = (uint8_t*)strstr((char*)data_buffer, urc_callbacks[i].header);
 8004ef6:	4621      	mov	r1, r4
 8004ef8:	4668      	mov	r0, sp
 8004efa:	f001 faeb 	bl	80064d4 <strstr>
		if(ptr != NULL)
 8004efe:	b110      	cbz	r0, 8004f06 <M66_check_URC+0x2a>
			urc_callbacks[i].callback_function(ptr, NULL);
 8004f00:	4629      	mov	r1, r5
 8004f02:	6923      	ldr	r3, [r4, #16]
 8004f04:	4798      	blx	r3
		ptr = (uint8_t*)strstr((char*)data_buffer, urc_callbacks[i].header);
 8004f06:	4668      	mov	r0, sp
 8004f08:	4905      	ldr	r1, [pc, #20]	; (8004f20 <M66_check_URC+0x44>)
 8004f0a:	f001 fae3 	bl	80064d4 <strstr>
		if(ptr != NULL)
 8004f0e:	b110      	cbz	r0, 8004f16 <M66_check_URC+0x3a>
			urc_callbacks[i].callback_function(ptr, NULL);
 8004f10:	2100      	movs	r1, #0
 8004f12:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f14:	4798      	blx	r3
}
 8004f16:	b021      	add	sp, #132	; 0x84
 8004f18:	bd30      	pop	{r4, r5, pc}
 8004f1a:	bf00      	nop
 8004f1c:	20000014 	.word	0x20000014
 8004f20:	20000028 	.word	0x20000028

08004f24 <M66_hw_reset>:
{
 8004f24:	b510      	push	{r4, lr}
	m66_ctrl_local->pwrkey_switch(true);
 8004f26:	4c0a      	ldr	r4, [pc, #40]	; (8004f50 <M66_hw_reset+0x2c>)
 8004f28:	2001      	movs	r0, #1
 8004f2a:	6823      	ldr	r3, [r4, #0]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	4798      	blx	r3
	m66_ctrl_local->delay(5000);
 8004f30:	6823      	ldr	r3, [r4, #0]
 8004f32:	f241 3088 	movw	r0, #5000	; 0x1388
 8004f36:	689b      	ldr	r3, [r3, #8]
 8004f38:	4798      	blx	r3
	m66_ctrl_local->pwrkey_switch(false);
 8004f3a:	6823      	ldr	r3, [r4, #0]
 8004f3c:	2000      	movs	r0, #0
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4798      	blx	r3
	m66_ctrl_local->delay(5000);
 8004f42:	6823      	ldr	r3, [r4, #0]
 8004f44:	f241 3088 	movw	r0, #5000	; 0x1388
}
 8004f48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	m66_ctrl_local->delay(5000);
 8004f4c:	689b      	ldr	r3, [r3, #8]
 8004f4e:	4718      	bx	r3
 8004f50:	20002c94 	.word	0x20002c94

08004f54 <M66_at>:
{
 8004f54:	b51f      	push	{r0, r1, r2, r3, r4, lr}
	char ret_dat[5] ={0};
 8004f56:	2300      	movs	r3, #0
 8004f58:	9302      	str	r3, [sp, #8]
 8004f5a:	f88d 300c 	strb.w	r3, [sp, #12]
	if((cmd == NULL) || (len == 0) || (len > MAX_CMD_LEN))
 8004f5e:	ab02      	add	r3, sp, #8
 8004f60:	9300      	str	r3, [sp, #0]
 8004f62:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8004f66:	2104      	movs	r1, #4
 8004f68:	4b04      	ldr	r3, [pc, #16]	; (8004f7c <M66_at+0x28>)
 8004f6a:	4805      	ldr	r0, [pc, #20]	; (8004f80 <M66_at+0x2c>)
 8004f6c:	f7ff ff14 	bl	8004d98 <M66_send_cmd.part.0>
	return (M66_send_cmd("AT\r\n", 4, 500, &AT_callback, (void *)ret_dat) ? CMD_OK : CMD_ERROR);
 8004f70:	f080 0001 	eor.w	r0, r0, #1
}
 8004f74:	b2c0      	uxtb	r0, r0
 8004f76:	b005      	add	sp, #20
 8004f78:	f85d fb04 	ldr.w	pc, [sp], #4
 8004f7c:	080079cc 	.word	0x080079cc
 8004f80:	0800790b 	.word	0x0800790b

08004f84 <M66_disable_echo>:
	if((cmd == NULL) || (len == 0) || (len > MAX_CMD_LEN))
 8004f84:	2300      	movs	r3, #0
{
 8004f86:	b507      	push	{r0, r1, r2, lr}
 8004f88:	f44f 7216 	mov.w	r2, #600	; 0x258
 8004f8c:	2106      	movs	r1, #6
 8004f8e:	9300      	str	r3, [sp, #0]
 8004f90:	4804      	ldr	r0, [pc, #16]	; (8004fa4 <M66_disable_echo+0x20>)
 8004f92:	f7ff ff01 	bl	8004d98 <M66_send_cmd.part.0>
	return (M66_send_cmd("ATE0\r\n", 6, 600, NULL, NULL) ? CMD_OK : CMD_ERROR);
 8004f96:	f080 0001 	eor.w	r0, r0, #1
}
 8004f9a:	b2c0      	uxtb	r0, r0
 8004f9c:	b003      	add	sp, #12
 8004f9e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004fa2:	bf00      	nop
 8004fa4:	08007910 	.word	0x08007910

08004fa8 <M66_check_pin>:
{
 8004fa8:	b507      	push	{r0, r1, r2, lr}
 8004faa:	4b07      	ldr	r3, [pc, #28]	; (8004fc8 <M66_check_pin+0x20>)
 8004fac:	9000      	str	r0, [sp, #0]
 8004fae:	f44f 7216 	mov.w	r2, #600	; 0x258
 8004fb2:	210a      	movs	r1, #10
 8004fb4:	4805      	ldr	r0, [pc, #20]	; (8004fcc <M66_check_pin+0x24>)
 8004fb6:	f7ff feef 	bl	8004d98 <M66_send_cmd.part.0>
	return (M66_send_cmd("AT+CPIN?\r\n", 10, 600, &AT_CPIN_callback, (void *)state) ? CMD_OK : CMD_ERROR);
 8004fba:	f080 0001 	eor.w	r0, r0, #1
}
 8004fbe:	b2c0      	uxtb	r0, r0
 8004fc0:	b003      	add	sp, #12
 8004fc2:	f85d fb04 	ldr.w	pc, [sp], #4
 8004fc6:	bf00      	nop
 8004fc8:	080079a4 	.word	0x080079a4
 8004fcc:	08007917 	.word	0x08007917

08004fd0 <M66_switch_radio>:
{
 8004fd0:	b530      	push	{r4, r5, lr}
	char cmd_buffer[32] = {0};
 8004fd2:	2400      	movs	r4, #0
{
 8004fd4:	4605      	mov	r5, r0
 8004fd6:	b089      	sub	sp, #36	; 0x24
	char cmd_buffer[32] = {0};
 8004fd8:	4621      	mov	r1, r4
 8004fda:	221c      	movs	r2, #28
 8004fdc:	a801      	add	r0, sp, #4
 8004fde:	9400      	str	r4, [sp, #0]
 8004fe0:	f001 fa1c 	bl	800641c <memset>
	sprintf(cmd_buffer, "AT+CFUN=%d\r\n", state);
 8004fe4:	462a      	mov	r2, r5
 8004fe6:	4909      	ldr	r1, [pc, #36]	; (800500c <M66_switch_radio+0x3c>)
 8004fe8:	4668      	mov	r0, sp
 8004fea:	f001 fa1f 	bl	800642c <siprintf>
	return (M66_send_cmd(cmd_buffer, strlen(cmd_buffer), 600, NULL, NULL) ? CMD_OK : CMD_ERROR);
 8004fee:	4668      	mov	r0, sp
 8004ff0:	f7fb f8d0 	bl	8000194 <strlen>
 8004ff4:	4623      	mov	r3, r4
 8004ff6:	b281      	uxth	r1, r0
 8004ff8:	4622      	mov	r2, r4
 8004ffa:	4668      	mov	r0, sp
 8004ffc:	f7ff ff1e 	bl	8004e3c <M66_send_cmd.constprop.0>
 8005000:	f080 0001 	eor.w	r0, r0, #1
}
 8005004:	b2c0      	uxtb	r0, r0
 8005006:	b009      	add	sp, #36	; 0x24
 8005008:	bd30      	pop	{r4, r5, pc}
 800500a:	bf00      	nop
 800500c:	08007922 	.word	0x08007922

08005010 <M66_save_config>:
	if((cmd == NULL) || (len == 0) || (len > MAX_CMD_LEN))
 8005010:	2300      	movs	r3, #0
{
 8005012:	b507      	push	{r0, r1, r2, lr}
 8005014:	f44f 7216 	mov.w	r2, #600	; 0x258
 8005018:	210a      	movs	r1, #10
 800501a:	9300      	str	r3, [sp, #0]
 800501c:	4804      	ldr	r0, [pc, #16]	; (8005030 <M66_save_config+0x20>)
 800501e:	f7ff febb 	bl	8004d98 <M66_send_cmd.part.0>
	return (M66_send_cmd("AT&W\r\n", 10, 600, NULL, NULL) ? CMD_OK : CMD_ERROR);
 8005022:	f080 0001 	eor.w	r0, r0, #1
}
 8005026:	b2c0      	uxtb	r0, r0
 8005028:	b003      	add	sp, #12
 800502a:	f85d fb04 	ldr.w	pc, [sp], #4
 800502e:	bf00      	nop
 8005030:	0800792f 	.word	0x0800792f

08005034 <M66_select_operator>:
{
 8005034:	b530      	push	{r4, r5, lr}
	char cmd_buffer[32] = {0};
 8005036:	2400      	movs	r4, #0
{
 8005038:	4605      	mov	r5, r0
 800503a:	b089      	sub	sp, #36	; 0x24
	char cmd_buffer[32] = {0};
 800503c:	4621      	mov	r1, r4
 800503e:	221c      	movs	r2, #28
 8005040:	a801      	add	r0, sp, #4
 8005042:	9400      	str	r4, [sp, #0]
 8005044:	f001 f9ea 	bl	800641c <memset>
	sprintf(cmd_buffer, "AT+COPS=1,2,\"%ld\"\r\n", mccmnc);
 8005048:	462a      	mov	r2, r5
 800504a:	4909      	ldr	r1, [pc, #36]	; (8005070 <M66_select_operator+0x3c>)
 800504c:	4668      	mov	r0, sp
 800504e:	f001 f9ed 	bl	800642c <siprintf>
	return (M66_send_cmd(cmd_buffer, strlen(cmd_buffer), 600, NULL, NULL) ? CMD_OK : CMD_ERROR);
 8005052:	4668      	mov	r0, sp
 8005054:	f7fb f89e 	bl	8000194 <strlen>
 8005058:	4623      	mov	r3, r4
 800505a:	b281      	uxth	r1, r0
 800505c:	4622      	mov	r2, r4
 800505e:	4668      	mov	r0, sp
 8005060:	f7ff feec 	bl	8004e3c <M66_send_cmd.constprop.0>
 8005064:	f080 0001 	eor.w	r0, r0, #1
}
 8005068:	b2c0      	uxtb	r0, r0
 800506a:	b009      	add	sp, #36	; 0x24
 800506c:	bd30      	pop	{r4, r5, pc}
 800506e:	bf00      	nop
 8005070:	08007936 	.word	0x08007936

08005074 <M66_query_network_status>:
	char cmd_buffer[32] = {0};
 8005074:	2100      	movs	r1, #0
{
 8005076:	b500      	push	{lr}
 8005078:	b08b      	sub	sp, #44	; 0x2c
	char cmd_buffer[32] = {0};
 800507a:	221c      	movs	r2, #28
{
 800507c:	9001      	str	r0, [sp, #4]
	char cmd_buffer[32] = {0};
 800507e:	a803      	add	r0, sp, #12
 8005080:	9102      	str	r1, [sp, #8]
 8005082:	f001 f9cb 	bl	800641c <memset>
	sprintf(cmd_buffer, "AT+CREG?\r\n");
 8005086:	4909      	ldr	r1, [pc, #36]	; (80050ac <M66_query_network_status+0x38>)
 8005088:	a802      	add	r0, sp, #8
 800508a:	f001 fa1b 	bl	80064c4 <strcpy>
	return (M66_send_cmd(cmd_buffer, strlen(cmd_buffer), 600, &AT_CREG_callback, &status) ? CMD_OK : CMD_ERROR);
 800508e:	a802      	add	r0, sp, #8
 8005090:	f7fb f880 	bl	8000194 <strlen>
 8005094:	4a06      	ldr	r2, [pc, #24]	; (80050b0 <M66_query_network_status+0x3c>)
 8005096:	b281      	uxth	r1, r0
 8005098:	ab01      	add	r3, sp, #4
 800509a:	a802      	add	r0, sp, #8
 800509c:	f7ff fece 	bl	8004e3c <M66_send_cmd.constprop.0>
 80050a0:	f080 0001 	eor.w	r0, r0, #1
}
 80050a4:	b2c0      	uxtb	r0, r0
 80050a6:	b00b      	add	sp, #44	; 0x2c
 80050a8:	f85d fb04 	ldr.w	pc, [sp], #4
 80050ac:	0800794a 	.word	0x0800794a
 80050b0:	080079b8 	.word	0x080079b8

080050b4 <M66_set_mode>:
{
 80050b4:	b530      	push	{r4, r5, lr}
	char cmd_buffer[32] = {0};
 80050b6:	2400      	movs	r4, #0
{
 80050b8:	4605      	mov	r5, r0
 80050ba:	b089      	sub	sp, #36	; 0x24
	char cmd_buffer[32] = {0};
 80050bc:	4621      	mov	r1, r4
 80050be:	221c      	movs	r2, #28
 80050c0:	a801      	add	r0, sp, #4
 80050c2:	9400      	str	r4, [sp, #0]
 80050c4:	f001 f9aa 	bl	800641c <memset>
	sprintf(cmd_buffer, "AT+CMGF=%d\r\n", mode);
 80050c8:	462a      	mov	r2, r5
 80050ca:	4909      	ldr	r1, [pc, #36]	; (80050f0 <M66_set_mode+0x3c>)
 80050cc:	4668      	mov	r0, sp
 80050ce:	f001 f9ad 	bl	800642c <siprintf>
	return (M66_send_cmd(cmd_buffer, strlen(cmd_buffer), 600, NULL, NULL) ? CMD_OK : CMD_ERROR);
 80050d2:	4668      	mov	r0, sp
 80050d4:	f7fb f85e 	bl	8000194 <strlen>
 80050d8:	4623      	mov	r3, r4
 80050da:	b281      	uxth	r1, r0
 80050dc:	4622      	mov	r2, r4
 80050de:	4668      	mov	r0, sp
 80050e0:	f7ff feac 	bl	8004e3c <M66_send_cmd.constprop.0>
 80050e4:	f080 0001 	eor.w	r0, r0, #1
}
 80050e8:	b2c0      	uxtb	r0, r0
 80050ea:	b009      	add	sp, #36	; 0x24
 80050ec:	bd30      	pop	{r4, r5, pc}
 80050ee:	bf00      	nop
 80050f0:	08007955 	.word	0x08007955

080050f4 <M66_send_sms>:
{
 80050f4:	b570      	push	{r4, r5, r6, lr}
	char cmd_buffer[32] = {0};
 80050f6:	2400      	movs	r4, #0
{
 80050f8:	4606      	mov	r6, r0
 80050fa:	b088      	sub	sp, #32
	char cmd_buffer[32] = {0};
 80050fc:	221c      	movs	r2, #28
{
 80050fe:	460d      	mov	r5, r1
	char cmd_buffer[32] = {0};
 8005100:	a801      	add	r0, sp, #4
 8005102:	4621      	mov	r1, r4
 8005104:	9400      	str	r4, [sp, #0]
 8005106:	f001 f989 	bl	800641c <memset>
	sprintf(cmd_buffer, "AT+CMGS=\"%s\"\r\n", tel_num);
 800510a:	4632      	mov	r2, r6
 800510c:	490d      	ldr	r1, [pc, #52]	; (8005144 <M66_send_sms+0x50>)
 800510e:	4668      	mov	r0, sp
 8005110:	f001 f98c 	bl	800642c <siprintf>
	if(M66_send_cmd(cmd_buffer, strlen(cmd_buffer), 600, NULL, NULL) == CMD_ERROR)
 8005114:	4668      	mov	r0, sp
 8005116:	f7fb f83d 	bl	8000194 <strlen>
 800511a:	4623      	mov	r3, r4
 800511c:	b281      	uxth	r1, r0
 800511e:	4622      	mov	r2, r4
 8005120:	4668      	mov	r0, sp
 8005122:	f7ff fe8b 	bl	8004e3c <M66_send_cmd.constprop.0>
 8005126:	b158      	cbz	r0, 8005140 <M66_send_sms+0x4c>
		return (M66_send_cmd(message, strlen(message), 600, NULL, NULL) ? CMD_OK : CMD_ERROR);
 8005128:	4628      	mov	r0, r5
 800512a:	f7fb f833 	bl	8000194 <strlen>
 800512e:	4623      	mov	r3, r4
 8005130:	b281      	uxth	r1, r0
 8005132:	4622      	mov	r2, r4
 8005134:	4628      	mov	r0, r5
 8005136:	f7ff fe81 	bl	8004e3c <M66_send_cmd.constprop.0>
 800513a:	f080 0001 	eor.w	r0, r0, #1
 800513e:	b2c0      	uxtb	r0, r0
}
 8005140:	b008      	add	sp, #32
 8005142:	bd70      	pop	{r4, r5, r6, pc}
 8005144:	08007962 	.word	0x08007962

08005148 <M66_set_bt_state>:
{
 8005148:	b530      	push	{r4, r5, lr}
	char cmd_buffer[50] = {0};
 800514a:	2400      	movs	r4, #0
{
 800514c:	4605      	mov	r5, r0
 800514e:	b08f      	sub	sp, #60	; 0x3c
	char cmd_buffer[50] = {0};
 8005150:	4621      	mov	r1, r4
 8005152:	222e      	movs	r2, #46	; 0x2e
 8005154:	a802      	add	r0, sp, #8
 8005156:	9401      	str	r4, [sp, #4]
 8005158:	f001 f960 	bl	800641c <memset>
	sprintf(cmd_buffer, "AT+QBTPWR=%d\r\n", state);
 800515c:	462a      	mov	r2, r5
 800515e:	4909      	ldr	r1, [pc, #36]	; (8005184 <M66_set_bt_state+0x3c>)
 8005160:	a801      	add	r0, sp, #4
 8005162:	f001 f963 	bl	800642c <siprintf>
	return (M66_send_cmd(cmd_buffer, strlen(cmd_buffer), 600, NULL, NULL) ? CMD_OK : CMD_ERROR);
 8005166:	a801      	add	r0, sp, #4
 8005168:	f7fb f814 	bl	8000194 <strlen>
 800516c:	4623      	mov	r3, r4
 800516e:	b281      	uxth	r1, r0
 8005170:	4622      	mov	r2, r4
 8005172:	a801      	add	r0, sp, #4
 8005174:	f7ff fe62 	bl	8004e3c <M66_send_cmd.constprop.0>
 8005178:	f080 0001 	eor.w	r0, r0, #1
}
 800517c:	b2c0      	uxtb	r0, r0
 800517e:	b00f      	add	sp, #60	; 0x3c
 8005180:	bd30      	pop	{r4, r5, pc}
 8005182:	bf00      	nop
 8005184:	08007971 	.word	0x08007971

08005188 <M66_set_bt_name>:
{
 8005188:	b530      	push	{r4, r5, lr}
	char cmd_buffer[50] = {0};
 800518a:	2400      	movs	r4, #0
{
 800518c:	4605      	mov	r5, r0
 800518e:	b08f      	sub	sp, #60	; 0x3c
	char cmd_buffer[50] = {0};
 8005190:	4621      	mov	r1, r4
 8005192:	222e      	movs	r2, #46	; 0x2e
 8005194:	a802      	add	r0, sp, #8
 8005196:	9401      	str	r4, [sp, #4]
 8005198:	f001 f940 	bl	800641c <memset>
	sprintf(cmd_buffer, "AT+QBTNAME=\"%s\"\r\n", name);
 800519c:	462a      	mov	r2, r5
 800519e:	4909      	ldr	r1, [pc, #36]	; (80051c4 <M66_set_bt_name+0x3c>)
 80051a0:	a801      	add	r0, sp, #4
 80051a2:	f001 f943 	bl	800642c <siprintf>
	return (M66_send_cmd(cmd_buffer, strlen(cmd_buffer), 600, NULL, NULL) ? CMD_OK : CMD_ERROR);
 80051a6:	a801      	add	r0, sp, #4
 80051a8:	f7fa fff4 	bl	8000194 <strlen>
 80051ac:	4623      	mov	r3, r4
 80051ae:	b281      	uxth	r1, r0
 80051b0:	4622      	mov	r2, r4
 80051b2:	a801      	add	r0, sp, #4
 80051b4:	f7ff fe42 	bl	8004e3c <M66_send_cmd.constprop.0>
 80051b8:	f080 0001 	eor.w	r0, r0, #1
}
 80051bc:	b2c0      	uxtb	r0, r0
 80051be:	b00f      	add	sp, #60	; 0x3c
 80051c0:	bd30      	pop	{r4, r5, pc}
 80051c2:	bf00      	nop
 80051c4:	08007980 	.word	0x08007980

080051c8 <M66_set_bt_visibility>:
{
 80051c8:	b530      	push	{r4, r5, lr}
	char cmd_buffer[32] = {0};
 80051ca:	2400      	movs	r4, #0
{
 80051cc:	4605      	mov	r5, r0
 80051ce:	b089      	sub	sp, #36	; 0x24
	char cmd_buffer[32] = {0};
 80051d0:	4621      	mov	r1, r4
 80051d2:	221c      	movs	r2, #28
 80051d4:	a801      	add	r0, sp, #4
 80051d6:	9400      	str	r4, [sp, #0]
 80051d8:	f001 f920 	bl	800641c <memset>
	sprintf(cmd_buffer, "AT+QBTVISB=%d\r\n", visibility);
 80051dc:	462a      	mov	r2, r5
 80051de:	4909      	ldr	r1, [pc, #36]	; (8005204 <M66_set_bt_visibility+0x3c>)
 80051e0:	4668      	mov	r0, sp
 80051e2:	f001 f923 	bl	800642c <siprintf>
	return (M66_send_cmd(cmd_buffer, strlen(cmd_buffer), 600, NULL, NULL) ? CMD_OK : CMD_ERROR);
 80051e6:	4668      	mov	r0, sp
 80051e8:	f7fa ffd4 	bl	8000194 <strlen>
 80051ec:	4623      	mov	r3, r4
 80051ee:	b281      	uxth	r1, r0
 80051f0:	4622      	mov	r2, r4
 80051f2:	4668      	mov	r0, sp
 80051f4:	f7ff fe22 	bl	8004e3c <M66_send_cmd.constprop.0>
 80051f8:	f080 0001 	eor.w	r0, r0, #1
}
 80051fc:	b2c0      	uxtb	r0, r0
 80051fe:	b009      	add	sp, #36	; 0x24
 8005200:	bd30      	pop	{r4, r5, pc}
 8005202:	bf00      	nop
 8005204:	08007992 	.word	0x08007992

08005208 <M66_send_bt_data>:
{
 8005208:	b510      	push	{r4, lr}
 800520a:	4604      	mov	r4, r0
	return (M66_send_cmd(data, strlen(data), 600, NULL, NULL) ? CMD_OK : CMD_ERROR);
 800520c:	f7fa ffc2 	bl	8000194 <strlen>
 8005210:	2300      	movs	r3, #0
 8005212:	b281      	uxth	r1, r0
 8005214:	461a      	mov	r2, r3
 8005216:	4620      	mov	r0, r4
 8005218:	f7ff fe10 	bl	8004e3c <M66_send_cmd.constprop.0>
 800521c:	f080 0001 	eor.w	r0, r0, #1
}
 8005220:	b2c0      	uxtb	r0, r0
 8005222:	bd10      	pop	{r4, pc}

08005224 <circbuffer_insert>:
static volatile uint8_t circular_buffer[CIRC_BUFF_SIZE] = {0};


bool circbuffer_insert(uint8_t * data, uint16_t len)
{
	if((len > CIRC_BUFF_SIZE) || (data == NULL))
 8005224:	2980      	cmp	r1, #128	; 0x80
{
 8005226:	b530      	push	{r4, r5, lr}
	if((len > CIRC_BUFF_SIZE) || (data == NULL))
 8005228:	d812      	bhi.n	8005250 <circbuffer_insert+0x2c>
 800522a:	b128      	cbz	r0, 8005238 <circbuffer_insert+0x14>
		return false;


	for(uint16_t i = 0;i < len;i++)
	{
		circular_buffer[wr_ptr] = data[i];
 800522c:	4a09      	ldr	r2, [pc, #36]	; (8005254 <circbuffer_insert+0x30>)
 800522e:	4c0a      	ldr	r4, [pc, #40]	; (8005258 <circbuffer_insert+0x34>)
 8005230:	4401      	add	r1, r0
	for(uint16_t i = 0;i < len;i++)
 8005232:	4288      	cmp	r0, r1
 8005234:	d101      	bne.n	800523a <circbuffer_insert+0x16>
		wr_ptr = (wr_ptr + 1) % CIRC_BUFF_SIZE;
	}

	return true;
 8005236:	2001      	movs	r0, #1

}
 8005238:	bd30      	pop	{r4, r5, pc}
		circular_buffer[wr_ptr] = data[i];
 800523a:	8813      	ldrh	r3, [r2, #0]
 800523c:	f810 5b01 	ldrb.w	r5, [r0], #1
 8005240:	b29b      	uxth	r3, r3
 8005242:	54e5      	strb	r5, [r4, r3]
		wr_ptr = (wr_ptr + 1) % CIRC_BUFF_SIZE;
 8005244:	8813      	ldrh	r3, [r2, #0]
 8005246:	3301      	adds	r3, #1
 8005248:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800524c:	8013      	strh	r3, [r2, #0]
	for(uint16_t i = 0;i < len;i++)
 800524e:	e7f0      	b.n	8005232 <circbuffer_insert+0xe>
		return false;
 8005250:	2000      	movs	r0, #0
 8005252:	e7f1      	b.n	8005238 <circbuffer_insert+0x14>
 8005254:	20002d1a 	.word	0x20002d1a
 8005258:	20002c98 	.word	0x20002c98

0800525c <circbuffer_get_all>:
	return false;
}


bool circbuffer_get_all(uint8_t * buffer)
{
 800525c:	b5f0      	push	{r4, r5, r6, r7, lr}
	if((buffer == NULL) || (rd_ptr == wr_ptr))
 800525e:	b198      	cbz	r0, 8005288 <circbuffer_get_all+0x2c>
 8005260:	4a12      	ldr	r2, [pc, #72]	; (80052ac <circbuffer_get_all+0x50>)
 8005262:	4d13      	ldr	r5, [pc, #76]	; (80052b0 <circbuffer_get_all+0x54>)
 8005264:	8811      	ldrh	r1, [r2, #0]
 8005266:	882b      	ldrh	r3, [r5, #0]
 8005268:	b289      	uxth	r1, r1
 800526a:	b29b      	uxth	r3, r3
 800526c:	4299      	cmp	r1, r3
 800526e:	d01b      	beq.n	80052a8 <circbuffer_get_all+0x4c>
 8005270:	2300      	movs	r3, #0
		return false;

	for(uint16_t i = 0;rd_ptr != wr_ptr;i++)
	{
		buffer[i] = circular_buffer[rd_ptr];
		circular_buffer[rd_ptr] = '\0';
 8005272:	461f      	mov	r7, r3
		buffer[i] = circular_buffer[rd_ptr];
 8005274:	4e0f      	ldr	r6, [pc, #60]	; (80052b4 <circbuffer_get_all+0x58>)
	for(uint16_t i = 0;rd_ptr != wr_ptr;i++)
 8005276:	8814      	ldrh	r4, [r2, #0]
 8005278:	8829      	ldrh	r1, [r5, #0]
 800527a:	b2a4      	uxth	r4, r4
 800527c:	b289      	uxth	r1, r1
 800527e:	428c      	cmp	r4, r1
 8005280:	f103 0c01 	add.w	ip, r3, #1
 8005284:	d101      	bne.n	800528a <circbuffer_get_all+0x2e>

		rd_ptr = (rd_ptr + 1) % CIRC_BUFF_SIZE;
	}

	return true;
 8005286:	2001      	movs	r0, #1
}
 8005288:	bdf0      	pop	{r4, r5, r6, r7, pc}
		buffer[i] = circular_buffer[rd_ptr];
 800528a:	8811      	ldrh	r1, [r2, #0]
 800528c:	b29b      	uxth	r3, r3
 800528e:	b289      	uxth	r1, r1
 8005290:	5c71      	ldrb	r1, [r6, r1]
 8005292:	54c1      	strb	r1, [r0, r3]
		circular_buffer[rd_ptr] = '\0';
 8005294:	8813      	ldrh	r3, [r2, #0]
 8005296:	b29b      	uxth	r3, r3
 8005298:	54f7      	strb	r7, [r6, r3]
		rd_ptr = (rd_ptr + 1) % CIRC_BUFF_SIZE;
 800529a:	8813      	ldrh	r3, [r2, #0]
 800529c:	3301      	adds	r3, #1
 800529e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80052a2:	8013      	strh	r3, [r2, #0]
 80052a4:	4663      	mov	r3, ip
 80052a6:	e7e6      	b.n	8005276 <circbuffer_get_all+0x1a>
		return false;
 80052a8:	2000      	movs	r0, #0
 80052aa:	e7ed      	b.n	8005288 <circbuffer_get_all+0x2c>
 80052ac:	20002d18 	.word	0x20002d18
 80052b0:	20002d1a 	.word	0x20002d1a
 80052b4:	20002c98 	.word	0x20002c98

080052b8 <circbuffer_is_emtpy>:

bool circbuffer_is_emtpy()
{
	return (wr_ptr == rd_ptr) ? true : false;
 80052b8:	4b04      	ldr	r3, [pc, #16]	; (80052cc <circbuffer_is_emtpy+0x14>)
 80052ba:	8818      	ldrh	r0, [r3, #0]
 80052bc:	4b04      	ldr	r3, [pc, #16]	; (80052d0 <circbuffer_is_emtpy+0x18>)
 80052be:	b280      	uxth	r0, r0
 80052c0:	881b      	ldrh	r3, [r3, #0]
 80052c2:	b29b      	uxth	r3, r3
}
 80052c4:	1ac3      	subs	r3, r0, r3
 80052c6:	4258      	negs	r0, r3
 80052c8:	4158      	adcs	r0, r3
 80052ca:	4770      	bx	lr
 80052cc:	20002d1a 	.word	0x20002d1a
 80052d0:	20002d18 	.word	0x20002d18

080052d4 <config_load>:
}

bool config_load()
{
	bool		res			= false;
	uint32_t 	crc 		= 0;
 80052d4:	2300      	movs	r3, #0
{
 80052d6:	b537      	push	{r0, r1, r2, r4, r5, lr}
	uint32_t	crc_size	= sizeof(uint32_t);
	uint32_t 	config_size = sizeof(config_t);

	memcpy(&memory_buffer.byte_buffer, ((uint32_t*)CONFIG_ADDR), config_size);
 80052d8:	4c1c      	ldr	r4, [pc, #112]	; (800534c <config_load+0x78>)
	uint32_t 	crc 		= 0;
 80052da:	9300      	str	r3, [sp, #0]
	memcpy(&memory_buffer.byte_buffer, ((uint32_t*)CONFIG_ADDR), config_size);
 80052dc:	4d1c      	ldr	r5, [pc, #112]	; (8005350 <config_load+0x7c>)
 80052de:	4b1d      	ldr	r3, [pc, #116]	; (8005354 <config_load+0x80>)
 80052e0:	4622      	mov	r2, r4
 80052e2:	ca03      	ldmia	r2!, {r0, r1}
 80052e4:	42aa      	cmp	r2, r5
 80052e6:	6018      	str	r0, [r3, #0]
 80052e8:	6059      	str	r1, [r3, #4]
 80052ea:	4614      	mov	r4, r2
 80052ec:	f103 0308 	add.w	r3, r3, #8
 80052f0:	d1f6      	bne.n	80052e0 <config_load+0xc>

	for(uint32_t i = 0;i < (config_size-crc_size);i++)
 80052f2:	2400      	movs	r4, #0
	memcpy(&memory_buffer.byte_buffer, ((uint32_t*)CONFIG_ADDR), config_size);
 80052f4:	7812      	ldrb	r2, [r2, #0]
 80052f6:	4d17      	ldr	r5, [pc, #92]	; (8005354 <config_load+0x80>)
 80052f8:	701a      	strb	r2, [r3, #0]
	{
		uint32_t w_buffer = memory_buffer.byte_buffer[i];
 80052fa:	f815 3b01 	ldrb.w	r3, [r5], #1
		crc = HAL_CRC_Accumulate(&hcrc, &w_buffer, 1);
 80052fe:	2201      	movs	r2, #1
 8005300:	4815      	ldr	r0, [pc, #84]	; (8005358 <config_load+0x84>)
 8005302:	a901      	add	r1, sp, #4
		uint32_t w_buffer = memory_buffer.byte_buffer[i];
 8005304:	9301      	str	r3, [sp, #4]
		crc = HAL_CRC_Accumulate(&hcrc, &w_buffer, 1);
 8005306:	f7fc fc31 	bl	8001b6c <HAL_CRC_Accumulate>
	for(uint32_t i = 0;i < (config_size-crc_size);i++)
 800530a:	3401      	adds	r4, #1
 800530c:	2c15      	cmp	r4, #21
		crc = HAL_CRC_Accumulate(&hcrc, &w_buffer, 1);
 800530e:	9000      	str	r0, [sp, #0]
	for(uint32_t i = 0;i < (config_size-crc_size);i++)
 8005310:	d1f3      	bne.n	80052fa <config_load+0x26>
	}
	__HAL_CRC_DR_RESET(&hcrc);
 8005312:	4b11      	ldr	r3, [pc, #68]	; (8005358 <config_load+0x84>)

	if(memcmp(&memory_buffer.byte_buffer[config_size-crc_size], &crc, crc_size) == 0)
 8005314:	4669      	mov	r1, sp
	__HAL_CRC_DR_RESET(&hcrc);
 8005316:	681a      	ldr	r2, [r3, #0]
	if(memcmp(&memory_buffer.byte_buffer[config_size-crc_size], &crc, crc_size) == 0)
 8005318:	4810      	ldr	r0, [pc, #64]	; (800535c <config_load+0x88>)
	__HAL_CRC_DR_RESET(&hcrc);
 800531a:	6893      	ldr	r3, [r2, #8]
 800531c:	f043 0301 	orr.w	r3, r3, #1
 8005320:	6093      	str	r3, [r2, #8]
	if(memcmp(&memory_buffer.byte_buffer[config_size-crc_size], &crc, crc_size) == 0)
 8005322:	2204      	movs	r2, #4
 8005324:	f001 f85c 	bl	80063e0 <memcmp>
 8005328:	b970      	cbnz	r0, 8005348 <config_load+0x74>
	{
		res = true;
		memcpy(&config, memory_buffer.byte_buffer, config_size);
 800532a:	4b0a      	ldr	r3, [pc, #40]	; (8005354 <config_load+0x80>)
 800532c:	4a0c      	ldr	r2, [pc, #48]	; (8005360 <config_load+0x8c>)
 800532e:	f103 0118 	add.w	r1, r3, #24
 8005332:	f853 0b04 	ldr.w	r0, [r3], #4
 8005336:	428b      	cmp	r3, r1
 8005338:	f842 0b04 	str.w	r0, [r2], #4
 800533c:	d1f9      	bne.n	8005332 <config_load+0x5e>
		res = true;
 800533e:	2001      	movs	r0, #1
		memcpy(&config, memory_buffer.byte_buffer, config_size);
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	7013      	strb	r3, [r2, #0]
	}

	return res;
}
 8005344:	b003      	add	sp, #12
 8005346:	bd30      	pop	{r4, r5, pc}
	bool		res			= false;
 8005348:	2000      	movs	r0, #0
 800534a:	e7fb      	b.n	8005344 <config_load+0x70>
 800534c:	08080000 	.word	0x08080000
 8005350:	08080018 	.word	0x08080018
 8005354:	20002d35 	.word	0x20002d35
 8005358:	20000174 	.word	0x20000174
 800535c:	20002d4a 	.word	0x20002d4a
 8005360:	20002d1c 	.word	0x20002d1c

08005364 <config_save>:


bool config_save()
{
 8005364:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	HAL_StatusTypeDef status = HAL_OK;
	uint32_t addr = CONFIG_ADDR;

	HAL_FLASHEx_DATAEEPROM_Unlock();
 8005366:	f7fc fd39 	bl	8001ddc <HAL_FLASHEx_DATAEEPROM_Unlock>
	HAL_StatusTypeDef status = HAL_OK;
 800536a:	2400      	movs	r4, #0
	uint32_t addr = CONFIG_ADDR;
 800536c:	4d24      	ldr	r5, [pc, #144]	; (8005400 <config_save+0x9c>)
	for(uint16_t i = 0;i < 0x100;i+=4)
 800536e:	4e25      	ldr	r6, [pc, #148]	; (8005404 <config_save+0xa0>)
	{
		status |= HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEERASEDATA_WORD, addr);
 8005370:	4629      	mov	r1, r5
 8005372:	2002      	movs	r0, #2
 8005374:	f7fc fd4e 	bl	8001e14 <HAL_FLASHEx_DATAEEPROM_Erase>
		addr+=4;
 8005378:	3504      	adds	r5, #4
		status |= HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEERASEDATA_WORD, addr);
 800537a:	4304      	orrs	r4, r0
	for(uint16_t i = 0;i < 0x100;i+=4)
 800537c:	42b5      	cmp	r5, r6
		status |= HAL_FLASHEx_DATAEEPROM_Erase(FLASH_TYPEERASEDATA_WORD, addr);
 800537e:	b2e4      	uxtb	r4, r4
	for(uint16_t i = 0;i < 0x100;i+=4)
 8005380:	d1f6      	bne.n	8005370 <config_save+0xc>
	}
	HAL_FLASHEx_DATAEEPROM_Lock();
 8005382:	f7fc fd3d 	bl	8001e00 <HAL_FLASHEx_DATAEEPROM_Lock>

	uint32_t 	config_size = ((sizeof(config_t) % 4 == 0) ? (sizeof(config_t) / 4) : ((sizeof(config_t) / 4) + 1));

	memcpy(memory_buffer.byte_buffer, &config, sizeof(config_t));
 8005386:	4a20      	ldr	r2, [pc, #128]	; (8005408 <config_save+0xa4>)
 8005388:	4b20      	ldr	r3, [pc, #128]	; (800540c <config_save+0xa8>)
 800538a:	4616      	mov	r6, r2
 800538c:	f103 0118 	add.w	r1, r3, #24
 8005390:	f853 0b04 	ldr.w	r0, [r3], #4
 8005394:	428b      	cmp	r3, r1
 8005396:	f842 0b04 	str.w	r0, [r2], #4
 800539a:	d1f9      	bne.n	8005390 <config_save+0x2c>

	uint32_t crc = 0;
	for(uint32_t i = 0;i < (sizeof(config_t)-sizeof(uint32_t));i++)
 800539c:	2500      	movs	r5, #0
	memcpy(memory_buffer.byte_buffer, &config, sizeof(config_t));
 800539e:	781b      	ldrb	r3, [r3, #0]
 80053a0:	4f19      	ldr	r7, [pc, #100]	; (8005408 <config_save+0xa4>)
 80053a2:	7013      	strb	r3, [r2, #0]
	{
		uint32_t w_buffer = memory_buffer.byte_buffer[i];
 80053a4:	f817 3b01 	ldrb.w	r3, [r7], #1
		crc = HAL_CRC_Accumulate(&hcrc, &w_buffer, 1);
 80053a8:	2201      	movs	r2, #1
 80053aa:	4819      	ldr	r0, [pc, #100]	; (8005410 <config_save+0xac>)
 80053ac:	a901      	add	r1, sp, #4
	for(uint32_t i = 0;i < (sizeof(config_t)-sizeof(uint32_t));i++)
 80053ae:	3501      	adds	r5, #1
		uint32_t w_buffer = memory_buffer.byte_buffer[i];
 80053b0:	9301      	str	r3, [sp, #4]
		crc = HAL_CRC_Accumulate(&hcrc, &w_buffer, 1);
 80053b2:	f7fc fbdb 	bl	8001b6c <HAL_CRC_Accumulate>
	for(uint32_t i = 0;i < (sizeof(config_t)-sizeof(uint32_t));i++)
 80053b6:	2d15      	cmp	r5, #21
 80053b8:	d1f4      	bne.n	80053a4 <config_save+0x40>
	}
	__HAL_CRC_DR_RESET(&hcrc);
 80053ba:	4b15      	ldr	r3, [pc, #84]	; (8005410 <config_save+0xac>)

	addr = CONFIG_ADDR;

	HAL_FLASHEx_DATAEEPROM_Unlock();

	HAL_FLASHEx_DATAEEPROM_EnableFixedTimeProgram();
 80053bc:	2500      	movs	r5, #0
	__HAL_CRC_DR_RESET(&hcrc);
 80053be:	681a      	ldr	r2, [r3, #0]
 80053c0:	6893      	ldr	r3, [r2, #8]
 80053c2:	f043 0301 	orr.w	r3, r3, #1
 80053c6:	6093      	str	r3, [r2, #8]
	memcpy(&memory_buffer.byte_buffer[sizeof(config_t) - 4], &crc, sizeof(uint32_t));
 80053c8:	f8c6 0015 	str.w	r0, [r6, #21]
	HAL_FLASHEx_DATAEEPROM_Unlock();
 80053cc:	f7fc fd06 	bl	8001ddc <HAL_FLASHEx_DATAEEPROM_Unlock>
	HAL_FLASHEx_DATAEEPROM_EnableFixedTimeProgram();
 80053d0:	f7fc fda6 	bl	8001f20 <HAL_FLASHEx_DATAEEPROM_EnableFixedTimeProgram>

	for(uint16_t i = 0;i < config_size;i++)
	{
		status |= HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAM_WORD, addr, memory_buffer.word_buffer[i]);
 80053d4:	00a9      	lsls	r1, r5, #2
 80053d6:	f101 6100 	add.w	r1, r1, #134217728	; 0x8000000
 80053da:	f856 2025 	ldr.w	r2, [r6, r5, lsl #2]
 80053de:	2002      	movs	r0, #2
 80053e0:	f501 2100 	add.w	r1, r1, #524288	; 0x80000
 80053e4:	f7fc fd34 	bl	8001e50 <HAL_FLASHEx_DATAEEPROM_Program>
	for(uint16_t i = 0;i < config_size;i++)
 80053e8:	3501      	adds	r5, #1
		status |= HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAM_WORD, addr, memory_buffer.word_buffer[i]);
 80053ea:	4304      	orrs	r4, r0
	for(uint16_t i = 0;i < config_size;i++)
 80053ec:	2d07      	cmp	r5, #7
		status |= HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAM_WORD, addr, memory_buffer.word_buffer[i]);
 80053ee:	b2e4      	uxtb	r4, r4
	for(uint16_t i = 0;i < config_size;i++)
 80053f0:	d1f0      	bne.n	80053d4 <config_save+0x70>
		addr+=4;
	}
	HAL_FLASHEx_DATAEEPROM_Lock();
 80053f2:	f7fc fd05 	bl	8001e00 <HAL_FLASHEx_DATAEEPROM_Lock>

	return (status == HAL_OK) ? true : false;
}
 80053f6:	fab4 f084 	clz	r0, r4
 80053fa:	0940      	lsrs	r0, r0, #5
 80053fc:	b003      	add	sp, #12
 80053fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005400:	08080000 	.word	0x08080000
 8005404:	08080100 	.word	0x08080100
 8005408:	20002d35 	.word	0x20002d35
 800540c:	20002d1c 	.word	0x20002d1c
 8005410:	20000174 	.word	0x20000174

08005414 <config_init>:
	memcpy(&config, &default_config, sizeof(config_t));
 8005414:	4b06      	ldr	r3, [pc, #24]	; (8005430 <config_init+0x1c>)
 8005416:	4a07      	ldr	r2, [pc, #28]	; (8005434 <config_init+0x20>)
 8005418:	f103 0118 	add.w	r1, r3, #24
 800541c:	f853 0b04 	ldr.w	r0, [r3], #4
 8005420:	428b      	cmp	r3, r1
 8005422:	f842 0b04 	str.w	r0, [r2], #4
 8005426:	d1f9      	bne.n	800541c <config_init+0x8>
 8005428:	781b      	ldrb	r3, [r3, #0]
 800542a:	7013      	strb	r3, [r2, #0]
	config_save();
 800542c:	f7ff bf9a 	b.w	8005364 <config_save>
 8005430:	2000003c 	.word	0x2000003c
 8005434:	20002d1c 	.word	0x20002d1c

08005438 <LCD_send>:
}

static bool LCD_send(uint8_t cmd, LCD_data_mode mode)
{
	bool res = true;
	LCD_data send_cmd = {0};
 8005438:	2308      	movs	r3, #8
{
 800543a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800543c:	4606      	mov	r6, r0
	LCD_data send_cmd = {0};
 800543e:	f88d 3004 	strb.w	r3, [sp, #4]
	send_cmd.data_bits.LED 	= 1;


	if(mode == LCD_CMD)
 8005442:	b111      	cbz	r1, 800544a <LCD_send+0x12>
	{
		send_cmd.data_bits.RS = 0;
	}
	else
	{
		send_cmd.data_bits.RS = 1;
 8005444:	2309      	movs	r3, #9
 8005446:	f88d 3004 	strb.w	r3, [sp, #4]
	}


	/*Set the first nibble*/
	send_cmd.data_byte |= (cmd & 0xF0);
 800544a:	f89d 3004 	ldrb.w	r3, [sp, #4]
	res &= LCD_local_dev->i2c_write(I2C_ADDR, &send_cmd.data_byte, 1);
 800544e:	4c33      	ldr	r4, [pc, #204]	; (800551c <LCD_send+0xe4>)
	send_cmd.data_byte |= (cmd & 0xF0);
 8005450:	f026 020f 	bic.w	r2, r6, #15
 8005454:	4313      	orrs	r3, r2
 8005456:	f88d 3004 	strb.w	r3, [sp, #4]
	res &= LCD_local_dev->i2c_write(I2C_ADDR, &send_cmd.data_byte, 1);
 800545a:	6823      	ldr	r3, [r4, #0]
 800545c:	a901      	add	r1, sp, #4
 800545e:	2201      	movs	r2, #1
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	203f      	movs	r0, #63	; 0x3f
 8005464:	4798      	blx	r3

	LCD_local_dev->delay(20);
 8005466:	6823      	ldr	r3, [r4, #0]
	res &= LCD_local_dev->i2c_write(I2C_ADDR, &send_cmd.data_byte, 1);
 8005468:	4605      	mov	r5, r0
	LCD_local_dev->delay(20);
 800546a:	689b      	ldr	r3, [r3, #8]
 800546c:	2014      	movs	r0, #20
 800546e:	4798      	blx	r3

	/*Pulse the enable pin*/
	send_cmd.data_bits.E = 1;
 8005470:	f89d 3004 	ldrb.w	r3, [sp, #4]
	res &= LCD_local_dev->i2c_write(I2C_ADDR, &send_cmd.data_byte, 1);
 8005474:	a901      	add	r1, sp, #4
	send_cmd.data_bits.E = 1;
 8005476:	f043 0304 	orr.w	r3, r3, #4
 800547a:	f88d 3004 	strb.w	r3, [sp, #4]
	res &= LCD_local_dev->i2c_write(I2C_ADDR, &send_cmd.data_byte, 1);
 800547e:	6823      	ldr	r3, [r4, #0]
 8005480:	2201      	movs	r2, #1
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	203f      	movs	r0, #63	; 0x3f
 8005486:	4798      	blx	r3
	LCD_local_dev->delay(20);
 8005488:	6823      	ldr	r3, [r4, #0]
 800548a:	4005      	ands	r5, r0
 800548c:	689b      	ldr	r3, [r3, #8]
 800548e:	2014      	movs	r0, #20
 8005490:	4798      	blx	r3
	send_cmd.data_bits.E = 0;
 8005492:	f89d 3004 	ldrb.w	r3, [sp, #4]
	res &= LCD_local_dev->i2c_write(I2C_ADDR, &send_cmd.data_byte, 1);
 8005496:	a901      	add	r1, sp, #4
	send_cmd.data_bits.E = 0;
 8005498:	f36f 0382 	bfc	r3, #2, #1
 800549c:	f88d 3004 	strb.w	r3, [sp, #4]
	res &= LCD_local_dev->i2c_write(I2C_ADDR, &send_cmd.data_byte, 1);
 80054a0:	6823      	ldr	r3, [r4, #0]
 80054a2:	2201      	movs	r2, #1
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	203f      	movs	r0, #63	; 0x3f
 80054a8:	4798      	blx	r3

	LCD_local_dev->delay(20);
 80054aa:	6823      	ldr	r3, [r4, #0]
 80054ac:	b2ed      	uxtb	r5, r5
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	4005      	ands	r5, r0
 80054b2:	2014      	movs	r0, #20
 80054b4:	4798      	blx	r3

	/*Send the second half of the data*/
	send_cmd.data_byte &= ~(send_cmd.data_byte & 0xF0);
 80054b6:	f89d 3004 	ldrb.w	r3, [sp, #4]
	send_cmd.data_byte |= (cmd & 0x0F) << 4;
	res &= LCD_local_dev->i2c_write(I2C_ADDR, &send_cmd.data_byte, 1);
 80054ba:	a901      	add	r1, sp, #4
	send_cmd.data_byte &= ~(send_cmd.data_byte & 0xF0);
 80054bc:	f003 030f 	and.w	r3, r3, #15
	send_cmd.data_byte |= (cmd & 0x0F) << 4;
 80054c0:	ea43 1306 	orr.w	r3, r3, r6, lsl #4
 80054c4:	f88d 3004 	strb.w	r3, [sp, #4]
	res &= LCD_local_dev->i2c_write(I2C_ADDR, &send_cmd.data_byte, 1);
 80054c8:	6823      	ldr	r3, [r4, #0]
 80054ca:	2201      	movs	r2, #1
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	203f      	movs	r0, #63	; 0x3f
 80054d0:	4798      	blx	r3

	LCD_local_dev->delay(20);
 80054d2:	6823      	ldr	r3, [r4, #0]
 80054d4:	4005      	ands	r5, r0
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	2014      	movs	r0, #20
 80054da:	4798      	blx	r3

	/*Pulse the enable pin*/
	send_cmd.data_bits.E = 1;
 80054dc:	f89d 3004 	ldrb.w	r3, [sp, #4]
	res &= LCD_local_dev->i2c_write(I2C_ADDR, &send_cmd.data_byte, 1);
 80054e0:	a901      	add	r1, sp, #4
	send_cmd.data_bits.E = 1;
 80054e2:	f043 0304 	orr.w	r3, r3, #4
 80054e6:	f88d 3004 	strb.w	r3, [sp, #4]
	res &= LCD_local_dev->i2c_write(I2C_ADDR, &send_cmd.data_byte, 1);
 80054ea:	6823      	ldr	r3, [r4, #0]
 80054ec:	2201      	movs	r2, #1
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	203f      	movs	r0, #63	; 0x3f
 80054f2:	4798      	blx	r3
	LCD_local_dev->delay(20);
 80054f4:	6823      	ldr	r3, [r4, #0]
 80054f6:	4005      	ands	r5, r0
 80054f8:	689b      	ldr	r3, [r3, #8]
 80054fa:	2014      	movs	r0, #20
 80054fc:	4798      	blx	r3
	send_cmd.data_bits.E = 0;
 80054fe:	f89d 3004 	ldrb.w	r3, [sp, #4]
	res &= LCD_local_dev->i2c_write(I2C_ADDR, &send_cmd.data_byte, 1);
 8005502:	2201      	movs	r2, #1
	send_cmd.data_bits.E = 0;
 8005504:	f36f 0382 	bfc	r3, #2, #1
 8005508:	f88d 3004 	strb.w	r3, [sp, #4]
	res &= LCD_local_dev->i2c_write(I2C_ADDR, &send_cmd.data_byte, 1);
 800550c:	6823      	ldr	r3, [r4, #0]
 800550e:	a901      	add	r1, sp, #4
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	203f      	movs	r0, #63	; 0x3f
 8005514:	4798      	blx	r3

	return res;
}
 8005516:	4028      	ands	r0, r5
 8005518:	b002      	add	sp, #8
 800551a:	bd70      	pop	{r4, r5, r6, pc}
 800551c:	20002d54 	.word	0x20002d54

08005520 <LCD_I2C_init>:
	if(fp_struct == NULL)
 8005520:	b110      	cbz	r0, 8005528 <LCD_I2C_init+0x8>
	LCD_local_dev = fp_struct;
 8005522:	4b02      	ldr	r3, [pc, #8]	; (800552c <LCD_I2C_init+0xc>)
 8005524:	6018      	str	r0, [r3, #0]
	return true;
 8005526:	2001      	movs	r0, #1
}
 8005528:	4770      	bx	lr
 800552a:	bf00      	nop
 800552c:	20002d54 	.word	0x20002d54

08005530 <LCD_init>:
{
 8005530:	b538      	push	{r3, r4, r5, lr}
	res &= LCD_send(LCD_CMD_OFF, LCD_CMD);
 8005532:	2100      	movs	r1, #0
 8005534:	2008      	movs	r0, #8
 8005536:	f7ff ff7f 	bl	8005438 <LCD_send>
	LCD_local_dev->delay(10);
 800553a:	4d1d      	ldr	r5, [pc, #116]	; (80055b0 <LCD_init+0x80>)
	res &= LCD_send(LCD_CMD_OFF, LCD_CMD);
 800553c:	4604      	mov	r4, r0
	LCD_local_dev->delay(10);
 800553e:	682b      	ldr	r3, [r5, #0]
 8005540:	200a      	movs	r0, #10
 8005542:	689b      	ldr	r3, [r3, #8]
 8005544:	4798      	blx	r3
	res &= LCD_send(0x0E, LCD_CMD);
 8005546:	2100      	movs	r1, #0
 8005548:	200e      	movs	r0, #14
 800554a:	f7ff ff75 	bl	8005438 <LCD_send>
	LCD_local_dev->delay(10);
 800554e:	682b      	ldr	r3, [r5, #0]
 8005550:	4004      	ands	r4, r0
 8005552:	689b      	ldr	r3, [r3, #8]
 8005554:	200a      	movs	r0, #10
 8005556:	4798      	blx	r3
	res &= LCD_send(LCD_CMD_ON, LCD_CMD);
 8005558:	2100      	movs	r1, #0
 800555a:	200e      	movs	r0, #14
 800555c:	f7ff ff6c 	bl	8005438 <LCD_send>
	LCD_local_dev->delay(10);
 8005560:	682b      	ldr	r3, [r5, #0]
 8005562:	b2e4      	uxtb	r4, r4
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	4004      	ands	r4, r0
 8005568:	200a      	movs	r0, #10
 800556a:	4798      	blx	r3
	res &= LCD_send(LCD_CMD_RETURN, LCD_CMD);
 800556c:	2100      	movs	r1, #0
 800556e:	2002      	movs	r0, #2
 8005570:	f7ff ff62 	bl	8005438 <LCD_send>
	LCD_local_dev->delay(10);
 8005574:	682b      	ldr	r3, [r5, #0]
 8005576:	4004      	ands	r4, r0
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	200a      	movs	r0, #10
 800557c:	4798      	blx	r3
	res &= LCD_send(LCD_CMD_CLR, LCD_CMD);
 800557e:	2100      	movs	r1, #0
 8005580:	2001      	movs	r0, #1
 8005582:	f7ff ff59 	bl	8005438 <LCD_send>
	LCD_local_dev->delay(10);
 8005586:	682b      	ldr	r3, [r5, #0]
 8005588:	4004      	ands	r4, r0
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	200a      	movs	r0, #10
 800558e:	4798      	blx	r3
	res &= LCD_send(LCD_CMD_SET_ENTRY, LCD_CMD);
 8005590:	2100      	movs	r1, #0
 8005592:	2028      	movs	r0, #40	; 0x28
 8005594:	f7ff ff50 	bl	8005438 <LCD_send>
	LCD_local_dev->delay(10);
 8005598:	682b      	ldr	r3, [r5, #0]
 800559a:	4004      	ands	r4, r0
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	200a      	movs	r0, #10
 80055a0:	4798      	blx	r3
	res &= LCD_send(LCD_CMD_CURSOR_BLINK, LCD_CMD);
 80055a2:	2100      	movs	r1, #0
 80055a4:	200f      	movs	r0, #15
 80055a6:	f7ff ff47 	bl	8005438 <LCD_send>
}
 80055aa:	4020      	ands	r0, r4
 80055ac:	bd38      	pop	{r3, r4, r5, pc}
 80055ae:	bf00      	nop
 80055b0:	20002d54 	.word	0x20002d54

080055b4 <LCD_write>:
{
 80055b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055b8:	4607      	mov	r7, r0
 80055ba:	460e      	mov	r6, r1
	for(uint8_t i = 0;i < len;i++)
 80055bc:	f04f 0900 	mov.w	r9, #0
	bool res = true;
 80055c0:	2501      	movs	r5, #1
		LCD_local_dev->delay(10);
 80055c2:	f8df 8054 	ldr.w	r8, [pc, #84]	; 8005618 <LCD_write+0x64>
	for(uint8_t i = 0;i < len;i++)
 80055c6:	454e      	cmp	r6, r9
 80055c8:	d102      	bne.n	80055d0 <LCD_write+0x1c>
}
 80055ca:	4628      	mov	r0, r5
 80055cc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		res = LCD_send(data_byte,LCD_DATA);
 80055d0:	2101      	movs	r1, #1
 80055d2:	f817 0009 	ldrb.w	r0, [r7, r9]
 80055d6:	f7ff ff2f 	bl	8005438 <LCD_send>
		LCD_local_dev->delay(10);
 80055da:	f8d8 3000 	ldr.w	r3, [r8]
		res = LCD_send(data_byte,LCD_DATA);
 80055de:	4605      	mov	r5, r0
		LCD_local_dev->delay(10);
 80055e0:	689b      	ldr	r3, [r3, #8]
 80055e2:	200a      	movs	r0, #10
 80055e4:	4798      	blx	r3
		if(i == 15)
 80055e6:	fa5f f389 	uxtb.w	r3, r9
 80055ea:	2b0f      	cmp	r3, #15
 80055ec:	d110      	bne.n	8005610 <LCD_write+0x5c>
			res &= LCD_send(LCD_CMD_RETURN, LCD_CMD);
 80055ee:	2100      	movs	r1, #0
 80055f0:	2002      	movs	r0, #2
 80055f2:	f7ff ff21 	bl	8005438 <LCD_send>
			LCD_local_dev->delay(10);
 80055f6:	f8d8 3000 	ldr.w	r3, [r8]
			res &= LCD_send(LCD_CMD_RETURN, LCD_CMD);
 80055fa:	4604      	mov	r4, r0
			LCD_local_dev->delay(10);
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	200a      	movs	r0, #10
 8005600:	4798      	blx	r3
			res &= LCD_send(0xC0, LCD_CMD);
 8005602:	2100      	movs	r1, #0
 8005604:	20c0      	movs	r0, #192	; 0xc0
 8005606:	f7ff ff17 	bl	8005438 <LCD_send>
 800560a:	4004      	ands	r4, r0
 800560c:	402c      	ands	r4, r5
 800560e:	b2e5      	uxtb	r5, r4
	for(uint8_t i = 0;i < len;i++)
 8005610:	f109 0901 	add.w	r9, r9, #1
 8005614:	e7d7      	b.n	80055c6 <LCD_write+0x12>
 8005616:	bf00      	nop
 8005618:	20002d54 	.word	0x20002d54

0800561c <LCD_clear>:
{
 800561c:	b538      	push	{r3, r4, r5, lr}
	res &= LCD_send(LCD_CMD_CLR, LCD_CMD);
 800561e:	2100      	movs	r1, #0
 8005620:	2001      	movs	r0, #1
 8005622:	f7ff ff09 	bl	8005438 <LCD_send>
	LCD_local_dev->delay(10);
 8005626:	4d09      	ldr	r5, [pc, #36]	; (800564c <LCD_clear+0x30>)
	res &= LCD_send(LCD_CMD_CLR, LCD_CMD);
 8005628:	4604      	mov	r4, r0
	LCD_local_dev->delay(10);
 800562a:	682b      	ldr	r3, [r5, #0]
 800562c:	200a      	movs	r0, #10
 800562e:	689b      	ldr	r3, [r3, #8]
 8005630:	4798      	blx	r3
	res &= LCD_send(LCD_CMD_RETURN, LCD_CMD);
 8005632:	2100      	movs	r1, #0
 8005634:	2002      	movs	r0, #2
 8005636:	f7ff feff 	bl	8005438 <LCD_send>
	LCD_local_dev->delay(10);
 800563a:	682b      	ldr	r3, [r5, #0]
 800563c:	4004      	ands	r4, r0
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	200a      	movs	r0, #10
 8005642:	b2e4      	uxtb	r4, r4
 8005644:	4798      	blx	r3
}
 8005646:	4620      	mov	r0, r4
 8005648:	bd38      	pop	{r3, r4, r5, pc}
 800564a:	bf00      	nop
 800564c:	20002d54 	.word	0x20002d54

08005650 <LCD_next_line>:
	res &= LCD_send(LCD_CMD_NEXT_LINE, LCD_CMD);
 8005650:	2100      	movs	r1, #0
 8005652:	20c0      	movs	r0, #192	; 0xc0
 8005654:	f7ff bef0 	b.w	8005438 <LCD_send>

08005658 <LCD_light_switch>:

bool LCD_light_switch(bool state)
{
	bool res				 	= true;
	LCD_data send_cmd 			= {0};
	send_cmd.data_bits.LED 		= state;
 8005658:	f04f 0300 	mov.w	r3, #0
{
 800565c:	b507      	push	{r0, r1, r2, lr}
	send_cmd.data_bits.LED 		= state;
 800565e:	f360 03c3 	bfi	r3, r0, #3, #1
 8005662:	f88d 3004 	strb.w	r3, [sp, #4]
	send_cmd.data_bits.RS 		= 0;
	send_cmd.data_bits.RW 		= 0;

	res &= LCD_local_dev->i2c_write(I2C_ADDR, &send_cmd.data_byte, 1);
 8005666:	4b05      	ldr	r3, [pc, #20]	; (800567c <LCD_light_switch+0x24>)
 8005668:	2201      	movs	r2, #1
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	a901      	add	r1, sp, #4
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	203f      	movs	r0, #63	; 0x3f
 8005672:	4798      	blx	r3

	return res;
}
 8005674:	b003      	add	sp, #12
 8005676:	f85d fb04 	ldr.w	pc, [sp], #4
 800567a:	bf00      	nop
 800567c:	20002d54 	.word	0x20002d54

08005680 <Numpad_init>:
}scan_pin;

scan_pin	scan_array[COLUMN_NUM][ROW_NUM] 	= {0};

bool Numpad_init(Numpad_dev * dev)
{
 8005680:	b570      	push	{r4, r5, r6, lr}
	if(dev == NULL)
 8005682:	2800      	cmp	r0, #0
 8005684:	d046      	beq.n	8005714 <Numpad_init+0x94>
		return false;

	numpad_local_dev = dev;
 8005686:	4b24      	ldr	r3, [pc, #144]	; (8005718 <Numpad_init+0x98>)

	/*Initialize an array with the functions*/

	/*column 1*/
	scan_array[0][0].write_func = numpad_local_dev->col0_write;
 8005688:	6902      	ldr	r2, [r0, #16]
	numpad_local_dev = dev;
 800568a:	6018      	str	r0, [r3, #0]
	scan_array[0][0].write_func = numpad_local_dev->col0_write;
 800568c:	4b23      	ldr	r3, [pc, #140]	; (800571c <Numpad_init+0x9c>)
	scan_array[0][1].write_func = numpad_local_dev->col0_write;
	scan_array[0][2].write_func = numpad_local_dev->col0_write;
	scan_array[0][3].write_func = numpad_local_dev->col0_write;

	scan_array[0][0].read_func = numpad_local_dev->row0_read;
 800568e:	6806      	ldr	r6, [r0, #0]
	scan_array[0][0].write_func = numpad_local_dev->col0_write;
 8005690:	601a      	str	r2, [r3, #0]
	scan_array[0][1].write_func = numpad_local_dev->col0_write;
 8005692:	60da      	str	r2, [r3, #12]
	scan_array[0][2].write_func = numpad_local_dev->col0_write;
 8005694:	619a      	str	r2, [r3, #24]
	scan_array[0][3].write_func = numpad_local_dev->col0_write;
 8005696:	625a      	str	r2, [r3, #36]	; 0x24
	scan_array[0][1].read_func = numpad_local_dev->row1_read;
	scan_array[0][2].read_func = numpad_local_dev->row2_read;
	scan_array[0][3].read_func = numpad_local_dev->row3_read;

	scan_array[0][0].character = '1';
 8005698:	2231      	movs	r2, #49	; 0x31
	scan_array[0][1].read_func = numpad_local_dev->row1_read;
 800569a:	6845      	ldr	r5, [r0, #4]
	scan_array[0][2].read_func = numpad_local_dev->row2_read;
 800569c:	6884      	ldr	r4, [r0, #8]
	scan_array[0][0].character = '1';
 800569e:	721a      	strb	r2, [r3, #8]
	scan_array[0][1].character = '4';
 80056a0:	2234      	movs	r2, #52	; 0x34
	scan_array[0][3].read_func = numpad_local_dev->row3_read;
 80056a2:	68c1      	ldr	r1, [r0, #12]
	scan_array[0][1].character = '4';
 80056a4:	751a      	strb	r2, [r3, #20]
	scan_array[0][2].character = '7';
 80056a6:	2237      	movs	r2, #55	; 0x37
 80056a8:	f883 2020 	strb.w	r2, [r3, #32]
	scan_array[0][3].character = '*';
 80056ac:	222a      	movs	r2, #42	; 0x2a
 80056ae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c


	/*column 2*/
	scan_array[1][0].write_func = numpad_local_dev->col1_write;
 80056b2:	6942      	ldr	r2, [r0, #20]
	scan_array[0][0].read_func = numpad_local_dev->row0_read;
 80056b4:	605e      	str	r6, [r3, #4]
	scan_array[1][0].write_func = numpad_local_dev->col1_write;
 80056b6:	631a      	str	r2, [r3, #48]	; 0x30
	scan_array[1][1].write_func = numpad_local_dev->col1_write;
 80056b8:	63da      	str	r2, [r3, #60]	; 0x3c
	scan_array[1][2].write_func = numpad_local_dev->col1_write;
 80056ba:	649a      	str	r2, [r3, #72]	; 0x48
	scan_array[1][3].write_func = numpad_local_dev->col1_write;
 80056bc:	655a      	str	r2, [r3, #84]	; 0x54
	scan_array[1][0].read_func = numpad_local_dev->row0_read;
	scan_array[1][1].read_func = numpad_local_dev->row1_read;
	scan_array[1][2].read_func = numpad_local_dev->row2_read;
	scan_array[1][3].read_func = numpad_local_dev->row3_read;

	scan_array[1][0].character = '2';
 80056be:	2232      	movs	r2, #50	; 0x32
 80056c0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	scan_array[1][1].character = '5';
 80056c4:	2235      	movs	r2, #53	; 0x35
 80056c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	scan_array[1][2].character = '8';
 80056ca:	2238      	movs	r2, #56	; 0x38
 80056cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
	scan_array[1][3].character = '0';
 80056d0:	2230      	movs	r2, #48	; 0x30
 80056d2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

	/*column 3*/
	scan_array[2][0].write_func = numpad_local_dev->col2_write;
 80056d6:	6982      	ldr	r2, [r0, #24]
	scan_array[0][1].read_func = numpad_local_dev->row1_read;
 80056d8:	611d      	str	r5, [r3, #16]
	scan_array[0][2].read_func = numpad_local_dev->row2_read;
 80056da:	61dc      	str	r4, [r3, #28]
	scan_array[0][3].read_func = numpad_local_dev->row3_read;
 80056dc:	6299      	str	r1, [r3, #40]	; 0x28
	scan_array[1][0].read_func = numpad_local_dev->row0_read;
 80056de:	635e      	str	r6, [r3, #52]	; 0x34
	scan_array[1][1].read_func = numpad_local_dev->row1_read;
 80056e0:	641d      	str	r5, [r3, #64]	; 0x40
	scan_array[1][2].read_func = numpad_local_dev->row2_read;
 80056e2:	64dc      	str	r4, [r3, #76]	; 0x4c
	scan_array[1][3].read_func = numpad_local_dev->row3_read;
 80056e4:	6599      	str	r1, [r3, #88]	; 0x58
	scan_array[2][0].write_func = numpad_local_dev->col2_write;
 80056e6:	661a      	str	r2, [r3, #96]	; 0x60
	scan_array[2][1].write_func = numpad_local_dev->col2_write;
 80056e8:	66da      	str	r2, [r3, #108]	; 0x6c
	scan_array[2][2].write_func = numpad_local_dev->col2_write;
 80056ea:	679a      	str	r2, [r3, #120]	; 0x78
	scan_array[2][3].write_func = numpad_local_dev->col2_write;
 80056ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
	scan_array[2][0].read_func = numpad_local_dev->row0_read;
	scan_array[2][1].read_func = numpad_local_dev->row1_read;
	scan_array[2][2].read_func = numpad_local_dev->row2_read;
	scan_array[2][3].read_func = numpad_local_dev->row3_read;

	scan_array[2][0].character = '3';
 80056f0:	2233      	movs	r2, #51	; 0x33
 80056f2:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
	scan_array[2][1].character = '6';
 80056f6:	2236      	movs	r2, #54	; 0x36
 80056f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
	scan_array[2][2].character = '9';
 80056fc:	2239      	movs	r2, #57	; 0x39
 80056fe:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80
	scan_array[2][3].character = '#';
 8005702:	2223      	movs	r2, #35	; 0x23

	return true;
 8005704:	2001      	movs	r0, #1
	scan_array[2][0].read_func = numpad_local_dev->row0_read;
 8005706:	665e      	str	r6, [r3, #100]	; 0x64
	scan_array[2][1].read_func = numpad_local_dev->row1_read;
 8005708:	671d      	str	r5, [r3, #112]	; 0x70
	scan_array[2][2].read_func = numpad_local_dev->row2_read;
 800570a:	67dc      	str	r4, [r3, #124]	; 0x7c
	scan_array[2][3].read_func = numpad_local_dev->row3_read;
 800570c:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88
	scan_array[2][3].character = '#';
 8005710:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
}
 8005714:	bd70      	pop	{r4, r5, r6, pc}
 8005716:	bf00      	nop
 8005718:	20002d58 	.word	0x20002d58
 800571c:	20002d5c 	.word	0x20002d5c

08005720 <Numpad_scan>:


char Numpad_scan()
{
 8005720:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005724:	4c20      	ldr	r4, [pc, #128]	; (80057a8 <Numpad_scan+0x88>)
 8005726:	2500      	movs	r5, #0
 8005728:	46a0      	mov	r8, r4
	for(uint8_t i = 0;i < COLUMN_NUM;i++)
	{
		for(uint8_t j = 0;j < ROW_NUM;j++)
		{
			scan_array[i][j].write_func(false);
			numpad_local_dev->delay(10);
 800572a:	f8df 9080 	ldr.w	r9, [pc, #128]	; 80057ac <Numpad_scan+0x8c>
{
 800572e:	4627      	mov	r7, r4
 8005730:	2600      	movs	r6, #0
			scan_array[i][j].write_func(false);
 8005732:	2000      	movs	r0, #0
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	4798      	blx	r3
			numpad_local_dev->delay(10);
 8005738:	f8d9 3000 	ldr.w	r3, [r9]
 800573c:	200a      	movs	r0, #10
 800573e:	69db      	ldr	r3, [r3, #28]
 8005740:	4798      	blx	r3
			if(!scan_array[i][j].read_func())
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	4798      	blx	r3
 8005746:	4682      	mov	sl, r0
 8005748:	b9e0      	cbnz	r0, 8005784 <Numpad_scan+0x64>
			{
				numpad_local_dev->buzzer(true);
 800574a:	f8d9 3000 	ldr.w	r3, [r9]
 800574e:	2001      	movs	r0, #1
 8005750:	6a1b      	ldr	r3, [r3, #32]
 8005752:	4798      	blx	r3
				numpad_local_dev->delay(100);
 8005754:	f8d9 3000 	ldr.w	r3, [r9]
 8005758:	2064      	movs	r0, #100	; 0x64
 800575a:	69db      	ldr	r3, [r3, #28]
 800575c:	4798      	blx	r3
				numpad_local_dev->buzzer(false);
 800575e:	f8d9 3000 	ldr.w	r3, [r9]
 8005762:	4650      	mov	r0, sl
 8005764:	6a1b      	ldr	r3, [r3, #32]
 8005766:	4798      	blx	r3
				scan_array[i][0].write_func(true);
 8005768:	2330      	movs	r3, #48	; 0x30
 800576a:	fb03 f405 	mul.w	r4, r3, r5
 800576e:	2001      	movs	r0, #1
 8005770:	f858 3004 	ldr.w	r3, [r8, r4]
 8005774:	4798      	blx	r3
				return scan_array[i][j].character;
 8005776:	230c      	movs	r3, #12
 8005778:	fb03 4406 	mla	r4, r3, r6, r4
 800577c:	4444      	add	r4, r8
 800577e:	7a20      	ldrb	r0, [r4, #8]

		scan_array[i][0].write_func(true);
	}

	return 'X';
}
 8005780:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		for(uint8_t j = 0;j < ROW_NUM;j++)
 8005784:	3601      	adds	r6, #1
 8005786:	2e04      	cmp	r6, #4
 8005788:	f107 070c 	add.w	r7, r7, #12
 800578c:	d1d1      	bne.n	8005732 <Numpad_scan+0x12>
		scan_array[i][0].write_func(true);
 800578e:	2330      	movs	r3, #48	; 0x30
 8005790:	436b      	muls	r3, r5
 8005792:	2001      	movs	r0, #1
 8005794:	f858 3003 	ldr.w	r3, [r8, r3]
	for(uint8_t i = 0;i < COLUMN_NUM;i++)
 8005798:	3501      	adds	r5, #1
		scan_array[i][0].write_func(true);
 800579a:	4798      	blx	r3
	for(uint8_t i = 0;i < COLUMN_NUM;i++)
 800579c:	2d03      	cmp	r5, #3
 800579e:	f104 0430 	add.w	r4, r4, #48	; 0x30
 80057a2:	d1c4      	bne.n	800572e <Numpad_scan+0xe>
	return 'X';
 80057a4:	2058      	movs	r0, #88	; 0x58
 80057a6:	e7eb      	b.n	8005780 <Numpad_scan+0x60>
 80057a8:	20002d5c 	.word	0x20002d5c
 80057ac:	20002d58 	.word	0x20002d58

080057b0 <init_task>:

	configASSERT(result == pdPASS);
}

void init_task(void * params)
{
 80057b0:	b508      	push	{r3, lr}
	while(1)
	{
		taskENTER_CRITICAL();
 80057b2:	f7ff f907 	bl	80049c4 <vPortEnterCritical>
		if(!config_load())
 80057b6:	f7ff fd8d 	bl	80052d4 <config_load>
 80057ba:	b908      	cbnz	r0, 80057c0 <init_task+0x10>
		{
			config_init();
 80057bc:	f7ff fe2a 	bl	8005414 <config_init>
		}
		taskEXIT_CRITICAL();
 80057c0:	f7ff f910 	bl	80049e4 <vPortExitCritical>

		interface_init();
 80057c4:	f7ff fa60 	bl	8004c88 <interface_init>

		/*Call the initialising function of each task*/
		manager_task_create();
 80057c8:	f000 f81e 	bl	8005808 <manager_task_create>
		//uart_task_create();
		gsm_task_create();
 80057cc:	f000 fbf6 	bl	8005fbc <gsm_task_create>
		io_task_create();
 80057d0:	f000 fc6c 	bl	80060ac <io_task_create>
		lcd_task_create();
 80057d4:	f000 fcf0 	bl	80061b8 <lcd_task_create>
		numpad_task_create();
 80057d8:	f000 fdc2 	bl	8006360 <numpad_task_create>

		/*Delete the init_task after initialisation*/
		vTaskDelete(NULL);
 80057dc:	2000      	movs	r0, #0
 80057de:	f7fe fd01 	bl	80041e4 <vTaskDelete>
		taskENTER_CRITICAL();
 80057e2:	e7e6      	b.n	80057b2 <init_task+0x2>

080057e4 <init_task_create>:
{
 80057e4:	b507      	push	{r0, r1, r2, lr}
	result = xTaskCreate(init_task,
 80057e6:	2300      	movs	r3, #0
 80057e8:	2201      	movs	r2, #1
 80057ea:	4905      	ldr	r1, [pc, #20]	; (8005800 <init_task_create+0x1c>)
 80057ec:	e9cd 2300 	strd	r2, r3, [sp]
 80057f0:	4804      	ldr	r0, [pc, #16]	; (8005804 <init_task_create+0x20>)
 80057f2:	2264      	movs	r2, #100	; 0x64
 80057f4:	f7fe fc14 	bl	8004020 <xTaskCreate>
}
 80057f8:	b003      	add	sp, #12
 80057fa:	f85d fb04 	ldr.w	pc, [sp], #4
 80057fe:	bf00      	nop
 8005800:	080079e0 	.word	0x080079e0
 8005804:	080057b1 	.word	0x080057b1

08005808 <manager_task_create>:
void buzzer_sound();
void manager_task(void * params);
static void send_text(lcd_data * data);

void manager_task_create()
{
 8005808:	b507      	push	{r0, r1, r2, lr}
	BaseType_t result = pdPASS;
	result = xTaskCreate(manager_task,
 800580a:	2300      	movs	r3, #0
 800580c:	2202      	movs	r2, #2
 800580e:	4905      	ldr	r1, [pc, #20]	; (8005824 <manager_task_create+0x1c>)
 8005810:	e9cd 2300 	strd	r2, r3, [sp]
 8005814:	4804      	ldr	r0, [pc, #16]	; (8005828 <manager_task_create+0x20>)
 8005816:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800581a:	f7fe fc01 	bl	8004020 <xTaskCreate>
				NULL,
				2,
				NULL);

	configASSERT(result == pdPASS);
}
 800581e:	b003      	add	sp, #12
 8005820:	f85d fb04 	ldr.w	pc, [sp], #4
 8005824:	080079e7 	.word	0x080079e7
 8005828:	0800586d 	.word	0x0800586d

0800582c <buzzer_sound>:
}


void buzzer_sound()
{
	TIM4->ARR = 137;
 800582c:	2289      	movs	r2, #137	; 0x89
{
 800582e:	b538      	push	{r3, r4, r5, lr}
	TIM4->ARR = 137;
 8005830:	4b0c      	ldr	r3, [pc, #48]	; (8005864 <buzzer_sound+0x38>)
	TIM4->CCR2 = 68;
 8005832:	240a      	movs	r4, #10
	TIM4->ARR = 137;
 8005834:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM4->CCR2 = 68;
 8005836:	2244      	movs	r2, #68	; 0x44
	for(uint8_t i = 0;i < 10;i++)
	{
		HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8005838:	4d0b      	ldr	r5, [pc, #44]	; (8005868 <buzzer_sound+0x3c>)
	TIM4->CCR2 = 68;
 800583a:	639a      	str	r2, [r3, #56]	; 0x38
		HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 800583c:	2104      	movs	r1, #4
 800583e:	4628      	mov	r0, r5
 8005840:	f7fd fd81 	bl	8003346 <HAL_TIM_PWM_Start>
		vTaskDelay(pdMS_TO_TICKS(80));
 8005844:	2050      	movs	r0, #80	; 0x50
 8005846:	f7fe fead 	bl	80045a4 <vTaskDelay>
		HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 800584a:	2104      	movs	r1, #4
 800584c:	4628      	mov	r0, r5
 800584e:	f7fd fd7c 	bl	800334a <HAL_TIM_PWM_Stop>
	for(uint8_t i = 0;i < 10;i++)
 8005852:	3c01      	subs	r4, #1
		vTaskDelay(pdMS_TO_TICKS(80));
 8005854:	2050      	movs	r0, #80	; 0x50
 8005856:	f7fe fea5 	bl	80045a4 <vTaskDelay>
	for(uint8_t i = 0;i < 10;i++)
 800585a:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
 800585e:	d1ed      	bne.n	800583c <buzzer_sound+0x10>
	}
}
 8005860:	bd38      	pop	{r3, r4, r5, pc}
 8005862:	bf00      	nop
 8005864:	40000800 	.word	0x40000800
 8005868:	2000026c 	.word	0x2000026c

0800586c <manager_task>:
{
 800586c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	io_state_data 	io_data 				= {0};
 8005870:	2400      	movs	r4, #0
	uint8_t			key_cnt					= 0;
 8005872:	4625      	mov	r5, r4
{
 8005874:	b0eb      	sub	sp, #428	; 0x1ac
	lcd_data 		lcd_data 				= {0};
 8005876:	2223      	movs	r2, #35	; 0x23
 8005878:	2100      	movs	r1, #0
 800587a:	a821      	add	r0, sp, #132	; 0x84
 800587c:	f000 fdce 	bl	800641c <memset>
	char			armed_str[]				= "ARMED";
 8005880:	4bb1      	ldr	r3, [pc, #708]	; (8005b48 <manager_task+0x2dc>)
	char			disarmed_str[]			= "DISARMED";
 8005882:	4ab2      	ldr	r2, [pc, #712]	; (8005b4c <manager_task+0x2e0>)
	char			armed_str[]				= "ARMED";
 8005884:	6818      	ldr	r0, [r3, #0]
 8005886:	889b      	ldrh	r3, [r3, #4]
	char			disarmed_str[]			= "DISARMED";
 8005888:	6851      	ldr	r1, [r2, #4]
	char			armed_str[]				= "ARMED";
 800588a:	9010      	str	r0, [sp, #64]	; 0x40
	char			disarmed_str[]			= "DISARMED";
 800588c:	6810      	ldr	r0, [r2, #0]
	char			armed_str[]				= "ARMED";
 800588e:	f8ad 3044 	strh.w	r3, [sp, #68]	; 0x44
	char			disarmed_str[]			= "DISARMED";
 8005892:	ab1a      	add	r3, sp, #104	; 0x68
 8005894:	c303      	stmia	r3!, {r0, r1}
 8005896:	7a12      	ldrb	r2, [r2, #8]
	io_state_data 	io_data 				= {0};
 8005898:	e9cd 4418 	strd	r4, r4, [sp, #96]	; 0x60
	char			disarmed_str[]			= "DISARMED";
 800589c:	701a      	strb	r2, [r3, #0]
	char			alarm_str[]				= "ALARM";
 800589e:	4bac      	ldr	r3, [pc, #688]	; (8005b50 <manager_task+0x2e4>)
		sscanf(key_buffer, "*%[^#]#", code);
 80058a0:	f8df 82b0 	ldr.w	r8, [pc, #688]	; 8005b54 <manager_task+0x2e8>
	char			alarm_str[]				= "ALARM";
 80058a4:	6818      	ldr	r0, [r3, #0]
 80058a6:	889b      	ldrh	r3, [r3, #4]
 80058a8:	9012      	str	r0, [sp, #72]	; 0x48
 80058aa:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
	char			config_str[]			= "CONFIG";
 80058ae:	4baa      	ldr	r3, [pc, #680]	; (8005b58 <manager_task+0x2ec>)
		switch(system_state)
 80058b0:	4faa      	ldr	r7, [pc, #680]	; (8005b5c <manager_task+0x2f0>)
	char			config_str[]			= "CONFIG";
 80058b2:	6818      	ldr	r0, [r3, #0]
 80058b4:	889a      	ldrh	r2, [r3, #4]
 80058b6:	799b      	ldrb	r3, [r3, #6]
	char			key_buffer[MAX_KEY_CNT]	= {0};
 80058b8:	9414      	str	r4, [sp, #80]	; 0x50
 80058ba:	f8ad 4054 	strh.w	r4, [sp, #84]	; 0x54
 80058be:	f88d 4056 	strb.w	r4, [sp, #86]	; 0x56
	char			config_str[]			= "CONFIG";
 80058c2:	9016      	str	r0, [sp, #88]	; 0x58
 80058c4:	f8ad 205c 	strh.w	r2, [sp, #92]	; 0x5c
 80058c8:	f88d 305e 	strb.w	r3, [sp, #94]	; 0x5e
	char 			key						= '\0';
 80058cc:	f88d 4016 	strb.w	r4, [sp, #22]
	char 			code[5] 				= {0};
 80058d0:	9406      	str	r4, [sp, #24]
 80058d2:	f88d 401c 	strb.w	r4, [sp, #28]
		sscanf(key_buffer, "*%[^#]#", code);
 80058d6:	ae14      	add	r6, sp, #80	; 0x50
 80058d8:	4641      	mov	r1, r8
 80058da:	aa06      	add	r2, sp, #24
 80058dc:	4630      	mov	r0, r6
 80058de:	f000 fdc5 	bl	800646c <siscanf>
		if(xQueueReceive(key_queue, (void*)&key, pdMS_TO_TICKS(100)) == pdTRUE)
 80058e2:	4b9f      	ldr	r3, [pc, #636]	; (8005b60 <manager_task+0x2f4>)
 80058e4:	2264      	movs	r2, #100	; 0x64
 80058e6:	6818      	ldr	r0, [r3, #0]
 80058e8:	f10d 0116 	add.w	r1, sp, #22
 80058ec:	f7fe f9f6 	bl	8003cdc <xQueueReceive>
 80058f0:	2801      	cmp	r0, #1
 80058f2:	d110      	bne.n	8005916 <manager_task+0xaa>
			key_cnt++;
 80058f4:	1c6b      	adds	r3, r5, #1
 80058f6:	b2db      	uxtb	r3, r3
			if(key_cnt >= MAX_KEY_CNT)
 80058f8:	2b06      	cmp	r3, #6
			key_buffer[key_cnt] = key;
 80058fa:	bf96      	itet	ls
 80058fc:	f89d 2016 	ldrbls.w	r2, [sp, #22]
				memset(key_buffer, '\0', sizeof(key_buffer));
 8005900:	2500      	movhi	r5, #0
			key_buffer[key_cnt] = key;
 8005902:	5572      	strbls	r2, [r6, r5]
			key_pressed = true;
 8005904:	4604      	mov	r4, r0
			key_buffer[key_cnt] = key;
 8005906:	bf91      	iteee	ls
 8005908:	461d      	movls	r5, r3
				state_change_f = true;
 800590a:	4b96      	ldrhi	r3, [pc, #600]	; (8005b64 <manager_task+0x2f8>)
				memset(key_buffer, '\0', sizeof(key_buffer));
 800590c:	6035      	strhi	r5, [r6, #0]
				state_change_f = true;
 800590e:	7018      	strbhi	r0, [r3, #0]
				memset(key_buffer, '\0', sizeof(key_buffer));
 8005910:	bf88      	it	hi
 8005912:	f8c6 5003 	strhi.w	r5, [r6, #3]
		switch(system_state)
 8005916:	783b      	ldrb	r3, [r7, #0]
 8005918:	2b05      	cmp	r3, #5
 800591a:	d8dc      	bhi.n	80058d6 <manager_task+0x6a>
 800591c:	e8df f013 	tbh	[pc, r3, lsl #1]
 8005920:	00320008 	.word	0x00320008
 8005924:	009f003f 	.word	0x009f003f
 8005928:	0179013a 	.word	0x0179013a
					key_pressed = false;
 800592c:	4604      	mov	r4, r0
 800592e:	e7d2      	b.n	80058d6 <manager_task+0x6a>
				xSemaphoreTake(numpad_mutex, pdMS_TO_TICKS(500));
 8005930:	4b8d      	ldr	r3, [pc, #564]	; (8005b68 <manager_task+0x2fc>)
 8005932:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 8005936:	6818      	ldr	r0, [r3, #0]
 8005938:	f7fe fa47 	bl	8003dca <xQueueSemaphoreTake>
				memcpy(lcd_data.text, "HOME ALARM V1.0", 15);
 800593c:	4b8b      	ldr	r3, [pc, #556]	; (8005b6c <manager_task+0x300>)
 800593e:	aa21      	add	r2, sp, #132	; 0x84
 8005940:	f103 0c08 	add.w	ip, r3, #8
 8005944:	4616      	mov	r6, r2
 8005946:	6818      	ldr	r0, [r3, #0]
 8005948:	6859      	ldr	r1, [r3, #4]
 800594a:	3308      	adds	r3, #8
 800594c:	c603      	stmia	r6!, {r0, r1}
 800594e:	4563      	cmp	r3, ip
 8005950:	4632      	mov	r2, r6
 8005952:	d1f7      	bne.n	8005944 <manager_task+0xd8>
 8005954:	6818      	ldr	r0, [r3, #0]
 8005956:	8899      	ldrh	r1, [r3, #4]
 8005958:	799b      	ldrb	r3, [r3, #6]
 800595a:	6030      	str	r0, [r6, #0]
 800595c:	80b1      	strh	r1, [r6, #4]
 800595e:	71b3      	strb	r3, [r6, #6]
				lcd_data.clr = true;
 8005960:	2601      	movs	r6, #1
				xQueueSend(lcd_queue, (void*)&lcd_data, pdMS_TO_TICKS(100));
 8005962:	4883      	ldr	r0, [pc, #524]	; (8005b70 <manager_task+0x304>)
 8005964:	2300      	movs	r3, #0
 8005966:	2264      	movs	r2, #100	; 0x64
 8005968:	a921      	add	r1, sp, #132	; 0x84
 800596a:	6800      	ldr	r0, [r0, #0]
				lcd_data.clr = true;
 800596c:	f88d 60a4 	strb.w	r6, [sp, #164]	; 0xa4
				lcd_data.led = true;
 8005970:	f88d 60a6 	strb.w	r6, [sp, #166]	; 0xa6
				xQueueSend(lcd_queue, (void*)&lcd_data, pdMS_TO_TICKS(100));
 8005974:	f7fe f915 	bl	8003ba2 <xQueueGenericSend>
				vTaskDelay(pdMS_TO_TICKS(5000));
 8005978:	f241 3088 	movw	r0, #5000	; 0x1388
 800597c:	f7fe fe12 	bl	80045a4 <vTaskDelay>
				system_state = STATE_INIT;
 8005980:	703e      	strb	r6, [r7, #0]
				break;
 8005982:	e7a8      	b.n	80058d6 <manager_task+0x6a>
				state_change_f = true;
 8005984:	2201      	movs	r2, #1
 8005986:	4b77      	ldr	r3, [pc, #476]	; (8005b64 <manager_task+0x2f8>)
				xSemaphoreGive(numpad_mutex);
 8005988:	4877      	ldr	r0, [pc, #476]	; (8005b68 <manager_task+0x2fc>)
				state_change_f = true;
 800598a:	701a      	strb	r2, [r3, #0]
				xSemaphoreGive(numpad_mutex);
 800598c:	2300      	movs	r3, #0
 800598e:	6800      	ldr	r0, [r0, #0]
 8005990:	461a      	mov	r2, r3
 8005992:	4619      	mov	r1, r3
 8005994:	f7fe f905 	bl	8003ba2 <xQueueGenericSend>
				system_state = STATE_DISARMED;
 8005998:	2302      	movs	r3, #2
 800599a:	703b      	strb	r3, [r7, #0]
				break;
 800599c:	e79b      	b.n	80058d6 <manager_task+0x6a>
				if(state_change_f)
 800599e:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8005b64 <manager_task+0x2f8>
 80059a2:	f899 3000 	ldrb.w	r3, [r9]
 80059a6:	b1d3      	cbz	r3, 80059de <manager_task+0x172>
					state_change_f = false;
 80059a8:	f04f 0a00 	mov.w	sl, #0
					memset(lcd_data.text, '\0', LCD_BUFF_MAX_SIZE);
 80059ac:	2220      	movs	r2, #32
 80059ae:	4651      	mov	r1, sl
 80059b0:	a821      	add	r0, sp, #132	; 0x84
					state_change_f = false;
 80059b2:	f889 a000 	strb.w	sl, [r9]
					memset(lcd_data.text, '\0', LCD_BUFF_MAX_SIZE);
 80059b6:	f000 fd31 	bl	800641c <memset>
					memcpy(lcd_data.text, disarmed_str, strlen(disarmed_str));
 80059ba:	a81a      	add	r0, sp, #104	; 0x68
 80059bc:	f7fa fbea 	bl	8000194 <strlen>
 80059c0:	a91a      	add	r1, sp, #104	; 0x68
 80059c2:	4602      	mov	r2, r0
 80059c4:	a821      	add	r0, sp, #132	; 0x84
 80059c6:	f000 fd1b 	bl	8006400 <memcpy>
					lcd_data.crlf = true;
 80059ca:	2301      	movs	r3, #1
					xQueueSend(lcd_queue, (void*)&lcd_data, pdMS_TO_TICKS(100));
 80059cc:	4868      	ldr	r0, [pc, #416]	; (8005b70 <manager_task+0x304>)
					lcd_data.crlf = true;
 80059ce:	f88d 30a5 	strb.w	r3, [sp, #165]	; 0xa5
					xQueueSend(lcd_queue, (void*)&lcd_data, pdMS_TO_TICKS(100));
 80059d2:	2264      	movs	r2, #100	; 0x64
 80059d4:	4653      	mov	r3, sl
 80059d6:	6800      	ldr	r0, [r0, #0]
 80059d8:	a921      	add	r1, sp, #132	; 0x84
 80059da:	f7fe f8e2 	bl	8003ba2 <xQueueGenericSend>
				if(key_pressed)
 80059de:	2c00      	cmp	r4, #0
 80059e0:	f43f af79 	beq.w	80058d6 <manager_task+0x6a>
					sscanf(key_buffer, "*%[^#]#", code);
 80059e4:	4641      	mov	r1, r8
 80059e6:	aa06      	add	r2, sp, #24
 80059e8:	4630      	mov	r0, r6
 80059ea:	f000 fd3f 	bl	800646c <siscanf>
					if((atoi(code) == config.password) && (config.password != 0))
 80059ee:	a806      	add	r0, sp, #24
 80059f0:	f000 fcc8 	bl	8006384 <atoi>
 80059f4:	f8df a17c 	ldr.w	sl, [pc, #380]	; 8005b74 <manager_task+0x308>
 80059f8:	f8ba 300d 	ldrh.w	r3, [sl, #13]
 80059fc:	4298      	cmp	r0, r3
 80059fe:	d116      	bne.n	8005a2e <manager_task+0x1c2>
 8005a00:	b1a8      	cbz	r0, 8005a2e <manager_task+0x1c2>
						memset(key_buffer, '\0', sizeof(key_buffer));
 8005a02:	2400      	movs	r4, #0
						state_change_f = true;
 8005a04:	2301      	movs	r3, #1
						memset(key_buffer, '\0', sizeof(key_buffer));
 8005a06:	6034      	str	r4, [r6, #0]
 8005a08:	f8c6 4003 	str.w	r4, [r6, #3]
						state_change_f = true;
 8005a0c:	f889 3000 	strb.w	r3, [r9]
						buzzer_sound();
 8005a10:	f7ff ff0c 	bl	800582c <buzzer_sound>
						vTaskDelay(pdMS_TO_TICKS(config.arming_delay));
 8005a14:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8005a18:	f8ba 3011 	ldrh.w	r3, [sl, #17]
 8005a1c:	4343      	muls	r3, r0
 8005a1e:	fbb3 f0f0 	udiv	r0, r3, r0
 8005a22:	f7fe fdbf 	bl	80045a4 <vTaskDelay>
						system_state = STATE_ARMED;
 8005a26:	2303      	movs	r3, #3
						key_cnt = 0;
 8005a28:	4625      	mov	r5, r4
						system_state = STATE_DISARMED;
 8005a2a:	703b      	strb	r3, [r7, #0]
 8005a2c:	e753      	b.n	80058d6 <manager_task+0x6a>
					else if(strcmp(key_buffer, "*0#") == 0)
 8005a2e:	4630      	mov	r0, r6
 8005a30:	4951      	ldr	r1, [pc, #324]	; (8005b78 <manager_task+0x30c>)
 8005a32:	f7fa fba5 	bl	8000180 <strcmp>
 8005a36:	4604      	mov	r4, r0
 8005a38:	2800      	cmp	r0, #0
 8005a3a:	d17d      	bne.n	8005b38 <manager_task+0x2cc>
						state_change_f = true;
 8005a3c:	2301      	movs	r3, #1
						memset(key_buffer, '\0', sizeof(key_buffer));
 8005a3e:	6030      	str	r0, [r6, #0]
						state_change_f = true;
 8005a40:	f889 3000 	strb.w	r3, [r9]
						memset(key_buffer, '\0', sizeof(key_buffer));
 8005a44:	f8c6 0003 	str.w	r0, [r6, #3]
						bool config_state = true;
 8005a48:	f88d 3128 	strb.w	r3, [sp, #296]	; 0x128
						xQueueSend(config_queue, (void*)&config_state, pdMS_TO_TICKS(100));
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	484b      	ldr	r0, [pc, #300]	; (8005b7c <manager_task+0x310>)
 8005a50:	2264      	movs	r2, #100	; 0x64
 8005a52:	6800      	ldr	r0, [r0, #0]
 8005a54:	a94a      	add	r1, sp, #296	; 0x128
 8005a56:	f7fe f8a4 	bl	8003ba2 <xQueueGenericSend>
						system_state = STATE_CONFIG;
 8005a5a:	2305      	movs	r3, #5
 8005a5c:	e7e4      	b.n	8005a28 <manager_task+0x1bc>
				if(state_change_f)
 8005a5e:	f8df 9104 	ldr.w	r9, [pc, #260]	; 8005b64 <manager_task+0x2f8>
 8005a62:	f899 3000 	ldrb.w	r3, [r9]
 8005a66:	b1d3      	cbz	r3, 8005a9e <manager_task+0x232>
					state_change_f = false;
 8005a68:	f04f 0a00 	mov.w	sl, #0
					memset(lcd_data.text, '\0', LCD_BUFF_MAX_SIZE);
 8005a6c:	2220      	movs	r2, #32
 8005a6e:	4651      	mov	r1, sl
 8005a70:	a821      	add	r0, sp, #132	; 0x84
					state_change_f = false;
 8005a72:	f889 a000 	strb.w	sl, [r9]
					memset(lcd_data.text, '\0', LCD_BUFF_MAX_SIZE);
 8005a76:	f000 fcd1 	bl	800641c <memset>
					memcpy(lcd_data.text, armed_str, strlen(armed_str));
 8005a7a:	a810      	add	r0, sp, #64	; 0x40
 8005a7c:	f7fa fb8a 	bl	8000194 <strlen>
 8005a80:	a910      	add	r1, sp, #64	; 0x40
 8005a82:	4602      	mov	r2, r0
 8005a84:	a821      	add	r0, sp, #132	; 0x84
 8005a86:	f000 fcbb 	bl	8006400 <memcpy>
					lcd_data.crlf = true;
 8005a8a:	2301      	movs	r3, #1
					xQueueSend(lcd_queue, (void*)&lcd_data, pdMS_TO_TICKS(100));
 8005a8c:	4838      	ldr	r0, [pc, #224]	; (8005b70 <manager_task+0x304>)
					lcd_data.crlf = true;
 8005a8e:	f88d 30a5 	strb.w	r3, [sp, #165]	; 0xa5
					xQueueSend(lcd_queue, (void*)&lcd_data, pdMS_TO_TICKS(100));
 8005a92:	2264      	movs	r2, #100	; 0x64
 8005a94:	4653      	mov	r3, sl
 8005a96:	6800      	ldr	r0, [r0, #0]
 8005a98:	a921      	add	r1, sp, #132	; 0x84
 8005a9a:	f7fe f882 	bl	8003ba2 <xQueueGenericSend>
				if(key_pressed)
 8005a9e:	b1c4      	cbz	r4, 8005ad2 <manager_task+0x266>
					sscanf(key_buffer, "*%[^#]#", code);
 8005aa0:	4641      	mov	r1, r8
 8005aa2:	aa06      	add	r2, sp, #24
 8005aa4:	4630      	mov	r0, r6
 8005aa6:	f000 fce1 	bl	800646c <siscanf>
					if((atoi(code) == config.password) && (config.password != 0))
 8005aaa:	a806      	add	r0, sp, #24
 8005aac:	f000 fc6a 	bl	8006384 <atoi>
 8005ab0:	4b30      	ldr	r3, [pc, #192]	; (8005b74 <manager_task+0x308>)
 8005ab2:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8005ab6:	4298      	cmp	r0, r3
 8005ab8:	d10b      	bne.n	8005ad2 <manager_task+0x266>
 8005aba:	b150      	cbz	r0, 8005ad2 <manager_task+0x266>
						memset(key_buffer, '\0', sizeof(key_buffer));
 8005abc:	2500      	movs	r5, #0
						state_change_f = true;
 8005abe:	2301      	movs	r3, #1
						memset(key_buffer, '\0', sizeof(key_buffer));
 8005ac0:	6035      	str	r5, [r6, #0]
 8005ac2:	f8c6 5003 	str.w	r5, [r6, #3]
						state_change_f = true;
 8005ac6:	f889 3000 	strb.w	r3, [r9]
						buzzer_sound();
 8005aca:	f7ff feaf 	bl	800582c <buzzer_sound>
						system_state = STATE_DISARMED;
 8005ace:	2302      	movs	r3, #2
 8005ad0:	703b      	strb	r3, [r7, #0]
				if(xQueueReceive(io_queue, (void*)&io_data, pdMS_TO_TICKS(100)) == pdTRUE)
 8005ad2:	4b2b      	ldr	r3, [pc, #172]	; (8005b80 <manager_task+0x314>)
 8005ad4:	2264      	movs	r2, #100	; 0x64
 8005ad6:	6818      	ldr	r0, [r3, #0]
 8005ad8:	a918      	add	r1, sp, #96	; 0x60
 8005ada:	f7fe f8ff 	bl	8003cdc <xQueueReceive>
 8005ade:	2801      	cmp	r0, #1
 8005ae0:	d12c      	bne.n	8005b3c <manager_task+0x2d0>
					if((io_data.io_state & config.sensor_mask) != 0)
 8005ae2:	4b24      	ldr	r3, [pc, #144]	; (8005b74 <manager_task+0x308>)
 8005ae4:	f8b3 200f 	ldrh.w	r2, [r3, #15]
 8005ae8:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 8005aec:	421a      	tst	r2, r3
 8005aee:	d025      	beq.n	8005b3c <manager_task+0x2d0>
						msg_data sms_data = {0};
 8005af0:	2280      	movs	r2, #128	; 0x80
 8005af2:	4924      	ldr	r1, [pc, #144]	; (8005b84 <manager_task+0x318>)
						state_change_f = true;
 8005af4:	f889 0000 	strb.w	r0, [r9]
						msg_data sms_data = {0};
 8005af8:	a84a      	add	r0, sp, #296	; 0x128
 8005afa:	f000 fc81 	bl	8006400 <memcpy>
						ptr += sprintf(sms_data.text, "ALARM!\r\n");
 8005afe:	4922      	ldr	r1, [pc, #136]	; (8005b88 <manager_task+0x31c>)
 8005b00:	a84a      	add	r0, sp, #296	; 0x128
 8005b02:	f000 fcdf 	bl	80064c4 <strcpy>
 8005b06:	2400      	movs	r4, #0
							ptr += sprintf(&sms_data.text[i], "S%d: %d\r\n",i, ((io_data.io_state) & (1 << i)) ? 1 : 0);
 8005b08:	4e20      	ldr	r6, [pc, #128]	; (8005b8c <manager_task+0x320>)
 8005b0a:	f8bd 3064 	ldrh.w	r3, [sp, #100]	; 0x64
 8005b0e:	a84a      	add	r0, sp, #296	; 0x128
 8005b10:	4123      	asrs	r3, r4
 8005b12:	4622      	mov	r2, r4
 8005b14:	4420      	add	r0, r4
 8005b16:	4631      	mov	r1, r6
 8005b18:	f003 0301 	and.w	r3, r3, #1
						for(uint8_t i = 0;i < 9;i++)
 8005b1c:	3401      	adds	r4, #1
							ptr += sprintf(&sms_data.text[i], "S%d: %d\r\n",i, ((io_data.io_state) & (1 << i)) ? 1 : 0);
 8005b1e:	f000 fc85 	bl	800642c <siprintf>
						for(uint8_t i = 0;i < 9;i++)
 8005b22:	2c09      	cmp	r4, #9
 8005b24:	d1f1      	bne.n	8005b0a <manager_task+0x29e>
						xQueueSend(sms_queue, (void*)&lcd_data, pdMS_TO_TICKS(100));
 8005b26:	481a      	ldr	r0, [pc, #104]	; (8005b90 <manager_task+0x324>)
 8005b28:	2300      	movs	r3, #0
 8005b2a:	2264      	movs	r2, #100	; 0x64
 8005b2c:	6800      	ldr	r0, [r0, #0]
 8005b2e:	a921      	add	r1, sp, #132	; 0x84
 8005b30:	f7fe f837 	bl	8003ba2 <xQueueGenericSend>
						system_state = STATE_ALERT;
 8005b34:	2304      	movs	r3, #4
 8005b36:	703b      	strb	r3, [r7, #0]
				break;
 8005b38:	2400      	movs	r4, #0
 8005b3a:	e6cc      	b.n	80058d6 <manager_task+0x6a>
				vTaskDelay(pdMS_TO_TICKS(500));
 8005b3c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005b40:	f7fe fd30 	bl	80045a4 <vTaskDelay>
				break;
 8005b44:	e7f8      	b.n	8005b38 <manager_task+0x2cc>
 8005b46:	bf00      	nop
 8005b48:	08007a58 	.word	0x08007a58
 8005b4c:	08007a55 	.word	0x08007a55
 8005b50:	08007a5e 	.word	0x08007a5e
 8005b54:	080079f1 	.word	0x080079f1
 8005b58:	08007a64 	.word	0x08007a64
 8005b5c:	20002ded 	.word	0x20002ded
 8005b60:	20002c7c 	.word	0x20002c7c
 8005b64:	20002dec 	.word	0x20002dec
 8005b68:	20002c88 	.word	0x20002c88
 8005b6c:	080079f9 	.word	0x080079f9
 8005b70:	20002c80 	.word	0x20002c80
 8005b74:	20002d1c 	.word	0x20002d1c
 8005b78:	08007a09 	.word	0x08007a09
 8005b7c:	20002c74 	.word	0x20002c74
 8005b80:	20002c78 	.word	0x20002c78
 8005b84:	08007754 	.word	0x08007754
 8005b88:	08007a0d 	.word	0x08007a0d
 8005b8c:	08007a16 	.word	0x08007a16
 8005b90:	20002c90 	.word	0x20002c90
				if(state_change_f)
 8005b94:	f8df 921c 	ldr.w	r9, [pc, #540]	; 8005db4 <manager_task+0x548>
 8005b98:	f899 3000 	ldrb.w	r3, [r9]
 8005b9c:	b1d3      	cbz	r3, 8005bd4 <manager_task+0x368>
					state_change_f = false;
 8005b9e:	f04f 0a00 	mov.w	sl, #0
					memset(lcd_data.text, '\0', LCD_BUFF_MAX_SIZE);
 8005ba2:	2220      	movs	r2, #32
 8005ba4:	4651      	mov	r1, sl
 8005ba6:	a821      	add	r0, sp, #132	; 0x84
					state_change_f = false;
 8005ba8:	f889 a000 	strb.w	sl, [r9]
					memset(lcd_data.text, '\0', LCD_BUFF_MAX_SIZE);
 8005bac:	f000 fc36 	bl	800641c <memset>
					memcpy(lcd_data.text, alarm_str, strlen(alarm_str));
 8005bb0:	a812      	add	r0, sp, #72	; 0x48
 8005bb2:	f7fa faef 	bl	8000194 <strlen>
 8005bb6:	a912      	add	r1, sp, #72	; 0x48
 8005bb8:	4602      	mov	r2, r0
 8005bba:	a821      	add	r0, sp, #132	; 0x84
 8005bbc:	f000 fc20 	bl	8006400 <memcpy>
					lcd_data.crlf = true;
 8005bc0:	2301      	movs	r3, #1
					xQueueSend(lcd_queue, (void*)&lcd_data, pdMS_TO_TICKS(100));
 8005bc2:	487d      	ldr	r0, [pc, #500]	; (8005db8 <manager_task+0x54c>)
					lcd_data.crlf = true;
 8005bc4:	f88d 30a5 	strb.w	r3, [sp, #165]	; 0xa5
					xQueueSend(lcd_queue, (void*)&lcd_data, pdMS_TO_TICKS(100));
 8005bc8:	2264      	movs	r2, #100	; 0x64
 8005bca:	4653      	mov	r3, sl
 8005bcc:	6800      	ldr	r0, [r0, #0]
 8005bce:	a921      	add	r1, sp, #132	; 0x84
 8005bd0:	f7fd ffe7 	bl	8003ba2 <xQueueGenericSend>
				if(key_pressed)
 8005bd4:	2c00      	cmp	r4, #0
 8005bd6:	f43f ae7e 	beq.w	80058d6 <manager_task+0x6a>
					sscanf(key_buffer, "*%[^#]#", code);
 8005bda:	4641      	mov	r1, r8
 8005bdc:	aa06      	add	r2, sp, #24
 8005bde:	4630      	mov	r0, r6
 8005be0:	f000 fc44 	bl	800646c <siscanf>
					if((atoi(code) == config.password) && (config.password != 0))
 8005be4:	a806      	add	r0, sp, #24
 8005be6:	f000 fbcd 	bl	8006384 <atoi>
 8005bea:	4b74      	ldr	r3, [pc, #464]	; (8005dbc <manager_task+0x550>)
 8005bec:	2400      	movs	r4, #0
 8005bee:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 8005bf2:	4298      	cmp	r0, r3
 8005bf4:	f47f ae6f 	bne.w	80058d6 <manager_task+0x6a>
 8005bf8:	2800      	cmp	r0, #0
 8005bfa:	f43f ae97 	beq.w	800592c <manager_task+0xc0>
						state_change_f = true;
 8005bfe:	2301      	movs	r3, #1
						memset(key_buffer, '\0', sizeof(key_buffer));
 8005c00:	6034      	str	r4, [r6, #0]
 8005c02:	f8c6 4003 	str.w	r4, [r6, #3]
						state_change_f = true;
 8005c06:	f889 3000 	strb.w	r3, [r9]
						buzzer_sound();
 8005c0a:	f7ff fe0f 	bl	800582c <buzzer_sound>
						system_state = STATE_DISARMED;
 8005c0e:	2302      	movs	r3, #2
 8005c10:	e70a      	b.n	8005a28 <manager_task+0x1bc>
				if(state_change_f)
 8005c12:	4b68      	ldr	r3, [pc, #416]	; (8005db4 <manager_task+0x548>)
 8005c14:	781a      	ldrb	r2, [r3, #0]
 8005c16:	b1d2      	cbz	r2, 8005c4e <manager_task+0x3e2>
					state_change_f = false;
 8005c18:	2600      	movs	r6, #0
					memset(lcd_data.text, '\0', LCD_BUFF_MAX_SIZE);
 8005c1a:	2220      	movs	r2, #32
 8005c1c:	4631      	mov	r1, r6
 8005c1e:	a821      	add	r0, sp, #132	; 0x84
					state_change_f = false;
 8005c20:	701e      	strb	r6, [r3, #0]
					memset(lcd_data.text, '\0', LCD_BUFF_MAX_SIZE);
 8005c22:	f000 fbfb 	bl	800641c <memset>
					memcpy(lcd_data.text, config_str, strlen(config_str));
 8005c26:	a816      	add	r0, sp, #88	; 0x58
 8005c28:	f7fa fab4 	bl	8000194 <strlen>
 8005c2c:	a916      	add	r1, sp, #88	; 0x58
 8005c2e:	4602      	mov	r2, r0
 8005c30:	a821      	add	r0, sp, #132	; 0x84
 8005c32:	f000 fbe5 	bl	8006400 <memcpy>
					lcd_data.crlf = true;
 8005c36:	2301      	movs	r3, #1
					xQueueSend(lcd_queue, (void*)&lcd_data, pdMS_TO_TICKS(100));
 8005c38:	485f      	ldr	r0, [pc, #380]	; (8005db8 <manager_task+0x54c>)
					lcd_data.crlf = true;
 8005c3a:	f88d 30a5 	strb.w	r3, [sp, #165]	; 0xa5
					lcd_data.led  = true;
 8005c3e:	f88d 30a6 	strb.w	r3, [sp, #166]	; 0xa6
					xQueueSend(lcd_queue, (void*)&lcd_data, pdMS_TO_TICKS(100));
 8005c42:	2264      	movs	r2, #100	; 0x64
 8005c44:	4633      	mov	r3, r6
 8005c46:	6800      	ldr	r0, [r0, #0]
 8005c48:	a921      	add	r1, sp, #132	; 0x84
 8005c4a:	f7fd ffaa 	bl	8003ba2 <xQueueGenericSend>
				msg_data msg_data_buf = {0};
 8005c4e:	2280      	movs	r2, #128	; 0x80
 8005c50:	495b      	ldr	r1, [pc, #364]	; (8005dc0 <manager_task+0x554>)
 8005c52:	a82a      	add	r0, sp, #168	; 0xa8
 8005c54:	f000 fbd4 	bl	8006400 <memcpy>
				if(xQueueReceive(msg_queue, (void*)&msg_data_buf, pdMS_TO_TICKS(100)) == pdTRUE)
 8005c58:	4b5a      	ldr	r3, [pc, #360]	; (8005dc4 <manager_task+0x558>)
 8005c5a:	2264      	movs	r2, #100	; 0x64
 8005c5c:	6818      	ldr	r0, [r3, #0]
 8005c5e:	a92a      	add	r1, sp, #168	; 0xa8
 8005c60:	f7fe f83c 	bl	8003cdc <xQueueReceive>
 8005c64:	2801      	cmp	r0, #1
 8005c66:	d17a      	bne.n	8005d5e <manager_task+0x4f2>
					char tel_num_new[13]  = {0};
 8005c68:	2600      	movs	r6, #0
					char passw_str_new[5] = {0};
 8005c6a:	f10d 0b20 	add.w	fp, sp, #32
					char mask_str[5] 	  = {0};
 8005c6e:	f10d 0a30 	add.w	sl, sp, #48	; 0x30
					char delay_str[5] 	  = {0};
 8005c72:	f10d 0938 	add.w	r9, sp, #56	; 0x38
					msg_data rsp_msg_data = {0};
 8005c76:	2280      	movs	r2, #128	; 0x80
 8005c78:	4951      	ldr	r1, [pc, #324]	; (8005dc0 <manager_task+0x554>)
 8005c7a:	a84a      	add	r0, sp, #296	; 0x128
					char tel_num_new[13]  = {0};
 8005c7c:	e9cd 661d 	strd	r6, r6, [sp, #116]	; 0x74
 8005c80:	961f      	str	r6, [sp, #124]	; 0x7c
 8005c82:	f88d 6080 	strb.w	r6, [sp, #128]	; 0x80
					char passw_str_old[5] = {0};
 8005c86:	960a      	str	r6, [sp, #40]	; 0x28
 8005c88:	f88d 602c 	strb.w	r6, [sp, #44]	; 0x2c
					char passw_str_new[5] = {0};
 8005c8c:	f8cb 6000 	str.w	r6, [fp]
 8005c90:	f88b 6004 	strb.w	r6, [fp, #4]
					char mask_str[5] 	  = {0};
 8005c94:	f8ca 6000 	str.w	r6, [sl]
 8005c98:	f88a 6004 	strb.w	r6, [sl, #4]
					char delay_str[5] 	  = {0};
 8005c9c:	f8c9 6000 	str.w	r6, [r9]
 8005ca0:	f889 6004 	strb.w	r6, [r9, #4]
					msg_data rsp_msg_data = {0};
 8005ca4:	f000 fbac 	bl	8006400 <memcpy>
					if(sscanf(msg_data_buf.text, "$%[^;];%[^;];%[^;];%[^;];%[^;];", tel_num_new, passw_str_old, passw_str_new, mask_str, delay_str) == 5)
 8005ca8:	e9cd a901 	strd	sl, r9, [sp, #4]
 8005cac:	4946      	ldr	r1, [pc, #280]	; (8005dc8 <manager_task+0x55c>)
 8005cae:	f8cd b000 	str.w	fp, [sp]
 8005cb2:	ab0a      	add	r3, sp, #40	; 0x28
 8005cb4:	aa1d      	add	r2, sp, #116	; 0x74
 8005cb6:	a82a      	add	r0, sp, #168	; 0xa8
 8005cb8:	f000 fbd8 	bl	800646c <siscanf>
 8005cbc:	2805      	cmp	r0, #5
 8005cbe:	d16d      	bne.n	8005d9c <manager_task+0x530>
						uint16_t old_pw = atoi(passw_str_old);
 8005cc0:	a80a      	add	r0, sp, #40	; 0x28
 8005cc2:	f000 fb5f 	bl	8006384 <atoi>
						if(config.password == old_pw)
 8005cc6:	4e3d      	ldr	r6, [pc, #244]	; (8005dbc <manager_task+0x550>)
 8005cc8:	b280      	uxth	r0, r0
 8005cca:	f8b6 300d 	ldrh.w	r3, [r6, #13]
 8005cce:	4283      	cmp	r3, r0
 8005cd0:	d145      	bne.n	8005d5e <manager_task+0x4f2>
							memcpy(config.tel_num, tel_num_new, sizeof(tel_num_new));
 8005cd2:	4632      	mov	r2, r6
 8005cd4:	ab1d      	add	r3, sp, #116	; 0x74
 8005cd6:	f10d 0c7c 	add.w	ip, sp, #124	; 0x7c
 8005cda:	461d      	mov	r5, r3
 8005cdc:	cd03      	ldmia	r5!, {r0, r1}
 8005cde:	4565      	cmp	r5, ip
 8005ce0:	6010      	str	r0, [r2, #0]
 8005ce2:	6051      	str	r1, [r2, #4]
 8005ce4:	462b      	mov	r3, r5
 8005ce6:	f102 0208 	add.w	r2, r2, #8
 8005cea:	d1f6      	bne.n	8005cda <manager_task+0x46e>
 8005cec:	6828      	ldr	r0, [r5, #0]
 8005cee:	6010      	str	r0, [r2, #0]
 8005cf0:	792b      	ldrb	r3, [r5, #4]
							config.password 		= atoi(passw_str_new);
 8005cf2:	4658      	mov	r0, fp
							memcpy(config.tel_num, tel_num_new, sizeof(tel_num_new));
 8005cf4:	7113      	strb	r3, [r2, #4]
							config.password 		= atoi(passw_str_new);
 8005cf6:	f000 fb45 	bl	8006384 <atoi>
 8005cfa:	f8a6 000d 	strh.w	r0, [r6, #13]
							config.sensor_mask 		= atoi(mask_str);
 8005cfe:	4650      	mov	r0, sl
 8005d00:	f000 fb40 	bl	8006384 <atoi>
 8005d04:	f8a6 000f 	strh.w	r0, [r6, #15]
							config.arming_delay 	= atoi(delay_str);
 8005d08:	4648      	mov	r0, r9
 8005d0a:	f000 fb3b 	bl	8006384 <atoi>
 8005d0e:	f8a6 0011 	strh.w	r0, [r6, #17]
							config_save();
 8005d12:	f7ff fb27 	bl	8005364 <config_save>
							sprintf(rsp_msg_data.text, "CONFIG OK");
 8005d16:	492d      	ldr	r1, [pc, #180]	; (8005dcc <manager_task+0x560>)
 8005d18:	a84a      	add	r0, sp, #296	; 0x128
 8005d1a:	f000 fbd3 	bl	80064c4 <strcpy>
							xQueueSend(rsp_msg_queue, (void*)&rsp_msg_data, pdMS_TO_TICKS(100));
 8005d1e:	482c      	ldr	r0, [pc, #176]	; (8005dd0 <manager_task+0x564>)
 8005d20:	2300      	movs	r3, #0
 8005d22:	2264      	movs	r2, #100	; 0x64
 8005d24:	a94a      	add	r1, sp, #296	; 0x128
 8005d26:	6800      	ldr	r0, [r0, #0]
 8005d28:	f7fd ff3b 	bl	8003ba2 <xQueueGenericSend>
							vTaskDelay(pdMS_TO_TICKS(5000));
 8005d2c:	f241 3088 	movw	r0, #5000	; 0x1388
 8005d30:	f7fe fc38 	bl	80045a4 <vTaskDelay>
							memset(key_buffer, '\0', sizeof(key_buffer));
 8005d34:	2500      	movs	r5, #0
							state_change_f = true;
 8005d36:	2201      	movs	r2, #1
 8005d38:	4b1e      	ldr	r3, [pc, #120]	; (8005db4 <manager_task+0x548>)
							xQueueSend(config_queue, (void*)&config_state, pdMS_TO_TICKS(100));
 8005d3a:	4826      	ldr	r0, [pc, #152]	; (8005dd4 <manager_task+0x568>)
							state_change_f = true;
 8005d3c:	701a      	strb	r2, [r3, #0]
							xQueueSend(config_queue, (void*)&config_state, pdMS_TO_TICKS(100));
 8005d3e:	f10d 0117 	add.w	r1, sp, #23
 8005d42:	462b      	mov	r3, r5
 8005d44:	2264      	movs	r2, #100	; 0x64
 8005d46:	6800      	ldr	r0, [r0, #0]
							memset(key_buffer, '\0', sizeof(key_buffer));
 8005d48:	9514      	str	r5, [sp, #80]	; 0x50
							bool config_state = false;
 8005d4a:	f88d 5017 	strb.w	r5, [sp, #23]
							memset(key_buffer, '\0', sizeof(key_buffer));
 8005d4e:	f8cd 5053 	str.w	r5, [sp, #83]	; 0x53
							xQueueSend(config_queue, (void*)&config_state, pdMS_TO_TICKS(100));
 8005d52:	f7fd ff26 	bl	8003ba2 <xQueueGenericSend>
							buzzer_sound();
 8005d56:	f7ff fd69 	bl	800582c <buzzer_sound>
							system_state = STATE_DISARMED;
 8005d5a:	2302      	movs	r3, #2
 8005d5c:	703b      	strb	r3, [r7, #0]
				if(key_pressed)
 8005d5e:	2c00      	cmp	r4, #0
 8005d60:	f43f aeea 	beq.w	8005b38 <manager_task+0x2cc>
					if(strcmp(key_buffer, "*0#") == 0)
 8005d64:	491c      	ldr	r1, [pc, #112]	; (8005dd8 <manager_task+0x56c>)
 8005d66:	a814      	add	r0, sp, #80	; 0x50
 8005d68:	f7fa fa0a 	bl	8000180 <strcmp>
 8005d6c:	4604      	mov	r4, r0
 8005d6e:	2800      	cmp	r0, #0
 8005d70:	f47f aee2 	bne.w	8005b38 <manager_task+0x2cc>
						state_change_f 		= true;
 8005d74:	2501      	movs	r5, #1
						xQueueSend(config_queue, (void*)&config_state, pdMS_TO_TICKS(100));
 8005d76:	4603      	mov	r3, r0
						memset(key_buffer, '\0', sizeof(key_buffer));
 8005d78:	9014      	str	r0, [sp, #80]	; 0x50
 8005d7a:	f8cd 0053 	str.w	r0, [sp, #83]	; 0x53
						xQueueSend(config_queue, (void*)&config_state, pdMS_TO_TICKS(100));
 8005d7e:	4815      	ldr	r0, [pc, #84]	; (8005dd4 <manager_task+0x568>)
						state_change_f 		= true;
 8005d80:	4e0c      	ldr	r6, [pc, #48]	; (8005db4 <manager_task+0x548>)
						xQueueSend(config_queue, (void*)&config_state, pdMS_TO_TICKS(100));
 8005d82:	2264      	movs	r2, #100	; 0x64
 8005d84:	6800      	ldr	r0, [r0, #0]
 8005d86:	a94a      	add	r1, sp, #296	; 0x128
						state_change_f 		= true;
 8005d88:	7035      	strb	r5, [r6, #0]
						bool config_state 	= true;
 8005d8a:	f88d 5128 	strb.w	r5, [sp, #296]	; 0x128
						xQueueSend(config_queue, (void*)&config_state, pdMS_TO_TICKS(100));
 8005d8e:	f7fd ff08 	bl	8003ba2 <xQueueGenericSend>
						system_state 	= STATE_DISARMED;
 8005d92:	2302      	movs	r3, #2
						state_change_f 	= true;
 8005d94:	7035      	strb	r5, [r6, #0]
						system_state 	= STATE_DISARMED;
 8005d96:	703b      	strb	r3, [r7, #0]
						key_cnt = 0;
 8005d98:	4625      	mov	r5, r4
 8005d9a:	e6cd      	b.n	8005b38 <manager_task+0x2cc>
						sprintf(rsp_msg_data.text, "CONFIG NOK");
 8005d9c:	490f      	ldr	r1, [pc, #60]	; (8005ddc <manager_task+0x570>)
 8005d9e:	a84a      	add	r0, sp, #296	; 0x128
 8005da0:	f000 fb90 	bl	80064c4 <strcpy>
						xQueueSend(rsp_msg_queue, (void*)&rsp_msg_data, pdMS_TO_TICKS(100));
 8005da4:	480a      	ldr	r0, [pc, #40]	; (8005dd0 <manager_task+0x564>)
 8005da6:	4633      	mov	r3, r6
 8005da8:	2264      	movs	r2, #100	; 0x64
 8005daa:	a94a      	add	r1, sp, #296	; 0x128
 8005dac:	6800      	ldr	r0, [r0, #0]
 8005dae:	f7fd fef8 	bl	8003ba2 <xQueueGenericSend>
 8005db2:	e7d4      	b.n	8005d5e <manager_task+0x4f2>
 8005db4:	20002dec 	.word	0x20002dec
 8005db8:	20002c80 	.word	0x20002c80
 8005dbc:	20002d1c 	.word	0x20002d1c
 8005dc0:	08007754 	.word	0x08007754
 8005dc4:	20002c84 	.word	0x20002c84
 8005dc8:	08007a20 	.word	0x08007a20
 8005dcc:	08007a40 	.word	0x08007a40
 8005dd0:	20002c8c 	.word	0x20002c8c
 8005dd4:	20002c74 	.word	0x20002c74
 8005dd8:	08007a09 	.word	0x08007a09
 8005ddc:	08007a4a 	.word	0x08007a4a

08005de0 <gsm_task>:

	configASSERT(result == pdPASS);
}

void gsm_task(void * params)
{
 8005de0:	b5f0      	push	{r4, r5, r6, r7, lr}

	m66_ctrl_struct.data_send = send_data;
 8005de2:	4855      	ldr	r0, [pc, #340]	; (8005f38 <gsm_task+0x158>)
 8005de4:	4b55      	ldr	r3, [pc, #340]	; (8005f3c <gsm_task+0x15c>)
{
 8005de6:	b0a3      	sub	sp, #140	; 0x8c
	m66_ctrl_struct.data_send = send_data;
 8005de8:	6043      	str	r3, [r0, #4]
	m66_ctrl_struct.pwrkey_switch = powerkey_switch;
 8005dea:	4b55      	ldr	r3, [pc, #340]	; (8005f40 <gsm_task+0x160>)
	taskEXIT_CRITICAL();

	while(1)
	{

		if(xQueueReceive(config_queue, (void*)&config_state, pdMS_TO_TICKS(100)) == pdTRUE)
 8005dec:	4f55      	ldr	r7, [pc, #340]	; (8005f44 <gsm_task+0x164>)
	m66_ctrl_struct.pwrkey_switch = powerkey_switch;
 8005dee:	6003      	str	r3, [r0, #0]
	m66_ctrl_struct.delay = delay_gsm;
 8005df0:	4b55      	ldr	r3, [pc, #340]	; (8005f48 <gsm_task+0x168>)
		if(xQueueReceive(config_queue, (void*)&config_state, pdMS_TO_TICKS(100)) == pdTRUE)
 8005df2:	4d56      	ldr	r5, [pc, #344]	; (8005f4c <gsm_task+0x16c>)
	m66_ctrl_struct.delay = delay_gsm;
 8005df4:	6083      	str	r3, [r0, #8]
	M66_ctrl_init(&m66_ctrl_struct);
 8005df6:	f7ff f86b 	bl	8004ed0 <M66_ctrl_init>
	taskENTER_CRITICAL();
 8005dfa:	f7fe fde3 	bl	80049c4 <vPortEnterCritical>
	status = HAL_UART_Receive_DMA(&huart2, &data_byte, 1);
 8005dfe:	2201      	movs	r2, #1
 8005e00:	4953      	ldr	r1, [pc, #332]	; (8005f50 <gsm_task+0x170>)
 8005e02:	4854      	ldr	r0, [pc, #336]	; (8005f54 <gsm_task+0x174>)
 8005e04:	f7fd fd86 	bl	8003914 <HAL_UART_Receive_DMA>
	taskEXIT_CRITICAL();
 8005e08:	f7fe fdec 	bl	80049e4 <vPortExitCritical>
 8005e0c:	4c52      	ldr	r4, [pc, #328]	; (8005f58 <gsm_task+0x178>)
		if(xQueueReceive(config_queue, (void*)&config_state, pdMS_TO_TICKS(100)) == pdTRUE)
 8005e0e:	2264      	movs	r2, #100	; 0x64
 8005e10:	4629      	mov	r1, r5
 8005e12:	6838      	ldr	r0, [r7, #0]
 8005e14:	f7fd ff62 	bl	8003cdc <xQueueReceive>
 8005e18:	2801      	cmp	r0, #1
 8005e1a:	d114      	bne.n	8005e46 <gsm_task+0x66>
		{
			gsm_sm = GSM_MODULE_START;
 8005e1c:	2303      	movs	r3, #3
 8005e1e:	7023      	strb	r3, [r4, #0]

		switch(gsm_sm)
		{
			case GSM_MODULE_START:
			{
				if(M66_at() != CMD_OK)
 8005e20:	f7ff f898 	bl	8004f54 <M66_at>
 8005e24:	b108      	cbz	r0, 8005e2a <gsm_task+0x4a>
				{
					M66_hw_reset();
 8005e26:	f7ff f87d 	bl	8004f24 <M66_hw_reset>
				}
				/*Go to the next state based on the device mode*/
				if(config_state)
 8005e2a:	782b      	ldrb	r3, [r5, #0]
 8005e2c:	b303      	cbz	r3, 8005e70 <gsm_task+0x90>
				{
					gsm_sm = BT_CONFIGURE;
 8005e2e:	2300      	movs	r3, #0

				break;
			}
			default:
			{
				gsm_sm = GSM_MODULE_START;
 8005e30:	7023      	strb	r3, [r4, #0]
				break;
			}
		}


		if(!circbuffer_is_emtpy())
 8005e32:	f7ff fa41 	bl	80052b8 <circbuffer_is_emtpy>
 8005e36:	b908      	cbnz	r0, 8005e3c <gsm_task+0x5c>
		{
			M66_check_URC();
 8005e38:	f7ff f850 	bl	8004edc <M66_check_URC>
		}

		/*Collect data from the system and control the state*/
		vTaskDelay(pdMS_TO_TICKS(500));
 8005e3c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8005e40:	f7fe fbb0 	bl	80045a4 <vTaskDelay>
		if(xQueueReceive(config_queue, (void*)&config_state, pdMS_TO_TICKS(100)) == pdTRUE)
 8005e44:	e7e3      	b.n	8005e0e <gsm_task+0x2e>
		switch(gsm_sm)
 8005e46:	7823      	ldrb	r3, [r4, #0]
 8005e48:	2b06      	cmp	r3, #6
 8005e4a:	d835      	bhi.n	8005eb8 <gsm_task+0xd8>
 8005e4c:	a201      	add	r2, pc, #4	; (adr r2, 8005e54 <gsm_task+0x74>)
 8005e4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e52:	bf00      	nop
 8005e54:	08005e75 	.word	0x08005e75
 8005e58:	08005e8b 	.word	0x08005e8b
 8005e5c:	08005e8f 	.word	0x08005e8f
 8005e60:	08005e21 	.word	0x08005e21
 8005e64:	08005ebd 	.word	0x08005ebd
 8005e68:	08005edb 	.word	0x08005edb
 8005e6c:	08005f05 	.word	0x08005f05
					gsm_sm = GSM_CHECK_CREDENTIALS;
 8005e70:	2304      	movs	r3, #4
 8005e72:	e7dd      	b.n	8005e30 <gsm_task+0x50>
				M66_set_bt_state(1);
 8005e74:	2001      	movs	r0, #1
 8005e76:	f7ff f967 	bl	8005148 <M66_set_bt_state>
				M66_set_bt_name("ALARM");
 8005e7a:	4838      	ldr	r0, [pc, #224]	; (8005f5c <gsm_task+0x17c>)
 8005e7c:	f7ff f984 	bl	8005188 <M66_set_bt_name>
				M66_set_bt_visibility(1);
 8005e80:	2001      	movs	r0, #1
 8005e82:	f7ff f9a1 	bl	80051c8 <M66_set_bt_visibility>
				gsm_sm = BT_CONNECT;
 8005e86:	2301      	movs	r3, #1
 8005e88:	e7d2      	b.n	8005e30 <gsm_task+0x50>
				gsm_sm = BT_CONNECTED;
 8005e8a:	2302      	movs	r3, #2
 8005e8c:	e7d0      	b.n	8005e30 <gsm_task+0x50>
				msg_data rsp_msg = {0};
 8005e8e:	2280      	movs	r2, #128	; 0x80
 8005e90:	4933      	ldr	r1, [pc, #204]	; (8005f60 <gsm_task+0x180>)
 8005e92:	a802      	add	r0, sp, #8
 8005e94:	f000 fab4 	bl	8006400 <memcpy>
				if(xQueueReceive(rsp_msg_queue, (void*)&rsp_msg, pdMS_TO_TICKS(100)) == pdTRUE)
 8005e98:	4b32      	ldr	r3, [pc, #200]	; (8005f64 <gsm_task+0x184>)
 8005e9a:	2264      	movs	r2, #100	; 0x64
 8005e9c:	6818      	ldr	r0, [r3, #0]
 8005e9e:	a902      	add	r1, sp, #8
 8005ea0:	f7fd ff1c 	bl	8003cdc <xQueueReceive>
 8005ea4:	2801      	cmp	r0, #1
 8005ea6:	d102      	bne.n	8005eae <gsm_task+0xce>
					M66_send_bt_data(rsp_msg.text);
 8005ea8:	a802      	add	r0, sp, #8
 8005eaa:	f7ff f9ad 	bl	8005208 <M66_send_bt_data>
				if(!config_state)
 8005eae:	7828      	ldrb	r0, [r5, #0]
 8005eb0:	2800      	cmp	r0, #0
 8005eb2:	d1be      	bne.n	8005e32 <gsm_task+0x52>
					M66_set_bt_state(0);
 8005eb4:	f7ff f948 	bl	8005148 <M66_set_bt_state>
				gsm_sm = GSM_MODULE_START;
 8005eb8:	2303      	movs	r3, #3
 8005eba:	e7b9      	b.n	8005e30 <gsm_task+0x50>
				bool status = true;
 8005ebc:	2601      	movs	r6, #1
 8005ebe:	f88d 6008 	strb.w	r6, [sp, #8]
				M66_disable_echo();
 8005ec2:	f7ff f85f 	bl	8004f84 <M66_disable_echo>
				M66_check_pin(&status);
 8005ec6:	a802      	add	r0, sp, #8
 8005ec8:	f7ff f86e 	bl	8004fa8 <M66_check_pin>
				 M66_set_mode(1);
 8005ecc:	4630      	mov	r0, r6
 8005ece:	f7ff f8f1 	bl	80050b4 <M66_set_mode>
				M66_save_config();
 8005ed2:	f7ff f89d 	bl	8005010 <M66_save_config>
				gsm_sm = GSM_CONNECT;
 8005ed6:	2305      	movs	r3, #5
 8005ed8:	e7aa      	b.n	8005e30 <gsm_task+0x50>
				M66_switch_radio(1);
 8005eda:	2001      	movs	r0, #1
 8005edc:	f7ff f878 	bl	8004fd0 <M66_switch_radio>
				M66_select_operator(21670);
 8005ee0:	f245 40a6 	movw	r0, #21670	; 0x54a6
 8005ee4:	f7ff f8a6 	bl	8005034 <M66_select_operator>
				uint8_t netstat = 0;
 8005ee8:	2300      	movs	r3, #0
				M66_query_network_status(&netstat);
 8005eea:	a802      	add	r0, sp, #8
				uint8_t netstat = 0;
 8005eec:	f88d 3008 	strb.w	r3, [sp, #8]
				M66_query_network_status(&netstat);
 8005ef0:	f7ff f8c0 	bl	8005074 <M66_query_network_status>
				if((netstat == 1) || (netstat == 5))
 8005ef4:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8005ef8:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
 8005efc:	2b01      	cmp	r3, #1
 8005efe:	d198      	bne.n	8005e32 <gsm_task+0x52>
					gsm_sm = GSM_CONNECTED;
 8005f00:	2306      	movs	r3, #6
 8005f02:	e795      	b.n	8005e30 <gsm_task+0x50>
				msg_data sms_msg = {0};
 8005f04:	2280      	movs	r2, #128	; 0x80
 8005f06:	4916      	ldr	r1, [pc, #88]	; (8005f60 <gsm_task+0x180>)
 8005f08:	a802      	add	r0, sp, #8
 8005f0a:	f000 fa79 	bl	8006400 <memcpy>
				if(xQueueReceive(sms_queue, (void*)&sms_msg, pdMS_TO_TICKS(100)) == pdTRUE)
 8005f0e:	4b16      	ldr	r3, [pc, #88]	; (8005f68 <gsm_task+0x188>)
 8005f10:	2264      	movs	r2, #100	; 0x64
 8005f12:	6818      	ldr	r0, [r3, #0]
 8005f14:	a902      	add	r1, sp, #8
 8005f16:	f7fd fee1 	bl	8003cdc <xQueueReceive>
 8005f1a:	2801      	cmp	r0, #1
 8005f1c:	d103      	bne.n	8005f26 <gsm_task+0x146>
					M66_send_sms(config.tel_num, sms_msg.text);
 8005f1e:	4813      	ldr	r0, [pc, #76]	; (8005f6c <gsm_task+0x18c>)
 8005f20:	a902      	add	r1, sp, #8
 8005f22:	f7ff f8e7 	bl	80050f4 <M66_send_sms>
				uint8_t netstat = 0;
 8005f26:	2300      	movs	r3, #0
				M66_query_network_status(&netstat);
 8005f28:	f10d 0007 	add.w	r0, sp, #7
				uint8_t netstat = 0;
 8005f2c:	f88d 3007 	strb.w	r3, [sp, #7]
				M66_query_network_status(&netstat);
 8005f30:	f7ff f8a0 	bl	8005074 <M66_query_network_status>
					gsm_sm = GSM_MODULE_START;
 8005f34:	e7c0      	b.n	8005eb8 <gsm_task+0xd8>
 8005f36:	bf00      	nop
 8005f38:	20002df0 	.word	0x20002df0
 8005f3c:	08005fa1 	.word	0x08005fa1
 8005f40:	08005f81 	.word	0x08005f81
 8005f44:	20002c74 	.word	0x20002c74
 8005f48:	08005f71 	.word	0x08005f71
 8005f4c:	20002dee 	.word	0x20002dee
 8005f50:	20002def 	.word	0x20002def
 8005f54:	200002f0 	.word	0x200002f0
 8005f58:	20000055 	.word	0x20000055
 8005f5c:	08007a5e 	.word	0x08007a5e
 8005f60:	080077d4 	.word	0x080077d4
 8005f64:	20002c8c 	.word	0x20002c8c
 8005f68:	20002c90 	.word	0x20002c90
 8005f6c:	20002d1c 	.word	0x20002d1c

08005f70 <delay_gsm>:
	return (HAL_UART_Transmit(&huart2, data, len, 2000) == HAL_OK) ? true : false;
}

void delay_gsm(uint32_t delay_ms)
{
	vTaskDelay(pdMS_TO_TICKS(delay_ms));
 8005f70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005f74:	4358      	muls	r0, r3
 8005f76:	fbb0 f0f3 	udiv	r0, r0, r3
 8005f7a:	f7fe bb13 	b.w	80045a4 <vTaskDelay>
	...

08005f80 <powerkey_switch>:
{
 8005f80:	b510      	push	{r4, lr}
 8005f82:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 8005f84:	f7fe fd1e 	bl	80049c4 <vPortEnterCritical>
	HAL_GPIO_WritePin(PWRKEY_GPIO_Port, PWRKEY_Pin, pin_state);
 8005f88:	4622      	mov	r2, r4
 8005f8a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005f8e:	4803      	ldr	r0, [pc, #12]	; (8005f9c <powerkey_switch+0x1c>)
 8005f90:	f7fc f89a 	bl	80020c8 <HAL_GPIO_WritePin>
}
 8005f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	taskEXIT_CRITICAL();
 8005f98:	f7fe bd24 	b.w	80049e4 <vPortExitCritical>
 8005f9c:	40020000 	.word	0x40020000

08005fa0 <send_data>:
{
 8005fa0:	460a      	mov	r2, r1
 8005fa2:	b508      	push	{r3, lr}
	return (HAL_UART_Transmit(&huart2, data, len, 2000) == HAL_OK) ? true : false;
 8005fa4:	4601      	mov	r1, r0
 8005fa6:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8005faa:	4803      	ldr	r0, [pc, #12]	; (8005fb8 <send_data+0x18>)
 8005fac:	f7fd fbc8 	bl	8003740 <HAL_UART_Transmit>
}
 8005fb0:	fab0 f080 	clz	r0, r0
 8005fb4:	0940      	lsrs	r0, r0, #5
 8005fb6:	bd08      	pop	{r3, pc}
 8005fb8:	200002f0 	.word	0x200002f0

08005fbc <gsm_task_create>:
{
 8005fbc:	b507      	push	{r0, r1, r2, lr}
	result = xTaskCreate(gsm_task,
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	2204      	movs	r2, #4
 8005fc2:	4905      	ldr	r1, [pc, #20]	; (8005fd8 <gsm_task_create+0x1c>)
 8005fc4:	e9cd 2300 	strd	r2, r3, [sp]
 8005fc8:	4804      	ldr	r0, [pc, #16]	; (8005fdc <gsm_task_create+0x20>)
 8005fca:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8005fce:	f7fe f827 	bl	8004020 <xTaskCreate>
}
 8005fd2:	b003      	add	sp, #12
 8005fd4:	f85d fb04 	ldr.w	pc, [sp], #4
 8005fd8:	08007a6b 	.word	0x08007a6b
 8005fdc:	08005de1 	.word	0x08005de1

08005fe0 <HAL_UART_RxCpltCallback>:
	//HAL_Delay(delay);
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8005fe0:	b510      	push	{r4, lr}
        __asm volatile
 8005fe2:	f3ef 8411 	mrs	r4, BASEPRI
 8005fe6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fea:	f383 8811 	msr	BASEPRI, r3
 8005fee:	f3bf 8f6f 	isb	sy
 8005ff2:	f3bf 8f4f 	dsb	sy
	UBaseType_t uxSavedInterruptStatus;
	uxSavedInterruptStatus = taskENTER_CRITICAL_FROM_ISR();
	circbuffer_insert(&data_byte, 1);
 8005ff6:	2101      	movs	r1, #1
 8005ff8:	4802      	ldr	r0, [pc, #8]	; (8006004 <HAL_UART_RxCpltCallback+0x24>)
 8005ffa:	f7ff f913 	bl	8005224 <circbuffer_insert>
        __asm volatile
 8005ffe:	f384 8811 	msr	BASEPRI, r4
	taskEXIT_CRITICAL_FROM_ISR(uxSavedInterruptStatus);
}
 8006002:	bd10      	pop	{r4, pc}
 8006004:	20002def 	.word	0x20002def

08006008 <io_task>:

	configASSERT(result == pdPASS);
}

void io_task(void * params)
{
 8006008:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
		uint32_t adc_val = 0;
		float adc_val_f = 0.0f;
		HAL_ADC_Start(&hadc);
		HAL_ADC_PollForConversion(&hadc, 5000);
		adc_val = HAL_ADC_GetValue(&hadc);
		adc_val_f = adc_val * (3300.0 / 4095.0);
 800600c:	a720      	add	r7, pc, #128	; (adr r7, 8006090 <io_task+0x88>)
 800600e:	e9d7 6700 	ldrd	r6, r7, [r7]
		HAL_ADC_Start(&hadc);
 8006012:	f8df 8084 	ldr.w	r8, [pc, #132]	; 8006098 <io_task+0x90>
		io_data.vbat = ((adc_val_f * (10000.0f + 1000.f)) / (1000.0f)) / 1000.0;
 8006016:	f8df 9084 	ldr.w	r9, [pc, #132]	; 800609c <io_task+0x94>
		io_state_data 	io_data 	= {0};
 800601a:	2400      	movs	r4, #0
		HAL_ADC_Start(&hadc);
 800601c:	4640      	mov	r0, r8
		io_state_data 	io_data 	= {0};
 800601e:	e9cd 4400 	strd	r4, r4, [sp]
		HAL_ADC_Start(&hadc);
 8006022:	f7fb fd09 	bl	8001a38 <HAL_ADC_Start>
		HAL_ADC_PollForConversion(&hadc, 5000);
 8006026:	f241 3188 	movw	r1, #5000	; 0x1388
 800602a:	4640      	mov	r0, r8
 800602c:	f7fb fbc2 	bl	80017b4 <HAL_ADC_PollForConversion>
		adc_val = HAL_ADC_GetValue(&hadc);
 8006030:	4640      	mov	r0, r8
 8006032:	f7fb fc15 	bl	8001860 <HAL_ADC_GetValue>
		adc_val_f = adc_val * (3300.0 / 4095.0);
 8006036:	f7fa fb21 	bl	800067c <__aeabi_ui2d>
 800603a:	4632      	mov	r2, r6
 800603c:	463b      	mov	r3, r7
 800603e:	f7fa f8b1 	bl	80001a4 <__aeabi_dmul>
 8006042:	f7fa fb95 	bl	8000770 <__aeabi_d2f>
		io_data.vbat = ((adc_val_f * (10000.0f + 1000.f)) / (1000.0f)) / 1000.0;
 8006046:	4916      	ldr	r1, [pc, #88]	; (80060a0 <io_task+0x98>)
 8006048:	f7fa fbe2 	bl	8000810 <__aeabi_fmul>
 800604c:	4649      	mov	r1, r9
 800604e:	f7fa fc93 	bl	8000978 <__aeabi_fdiv>
 8006052:	4649      	mov	r1, r9
 8006054:	f7fa fc90 	bl	8000978 <__aeabi_fdiv>
 8006058:	4d12      	ldr	r5, [pc, #72]	; (80060a4 <io_task+0x9c>)
 800605a:	9000      	str	r0, [sp, #0]

		for(uint8_t i = 0;i < 9;i++)
		{
			io_data.io_state = HAL_GPIO_ReadPin(io_struct[i].GPIO_Port, io_struct[i].GPIO_Pin) << i;
 800605c:	8829      	ldrh	r1, [r5, #0]
 800605e:	6868      	ldr	r0, [r5, #4]
 8006060:	f7fc f82c 	bl	80020bc <HAL_GPIO_ReadPin>
 8006064:	40a0      	lsls	r0, r4
		for(uint8_t i = 0;i < 9;i++)
 8006066:	3401      	adds	r4, #1
 8006068:	2c09      	cmp	r4, #9
			io_data.io_state = HAL_GPIO_ReadPin(io_struct[i].GPIO_Port, io_struct[i].GPIO_Pin) << i;
 800606a:	f8ad 0004 	strh.w	r0, [sp, #4]
		for(uint8_t i = 0;i < 9;i++)
 800606e:	f105 0508 	add.w	r5, r5, #8
 8006072:	d1f3      	bne.n	800605c <io_task+0x54>
		}

		xQueueSend(io_queue, (void*)&io_data, pdMS_TO_TICKS(100));
 8006074:	480c      	ldr	r0, [pc, #48]	; (80060a8 <io_task+0xa0>)
 8006076:	2300      	movs	r3, #0
 8006078:	2264      	movs	r2, #100	; 0x64
 800607a:	4669      	mov	r1, sp
 800607c:	6800      	ldr	r0, [r0, #0]
 800607e:	f7fd fd90 	bl	8003ba2 <xQueueGenericSend>

		vTaskDelay(pdMS_TO_TICKS(500));
 8006082:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8006086:	f7fe fa8d 	bl	80045a4 <vTaskDelay>
	{
 800608a:	e7c6      	b.n	800601a <io_task+0x12>
 800608c:	f3af 8000 	nop.w
 8006090:	99c99c9a 	.word	0x99c99c9a
 8006094:	3fe9c99c 	.word	0x3fe9c99c
 8006098:	20000120 	.word	0x20000120
 800609c:	447a0000 	.word	0x447a0000
 80060a0:	462be000 	.word	0x462be000
 80060a4:	20000058 	.word	0x20000058
 80060a8:	20002c78 	.word	0x20002c78

080060ac <io_task_create>:
{
 80060ac:	b507      	push	{r0, r1, r2, lr}
	result = xTaskCreate(io_task,
 80060ae:	2300      	movs	r3, #0
 80060b0:	2203      	movs	r2, #3
 80060b2:	4905      	ldr	r1, [pc, #20]	; (80060c8 <io_task_create+0x1c>)
 80060b4:	e9cd 2300 	strd	r2, r3, [sp]
 80060b8:	4804      	ldr	r0, [pc, #16]	; (80060cc <io_task_create+0x20>)
 80060ba:	22c8      	movs	r2, #200	; 0xc8
 80060bc:	f7fd ffb0 	bl	8004020 <xTaskCreate>
}
 80060c0:	b003      	add	sp, #12
 80060c2:	f85d fb04 	ldr.w	pc, [sp], #4
 80060c6:	bf00      	nop
 80060c8:	08007a71 	.word	0x08007a71
 80060cc:	08006009 	.word	0x08006009

080060d0 <lcd_task>:

	configASSERT(result == pdPASS);
}

void lcd_task(void * params)
{
 80060d0:	b500      	push	{lr}
	lcd_i2c.i2c_write 	= i2c_write;
 80060d2:	4819      	ldr	r0, [pc, #100]	; (8006138 <lcd_task+0x68>)
 80060d4:	4b19      	ldr	r3, [pc, #100]	; (800613c <lcd_task+0x6c>)
{
 80060d6:	b08b      	sub	sp, #44	; 0x2c
	lcd_i2c.i2c_write 	= i2c_write;
 80060d8:	6003      	str	r3, [r0, #0]
	lcd_i2c.i2c_read 	= i2c_read;
 80060da:	4b19      	ldr	r3, [pc, #100]	; (8006140 <lcd_task+0x70>)

	while(1)
	{
		/*Wait until data is received then print it on the LCD screen*/
		lcd_data data = {0};
		xQueueReceive(lcd_queue, (void*)&data, pdMS_TO_TICKS(portMAX_DELAY));
 80060dc:	4c19      	ldr	r4, [pc, #100]	; (8006144 <lcd_task+0x74>)
	lcd_i2c.i2c_read 	= i2c_read;
 80060de:	6043      	str	r3, [r0, #4]
	lcd_i2c.delay 		= i2c_delay;
 80060e0:	4b19      	ldr	r3, [pc, #100]	; (8006148 <lcd_task+0x78>)
		xQueueReceive(lcd_queue, (void*)&data, pdMS_TO_TICKS(portMAX_DELAY));
 80060e2:	4d1a      	ldr	r5, [pc, #104]	; (800614c <lcd_task+0x7c>)
	lcd_i2c.delay 		= i2c_delay;
 80060e4:	6083      	str	r3, [r0, #8]
	LCD_I2C_init(&lcd_i2c);
 80060e6:	f7ff fa1b 	bl	8005520 <LCD_I2C_init>
	LCD_init();
 80060ea:	f7ff fa21 	bl	8005530 <LCD_init>
		lcd_data data = {0};
 80060ee:	2223      	movs	r2, #35	; 0x23
 80060f0:	2100      	movs	r1, #0
 80060f2:	a801      	add	r0, sp, #4
 80060f4:	f000 f992 	bl	800641c <memset>
		xQueueReceive(lcd_queue, (void*)&data, pdMS_TO_TICKS(portMAX_DELAY));
 80060f8:	462a      	mov	r2, r5
 80060fa:	a901      	add	r1, sp, #4
 80060fc:	6820      	ldr	r0, [r4, #0]
 80060fe:	f7fd fded 	bl	8003cdc <xQueueReceive>
		taskENTER_CRITICAL();
 8006102:	f7fe fc5f 	bl	80049c4 <vPortEnterCritical>
		if(data.clr)
 8006106:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
 800610a:	b10b      	cbz	r3, 8006110 <lcd_task+0x40>
		{
			LCD_clear();
 800610c:	f7ff fa86 	bl	800561c <LCD_clear>
		}
		LCD_write(data.text, strlen(data.text));
 8006110:	a801      	add	r0, sp, #4
 8006112:	f7fa f83f 	bl	8000194 <strlen>
 8006116:	b2c1      	uxtb	r1, r0
 8006118:	a801      	add	r0, sp, #4
 800611a:	f7ff fa4b 	bl	80055b4 <LCD_write>
		if(data.crlf)
 800611e:	f89d 3025 	ldrb.w	r3, [sp, #37]	; 0x25
 8006122:	b10b      	cbz	r3, 8006128 <lcd_task+0x58>
		{
			LCD_next_line();
 8006124:	f7ff fa94 	bl	8005650 <LCD_next_line>
		}

		LCD_light_switch(data.led);
 8006128:	f89d 0026 	ldrb.w	r0, [sp, #38]	; 0x26
 800612c:	f7ff fa94 	bl	8005658 <LCD_light_switch>

		taskEXIT_CRITICAL();
 8006130:	f7fe fc58 	bl	80049e4 <vPortExitCritical>
	{
 8006134:	e7db      	b.n	80060ee <lcd_task+0x1e>
 8006136:	bf00      	nop
 8006138:	20002dfc 	.word	0x20002dfc
 800613c:	08006151 	.word	0x08006151
 8006140:	08006175 	.word	0x08006175
 8006144:	20002c80 	.word	0x20002c80
 8006148:	080061b5 	.word	0x080061b5
 800614c:	00418936 	.word	0x00418936

08006150 <i2c_write>:
	}
}


bool i2c_write(uint8_t dev_addr, uint8_t * data, uint8_t len)
{
 8006150:	b507      	push	{r0, r1, r2, lr}
 8006152:	4613      	mov	r3, r2
	HAL_StatusTypeDef status = HAL_ERROR;
	status = HAL_I2C_Master_Transmit(&hi2c1, (dev_addr << 1), data, len, 200);
 8006154:	22c8      	movs	r2, #200	; 0xc8
 8006156:	9200      	str	r2, [sp, #0]
 8006158:	460a      	mov	r2, r1
 800615a:	0041      	lsls	r1, r0, #1
 800615c:	4804      	ldr	r0, [pc, #16]	; (8006170 <i2c_write+0x20>)
 800615e:	f7fc f96f 	bl	8002440 <HAL_I2C_Master_Transmit>
	return (status == HAL_OK) ? true : false;
}
 8006162:	fab0 f080 	clz	r0, r0
 8006166:	0940      	lsrs	r0, r0, #5
 8006168:	b003      	add	sp, #12
 800616a:	f85d fb04 	ldr.w	pc, [sp], #4
 800616e:	bf00      	nop
 8006170:	2000017c 	.word	0x2000017c

08006174 <i2c_read>:

bool i2c_read(uint8_t dev_addr, uint8_t * data, uint8_t len)
{
 8006174:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
	HAL_StatusTypeDef status = HAL_ERROR;
	status = HAL_I2C_Master_Transmit(&hi2c1, (dev_addr << 1), data, len, 200);
 8006178:	27c8      	movs	r7, #200	; 0xc8
{
 800617a:	460c      	mov	r4, r1
	status = HAL_I2C_Master_Transmit(&hi2c1, (dev_addr << 1), data, len, 200);
 800617c:	4615      	mov	r5, r2
 800617e:	4e0c      	ldr	r6, [pc, #48]	; (80061b0 <i2c_read+0x3c>)
 8006180:	ea4f 0840 	mov.w	r8, r0, lsl #1
 8006184:	4613      	mov	r3, r2
 8006186:	4630      	mov	r0, r6
 8006188:	460a      	mov	r2, r1
 800618a:	9700      	str	r7, [sp, #0]
 800618c:	4641      	mov	r1, r8
 800618e:	f7fc f957 	bl	8002440 <HAL_I2C_Master_Transmit>
	status = HAL_I2C_Master_Receive(&hi2c1, ((dev_addr << 1) | 0x01), data, len, 200);
 8006192:	462b      	mov	r3, r5
 8006194:	4622      	mov	r2, r4
 8006196:	4630      	mov	r0, r6
 8006198:	9700      	str	r7, [sp, #0]
 800619a:	f048 0101 	orr.w	r1, r8, #1
 800619e:	f7fc fa27 	bl	80025f0 <HAL_I2C_Master_Receive>
	return (status == HAL_OK) ? true : false;
}
 80061a2:	fab0 f080 	clz	r0, r0
 80061a6:	0940      	lsrs	r0, r0, #5
 80061a8:	b002      	add	sp, #8
 80061aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80061ae:	bf00      	nop
 80061b0:	2000017c 	.word	0x2000017c

080061b4 <i2c_delay>:

void i2c_delay(uint32_t ms)
{
	vTaskDelay(ms);
 80061b4:	f7fe b9f6 	b.w	80045a4 <vTaskDelay>

080061b8 <lcd_task_create>:
{
 80061b8:	b507      	push	{r0, r1, r2, lr}
	result = xTaskCreate(lcd_task,
 80061ba:	2300      	movs	r3, #0
 80061bc:	2203      	movs	r2, #3
 80061be:	4905      	ldr	r1, [pc, #20]	; (80061d4 <lcd_task_create+0x1c>)
 80061c0:	e9cd 2300 	strd	r2, r3, [sp]
 80061c4:	4804      	ldr	r0, [pc, #16]	; (80061d8 <lcd_task_create+0x20>)
 80061c6:	2264      	movs	r2, #100	; 0x64
 80061c8:	f7fd ff2a 	bl	8004020 <xTaskCreate>
}
 80061cc:	b003      	add	sp, #12
 80061ce:	f85d fb04 	ldr.w	pc, [sp], #4
 80061d2:	bf00      	nop
 80061d4:	08007a76 	.word	0x08007a76
 80061d8:	080060d1 	.word	0x080060d1

080061dc <numpad_task>:

}

void numpad_task(void * params)
{
	char key = 'X';
 80061dc:	2358      	movs	r3, #88	; 0x58
{
 80061de:	b500      	push	{lr}
 80061e0:	b08b      	sub	sp, #44	; 0x2c

	numpad_ctrl.col0_write = col0_write;
 80061e2:	4823      	ldr	r0, [pc, #140]	; (8006270 <numpad_task+0x94>)
	char key = 'X';
 80061e4:	f88d 3003 	strb.w	r3, [sp, #3]
	numpad_ctrl.col0_write = col0_write;
 80061e8:	4b22      	ldr	r3, [pc, #136]	; (8006274 <numpad_task+0x98>)

	Numpad_init(&numpad_ctrl);

	while(1)
	{
		xSemaphoreTake(numpad_mutex, pdMS_TO_TICKS(portMAX_DELAY));
 80061ea:	4d23      	ldr	r5, [pc, #140]	; (8006278 <numpad_task+0x9c>)
	numpad_ctrl.col0_write = col0_write;
 80061ec:	6103      	str	r3, [r0, #16]
	numpad_ctrl.col1_write = col1_write;
 80061ee:	4b23      	ldr	r3, [pc, #140]	; (800627c <numpad_task+0xa0>)
		xSemaphoreTake(numpad_mutex, pdMS_TO_TICKS(portMAX_DELAY));
 80061f0:	4e23      	ldr	r6, [pc, #140]	; (8006280 <numpad_task+0xa4>)
	numpad_ctrl.col1_write = col1_write;
 80061f2:	6143      	str	r3, [r0, #20]
	numpad_ctrl.col2_write = col2_write;
 80061f4:	4b23      	ldr	r3, [pc, #140]	; (8006284 <numpad_task+0xa8>)
 80061f6:	6183      	str	r3, [r0, #24]
	numpad_ctrl.row0_read = row0_read;
 80061f8:	4b23      	ldr	r3, [pc, #140]	; (8006288 <numpad_task+0xac>)
 80061fa:	6003      	str	r3, [r0, #0]
	numpad_ctrl.row1_read = row1_read;
 80061fc:	4b23      	ldr	r3, [pc, #140]	; (800628c <numpad_task+0xb0>)
 80061fe:	6043      	str	r3, [r0, #4]
	numpad_ctrl.row2_read = row2_read;
 8006200:	4b23      	ldr	r3, [pc, #140]	; (8006290 <numpad_task+0xb4>)
 8006202:	6083      	str	r3, [r0, #8]
	numpad_ctrl.row3_read = row3_read;
 8006204:	4b23      	ldr	r3, [pc, #140]	; (8006294 <numpad_task+0xb8>)
 8006206:	60c3      	str	r3, [r0, #12]
	numpad_ctrl.delay 	= numpad_delay;
 8006208:	4b23      	ldr	r3, [pc, #140]	; (8006298 <numpad_task+0xbc>)
 800620a:	61c3      	str	r3, [r0, #28]
	numpad_ctrl.buzzer 	= buzzer_write;
 800620c:	4b23      	ldr	r3, [pc, #140]	; (800629c <numpad_task+0xc0>)
 800620e:	6203      	str	r3, [r0, #32]
	Numpad_init(&numpad_ctrl);
 8006210:	f7ff fa36 	bl	8005680 <Numpad_init>
		xSemaphoreTake(numpad_mutex, pdMS_TO_TICKS(portMAX_DELAY));
 8006214:	4631      	mov	r1, r6
 8006216:	6828      	ldr	r0, [r5, #0]
 8006218:	f7fd fdd7 	bl	8003dca <xQueueSemaphoreTake>

		/*Keep scanning the numpad for keypresses*/
		key = Numpad_scan();
 800621c:	f7ff fa80 	bl	8005720 <Numpad_scan>
		if(key != 'X')
 8006220:	2858      	cmp	r0, #88	; 0x58
		key = Numpad_scan();
 8006222:	4604      	mov	r4, r0
 8006224:	f88d 0003 	strb.w	r0, [sp, #3]
		if(key != 'X')
 8006228:	d018      	beq.n	800625c <numpad_task+0x80>
		{
			lcd_data data 	= {0};
 800622a:	2222      	movs	r2, #34	; 0x22
 800622c:	2100      	movs	r1, #0
 800622e:	a801      	add	r0, sp, #4
 8006230:	f000 f8f4 	bl	800641c <memset>
			data.text[0] 	= key;
			data.led		= true;
 8006234:	2301      	movs	r3, #1
			/*Send the key to the LCD task*/
			xQueueSend(lcd_queue, (void*)&data, pdMS_TO_TICKS(100));
 8006236:	481a      	ldr	r0, [pc, #104]	; (80062a0 <numpad_task+0xc4>)
 8006238:	2264      	movs	r2, #100	; 0x64
			data.led		= true;
 800623a:	f88d 3026 	strb.w	r3, [sp, #38]	; 0x26
			xQueueSend(lcd_queue, (void*)&data, pdMS_TO_TICKS(100));
 800623e:	a901      	add	r1, sp, #4
 8006240:	2300      	movs	r3, #0
 8006242:	6800      	ldr	r0, [r0, #0]
			data.text[0] 	= key;
 8006244:	f88d 4004 	strb.w	r4, [sp, #4]
			xQueueSend(lcd_queue, (void*)&data, pdMS_TO_TICKS(100));
 8006248:	f7fd fcab 	bl	8003ba2 <xQueueGenericSend>
			/*Send the key to the manager task as well*/
			xQueueSend(key_queue, (void*)&key, pdMS_TO_TICKS(100));
 800624c:	4815      	ldr	r0, [pc, #84]	; (80062a4 <numpad_task+0xc8>)
 800624e:	2300      	movs	r3, #0
 8006250:	2264      	movs	r2, #100	; 0x64
 8006252:	6800      	ldr	r0, [r0, #0]
 8006254:	f10d 0103 	add.w	r1, sp, #3
 8006258:	f7fd fca3 	bl	8003ba2 <xQueueGenericSend>
		}
		xSemaphoreGive(numpad_mutex);
 800625c:	2300      	movs	r3, #0
 800625e:	6828      	ldr	r0, [r5, #0]
 8006260:	461a      	mov	r2, r3
 8006262:	4619      	mov	r1, r3
 8006264:	f7fd fc9d 	bl	8003ba2 <xQueueGenericSend>
		vTaskDelay(pdMS_TO_TICKS(100));
 8006268:	2064      	movs	r0, #100	; 0x64
 800626a:	f7fe f99b 	bl	80045a4 <vTaskDelay>
		xSemaphoreTake(numpad_mutex, pdMS_TO_TICKS(portMAX_DELAY));
 800626e:	e7d1      	b.n	8006214 <numpad_task+0x38>
 8006270:	20002e08 	.word	0x20002e08
 8006274:	080062ad 	.word	0x080062ad
 8006278:	20002c88 	.word	0x20002c88
 800627c:	080062bd 	.word	0x080062bd
 8006280:	00418936 	.word	0x00418936
 8006284:	080062cd 	.word	0x080062cd
 8006288:	080062dd 	.word	0x080062dd
 800628c:	080062f5 	.word	0x080062f5
 8006290:	0800630d 	.word	0x0800630d
 8006294:	08006325 	.word	0x08006325
 8006298:	080062a9 	.word	0x080062a9
 800629c:	0800633d 	.word	0x0800633d
 80062a0:	20002c80 	.word	0x20002c80
 80062a4:	20002c7c 	.word	0x20002c7c

080062a8 <numpad_delay>:
	(state == true) ? HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2) : HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
}

void numpad_delay(uint32_t ms)
{
	vTaskDelay(ms);
 80062a8:	f7fe b97c 	b.w	80045a4 <vTaskDelay>

080062ac <col0_write>:
{
 80062ac:	4602      	mov	r2, r0
	HAL_GPIO_WritePin(COL0_GPIO_Port, COL0_Pin, (GPIO_PinState)status);
 80062ae:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80062b2:	4801      	ldr	r0, [pc, #4]	; (80062b8 <col0_write+0xc>)
 80062b4:	f7fb bf08 	b.w	80020c8 <HAL_GPIO_WritePin>
 80062b8:	40020400 	.word	0x40020400

080062bc <col1_write>:
{
 80062bc:	4602      	mov	r2, r0
	HAL_GPIO_WritePin(COL1_GPIO_Port, COL1_Pin, (GPIO_PinState)status);
 80062be:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80062c2:	4801      	ldr	r0, [pc, #4]	; (80062c8 <col1_write+0xc>)
 80062c4:	f7fb bf00 	b.w	80020c8 <HAL_GPIO_WritePin>
 80062c8:	40020400 	.word	0x40020400

080062cc <col2_write>:
{
 80062cc:	4602      	mov	r2, r0
	HAL_GPIO_WritePin(COL2_GPIO_Port, COL2_Pin, (GPIO_PinState)status);
 80062ce:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80062d2:	4801      	ldr	r0, [pc, #4]	; (80062d8 <col2_write+0xc>)
 80062d4:	f7fb bef8 	b.w	80020c8 <HAL_GPIO_WritePin>
 80062d8:	40020400 	.word	0x40020400

080062dc <row0_read>:
{
 80062dc:	b508      	push	{r3, lr}
	return (HAL_GPIO_ReadPin(ROW0_GPIO_Port, ROW0_Pin) == GPIO_PIN_SET) ? true : false;
 80062de:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80062e2:	4803      	ldr	r0, [pc, #12]	; (80062f0 <row0_read+0x14>)
 80062e4:	f7fb feea 	bl	80020bc <HAL_GPIO_ReadPin>
}
 80062e8:	1e43      	subs	r3, r0, #1
 80062ea:	4258      	negs	r0, r3
 80062ec:	4158      	adcs	r0, r3
 80062ee:	bd08      	pop	{r3, pc}
 80062f0:	40020400 	.word	0x40020400

080062f4 <row1_read>:
{
 80062f4:	b508      	push	{r3, lr}
	return (HAL_GPIO_ReadPin(ROW1_GPIO_Port, ROW1_Pin) == GPIO_PIN_SET) ? true : false;
 80062f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80062fa:	4803      	ldr	r0, [pc, #12]	; (8006308 <row1_read+0x14>)
 80062fc:	f7fb fede 	bl	80020bc <HAL_GPIO_ReadPin>
}
 8006300:	1e43      	subs	r3, r0, #1
 8006302:	4258      	negs	r0, r3
 8006304:	4158      	adcs	r0, r3
 8006306:	bd08      	pop	{r3, pc}
 8006308:	40020000 	.word	0x40020000

0800630c <row2_read>:
{
 800630c:	b508      	push	{r3, lr}
	return (HAL_GPIO_ReadPin(ROW2_GPIO_Port, ROW2_Pin) == GPIO_PIN_SET) ? true : false;
 800630e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8006312:	4803      	ldr	r0, [pc, #12]	; (8006320 <row2_read+0x14>)
 8006314:	f7fb fed2 	bl	80020bc <HAL_GPIO_ReadPin>
}
 8006318:	1e43      	subs	r3, r0, #1
 800631a:	4258      	negs	r0, r3
 800631c:	4158      	adcs	r0, r3
 800631e:	bd08      	pop	{r3, pc}
 8006320:	40020000 	.word	0x40020000

08006324 <row3_read>:
{
 8006324:	b508      	push	{r3, lr}
	return (HAL_GPIO_ReadPin(ROW3_GPIO_Port, ROW3_Pin) == GPIO_PIN_SET) ? true : false;
 8006326:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800632a:	4803      	ldr	r0, [pc, #12]	; (8006338 <row3_read+0x14>)
 800632c:	f7fb fec6 	bl	80020bc <HAL_GPIO_ReadPin>
}
 8006330:	1e43      	subs	r3, r0, #1
 8006332:	4258      	negs	r0, r3
 8006334:	4158      	adcs	r0, r3
 8006336:	bd08      	pop	{r3, pc}
 8006338:	40020000 	.word	0x40020000

0800633c <buzzer_write>:
	TIM4->ARR = 137;
 800633c:	2289      	movs	r2, #137	; 0x89
 800633e:	4b06      	ldr	r3, [pc, #24]	; (8006358 <buzzer_write+0x1c>)
	(state == true) ? HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2) : HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 8006340:	2104      	movs	r1, #4
	TIM4->ARR = 137;
 8006342:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM4->CCR2 = 68;
 8006344:	2244      	movs	r2, #68	; 0x44
 8006346:	639a      	str	r2, [r3, #56]	; 0x38
	(state == true) ? HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2) : HAL_TIM_PWM_Stop(&htim4, TIM_CHANNEL_2);
 8006348:	b110      	cbz	r0, 8006350 <buzzer_write+0x14>
 800634a:	4804      	ldr	r0, [pc, #16]	; (800635c <buzzer_write+0x20>)
 800634c:	f7fc bffb 	b.w	8003346 <HAL_TIM_PWM_Start>
 8006350:	4802      	ldr	r0, [pc, #8]	; (800635c <buzzer_write+0x20>)
 8006352:	f7fc bffa 	b.w	800334a <HAL_TIM_PWM_Stop>
 8006356:	bf00      	nop
 8006358:	40000800 	.word	0x40000800
 800635c:	2000026c 	.word	0x2000026c

08006360 <numpad_task_create>:
{
 8006360:	b507      	push	{r0, r1, r2, lr}
	result = xTaskCreate(numpad_task,
 8006362:	2300      	movs	r3, #0
 8006364:	2204      	movs	r2, #4
 8006366:	4905      	ldr	r1, [pc, #20]	; (800637c <numpad_task_create+0x1c>)
 8006368:	e9cd 2300 	strd	r2, r3, [sp]
 800636c:	4804      	ldr	r0, [pc, #16]	; (8006380 <numpad_task_create+0x20>)
 800636e:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8006372:	f7fd fe55 	bl	8004020 <xTaskCreate>
}
 8006376:	b003      	add	sp, #12
 8006378:	f85d fb04 	ldr.w	pc, [sp], #4
 800637c:	08007a7c 	.word	0x08007a7c
 8006380:	080061dd 	.word	0x080061dd

08006384 <atoi>:
 8006384:	220a      	movs	r2, #10
 8006386:	2100      	movs	r1, #0
 8006388:	f000 b938 	b.w	80065fc <strtol>

0800638c <__errno>:
 800638c:	4b01      	ldr	r3, [pc, #4]	; (8006394 <__errno+0x8>)
 800638e:	6818      	ldr	r0, [r3, #0]
 8006390:	4770      	bx	lr
 8006392:	bf00      	nop
 8006394:	200000a0 	.word	0x200000a0

08006398 <__libc_init_array>:
 8006398:	b570      	push	{r4, r5, r6, lr}
 800639a:	2600      	movs	r6, #0
 800639c:	4d0c      	ldr	r5, [pc, #48]	; (80063d0 <__libc_init_array+0x38>)
 800639e:	4c0d      	ldr	r4, [pc, #52]	; (80063d4 <__libc_init_array+0x3c>)
 80063a0:	1b64      	subs	r4, r4, r5
 80063a2:	10a4      	asrs	r4, r4, #2
 80063a4:	42a6      	cmp	r6, r4
 80063a6:	d109      	bne.n	80063bc <__libc_init_array+0x24>
 80063a8:	f001 f988 	bl	80076bc <_init>
 80063ac:	2600      	movs	r6, #0
 80063ae:	4d0a      	ldr	r5, [pc, #40]	; (80063d8 <__libc_init_array+0x40>)
 80063b0:	4c0a      	ldr	r4, [pc, #40]	; (80063dc <__libc_init_array+0x44>)
 80063b2:	1b64      	subs	r4, r4, r5
 80063b4:	10a4      	asrs	r4, r4, #2
 80063b6:	42a6      	cmp	r6, r4
 80063b8:	d105      	bne.n	80063c6 <__libc_init_array+0x2e>
 80063ba:	bd70      	pop	{r4, r5, r6, pc}
 80063bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80063c0:	4798      	blx	r3
 80063c2:	3601      	adds	r6, #1
 80063c4:	e7ee      	b.n	80063a4 <__libc_init_array+0xc>
 80063c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80063ca:	4798      	blx	r3
 80063cc:	3601      	adds	r6, #1
 80063ce:	e7f2      	b.n	80063b6 <__libc_init_array+0x1e>
 80063d0:	08007c3c 	.word	0x08007c3c
 80063d4:	08007c3c 	.word	0x08007c3c
 80063d8:	08007c3c 	.word	0x08007c3c
 80063dc:	08007c40 	.word	0x08007c40

080063e0 <memcmp>:
 80063e0:	b510      	push	{r4, lr}
 80063e2:	3901      	subs	r1, #1
 80063e4:	4402      	add	r2, r0
 80063e6:	4290      	cmp	r0, r2
 80063e8:	d101      	bne.n	80063ee <memcmp+0xe>
 80063ea:	2000      	movs	r0, #0
 80063ec:	e005      	b.n	80063fa <memcmp+0x1a>
 80063ee:	7803      	ldrb	r3, [r0, #0]
 80063f0:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80063f4:	42a3      	cmp	r3, r4
 80063f6:	d001      	beq.n	80063fc <memcmp+0x1c>
 80063f8:	1b18      	subs	r0, r3, r4
 80063fa:	bd10      	pop	{r4, pc}
 80063fc:	3001      	adds	r0, #1
 80063fe:	e7f2      	b.n	80063e6 <memcmp+0x6>

08006400 <memcpy>:
 8006400:	440a      	add	r2, r1
 8006402:	4291      	cmp	r1, r2
 8006404:	f100 33ff 	add.w	r3, r0, #4294967295
 8006408:	d100      	bne.n	800640c <memcpy+0xc>
 800640a:	4770      	bx	lr
 800640c:	b510      	push	{r4, lr}
 800640e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006412:	4291      	cmp	r1, r2
 8006414:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006418:	d1f9      	bne.n	800640e <memcpy+0xe>
 800641a:	bd10      	pop	{r4, pc}

0800641c <memset>:
 800641c:	4603      	mov	r3, r0
 800641e:	4402      	add	r2, r0
 8006420:	4293      	cmp	r3, r2
 8006422:	d100      	bne.n	8006426 <memset+0xa>
 8006424:	4770      	bx	lr
 8006426:	f803 1b01 	strb.w	r1, [r3], #1
 800642a:	e7f9      	b.n	8006420 <memset+0x4>

0800642c <siprintf>:
 800642c:	b40e      	push	{r1, r2, r3}
 800642e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8006432:	b500      	push	{lr}
 8006434:	b09c      	sub	sp, #112	; 0x70
 8006436:	ab1d      	add	r3, sp, #116	; 0x74
 8006438:	9002      	str	r0, [sp, #8]
 800643a:	9006      	str	r0, [sp, #24]
 800643c:	9107      	str	r1, [sp, #28]
 800643e:	9104      	str	r1, [sp, #16]
 8006440:	4808      	ldr	r0, [pc, #32]	; (8006464 <siprintf+0x38>)
 8006442:	4909      	ldr	r1, [pc, #36]	; (8006468 <siprintf+0x3c>)
 8006444:	f853 2b04 	ldr.w	r2, [r3], #4
 8006448:	9105      	str	r1, [sp, #20]
 800644a:	6800      	ldr	r0, [r0, #0]
 800644c:	a902      	add	r1, sp, #8
 800644e:	9301      	str	r3, [sp, #4]
 8006450:	f000 f93a 	bl	80066c8 <_svfiprintf_r>
 8006454:	2200      	movs	r2, #0
 8006456:	9b02      	ldr	r3, [sp, #8]
 8006458:	701a      	strb	r2, [r3, #0]
 800645a:	b01c      	add	sp, #112	; 0x70
 800645c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006460:	b003      	add	sp, #12
 8006462:	4770      	bx	lr
 8006464:	200000a0 	.word	0x200000a0
 8006468:	ffff0208 	.word	0xffff0208

0800646c <siscanf>:
 800646c:	b40e      	push	{r1, r2, r3}
 800646e:	f44f 7201 	mov.w	r2, #516	; 0x204
 8006472:	b530      	push	{r4, r5, lr}
 8006474:	b09c      	sub	sp, #112	; 0x70
 8006476:	ac1f      	add	r4, sp, #124	; 0x7c
 8006478:	f854 5b04 	ldr.w	r5, [r4], #4
 800647c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8006480:	9002      	str	r0, [sp, #8]
 8006482:	9006      	str	r0, [sp, #24]
 8006484:	f7f9 fe86 	bl	8000194 <strlen>
 8006488:	4b0b      	ldr	r3, [pc, #44]	; (80064b8 <siscanf+0x4c>)
 800648a:	9003      	str	r0, [sp, #12]
 800648c:	930b      	str	r3, [sp, #44]	; 0x2c
 800648e:	2300      	movs	r3, #0
 8006490:	930f      	str	r3, [sp, #60]	; 0x3c
 8006492:	9314      	str	r3, [sp, #80]	; 0x50
 8006494:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006498:	9007      	str	r0, [sp, #28]
 800649a:	4808      	ldr	r0, [pc, #32]	; (80064bc <siscanf+0x50>)
 800649c:	f8ad 3016 	strh.w	r3, [sp, #22]
 80064a0:	462a      	mov	r2, r5
 80064a2:	4623      	mov	r3, r4
 80064a4:	a902      	add	r1, sp, #8
 80064a6:	6800      	ldr	r0, [r0, #0]
 80064a8:	9401      	str	r4, [sp, #4]
 80064aa:	f000 fa67 	bl	800697c <__ssvfiscanf_r>
 80064ae:	b01c      	add	sp, #112	; 0x70
 80064b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80064b4:	b003      	add	sp, #12
 80064b6:	4770      	bx	lr
 80064b8:	080064c1 	.word	0x080064c1
 80064bc:	200000a0 	.word	0x200000a0

080064c0 <__seofread>:
 80064c0:	2000      	movs	r0, #0
 80064c2:	4770      	bx	lr

080064c4 <strcpy>:
 80064c4:	4603      	mov	r3, r0
 80064c6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80064ca:	f803 2b01 	strb.w	r2, [r3], #1
 80064ce:	2a00      	cmp	r2, #0
 80064d0:	d1f9      	bne.n	80064c6 <strcpy+0x2>
 80064d2:	4770      	bx	lr

080064d4 <strstr>:
 80064d4:	780a      	ldrb	r2, [r1, #0]
 80064d6:	b570      	push	{r4, r5, r6, lr}
 80064d8:	b96a      	cbnz	r2, 80064f6 <strstr+0x22>
 80064da:	bd70      	pop	{r4, r5, r6, pc}
 80064dc:	429a      	cmp	r2, r3
 80064de:	d109      	bne.n	80064f4 <strstr+0x20>
 80064e0:	460c      	mov	r4, r1
 80064e2:	4605      	mov	r5, r0
 80064e4:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d0f6      	beq.n	80064da <strstr+0x6>
 80064ec:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 80064f0:	429e      	cmp	r6, r3
 80064f2:	d0f7      	beq.n	80064e4 <strstr+0x10>
 80064f4:	3001      	adds	r0, #1
 80064f6:	7803      	ldrb	r3, [r0, #0]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d1ef      	bne.n	80064dc <strstr+0x8>
 80064fc:	4618      	mov	r0, r3
 80064fe:	e7ec      	b.n	80064da <strstr+0x6>

08006500 <_strtol_l.constprop.0>:
 8006500:	2b01      	cmp	r3, #1
 8006502:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006506:	4680      	mov	r8, r0
 8006508:	d001      	beq.n	800650e <_strtol_l.constprop.0+0xe>
 800650a:	2b24      	cmp	r3, #36	; 0x24
 800650c:	d906      	bls.n	800651c <_strtol_l.constprop.0+0x1c>
 800650e:	f7ff ff3d 	bl	800638c <__errno>
 8006512:	2316      	movs	r3, #22
 8006514:	6003      	str	r3, [r0, #0]
 8006516:	2000      	movs	r0, #0
 8006518:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800651c:	460d      	mov	r5, r1
 800651e:	4f35      	ldr	r7, [pc, #212]	; (80065f4 <_strtol_l.constprop.0+0xf4>)
 8006520:	4628      	mov	r0, r5
 8006522:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006526:	5de6      	ldrb	r6, [r4, r7]
 8006528:	f016 0608 	ands.w	r6, r6, #8
 800652c:	d1f8      	bne.n	8006520 <_strtol_l.constprop.0+0x20>
 800652e:	2c2d      	cmp	r4, #45	; 0x2d
 8006530:	d12f      	bne.n	8006592 <_strtol_l.constprop.0+0x92>
 8006532:	2601      	movs	r6, #1
 8006534:	782c      	ldrb	r4, [r5, #0]
 8006536:	1c85      	adds	r5, r0, #2
 8006538:	2b00      	cmp	r3, #0
 800653a:	d057      	beq.n	80065ec <_strtol_l.constprop.0+0xec>
 800653c:	2b10      	cmp	r3, #16
 800653e:	d109      	bne.n	8006554 <_strtol_l.constprop.0+0x54>
 8006540:	2c30      	cmp	r4, #48	; 0x30
 8006542:	d107      	bne.n	8006554 <_strtol_l.constprop.0+0x54>
 8006544:	7828      	ldrb	r0, [r5, #0]
 8006546:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800654a:	2858      	cmp	r0, #88	; 0x58
 800654c:	d149      	bne.n	80065e2 <_strtol_l.constprop.0+0xe2>
 800654e:	2310      	movs	r3, #16
 8006550:	786c      	ldrb	r4, [r5, #1]
 8006552:	3502      	adds	r5, #2
 8006554:	2700      	movs	r7, #0
 8006556:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800655a:	f10e 3eff 	add.w	lr, lr, #4294967295
 800655e:	fbbe f9f3 	udiv	r9, lr, r3
 8006562:	4638      	mov	r0, r7
 8006564:	fb03 ea19 	mls	sl, r3, r9, lr
 8006568:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800656c:	f1bc 0f09 	cmp.w	ip, #9
 8006570:	d814      	bhi.n	800659c <_strtol_l.constprop.0+0x9c>
 8006572:	4664      	mov	r4, ip
 8006574:	42a3      	cmp	r3, r4
 8006576:	dd22      	ble.n	80065be <_strtol_l.constprop.0+0xbe>
 8006578:	2f00      	cmp	r7, #0
 800657a:	db1d      	blt.n	80065b8 <_strtol_l.constprop.0+0xb8>
 800657c:	4581      	cmp	r9, r0
 800657e:	d31b      	bcc.n	80065b8 <_strtol_l.constprop.0+0xb8>
 8006580:	d101      	bne.n	8006586 <_strtol_l.constprop.0+0x86>
 8006582:	45a2      	cmp	sl, r4
 8006584:	db18      	blt.n	80065b8 <_strtol_l.constprop.0+0xb8>
 8006586:	2701      	movs	r7, #1
 8006588:	fb00 4003 	mla	r0, r0, r3, r4
 800658c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8006590:	e7ea      	b.n	8006568 <_strtol_l.constprop.0+0x68>
 8006592:	2c2b      	cmp	r4, #43	; 0x2b
 8006594:	bf04      	itt	eq
 8006596:	782c      	ldrbeq	r4, [r5, #0]
 8006598:	1c85      	addeq	r5, r0, #2
 800659a:	e7cd      	b.n	8006538 <_strtol_l.constprop.0+0x38>
 800659c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80065a0:	f1bc 0f19 	cmp.w	ip, #25
 80065a4:	d801      	bhi.n	80065aa <_strtol_l.constprop.0+0xaa>
 80065a6:	3c37      	subs	r4, #55	; 0x37
 80065a8:	e7e4      	b.n	8006574 <_strtol_l.constprop.0+0x74>
 80065aa:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80065ae:	f1bc 0f19 	cmp.w	ip, #25
 80065b2:	d804      	bhi.n	80065be <_strtol_l.constprop.0+0xbe>
 80065b4:	3c57      	subs	r4, #87	; 0x57
 80065b6:	e7dd      	b.n	8006574 <_strtol_l.constprop.0+0x74>
 80065b8:	f04f 37ff 	mov.w	r7, #4294967295
 80065bc:	e7e6      	b.n	800658c <_strtol_l.constprop.0+0x8c>
 80065be:	2f00      	cmp	r7, #0
 80065c0:	da07      	bge.n	80065d2 <_strtol_l.constprop.0+0xd2>
 80065c2:	2322      	movs	r3, #34	; 0x22
 80065c4:	4670      	mov	r0, lr
 80065c6:	f8c8 3000 	str.w	r3, [r8]
 80065ca:	2a00      	cmp	r2, #0
 80065cc:	d0a4      	beq.n	8006518 <_strtol_l.constprop.0+0x18>
 80065ce:	1e69      	subs	r1, r5, #1
 80065d0:	e005      	b.n	80065de <_strtol_l.constprop.0+0xde>
 80065d2:	b106      	cbz	r6, 80065d6 <_strtol_l.constprop.0+0xd6>
 80065d4:	4240      	negs	r0, r0
 80065d6:	2a00      	cmp	r2, #0
 80065d8:	d09e      	beq.n	8006518 <_strtol_l.constprop.0+0x18>
 80065da:	2f00      	cmp	r7, #0
 80065dc:	d1f7      	bne.n	80065ce <_strtol_l.constprop.0+0xce>
 80065de:	6011      	str	r1, [r2, #0]
 80065e0:	e79a      	b.n	8006518 <_strtol_l.constprop.0+0x18>
 80065e2:	2430      	movs	r4, #48	; 0x30
 80065e4:	2b00      	cmp	r3, #0
 80065e6:	d1b5      	bne.n	8006554 <_strtol_l.constprop.0+0x54>
 80065e8:	2308      	movs	r3, #8
 80065ea:	e7b3      	b.n	8006554 <_strtol_l.constprop.0+0x54>
 80065ec:	2c30      	cmp	r4, #48	; 0x30
 80065ee:	d0a9      	beq.n	8006544 <_strtol_l.constprop.0+0x44>
 80065f0:	230a      	movs	r3, #10
 80065f2:	e7af      	b.n	8006554 <_strtol_l.constprop.0+0x54>
 80065f4:	08007a86 	.word	0x08007a86

080065f8 <_strtol_r>:
 80065f8:	f7ff bf82 	b.w	8006500 <_strtol_l.constprop.0>

080065fc <strtol>:
 80065fc:	4613      	mov	r3, r2
 80065fe:	460a      	mov	r2, r1
 8006600:	4601      	mov	r1, r0
 8006602:	4802      	ldr	r0, [pc, #8]	; (800660c <strtol+0x10>)
 8006604:	6800      	ldr	r0, [r0, #0]
 8006606:	f7ff bf7b 	b.w	8006500 <_strtol_l.constprop.0>
 800660a:	bf00      	nop
 800660c:	200000a0 	.word	0x200000a0

08006610 <__ssputs_r>:
 8006610:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006614:	688e      	ldr	r6, [r1, #8]
 8006616:	4682      	mov	sl, r0
 8006618:	429e      	cmp	r6, r3
 800661a:	460c      	mov	r4, r1
 800661c:	4690      	mov	r8, r2
 800661e:	461f      	mov	r7, r3
 8006620:	d838      	bhi.n	8006694 <__ssputs_r+0x84>
 8006622:	898a      	ldrh	r2, [r1, #12]
 8006624:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006628:	d032      	beq.n	8006690 <__ssputs_r+0x80>
 800662a:	6825      	ldr	r5, [r4, #0]
 800662c:	6909      	ldr	r1, [r1, #16]
 800662e:	3301      	adds	r3, #1
 8006630:	eba5 0901 	sub.w	r9, r5, r1
 8006634:	6965      	ldr	r5, [r4, #20]
 8006636:	444b      	add	r3, r9
 8006638:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800663c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006640:	106d      	asrs	r5, r5, #1
 8006642:	429d      	cmp	r5, r3
 8006644:	bf38      	it	cc
 8006646:	461d      	movcc	r5, r3
 8006648:	0553      	lsls	r3, r2, #21
 800664a:	d531      	bpl.n	80066b0 <__ssputs_r+0xa0>
 800664c:	4629      	mov	r1, r5
 800664e:	f000 ff6d 	bl	800752c <_malloc_r>
 8006652:	4606      	mov	r6, r0
 8006654:	b950      	cbnz	r0, 800666c <__ssputs_r+0x5c>
 8006656:	230c      	movs	r3, #12
 8006658:	f04f 30ff 	mov.w	r0, #4294967295
 800665c:	f8ca 3000 	str.w	r3, [sl]
 8006660:	89a3      	ldrh	r3, [r4, #12]
 8006662:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006666:	81a3      	strh	r3, [r4, #12]
 8006668:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800666c:	464a      	mov	r2, r9
 800666e:	6921      	ldr	r1, [r4, #16]
 8006670:	f7ff fec6 	bl	8006400 <memcpy>
 8006674:	89a3      	ldrh	r3, [r4, #12]
 8006676:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800667a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800667e:	81a3      	strh	r3, [r4, #12]
 8006680:	6126      	str	r6, [r4, #16]
 8006682:	444e      	add	r6, r9
 8006684:	6026      	str	r6, [r4, #0]
 8006686:	463e      	mov	r6, r7
 8006688:	6165      	str	r5, [r4, #20]
 800668a:	eba5 0509 	sub.w	r5, r5, r9
 800668e:	60a5      	str	r5, [r4, #8]
 8006690:	42be      	cmp	r6, r7
 8006692:	d900      	bls.n	8006696 <__ssputs_r+0x86>
 8006694:	463e      	mov	r6, r7
 8006696:	4632      	mov	r2, r6
 8006698:	4641      	mov	r1, r8
 800669a:	6820      	ldr	r0, [r4, #0]
 800669c:	f000 fec4 	bl	8007428 <memmove>
 80066a0:	68a3      	ldr	r3, [r4, #8]
 80066a2:	2000      	movs	r0, #0
 80066a4:	1b9b      	subs	r3, r3, r6
 80066a6:	60a3      	str	r3, [r4, #8]
 80066a8:	6823      	ldr	r3, [r4, #0]
 80066aa:	4433      	add	r3, r6
 80066ac:	6023      	str	r3, [r4, #0]
 80066ae:	e7db      	b.n	8006668 <__ssputs_r+0x58>
 80066b0:	462a      	mov	r2, r5
 80066b2:	f000 ffaf 	bl	8007614 <_realloc_r>
 80066b6:	4606      	mov	r6, r0
 80066b8:	2800      	cmp	r0, #0
 80066ba:	d1e1      	bne.n	8006680 <__ssputs_r+0x70>
 80066bc:	4650      	mov	r0, sl
 80066be:	6921      	ldr	r1, [r4, #16]
 80066c0:	f000 fecc 	bl	800745c <_free_r>
 80066c4:	e7c7      	b.n	8006656 <__ssputs_r+0x46>
	...

080066c8 <_svfiprintf_r>:
 80066c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066cc:	4698      	mov	r8, r3
 80066ce:	898b      	ldrh	r3, [r1, #12]
 80066d0:	4607      	mov	r7, r0
 80066d2:	061b      	lsls	r3, r3, #24
 80066d4:	460d      	mov	r5, r1
 80066d6:	4614      	mov	r4, r2
 80066d8:	b09d      	sub	sp, #116	; 0x74
 80066da:	d50e      	bpl.n	80066fa <_svfiprintf_r+0x32>
 80066dc:	690b      	ldr	r3, [r1, #16]
 80066de:	b963      	cbnz	r3, 80066fa <_svfiprintf_r+0x32>
 80066e0:	2140      	movs	r1, #64	; 0x40
 80066e2:	f000 ff23 	bl	800752c <_malloc_r>
 80066e6:	6028      	str	r0, [r5, #0]
 80066e8:	6128      	str	r0, [r5, #16]
 80066ea:	b920      	cbnz	r0, 80066f6 <_svfiprintf_r+0x2e>
 80066ec:	230c      	movs	r3, #12
 80066ee:	603b      	str	r3, [r7, #0]
 80066f0:	f04f 30ff 	mov.w	r0, #4294967295
 80066f4:	e0d1      	b.n	800689a <_svfiprintf_r+0x1d2>
 80066f6:	2340      	movs	r3, #64	; 0x40
 80066f8:	616b      	str	r3, [r5, #20]
 80066fa:	2300      	movs	r3, #0
 80066fc:	9309      	str	r3, [sp, #36]	; 0x24
 80066fe:	2320      	movs	r3, #32
 8006700:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006704:	2330      	movs	r3, #48	; 0x30
 8006706:	f04f 0901 	mov.w	r9, #1
 800670a:	f8cd 800c 	str.w	r8, [sp, #12]
 800670e:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80068b4 <_svfiprintf_r+0x1ec>
 8006712:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006716:	4623      	mov	r3, r4
 8006718:	469a      	mov	sl, r3
 800671a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800671e:	b10a      	cbz	r2, 8006724 <_svfiprintf_r+0x5c>
 8006720:	2a25      	cmp	r2, #37	; 0x25
 8006722:	d1f9      	bne.n	8006718 <_svfiprintf_r+0x50>
 8006724:	ebba 0b04 	subs.w	fp, sl, r4
 8006728:	d00b      	beq.n	8006742 <_svfiprintf_r+0x7a>
 800672a:	465b      	mov	r3, fp
 800672c:	4622      	mov	r2, r4
 800672e:	4629      	mov	r1, r5
 8006730:	4638      	mov	r0, r7
 8006732:	f7ff ff6d 	bl	8006610 <__ssputs_r>
 8006736:	3001      	adds	r0, #1
 8006738:	f000 80aa 	beq.w	8006890 <_svfiprintf_r+0x1c8>
 800673c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800673e:	445a      	add	r2, fp
 8006740:	9209      	str	r2, [sp, #36]	; 0x24
 8006742:	f89a 3000 	ldrb.w	r3, [sl]
 8006746:	2b00      	cmp	r3, #0
 8006748:	f000 80a2 	beq.w	8006890 <_svfiprintf_r+0x1c8>
 800674c:	2300      	movs	r3, #0
 800674e:	f04f 32ff 	mov.w	r2, #4294967295
 8006752:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006756:	f10a 0a01 	add.w	sl, sl, #1
 800675a:	9304      	str	r3, [sp, #16]
 800675c:	9307      	str	r3, [sp, #28]
 800675e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006762:	931a      	str	r3, [sp, #104]	; 0x68
 8006764:	4654      	mov	r4, sl
 8006766:	2205      	movs	r2, #5
 8006768:	f814 1b01 	ldrb.w	r1, [r4], #1
 800676c:	4851      	ldr	r0, [pc, #324]	; (80068b4 <_svfiprintf_r+0x1ec>)
 800676e:	f000 fe4d 	bl	800740c <memchr>
 8006772:	9a04      	ldr	r2, [sp, #16]
 8006774:	b9d8      	cbnz	r0, 80067ae <_svfiprintf_r+0xe6>
 8006776:	06d0      	lsls	r0, r2, #27
 8006778:	bf44      	itt	mi
 800677a:	2320      	movmi	r3, #32
 800677c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006780:	0711      	lsls	r1, r2, #28
 8006782:	bf44      	itt	mi
 8006784:	232b      	movmi	r3, #43	; 0x2b
 8006786:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800678a:	f89a 3000 	ldrb.w	r3, [sl]
 800678e:	2b2a      	cmp	r3, #42	; 0x2a
 8006790:	d015      	beq.n	80067be <_svfiprintf_r+0xf6>
 8006792:	4654      	mov	r4, sl
 8006794:	2000      	movs	r0, #0
 8006796:	f04f 0c0a 	mov.w	ip, #10
 800679a:	9a07      	ldr	r2, [sp, #28]
 800679c:	4621      	mov	r1, r4
 800679e:	f811 3b01 	ldrb.w	r3, [r1], #1
 80067a2:	3b30      	subs	r3, #48	; 0x30
 80067a4:	2b09      	cmp	r3, #9
 80067a6:	d94e      	bls.n	8006846 <_svfiprintf_r+0x17e>
 80067a8:	b1b0      	cbz	r0, 80067d8 <_svfiprintf_r+0x110>
 80067aa:	9207      	str	r2, [sp, #28]
 80067ac:	e014      	b.n	80067d8 <_svfiprintf_r+0x110>
 80067ae:	eba0 0308 	sub.w	r3, r0, r8
 80067b2:	fa09 f303 	lsl.w	r3, r9, r3
 80067b6:	4313      	orrs	r3, r2
 80067b8:	46a2      	mov	sl, r4
 80067ba:	9304      	str	r3, [sp, #16]
 80067bc:	e7d2      	b.n	8006764 <_svfiprintf_r+0x9c>
 80067be:	9b03      	ldr	r3, [sp, #12]
 80067c0:	1d19      	adds	r1, r3, #4
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	9103      	str	r1, [sp, #12]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	bfbb      	ittet	lt
 80067ca:	425b      	neglt	r3, r3
 80067cc:	f042 0202 	orrlt.w	r2, r2, #2
 80067d0:	9307      	strge	r3, [sp, #28]
 80067d2:	9307      	strlt	r3, [sp, #28]
 80067d4:	bfb8      	it	lt
 80067d6:	9204      	strlt	r2, [sp, #16]
 80067d8:	7823      	ldrb	r3, [r4, #0]
 80067da:	2b2e      	cmp	r3, #46	; 0x2e
 80067dc:	d10c      	bne.n	80067f8 <_svfiprintf_r+0x130>
 80067de:	7863      	ldrb	r3, [r4, #1]
 80067e0:	2b2a      	cmp	r3, #42	; 0x2a
 80067e2:	d135      	bne.n	8006850 <_svfiprintf_r+0x188>
 80067e4:	9b03      	ldr	r3, [sp, #12]
 80067e6:	3402      	adds	r4, #2
 80067e8:	1d1a      	adds	r2, r3, #4
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	9203      	str	r2, [sp, #12]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	bfb8      	it	lt
 80067f2:	f04f 33ff 	movlt.w	r3, #4294967295
 80067f6:	9305      	str	r3, [sp, #20]
 80067f8:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80068b8 <_svfiprintf_r+0x1f0>
 80067fc:	2203      	movs	r2, #3
 80067fe:	4650      	mov	r0, sl
 8006800:	7821      	ldrb	r1, [r4, #0]
 8006802:	f000 fe03 	bl	800740c <memchr>
 8006806:	b140      	cbz	r0, 800681a <_svfiprintf_r+0x152>
 8006808:	2340      	movs	r3, #64	; 0x40
 800680a:	eba0 000a 	sub.w	r0, r0, sl
 800680e:	fa03 f000 	lsl.w	r0, r3, r0
 8006812:	9b04      	ldr	r3, [sp, #16]
 8006814:	3401      	adds	r4, #1
 8006816:	4303      	orrs	r3, r0
 8006818:	9304      	str	r3, [sp, #16]
 800681a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800681e:	2206      	movs	r2, #6
 8006820:	4826      	ldr	r0, [pc, #152]	; (80068bc <_svfiprintf_r+0x1f4>)
 8006822:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006826:	f000 fdf1 	bl	800740c <memchr>
 800682a:	2800      	cmp	r0, #0
 800682c:	d038      	beq.n	80068a0 <_svfiprintf_r+0x1d8>
 800682e:	4b24      	ldr	r3, [pc, #144]	; (80068c0 <_svfiprintf_r+0x1f8>)
 8006830:	bb1b      	cbnz	r3, 800687a <_svfiprintf_r+0x1b2>
 8006832:	9b03      	ldr	r3, [sp, #12]
 8006834:	3307      	adds	r3, #7
 8006836:	f023 0307 	bic.w	r3, r3, #7
 800683a:	3308      	adds	r3, #8
 800683c:	9303      	str	r3, [sp, #12]
 800683e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006840:	4433      	add	r3, r6
 8006842:	9309      	str	r3, [sp, #36]	; 0x24
 8006844:	e767      	b.n	8006716 <_svfiprintf_r+0x4e>
 8006846:	460c      	mov	r4, r1
 8006848:	2001      	movs	r0, #1
 800684a:	fb0c 3202 	mla	r2, ip, r2, r3
 800684e:	e7a5      	b.n	800679c <_svfiprintf_r+0xd4>
 8006850:	2300      	movs	r3, #0
 8006852:	f04f 0c0a 	mov.w	ip, #10
 8006856:	4619      	mov	r1, r3
 8006858:	3401      	adds	r4, #1
 800685a:	9305      	str	r3, [sp, #20]
 800685c:	4620      	mov	r0, r4
 800685e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006862:	3a30      	subs	r2, #48	; 0x30
 8006864:	2a09      	cmp	r2, #9
 8006866:	d903      	bls.n	8006870 <_svfiprintf_r+0x1a8>
 8006868:	2b00      	cmp	r3, #0
 800686a:	d0c5      	beq.n	80067f8 <_svfiprintf_r+0x130>
 800686c:	9105      	str	r1, [sp, #20]
 800686e:	e7c3      	b.n	80067f8 <_svfiprintf_r+0x130>
 8006870:	4604      	mov	r4, r0
 8006872:	2301      	movs	r3, #1
 8006874:	fb0c 2101 	mla	r1, ip, r1, r2
 8006878:	e7f0      	b.n	800685c <_svfiprintf_r+0x194>
 800687a:	ab03      	add	r3, sp, #12
 800687c:	9300      	str	r3, [sp, #0]
 800687e:	462a      	mov	r2, r5
 8006880:	4638      	mov	r0, r7
 8006882:	4b10      	ldr	r3, [pc, #64]	; (80068c4 <_svfiprintf_r+0x1fc>)
 8006884:	a904      	add	r1, sp, #16
 8006886:	f3af 8000 	nop.w
 800688a:	1c42      	adds	r2, r0, #1
 800688c:	4606      	mov	r6, r0
 800688e:	d1d6      	bne.n	800683e <_svfiprintf_r+0x176>
 8006890:	89ab      	ldrh	r3, [r5, #12]
 8006892:	065b      	lsls	r3, r3, #25
 8006894:	f53f af2c 	bmi.w	80066f0 <_svfiprintf_r+0x28>
 8006898:	9809      	ldr	r0, [sp, #36]	; 0x24
 800689a:	b01d      	add	sp, #116	; 0x74
 800689c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068a0:	ab03      	add	r3, sp, #12
 80068a2:	9300      	str	r3, [sp, #0]
 80068a4:	462a      	mov	r2, r5
 80068a6:	4638      	mov	r0, r7
 80068a8:	4b06      	ldr	r3, [pc, #24]	; (80068c4 <_svfiprintf_r+0x1fc>)
 80068aa:	a904      	add	r1, sp, #16
 80068ac:	f000 fa50 	bl	8006d50 <_printf_i>
 80068b0:	e7eb      	b.n	800688a <_svfiprintf_r+0x1c2>
 80068b2:	bf00      	nop
 80068b4:	08007b86 	.word	0x08007b86
 80068b8:	08007b8c 	.word	0x08007b8c
 80068bc:	08007b90 	.word	0x08007b90
 80068c0:	00000000 	.word	0x00000000
 80068c4:	08006611 	.word	0x08006611

080068c8 <_sungetc_r>:
 80068c8:	b538      	push	{r3, r4, r5, lr}
 80068ca:	1c4b      	adds	r3, r1, #1
 80068cc:	4614      	mov	r4, r2
 80068ce:	d103      	bne.n	80068d8 <_sungetc_r+0x10>
 80068d0:	f04f 35ff 	mov.w	r5, #4294967295
 80068d4:	4628      	mov	r0, r5
 80068d6:	bd38      	pop	{r3, r4, r5, pc}
 80068d8:	8993      	ldrh	r3, [r2, #12]
 80068da:	b2cd      	uxtb	r5, r1
 80068dc:	f023 0320 	bic.w	r3, r3, #32
 80068e0:	8193      	strh	r3, [r2, #12]
 80068e2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80068e4:	6852      	ldr	r2, [r2, #4]
 80068e6:	b18b      	cbz	r3, 800690c <_sungetc_r+0x44>
 80068e8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80068ea:	4293      	cmp	r3, r2
 80068ec:	dd08      	ble.n	8006900 <_sungetc_r+0x38>
 80068ee:	6823      	ldr	r3, [r4, #0]
 80068f0:	1e5a      	subs	r2, r3, #1
 80068f2:	6022      	str	r2, [r4, #0]
 80068f4:	f803 5c01 	strb.w	r5, [r3, #-1]
 80068f8:	6863      	ldr	r3, [r4, #4]
 80068fa:	3301      	adds	r3, #1
 80068fc:	6063      	str	r3, [r4, #4]
 80068fe:	e7e9      	b.n	80068d4 <_sungetc_r+0xc>
 8006900:	4621      	mov	r1, r4
 8006902:	f000 fd49 	bl	8007398 <__submore>
 8006906:	2800      	cmp	r0, #0
 8006908:	d0f1      	beq.n	80068ee <_sungetc_r+0x26>
 800690a:	e7e1      	b.n	80068d0 <_sungetc_r+0x8>
 800690c:	6921      	ldr	r1, [r4, #16]
 800690e:	6823      	ldr	r3, [r4, #0]
 8006910:	b151      	cbz	r1, 8006928 <_sungetc_r+0x60>
 8006912:	4299      	cmp	r1, r3
 8006914:	d208      	bcs.n	8006928 <_sungetc_r+0x60>
 8006916:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800691a:	42a9      	cmp	r1, r5
 800691c:	d104      	bne.n	8006928 <_sungetc_r+0x60>
 800691e:	3b01      	subs	r3, #1
 8006920:	3201      	adds	r2, #1
 8006922:	6023      	str	r3, [r4, #0]
 8006924:	6062      	str	r2, [r4, #4]
 8006926:	e7d5      	b.n	80068d4 <_sungetc_r+0xc>
 8006928:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800692c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006930:	6363      	str	r3, [r4, #52]	; 0x34
 8006932:	2303      	movs	r3, #3
 8006934:	63a3      	str	r3, [r4, #56]	; 0x38
 8006936:	4623      	mov	r3, r4
 8006938:	f803 5f46 	strb.w	r5, [r3, #70]!
 800693c:	6023      	str	r3, [r4, #0]
 800693e:	2301      	movs	r3, #1
 8006940:	e7dc      	b.n	80068fc <_sungetc_r+0x34>

08006942 <__ssrefill_r>:
 8006942:	b510      	push	{r4, lr}
 8006944:	460c      	mov	r4, r1
 8006946:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8006948:	b169      	cbz	r1, 8006966 <__ssrefill_r+0x24>
 800694a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800694e:	4299      	cmp	r1, r3
 8006950:	d001      	beq.n	8006956 <__ssrefill_r+0x14>
 8006952:	f000 fd83 	bl	800745c <_free_r>
 8006956:	2000      	movs	r0, #0
 8006958:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800695a:	6360      	str	r0, [r4, #52]	; 0x34
 800695c:	6063      	str	r3, [r4, #4]
 800695e:	b113      	cbz	r3, 8006966 <__ssrefill_r+0x24>
 8006960:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006962:	6023      	str	r3, [r4, #0]
 8006964:	bd10      	pop	{r4, pc}
 8006966:	6923      	ldr	r3, [r4, #16]
 8006968:	f04f 30ff 	mov.w	r0, #4294967295
 800696c:	6023      	str	r3, [r4, #0]
 800696e:	2300      	movs	r3, #0
 8006970:	6063      	str	r3, [r4, #4]
 8006972:	89a3      	ldrh	r3, [r4, #12]
 8006974:	f043 0320 	orr.w	r3, r3, #32
 8006978:	81a3      	strh	r3, [r4, #12]
 800697a:	e7f3      	b.n	8006964 <__ssrefill_r+0x22>

0800697c <__ssvfiscanf_r>:
 800697c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006980:	460c      	mov	r4, r1
 8006982:	2100      	movs	r1, #0
 8006984:	4606      	mov	r6, r0
 8006986:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800698a:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800698e:	49a7      	ldr	r1, [pc, #668]	; (8006c2c <__ssvfiscanf_r+0x2b0>)
 8006990:	f10d 0804 	add.w	r8, sp, #4
 8006994:	91a0      	str	r1, [sp, #640]	; 0x280
 8006996:	49a6      	ldr	r1, [pc, #664]	; (8006c30 <__ssvfiscanf_r+0x2b4>)
 8006998:	4fa6      	ldr	r7, [pc, #664]	; (8006c34 <__ssvfiscanf_r+0x2b8>)
 800699a:	f8df 929c 	ldr.w	r9, [pc, #668]	; 8006c38 <__ssvfiscanf_r+0x2bc>
 800699e:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80069a2:	91a1      	str	r1, [sp, #644]	; 0x284
 80069a4:	9300      	str	r3, [sp, #0]
 80069a6:	7813      	ldrb	r3, [r2, #0]
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	f000 815c 	beq.w	8006c66 <__ssvfiscanf_r+0x2ea>
 80069ae:	5dd9      	ldrb	r1, [r3, r7]
 80069b0:	1c55      	adds	r5, r2, #1
 80069b2:	f011 0108 	ands.w	r1, r1, #8
 80069b6:	d019      	beq.n	80069ec <__ssvfiscanf_r+0x70>
 80069b8:	6863      	ldr	r3, [r4, #4]
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	dd0f      	ble.n	80069de <__ssvfiscanf_r+0x62>
 80069be:	6823      	ldr	r3, [r4, #0]
 80069c0:	781a      	ldrb	r2, [r3, #0]
 80069c2:	5cba      	ldrb	r2, [r7, r2]
 80069c4:	0712      	lsls	r2, r2, #28
 80069c6:	d401      	bmi.n	80069cc <__ssvfiscanf_r+0x50>
 80069c8:	462a      	mov	r2, r5
 80069ca:	e7ec      	b.n	80069a6 <__ssvfiscanf_r+0x2a>
 80069cc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80069ce:	3301      	adds	r3, #1
 80069d0:	3201      	adds	r2, #1
 80069d2:	9245      	str	r2, [sp, #276]	; 0x114
 80069d4:	6862      	ldr	r2, [r4, #4]
 80069d6:	6023      	str	r3, [r4, #0]
 80069d8:	3a01      	subs	r2, #1
 80069da:	6062      	str	r2, [r4, #4]
 80069dc:	e7ec      	b.n	80069b8 <__ssvfiscanf_r+0x3c>
 80069de:	4621      	mov	r1, r4
 80069e0:	4630      	mov	r0, r6
 80069e2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80069e4:	4798      	blx	r3
 80069e6:	2800      	cmp	r0, #0
 80069e8:	d0e9      	beq.n	80069be <__ssvfiscanf_r+0x42>
 80069ea:	e7ed      	b.n	80069c8 <__ssvfiscanf_r+0x4c>
 80069ec:	2b25      	cmp	r3, #37	; 0x25
 80069ee:	d012      	beq.n	8006a16 <__ssvfiscanf_r+0x9a>
 80069f0:	469a      	mov	sl, r3
 80069f2:	6863      	ldr	r3, [r4, #4]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	f340 8094 	ble.w	8006b22 <__ssvfiscanf_r+0x1a6>
 80069fa:	6822      	ldr	r2, [r4, #0]
 80069fc:	7813      	ldrb	r3, [r2, #0]
 80069fe:	4553      	cmp	r3, sl
 8006a00:	f040 8131 	bne.w	8006c66 <__ssvfiscanf_r+0x2ea>
 8006a04:	6863      	ldr	r3, [r4, #4]
 8006a06:	3201      	adds	r2, #1
 8006a08:	3b01      	subs	r3, #1
 8006a0a:	6063      	str	r3, [r4, #4]
 8006a0c:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8006a0e:	6022      	str	r2, [r4, #0]
 8006a10:	3301      	adds	r3, #1
 8006a12:	9345      	str	r3, [sp, #276]	; 0x114
 8006a14:	e7d8      	b.n	80069c8 <__ssvfiscanf_r+0x4c>
 8006a16:	9141      	str	r1, [sp, #260]	; 0x104
 8006a18:	9143      	str	r1, [sp, #268]	; 0x10c
 8006a1a:	7853      	ldrb	r3, [r2, #1]
 8006a1c:	2b2a      	cmp	r3, #42	; 0x2a
 8006a1e:	bf04      	itt	eq
 8006a20:	2310      	moveq	r3, #16
 8006a22:	1c95      	addeq	r5, r2, #2
 8006a24:	f04f 020a 	mov.w	r2, #10
 8006a28:	bf08      	it	eq
 8006a2a:	9341      	streq	r3, [sp, #260]	; 0x104
 8006a2c:	46aa      	mov	sl, r5
 8006a2e:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8006a32:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8006a36:	2b09      	cmp	r3, #9
 8006a38:	d91d      	bls.n	8006a76 <__ssvfiscanf_r+0xfa>
 8006a3a:	2203      	movs	r2, #3
 8006a3c:	487e      	ldr	r0, [pc, #504]	; (8006c38 <__ssvfiscanf_r+0x2bc>)
 8006a3e:	f000 fce5 	bl	800740c <memchr>
 8006a42:	b140      	cbz	r0, 8006a56 <__ssvfiscanf_r+0xda>
 8006a44:	2301      	movs	r3, #1
 8006a46:	4655      	mov	r5, sl
 8006a48:	eba0 0009 	sub.w	r0, r0, r9
 8006a4c:	fa03 f000 	lsl.w	r0, r3, r0
 8006a50:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006a52:	4318      	orrs	r0, r3
 8006a54:	9041      	str	r0, [sp, #260]	; 0x104
 8006a56:	f815 3b01 	ldrb.w	r3, [r5], #1
 8006a5a:	2b78      	cmp	r3, #120	; 0x78
 8006a5c:	d806      	bhi.n	8006a6c <__ssvfiscanf_r+0xf0>
 8006a5e:	2b57      	cmp	r3, #87	; 0x57
 8006a60:	d810      	bhi.n	8006a84 <__ssvfiscanf_r+0x108>
 8006a62:	2b25      	cmp	r3, #37	; 0x25
 8006a64:	d0c4      	beq.n	80069f0 <__ssvfiscanf_r+0x74>
 8006a66:	d857      	bhi.n	8006b18 <__ssvfiscanf_r+0x19c>
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d065      	beq.n	8006b38 <__ssvfiscanf_r+0x1bc>
 8006a6c:	2303      	movs	r3, #3
 8006a6e:	9347      	str	r3, [sp, #284]	; 0x11c
 8006a70:	230a      	movs	r3, #10
 8006a72:	9342      	str	r3, [sp, #264]	; 0x108
 8006a74:	e072      	b.n	8006b5c <__ssvfiscanf_r+0x1e0>
 8006a76:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8006a78:	4655      	mov	r5, sl
 8006a7a:	fb02 1103 	mla	r1, r2, r3, r1
 8006a7e:	3930      	subs	r1, #48	; 0x30
 8006a80:	9143      	str	r1, [sp, #268]	; 0x10c
 8006a82:	e7d3      	b.n	8006a2c <__ssvfiscanf_r+0xb0>
 8006a84:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8006a88:	2a20      	cmp	r2, #32
 8006a8a:	d8ef      	bhi.n	8006a6c <__ssvfiscanf_r+0xf0>
 8006a8c:	a101      	add	r1, pc, #4	; (adr r1, 8006a94 <__ssvfiscanf_r+0x118>)
 8006a8e:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006a92:	bf00      	nop
 8006a94:	08006b47 	.word	0x08006b47
 8006a98:	08006a6d 	.word	0x08006a6d
 8006a9c:	08006a6d 	.word	0x08006a6d
 8006aa0:	08006ba5 	.word	0x08006ba5
 8006aa4:	08006a6d 	.word	0x08006a6d
 8006aa8:	08006a6d 	.word	0x08006a6d
 8006aac:	08006a6d 	.word	0x08006a6d
 8006ab0:	08006a6d 	.word	0x08006a6d
 8006ab4:	08006a6d 	.word	0x08006a6d
 8006ab8:	08006a6d 	.word	0x08006a6d
 8006abc:	08006a6d 	.word	0x08006a6d
 8006ac0:	08006bbb 	.word	0x08006bbb
 8006ac4:	08006b91 	.word	0x08006b91
 8006ac8:	08006b1f 	.word	0x08006b1f
 8006acc:	08006b1f 	.word	0x08006b1f
 8006ad0:	08006b1f 	.word	0x08006b1f
 8006ad4:	08006a6d 	.word	0x08006a6d
 8006ad8:	08006b95 	.word	0x08006b95
 8006adc:	08006a6d 	.word	0x08006a6d
 8006ae0:	08006a6d 	.word	0x08006a6d
 8006ae4:	08006a6d 	.word	0x08006a6d
 8006ae8:	08006a6d 	.word	0x08006a6d
 8006aec:	08006bcb 	.word	0x08006bcb
 8006af0:	08006b9d 	.word	0x08006b9d
 8006af4:	08006b3f 	.word	0x08006b3f
 8006af8:	08006a6d 	.word	0x08006a6d
 8006afc:	08006a6d 	.word	0x08006a6d
 8006b00:	08006bc7 	.word	0x08006bc7
 8006b04:	08006a6d 	.word	0x08006a6d
 8006b08:	08006b91 	.word	0x08006b91
 8006b0c:	08006a6d 	.word	0x08006a6d
 8006b10:	08006a6d 	.word	0x08006a6d
 8006b14:	08006b47 	.word	0x08006b47
 8006b18:	3b45      	subs	r3, #69	; 0x45
 8006b1a:	2b02      	cmp	r3, #2
 8006b1c:	d8a6      	bhi.n	8006a6c <__ssvfiscanf_r+0xf0>
 8006b1e:	2305      	movs	r3, #5
 8006b20:	e01b      	b.n	8006b5a <__ssvfiscanf_r+0x1de>
 8006b22:	4621      	mov	r1, r4
 8006b24:	4630      	mov	r0, r6
 8006b26:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006b28:	4798      	blx	r3
 8006b2a:	2800      	cmp	r0, #0
 8006b2c:	f43f af65 	beq.w	80069fa <__ssvfiscanf_r+0x7e>
 8006b30:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006b32:	2800      	cmp	r0, #0
 8006b34:	f040 808d 	bne.w	8006c52 <__ssvfiscanf_r+0x2d6>
 8006b38:	f04f 30ff 	mov.w	r0, #4294967295
 8006b3c:	e08f      	b.n	8006c5e <__ssvfiscanf_r+0x2e2>
 8006b3e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006b40:	f042 0220 	orr.w	r2, r2, #32
 8006b44:	9241      	str	r2, [sp, #260]	; 0x104
 8006b46:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8006b48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b4c:	9241      	str	r2, [sp, #260]	; 0x104
 8006b4e:	2210      	movs	r2, #16
 8006b50:	2b6f      	cmp	r3, #111	; 0x6f
 8006b52:	bf34      	ite	cc
 8006b54:	2303      	movcc	r3, #3
 8006b56:	2304      	movcs	r3, #4
 8006b58:	9242      	str	r2, [sp, #264]	; 0x108
 8006b5a:	9347      	str	r3, [sp, #284]	; 0x11c
 8006b5c:	6863      	ldr	r3, [r4, #4]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	dd42      	ble.n	8006be8 <__ssvfiscanf_r+0x26c>
 8006b62:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006b64:	0659      	lsls	r1, r3, #25
 8006b66:	d404      	bmi.n	8006b72 <__ssvfiscanf_r+0x1f6>
 8006b68:	6823      	ldr	r3, [r4, #0]
 8006b6a:	781a      	ldrb	r2, [r3, #0]
 8006b6c:	5cba      	ldrb	r2, [r7, r2]
 8006b6e:	0712      	lsls	r2, r2, #28
 8006b70:	d441      	bmi.n	8006bf6 <__ssvfiscanf_r+0x27a>
 8006b72:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8006b74:	2b02      	cmp	r3, #2
 8006b76:	dc50      	bgt.n	8006c1a <__ssvfiscanf_r+0x29e>
 8006b78:	466b      	mov	r3, sp
 8006b7a:	4622      	mov	r2, r4
 8006b7c:	4630      	mov	r0, r6
 8006b7e:	a941      	add	r1, sp, #260	; 0x104
 8006b80:	f000 fa0c 	bl	8006f9c <_scanf_chars>
 8006b84:	2801      	cmp	r0, #1
 8006b86:	d06e      	beq.n	8006c66 <__ssvfiscanf_r+0x2ea>
 8006b88:	2802      	cmp	r0, #2
 8006b8a:	f47f af1d 	bne.w	80069c8 <__ssvfiscanf_r+0x4c>
 8006b8e:	e7cf      	b.n	8006b30 <__ssvfiscanf_r+0x1b4>
 8006b90:	220a      	movs	r2, #10
 8006b92:	e7dd      	b.n	8006b50 <__ssvfiscanf_r+0x1d4>
 8006b94:	2300      	movs	r3, #0
 8006b96:	9342      	str	r3, [sp, #264]	; 0x108
 8006b98:	2303      	movs	r3, #3
 8006b9a:	e7de      	b.n	8006b5a <__ssvfiscanf_r+0x1de>
 8006b9c:	2308      	movs	r3, #8
 8006b9e:	9342      	str	r3, [sp, #264]	; 0x108
 8006ba0:	2304      	movs	r3, #4
 8006ba2:	e7da      	b.n	8006b5a <__ssvfiscanf_r+0x1de>
 8006ba4:	4629      	mov	r1, r5
 8006ba6:	4640      	mov	r0, r8
 8006ba8:	f000 fb4a 	bl	8007240 <__sccl>
 8006bac:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006bae:	4605      	mov	r5, r0
 8006bb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bb4:	9341      	str	r3, [sp, #260]	; 0x104
 8006bb6:	2301      	movs	r3, #1
 8006bb8:	e7cf      	b.n	8006b5a <__ssvfiscanf_r+0x1de>
 8006bba:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8006bbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006bc0:	9341      	str	r3, [sp, #260]	; 0x104
 8006bc2:	2300      	movs	r3, #0
 8006bc4:	e7c9      	b.n	8006b5a <__ssvfiscanf_r+0x1de>
 8006bc6:	2302      	movs	r3, #2
 8006bc8:	e7c7      	b.n	8006b5a <__ssvfiscanf_r+0x1de>
 8006bca:	9841      	ldr	r0, [sp, #260]	; 0x104
 8006bcc:	06c3      	lsls	r3, r0, #27
 8006bce:	f53f aefb 	bmi.w	80069c8 <__ssvfiscanf_r+0x4c>
 8006bd2:	9b00      	ldr	r3, [sp, #0]
 8006bd4:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006bd6:	1d19      	adds	r1, r3, #4
 8006bd8:	9100      	str	r1, [sp, #0]
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	f010 0f01 	tst.w	r0, #1
 8006be0:	bf14      	ite	ne
 8006be2:	801a      	strhne	r2, [r3, #0]
 8006be4:	601a      	streq	r2, [r3, #0]
 8006be6:	e6ef      	b.n	80069c8 <__ssvfiscanf_r+0x4c>
 8006be8:	4621      	mov	r1, r4
 8006bea:	4630      	mov	r0, r6
 8006bec:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006bee:	4798      	blx	r3
 8006bf0:	2800      	cmp	r0, #0
 8006bf2:	d0b6      	beq.n	8006b62 <__ssvfiscanf_r+0x1e6>
 8006bf4:	e79c      	b.n	8006b30 <__ssvfiscanf_r+0x1b4>
 8006bf6:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8006bf8:	3201      	adds	r2, #1
 8006bfa:	9245      	str	r2, [sp, #276]	; 0x114
 8006bfc:	6862      	ldr	r2, [r4, #4]
 8006bfe:	3a01      	subs	r2, #1
 8006c00:	2a00      	cmp	r2, #0
 8006c02:	6062      	str	r2, [r4, #4]
 8006c04:	dd02      	ble.n	8006c0c <__ssvfiscanf_r+0x290>
 8006c06:	3301      	adds	r3, #1
 8006c08:	6023      	str	r3, [r4, #0]
 8006c0a:	e7ad      	b.n	8006b68 <__ssvfiscanf_r+0x1ec>
 8006c0c:	4621      	mov	r1, r4
 8006c0e:	4630      	mov	r0, r6
 8006c10:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8006c12:	4798      	blx	r3
 8006c14:	2800      	cmp	r0, #0
 8006c16:	d0a7      	beq.n	8006b68 <__ssvfiscanf_r+0x1ec>
 8006c18:	e78a      	b.n	8006b30 <__ssvfiscanf_r+0x1b4>
 8006c1a:	2b04      	cmp	r3, #4
 8006c1c:	dc0e      	bgt.n	8006c3c <__ssvfiscanf_r+0x2c0>
 8006c1e:	466b      	mov	r3, sp
 8006c20:	4622      	mov	r2, r4
 8006c22:	4630      	mov	r0, r6
 8006c24:	a941      	add	r1, sp, #260	; 0x104
 8006c26:	f000 fa13 	bl	8007050 <_scanf_i>
 8006c2a:	e7ab      	b.n	8006b84 <__ssvfiscanf_r+0x208>
 8006c2c:	080068c9 	.word	0x080068c9
 8006c30:	08006943 	.word	0x08006943
 8006c34:	08007a86 	.word	0x08007a86
 8006c38:	08007b8c 	.word	0x08007b8c
 8006c3c:	4b0b      	ldr	r3, [pc, #44]	; (8006c6c <__ssvfiscanf_r+0x2f0>)
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	f43f aec2 	beq.w	80069c8 <__ssvfiscanf_r+0x4c>
 8006c44:	466b      	mov	r3, sp
 8006c46:	4622      	mov	r2, r4
 8006c48:	4630      	mov	r0, r6
 8006c4a:	a941      	add	r1, sp, #260	; 0x104
 8006c4c:	f3af 8000 	nop.w
 8006c50:	e798      	b.n	8006b84 <__ssvfiscanf_r+0x208>
 8006c52:	89a3      	ldrh	r3, [r4, #12]
 8006c54:	f013 0f40 	tst.w	r3, #64	; 0x40
 8006c58:	bf18      	it	ne
 8006c5a:	f04f 30ff 	movne.w	r0, #4294967295
 8006c5e:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8006c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c66:	9844      	ldr	r0, [sp, #272]	; 0x110
 8006c68:	e7f9      	b.n	8006c5e <__ssvfiscanf_r+0x2e2>
 8006c6a:	bf00      	nop
 8006c6c:	00000000 	.word	0x00000000

08006c70 <_printf_common>:
 8006c70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006c74:	4616      	mov	r6, r2
 8006c76:	4699      	mov	r9, r3
 8006c78:	688a      	ldr	r2, [r1, #8]
 8006c7a:	690b      	ldr	r3, [r1, #16]
 8006c7c:	4607      	mov	r7, r0
 8006c7e:	4293      	cmp	r3, r2
 8006c80:	bfb8      	it	lt
 8006c82:	4613      	movlt	r3, r2
 8006c84:	6033      	str	r3, [r6, #0]
 8006c86:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006c8a:	460c      	mov	r4, r1
 8006c8c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006c90:	b10a      	cbz	r2, 8006c96 <_printf_common+0x26>
 8006c92:	3301      	adds	r3, #1
 8006c94:	6033      	str	r3, [r6, #0]
 8006c96:	6823      	ldr	r3, [r4, #0]
 8006c98:	0699      	lsls	r1, r3, #26
 8006c9a:	bf42      	ittt	mi
 8006c9c:	6833      	ldrmi	r3, [r6, #0]
 8006c9e:	3302      	addmi	r3, #2
 8006ca0:	6033      	strmi	r3, [r6, #0]
 8006ca2:	6825      	ldr	r5, [r4, #0]
 8006ca4:	f015 0506 	ands.w	r5, r5, #6
 8006ca8:	d106      	bne.n	8006cb8 <_printf_common+0x48>
 8006caa:	f104 0a19 	add.w	sl, r4, #25
 8006cae:	68e3      	ldr	r3, [r4, #12]
 8006cb0:	6832      	ldr	r2, [r6, #0]
 8006cb2:	1a9b      	subs	r3, r3, r2
 8006cb4:	42ab      	cmp	r3, r5
 8006cb6:	dc28      	bgt.n	8006d0a <_printf_common+0x9a>
 8006cb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006cbc:	1e13      	subs	r3, r2, #0
 8006cbe:	6822      	ldr	r2, [r4, #0]
 8006cc0:	bf18      	it	ne
 8006cc2:	2301      	movne	r3, #1
 8006cc4:	0692      	lsls	r2, r2, #26
 8006cc6:	d42d      	bmi.n	8006d24 <_printf_common+0xb4>
 8006cc8:	4649      	mov	r1, r9
 8006cca:	4638      	mov	r0, r7
 8006ccc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006cd0:	47c0      	blx	r8
 8006cd2:	3001      	adds	r0, #1
 8006cd4:	d020      	beq.n	8006d18 <_printf_common+0xa8>
 8006cd6:	6823      	ldr	r3, [r4, #0]
 8006cd8:	68e5      	ldr	r5, [r4, #12]
 8006cda:	f003 0306 	and.w	r3, r3, #6
 8006cde:	2b04      	cmp	r3, #4
 8006ce0:	bf18      	it	ne
 8006ce2:	2500      	movne	r5, #0
 8006ce4:	6832      	ldr	r2, [r6, #0]
 8006ce6:	f04f 0600 	mov.w	r6, #0
 8006cea:	68a3      	ldr	r3, [r4, #8]
 8006cec:	bf08      	it	eq
 8006cee:	1aad      	subeq	r5, r5, r2
 8006cf0:	6922      	ldr	r2, [r4, #16]
 8006cf2:	bf08      	it	eq
 8006cf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006cf8:	4293      	cmp	r3, r2
 8006cfa:	bfc4      	itt	gt
 8006cfc:	1a9b      	subgt	r3, r3, r2
 8006cfe:	18ed      	addgt	r5, r5, r3
 8006d00:	341a      	adds	r4, #26
 8006d02:	42b5      	cmp	r5, r6
 8006d04:	d11a      	bne.n	8006d3c <_printf_common+0xcc>
 8006d06:	2000      	movs	r0, #0
 8006d08:	e008      	b.n	8006d1c <_printf_common+0xac>
 8006d0a:	2301      	movs	r3, #1
 8006d0c:	4652      	mov	r2, sl
 8006d0e:	4649      	mov	r1, r9
 8006d10:	4638      	mov	r0, r7
 8006d12:	47c0      	blx	r8
 8006d14:	3001      	adds	r0, #1
 8006d16:	d103      	bne.n	8006d20 <_printf_common+0xb0>
 8006d18:	f04f 30ff 	mov.w	r0, #4294967295
 8006d1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d20:	3501      	adds	r5, #1
 8006d22:	e7c4      	b.n	8006cae <_printf_common+0x3e>
 8006d24:	2030      	movs	r0, #48	; 0x30
 8006d26:	18e1      	adds	r1, r4, r3
 8006d28:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006d2c:	1c5a      	adds	r2, r3, #1
 8006d2e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006d32:	4422      	add	r2, r4
 8006d34:	3302      	adds	r3, #2
 8006d36:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006d3a:	e7c5      	b.n	8006cc8 <_printf_common+0x58>
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	4622      	mov	r2, r4
 8006d40:	4649      	mov	r1, r9
 8006d42:	4638      	mov	r0, r7
 8006d44:	47c0      	blx	r8
 8006d46:	3001      	adds	r0, #1
 8006d48:	d0e6      	beq.n	8006d18 <_printf_common+0xa8>
 8006d4a:	3601      	adds	r6, #1
 8006d4c:	e7d9      	b.n	8006d02 <_printf_common+0x92>
	...

08006d50 <_printf_i>:
 8006d50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006d54:	7e0f      	ldrb	r7, [r1, #24]
 8006d56:	4691      	mov	r9, r2
 8006d58:	2f78      	cmp	r7, #120	; 0x78
 8006d5a:	4680      	mov	r8, r0
 8006d5c:	460c      	mov	r4, r1
 8006d5e:	469a      	mov	sl, r3
 8006d60:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006d62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006d66:	d807      	bhi.n	8006d78 <_printf_i+0x28>
 8006d68:	2f62      	cmp	r7, #98	; 0x62
 8006d6a:	d80a      	bhi.n	8006d82 <_printf_i+0x32>
 8006d6c:	2f00      	cmp	r7, #0
 8006d6e:	f000 80d9 	beq.w	8006f24 <_printf_i+0x1d4>
 8006d72:	2f58      	cmp	r7, #88	; 0x58
 8006d74:	f000 80a4 	beq.w	8006ec0 <_printf_i+0x170>
 8006d78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006d80:	e03a      	b.n	8006df8 <_printf_i+0xa8>
 8006d82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006d86:	2b15      	cmp	r3, #21
 8006d88:	d8f6      	bhi.n	8006d78 <_printf_i+0x28>
 8006d8a:	a101      	add	r1, pc, #4	; (adr r1, 8006d90 <_printf_i+0x40>)
 8006d8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006d90:	08006de9 	.word	0x08006de9
 8006d94:	08006dfd 	.word	0x08006dfd
 8006d98:	08006d79 	.word	0x08006d79
 8006d9c:	08006d79 	.word	0x08006d79
 8006da0:	08006d79 	.word	0x08006d79
 8006da4:	08006d79 	.word	0x08006d79
 8006da8:	08006dfd 	.word	0x08006dfd
 8006dac:	08006d79 	.word	0x08006d79
 8006db0:	08006d79 	.word	0x08006d79
 8006db4:	08006d79 	.word	0x08006d79
 8006db8:	08006d79 	.word	0x08006d79
 8006dbc:	08006f0b 	.word	0x08006f0b
 8006dc0:	08006e2d 	.word	0x08006e2d
 8006dc4:	08006eed 	.word	0x08006eed
 8006dc8:	08006d79 	.word	0x08006d79
 8006dcc:	08006d79 	.word	0x08006d79
 8006dd0:	08006f2d 	.word	0x08006f2d
 8006dd4:	08006d79 	.word	0x08006d79
 8006dd8:	08006e2d 	.word	0x08006e2d
 8006ddc:	08006d79 	.word	0x08006d79
 8006de0:	08006d79 	.word	0x08006d79
 8006de4:	08006ef5 	.word	0x08006ef5
 8006de8:	682b      	ldr	r3, [r5, #0]
 8006dea:	1d1a      	adds	r2, r3, #4
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	602a      	str	r2, [r5, #0]
 8006df0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006df4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e0a4      	b.n	8006f46 <_printf_i+0x1f6>
 8006dfc:	6820      	ldr	r0, [r4, #0]
 8006dfe:	6829      	ldr	r1, [r5, #0]
 8006e00:	0606      	lsls	r6, r0, #24
 8006e02:	f101 0304 	add.w	r3, r1, #4
 8006e06:	d50a      	bpl.n	8006e1e <_printf_i+0xce>
 8006e08:	680e      	ldr	r6, [r1, #0]
 8006e0a:	602b      	str	r3, [r5, #0]
 8006e0c:	2e00      	cmp	r6, #0
 8006e0e:	da03      	bge.n	8006e18 <_printf_i+0xc8>
 8006e10:	232d      	movs	r3, #45	; 0x2d
 8006e12:	4276      	negs	r6, r6
 8006e14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e18:	230a      	movs	r3, #10
 8006e1a:	485e      	ldr	r0, [pc, #376]	; (8006f94 <_printf_i+0x244>)
 8006e1c:	e019      	b.n	8006e52 <_printf_i+0x102>
 8006e1e:	680e      	ldr	r6, [r1, #0]
 8006e20:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006e24:	602b      	str	r3, [r5, #0]
 8006e26:	bf18      	it	ne
 8006e28:	b236      	sxthne	r6, r6
 8006e2a:	e7ef      	b.n	8006e0c <_printf_i+0xbc>
 8006e2c:	682b      	ldr	r3, [r5, #0]
 8006e2e:	6820      	ldr	r0, [r4, #0]
 8006e30:	1d19      	adds	r1, r3, #4
 8006e32:	6029      	str	r1, [r5, #0]
 8006e34:	0601      	lsls	r1, r0, #24
 8006e36:	d501      	bpl.n	8006e3c <_printf_i+0xec>
 8006e38:	681e      	ldr	r6, [r3, #0]
 8006e3a:	e002      	b.n	8006e42 <_printf_i+0xf2>
 8006e3c:	0646      	lsls	r6, r0, #25
 8006e3e:	d5fb      	bpl.n	8006e38 <_printf_i+0xe8>
 8006e40:	881e      	ldrh	r6, [r3, #0]
 8006e42:	2f6f      	cmp	r7, #111	; 0x6f
 8006e44:	bf0c      	ite	eq
 8006e46:	2308      	moveq	r3, #8
 8006e48:	230a      	movne	r3, #10
 8006e4a:	4852      	ldr	r0, [pc, #328]	; (8006f94 <_printf_i+0x244>)
 8006e4c:	2100      	movs	r1, #0
 8006e4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006e52:	6865      	ldr	r5, [r4, #4]
 8006e54:	2d00      	cmp	r5, #0
 8006e56:	bfa8      	it	ge
 8006e58:	6821      	ldrge	r1, [r4, #0]
 8006e5a:	60a5      	str	r5, [r4, #8]
 8006e5c:	bfa4      	itt	ge
 8006e5e:	f021 0104 	bicge.w	r1, r1, #4
 8006e62:	6021      	strge	r1, [r4, #0]
 8006e64:	b90e      	cbnz	r6, 8006e6a <_printf_i+0x11a>
 8006e66:	2d00      	cmp	r5, #0
 8006e68:	d04d      	beq.n	8006f06 <_printf_i+0x1b6>
 8006e6a:	4615      	mov	r5, r2
 8006e6c:	fbb6 f1f3 	udiv	r1, r6, r3
 8006e70:	fb03 6711 	mls	r7, r3, r1, r6
 8006e74:	5dc7      	ldrb	r7, [r0, r7]
 8006e76:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006e7a:	4637      	mov	r7, r6
 8006e7c:	42bb      	cmp	r3, r7
 8006e7e:	460e      	mov	r6, r1
 8006e80:	d9f4      	bls.n	8006e6c <_printf_i+0x11c>
 8006e82:	2b08      	cmp	r3, #8
 8006e84:	d10b      	bne.n	8006e9e <_printf_i+0x14e>
 8006e86:	6823      	ldr	r3, [r4, #0]
 8006e88:	07de      	lsls	r6, r3, #31
 8006e8a:	d508      	bpl.n	8006e9e <_printf_i+0x14e>
 8006e8c:	6923      	ldr	r3, [r4, #16]
 8006e8e:	6861      	ldr	r1, [r4, #4]
 8006e90:	4299      	cmp	r1, r3
 8006e92:	bfde      	ittt	le
 8006e94:	2330      	movle	r3, #48	; 0x30
 8006e96:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006e9a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006e9e:	1b52      	subs	r2, r2, r5
 8006ea0:	6122      	str	r2, [r4, #16]
 8006ea2:	464b      	mov	r3, r9
 8006ea4:	4621      	mov	r1, r4
 8006ea6:	4640      	mov	r0, r8
 8006ea8:	f8cd a000 	str.w	sl, [sp]
 8006eac:	aa03      	add	r2, sp, #12
 8006eae:	f7ff fedf 	bl	8006c70 <_printf_common>
 8006eb2:	3001      	adds	r0, #1
 8006eb4:	d14c      	bne.n	8006f50 <_printf_i+0x200>
 8006eb6:	f04f 30ff 	mov.w	r0, #4294967295
 8006eba:	b004      	add	sp, #16
 8006ebc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ec0:	4834      	ldr	r0, [pc, #208]	; (8006f94 <_printf_i+0x244>)
 8006ec2:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006ec6:	6829      	ldr	r1, [r5, #0]
 8006ec8:	6823      	ldr	r3, [r4, #0]
 8006eca:	f851 6b04 	ldr.w	r6, [r1], #4
 8006ece:	6029      	str	r1, [r5, #0]
 8006ed0:	061d      	lsls	r5, r3, #24
 8006ed2:	d514      	bpl.n	8006efe <_printf_i+0x1ae>
 8006ed4:	07df      	lsls	r7, r3, #31
 8006ed6:	bf44      	itt	mi
 8006ed8:	f043 0320 	orrmi.w	r3, r3, #32
 8006edc:	6023      	strmi	r3, [r4, #0]
 8006ede:	b91e      	cbnz	r6, 8006ee8 <_printf_i+0x198>
 8006ee0:	6823      	ldr	r3, [r4, #0]
 8006ee2:	f023 0320 	bic.w	r3, r3, #32
 8006ee6:	6023      	str	r3, [r4, #0]
 8006ee8:	2310      	movs	r3, #16
 8006eea:	e7af      	b.n	8006e4c <_printf_i+0xfc>
 8006eec:	6823      	ldr	r3, [r4, #0]
 8006eee:	f043 0320 	orr.w	r3, r3, #32
 8006ef2:	6023      	str	r3, [r4, #0]
 8006ef4:	2378      	movs	r3, #120	; 0x78
 8006ef6:	4828      	ldr	r0, [pc, #160]	; (8006f98 <_printf_i+0x248>)
 8006ef8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006efc:	e7e3      	b.n	8006ec6 <_printf_i+0x176>
 8006efe:	0659      	lsls	r1, r3, #25
 8006f00:	bf48      	it	mi
 8006f02:	b2b6      	uxthmi	r6, r6
 8006f04:	e7e6      	b.n	8006ed4 <_printf_i+0x184>
 8006f06:	4615      	mov	r5, r2
 8006f08:	e7bb      	b.n	8006e82 <_printf_i+0x132>
 8006f0a:	682b      	ldr	r3, [r5, #0]
 8006f0c:	6826      	ldr	r6, [r4, #0]
 8006f0e:	1d18      	adds	r0, r3, #4
 8006f10:	6961      	ldr	r1, [r4, #20]
 8006f12:	6028      	str	r0, [r5, #0]
 8006f14:	0635      	lsls	r5, r6, #24
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	d501      	bpl.n	8006f1e <_printf_i+0x1ce>
 8006f1a:	6019      	str	r1, [r3, #0]
 8006f1c:	e002      	b.n	8006f24 <_printf_i+0x1d4>
 8006f1e:	0670      	lsls	r0, r6, #25
 8006f20:	d5fb      	bpl.n	8006f1a <_printf_i+0x1ca>
 8006f22:	8019      	strh	r1, [r3, #0]
 8006f24:	2300      	movs	r3, #0
 8006f26:	4615      	mov	r5, r2
 8006f28:	6123      	str	r3, [r4, #16]
 8006f2a:	e7ba      	b.n	8006ea2 <_printf_i+0x152>
 8006f2c:	682b      	ldr	r3, [r5, #0]
 8006f2e:	2100      	movs	r1, #0
 8006f30:	1d1a      	adds	r2, r3, #4
 8006f32:	602a      	str	r2, [r5, #0]
 8006f34:	681d      	ldr	r5, [r3, #0]
 8006f36:	6862      	ldr	r2, [r4, #4]
 8006f38:	4628      	mov	r0, r5
 8006f3a:	f000 fa67 	bl	800740c <memchr>
 8006f3e:	b108      	cbz	r0, 8006f44 <_printf_i+0x1f4>
 8006f40:	1b40      	subs	r0, r0, r5
 8006f42:	6060      	str	r0, [r4, #4]
 8006f44:	6863      	ldr	r3, [r4, #4]
 8006f46:	6123      	str	r3, [r4, #16]
 8006f48:	2300      	movs	r3, #0
 8006f4a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f4e:	e7a8      	b.n	8006ea2 <_printf_i+0x152>
 8006f50:	462a      	mov	r2, r5
 8006f52:	4649      	mov	r1, r9
 8006f54:	4640      	mov	r0, r8
 8006f56:	6923      	ldr	r3, [r4, #16]
 8006f58:	47d0      	blx	sl
 8006f5a:	3001      	adds	r0, #1
 8006f5c:	d0ab      	beq.n	8006eb6 <_printf_i+0x166>
 8006f5e:	6823      	ldr	r3, [r4, #0]
 8006f60:	079b      	lsls	r3, r3, #30
 8006f62:	d413      	bmi.n	8006f8c <_printf_i+0x23c>
 8006f64:	68e0      	ldr	r0, [r4, #12]
 8006f66:	9b03      	ldr	r3, [sp, #12]
 8006f68:	4298      	cmp	r0, r3
 8006f6a:	bfb8      	it	lt
 8006f6c:	4618      	movlt	r0, r3
 8006f6e:	e7a4      	b.n	8006eba <_printf_i+0x16a>
 8006f70:	2301      	movs	r3, #1
 8006f72:	4632      	mov	r2, r6
 8006f74:	4649      	mov	r1, r9
 8006f76:	4640      	mov	r0, r8
 8006f78:	47d0      	blx	sl
 8006f7a:	3001      	adds	r0, #1
 8006f7c:	d09b      	beq.n	8006eb6 <_printf_i+0x166>
 8006f7e:	3501      	adds	r5, #1
 8006f80:	68e3      	ldr	r3, [r4, #12]
 8006f82:	9903      	ldr	r1, [sp, #12]
 8006f84:	1a5b      	subs	r3, r3, r1
 8006f86:	42ab      	cmp	r3, r5
 8006f88:	dcf2      	bgt.n	8006f70 <_printf_i+0x220>
 8006f8a:	e7eb      	b.n	8006f64 <_printf_i+0x214>
 8006f8c:	2500      	movs	r5, #0
 8006f8e:	f104 0619 	add.w	r6, r4, #25
 8006f92:	e7f5      	b.n	8006f80 <_printf_i+0x230>
 8006f94:	08007b97 	.word	0x08007b97
 8006f98:	08007ba8 	.word	0x08007ba8

08006f9c <_scanf_chars>:
 8006f9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fa0:	4615      	mov	r5, r2
 8006fa2:	688a      	ldr	r2, [r1, #8]
 8006fa4:	4680      	mov	r8, r0
 8006fa6:	460c      	mov	r4, r1
 8006fa8:	b932      	cbnz	r2, 8006fb8 <_scanf_chars+0x1c>
 8006faa:	698a      	ldr	r2, [r1, #24]
 8006fac:	2a00      	cmp	r2, #0
 8006fae:	bf0c      	ite	eq
 8006fb0:	2201      	moveq	r2, #1
 8006fb2:	f04f 32ff 	movne.w	r2, #4294967295
 8006fb6:	608a      	str	r2, [r1, #8]
 8006fb8:	2700      	movs	r7, #0
 8006fba:	6822      	ldr	r2, [r4, #0]
 8006fbc:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800704c <_scanf_chars+0xb0>
 8006fc0:	06d1      	lsls	r1, r2, #27
 8006fc2:	bf5f      	itttt	pl
 8006fc4:	681a      	ldrpl	r2, [r3, #0]
 8006fc6:	1d11      	addpl	r1, r2, #4
 8006fc8:	6019      	strpl	r1, [r3, #0]
 8006fca:	6816      	ldrpl	r6, [r2, #0]
 8006fcc:	69a0      	ldr	r0, [r4, #24]
 8006fce:	b188      	cbz	r0, 8006ff4 <_scanf_chars+0x58>
 8006fd0:	2801      	cmp	r0, #1
 8006fd2:	d107      	bne.n	8006fe4 <_scanf_chars+0x48>
 8006fd4:	682b      	ldr	r3, [r5, #0]
 8006fd6:	781a      	ldrb	r2, [r3, #0]
 8006fd8:	6963      	ldr	r3, [r4, #20]
 8006fda:	5c9b      	ldrb	r3, [r3, r2]
 8006fdc:	b953      	cbnz	r3, 8006ff4 <_scanf_chars+0x58>
 8006fde:	2f00      	cmp	r7, #0
 8006fe0:	d031      	beq.n	8007046 <_scanf_chars+0xaa>
 8006fe2:	e022      	b.n	800702a <_scanf_chars+0x8e>
 8006fe4:	2802      	cmp	r0, #2
 8006fe6:	d120      	bne.n	800702a <_scanf_chars+0x8e>
 8006fe8:	682b      	ldr	r3, [r5, #0]
 8006fea:	781b      	ldrb	r3, [r3, #0]
 8006fec:	f813 3009 	ldrb.w	r3, [r3, r9]
 8006ff0:	071b      	lsls	r3, r3, #28
 8006ff2:	d41a      	bmi.n	800702a <_scanf_chars+0x8e>
 8006ff4:	6823      	ldr	r3, [r4, #0]
 8006ff6:	3701      	adds	r7, #1
 8006ff8:	06da      	lsls	r2, r3, #27
 8006ffa:	bf5e      	ittt	pl
 8006ffc:	682b      	ldrpl	r3, [r5, #0]
 8006ffe:	781b      	ldrbpl	r3, [r3, #0]
 8007000:	f806 3b01 	strbpl.w	r3, [r6], #1
 8007004:	682a      	ldr	r2, [r5, #0]
 8007006:	686b      	ldr	r3, [r5, #4]
 8007008:	3201      	adds	r2, #1
 800700a:	602a      	str	r2, [r5, #0]
 800700c:	68a2      	ldr	r2, [r4, #8]
 800700e:	3b01      	subs	r3, #1
 8007010:	3a01      	subs	r2, #1
 8007012:	606b      	str	r3, [r5, #4]
 8007014:	60a2      	str	r2, [r4, #8]
 8007016:	b142      	cbz	r2, 800702a <_scanf_chars+0x8e>
 8007018:	2b00      	cmp	r3, #0
 800701a:	dcd7      	bgt.n	8006fcc <_scanf_chars+0x30>
 800701c:	4629      	mov	r1, r5
 800701e:	4640      	mov	r0, r8
 8007020:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8007024:	4798      	blx	r3
 8007026:	2800      	cmp	r0, #0
 8007028:	d0d0      	beq.n	8006fcc <_scanf_chars+0x30>
 800702a:	6823      	ldr	r3, [r4, #0]
 800702c:	f013 0310 	ands.w	r3, r3, #16
 8007030:	d105      	bne.n	800703e <_scanf_chars+0xa2>
 8007032:	68e2      	ldr	r2, [r4, #12]
 8007034:	3201      	adds	r2, #1
 8007036:	60e2      	str	r2, [r4, #12]
 8007038:	69a2      	ldr	r2, [r4, #24]
 800703a:	b102      	cbz	r2, 800703e <_scanf_chars+0xa2>
 800703c:	7033      	strb	r3, [r6, #0]
 800703e:	2000      	movs	r0, #0
 8007040:	6923      	ldr	r3, [r4, #16]
 8007042:	443b      	add	r3, r7
 8007044:	6123      	str	r3, [r4, #16]
 8007046:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800704a:	bf00      	nop
 800704c:	08007a86 	.word	0x08007a86

08007050 <_scanf_i>:
 8007050:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007054:	460c      	mov	r4, r1
 8007056:	4698      	mov	r8, r3
 8007058:	4b75      	ldr	r3, [pc, #468]	; (8007230 <_scanf_i+0x1e0>)
 800705a:	b087      	sub	sp, #28
 800705c:	4682      	mov	sl, r0
 800705e:	4616      	mov	r6, r2
 8007060:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8007064:	ab03      	add	r3, sp, #12
 8007066:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800706a:	4b72      	ldr	r3, [pc, #456]	; (8007234 <_scanf_i+0x1e4>)
 800706c:	69a1      	ldr	r1, [r4, #24]
 800706e:	4a72      	ldr	r2, [pc, #456]	; (8007238 <_scanf_i+0x1e8>)
 8007070:	4627      	mov	r7, r4
 8007072:	2903      	cmp	r1, #3
 8007074:	bf18      	it	ne
 8007076:	461a      	movne	r2, r3
 8007078:	68a3      	ldr	r3, [r4, #8]
 800707a:	9201      	str	r2, [sp, #4]
 800707c:	1e5a      	subs	r2, r3, #1
 800707e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007082:	bf81      	itttt	hi
 8007084:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007088:	eb03 0905 	addhi.w	r9, r3, r5
 800708c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007090:	60a3      	strhi	r3, [r4, #8]
 8007092:	f857 3b1c 	ldr.w	r3, [r7], #28
 8007096:	bf98      	it	ls
 8007098:	f04f 0900 	movls.w	r9, #0
 800709c:	463d      	mov	r5, r7
 800709e:	f04f 0b00 	mov.w	fp, #0
 80070a2:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 80070a6:	6023      	str	r3, [r4, #0]
 80070a8:	6831      	ldr	r1, [r6, #0]
 80070aa:	ab03      	add	r3, sp, #12
 80070ac:	2202      	movs	r2, #2
 80070ae:	7809      	ldrb	r1, [r1, #0]
 80070b0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80070b4:	f000 f9aa 	bl	800740c <memchr>
 80070b8:	b328      	cbz	r0, 8007106 <_scanf_i+0xb6>
 80070ba:	f1bb 0f01 	cmp.w	fp, #1
 80070be:	d159      	bne.n	8007174 <_scanf_i+0x124>
 80070c0:	6862      	ldr	r2, [r4, #4]
 80070c2:	b92a      	cbnz	r2, 80070d0 <_scanf_i+0x80>
 80070c4:	2308      	movs	r3, #8
 80070c6:	6822      	ldr	r2, [r4, #0]
 80070c8:	6063      	str	r3, [r4, #4]
 80070ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80070ce:	6022      	str	r2, [r4, #0]
 80070d0:	6822      	ldr	r2, [r4, #0]
 80070d2:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 80070d6:	6022      	str	r2, [r4, #0]
 80070d8:	68a2      	ldr	r2, [r4, #8]
 80070da:	1e51      	subs	r1, r2, #1
 80070dc:	60a1      	str	r1, [r4, #8]
 80070de:	b192      	cbz	r2, 8007106 <_scanf_i+0xb6>
 80070e0:	6832      	ldr	r2, [r6, #0]
 80070e2:	1c51      	adds	r1, r2, #1
 80070e4:	6031      	str	r1, [r6, #0]
 80070e6:	7812      	ldrb	r2, [r2, #0]
 80070e8:	f805 2b01 	strb.w	r2, [r5], #1
 80070ec:	6872      	ldr	r2, [r6, #4]
 80070ee:	3a01      	subs	r2, #1
 80070f0:	2a00      	cmp	r2, #0
 80070f2:	6072      	str	r2, [r6, #4]
 80070f4:	dc07      	bgt.n	8007106 <_scanf_i+0xb6>
 80070f6:	4631      	mov	r1, r6
 80070f8:	4650      	mov	r0, sl
 80070fa:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80070fe:	4790      	blx	r2
 8007100:	2800      	cmp	r0, #0
 8007102:	f040 8085 	bne.w	8007210 <_scanf_i+0x1c0>
 8007106:	f10b 0b01 	add.w	fp, fp, #1
 800710a:	f1bb 0f03 	cmp.w	fp, #3
 800710e:	d1cb      	bne.n	80070a8 <_scanf_i+0x58>
 8007110:	6863      	ldr	r3, [r4, #4]
 8007112:	b90b      	cbnz	r3, 8007118 <_scanf_i+0xc8>
 8007114:	230a      	movs	r3, #10
 8007116:	6063      	str	r3, [r4, #4]
 8007118:	6863      	ldr	r3, [r4, #4]
 800711a:	4948      	ldr	r1, [pc, #288]	; (800723c <_scanf_i+0x1ec>)
 800711c:	6960      	ldr	r0, [r4, #20]
 800711e:	1ac9      	subs	r1, r1, r3
 8007120:	f000 f88e 	bl	8007240 <__sccl>
 8007124:	f04f 0b00 	mov.w	fp, #0
 8007128:	68a3      	ldr	r3, [r4, #8]
 800712a:	6822      	ldr	r2, [r4, #0]
 800712c:	2b00      	cmp	r3, #0
 800712e:	d03d      	beq.n	80071ac <_scanf_i+0x15c>
 8007130:	6831      	ldr	r1, [r6, #0]
 8007132:	6960      	ldr	r0, [r4, #20]
 8007134:	f891 c000 	ldrb.w	ip, [r1]
 8007138:	f810 000c 	ldrb.w	r0, [r0, ip]
 800713c:	2800      	cmp	r0, #0
 800713e:	d035      	beq.n	80071ac <_scanf_i+0x15c>
 8007140:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8007144:	d124      	bne.n	8007190 <_scanf_i+0x140>
 8007146:	0510      	lsls	r0, r2, #20
 8007148:	d522      	bpl.n	8007190 <_scanf_i+0x140>
 800714a:	f10b 0b01 	add.w	fp, fp, #1
 800714e:	f1b9 0f00 	cmp.w	r9, #0
 8007152:	d003      	beq.n	800715c <_scanf_i+0x10c>
 8007154:	3301      	adds	r3, #1
 8007156:	f109 39ff 	add.w	r9, r9, #4294967295
 800715a:	60a3      	str	r3, [r4, #8]
 800715c:	6873      	ldr	r3, [r6, #4]
 800715e:	3b01      	subs	r3, #1
 8007160:	2b00      	cmp	r3, #0
 8007162:	6073      	str	r3, [r6, #4]
 8007164:	dd1b      	ble.n	800719e <_scanf_i+0x14e>
 8007166:	6833      	ldr	r3, [r6, #0]
 8007168:	3301      	adds	r3, #1
 800716a:	6033      	str	r3, [r6, #0]
 800716c:	68a3      	ldr	r3, [r4, #8]
 800716e:	3b01      	subs	r3, #1
 8007170:	60a3      	str	r3, [r4, #8]
 8007172:	e7d9      	b.n	8007128 <_scanf_i+0xd8>
 8007174:	f1bb 0f02 	cmp.w	fp, #2
 8007178:	d1ae      	bne.n	80070d8 <_scanf_i+0x88>
 800717a:	6822      	ldr	r2, [r4, #0]
 800717c:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8007180:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8007184:	d1bf      	bne.n	8007106 <_scanf_i+0xb6>
 8007186:	2310      	movs	r3, #16
 8007188:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800718c:	6063      	str	r3, [r4, #4]
 800718e:	e7a2      	b.n	80070d6 <_scanf_i+0x86>
 8007190:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8007194:	6022      	str	r2, [r4, #0]
 8007196:	780b      	ldrb	r3, [r1, #0]
 8007198:	f805 3b01 	strb.w	r3, [r5], #1
 800719c:	e7de      	b.n	800715c <_scanf_i+0x10c>
 800719e:	4631      	mov	r1, r6
 80071a0:	4650      	mov	r0, sl
 80071a2:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80071a6:	4798      	blx	r3
 80071a8:	2800      	cmp	r0, #0
 80071aa:	d0df      	beq.n	800716c <_scanf_i+0x11c>
 80071ac:	6823      	ldr	r3, [r4, #0]
 80071ae:	05db      	lsls	r3, r3, #23
 80071b0:	d50d      	bpl.n	80071ce <_scanf_i+0x17e>
 80071b2:	42bd      	cmp	r5, r7
 80071b4:	d909      	bls.n	80071ca <_scanf_i+0x17a>
 80071b6:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80071ba:	4632      	mov	r2, r6
 80071bc:	4650      	mov	r0, sl
 80071be:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80071c2:	f105 39ff 	add.w	r9, r5, #4294967295
 80071c6:	4798      	blx	r3
 80071c8:	464d      	mov	r5, r9
 80071ca:	42bd      	cmp	r5, r7
 80071cc:	d02d      	beq.n	800722a <_scanf_i+0x1da>
 80071ce:	6822      	ldr	r2, [r4, #0]
 80071d0:	f012 0210 	ands.w	r2, r2, #16
 80071d4:	d113      	bne.n	80071fe <_scanf_i+0x1ae>
 80071d6:	702a      	strb	r2, [r5, #0]
 80071d8:	4639      	mov	r1, r7
 80071da:	6863      	ldr	r3, [r4, #4]
 80071dc:	4650      	mov	r0, sl
 80071de:	9e01      	ldr	r6, [sp, #4]
 80071e0:	47b0      	blx	r6
 80071e2:	6821      	ldr	r1, [r4, #0]
 80071e4:	f8d8 3000 	ldr.w	r3, [r8]
 80071e8:	f011 0f20 	tst.w	r1, #32
 80071ec:	d013      	beq.n	8007216 <_scanf_i+0x1c6>
 80071ee:	1d1a      	adds	r2, r3, #4
 80071f0:	f8c8 2000 	str.w	r2, [r8]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	6018      	str	r0, [r3, #0]
 80071f8:	68e3      	ldr	r3, [r4, #12]
 80071fa:	3301      	adds	r3, #1
 80071fc:	60e3      	str	r3, [r4, #12]
 80071fe:	2000      	movs	r0, #0
 8007200:	1bed      	subs	r5, r5, r7
 8007202:	44ab      	add	fp, r5
 8007204:	6925      	ldr	r5, [r4, #16]
 8007206:	445d      	add	r5, fp
 8007208:	6125      	str	r5, [r4, #16]
 800720a:	b007      	add	sp, #28
 800720c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007210:	f04f 0b00 	mov.w	fp, #0
 8007214:	e7ca      	b.n	80071ac <_scanf_i+0x15c>
 8007216:	1d1a      	adds	r2, r3, #4
 8007218:	f8c8 2000 	str.w	r2, [r8]
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	f011 0f01 	tst.w	r1, #1
 8007222:	bf14      	ite	ne
 8007224:	8018      	strhne	r0, [r3, #0]
 8007226:	6018      	streq	r0, [r3, #0]
 8007228:	e7e6      	b.n	80071f8 <_scanf_i+0x1a8>
 800722a:	2001      	movs	r0, #1
 800722c:	e7ed      	b.n	800720a <_scanf_i+0x1ba>
 800722e:	bf00      	nop
 8007230:	08007854 	.word	0x08007854
 8007234:	08007395 	.word	0x08007395
 8007238:	080065f9 	.word	0x080065f9
 800723c:	08007bd2 	.word	0x08007bd2

08007240 <__sccl>:
 8007240:	b570      	push	{r4, r5, r6, lr}
 8007242:	780b      	ldrb	r3, [r1, #0]
 8007244:	4604      	mov	r4, r0
 8007246:	2b5e      	cmp	r3, #94	; 0x5e
 8007248:	bf13      	iteet	ne
 800724a:	2200      	movne	r2, #0
 800724c:	2201      	moveq	r2, #1
 800724e:	784b      	ldrbeq	r3, [r1, #1]
 8007250:	1c48      	addne	r0, r1, #1
 8007252:	bf08      	it	eq
 8007254:	1c88      	addeq	r0, r1, #2
 8007256:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800725a:	1e61      	subs	r1, r4, #1
 800725c:	f801 2f01 	strb.w	r2, [r1, #1]!
 8007260:	42a9      	cmp	r1, r5
 8007262:	d1fb      	bne.n	800725c <__sccl+0x1c>
 8007264:	b90b      	cbnz	r3, 800726a <__sccl+0x2a>
 8007266:	3801      	subs	r0, #1
 8007268:	bd70      	pop	{r4, r5, r6, pc}
 800726a:	f082 0201 	eor.w	r2, r2, #1
 800726e:	4605      	mov	r5, r0
 8007270:	54e2      	strb	r2, [r4, r3]
 8007272:	4628      	mov	r0, r5
 8007274:	f810 1b01 	ldrb.w	r1, [r0], #1
 8007278:	292d      	cmp	r1, #45	; 0x2d
 800727a:	d006      	beq.n	800728a <__sccl+0x4a>
 800727c:	295d      	cmp	r1, #93	; 0x5d
 800727e:	d0f3      	beq.n	8007268 <__sccl+0x28>
 8007280:	b909      	cbnz	r1, 8007286 <__sccl+0x46>
 8007282:	4628      	mov	r0, r5
 8007284:	e7f0      	b.n	8007268 <__sccl+0x28>
 8007286:	460b      	mov	r3, r1
 8007288:	e7f1      	b.n	800726e <__sccl+0x2e>
 800728a:	786e      	ldrb	r6, [r5, #1]
 800728c:	2e5d      	cmp	r6, #93	; 0x5d
 800728e:	d0fa      	beq.n	8007286 <__sccl+0x46>
 8007290:	42b3      	cmp	r3, r6
 8007292:	dcf8      	bgt.n	8007286 <__sccl+0x46>
 8007294:	4619      	mov	r1, r3
 8007296:	3502      	adds	r5, #2
 8007298:	3101      	adds	r1, #1
 800729a:	428e      	cmp	r6, r1
 800729c:	5462      	strb	r2, [r4, r1]
 800729e:	dcfb      	bgt.n	8007298 <__sccl+0x58>
 80072a0:	1af1      	subs	r1, r6, r3
 80072a2:	3901      	subs	r1, #1
 80072a4:	42b3      	cmp	r3, r6
 80072a6:	bfa8      	it	ge
 80072a8:	2100      	movge	r1, #0
 80072aa:	1c58      	adds	r0, r3, #1
 80072ac:	1843      	adds	r3, r0, r1
 80072ae:	e7e0      	b.n	8007272 <__sccl+0x32>

080072b0 <_strtoul_l.constprop.0>:
 80072b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80072b4:	4686      	mov	lr, r0
 80072b6:	460d      	mov	r5, r1
 80072b8:	4f35      	ldr	r7, [pc, #212]	; (8007390 <_strtoul_l.constprop.0+0xe0>)
 80072ba:	4628      	mov	r0, r5
 80072bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80072c0:	5de6      	ldrb	r6, [r4, r7]
 80072c2:	f016 0608 	ands.w	r6, r6, #8
 80072c6:	d1f8      	bne.n	80072ba <_strtoul_l.constprop.0+0xa>
 80072c8:	2c2d      	cmp	r4, #45	; 0x2d
 80072ca:	d12f      	bne.n	800732c <_strtoul_l.constprop.0+0x7c>
 80072cc:	2601      	movs	r6, #1
 80072ce:	782c      	ldrb	r4, [r5, #0]
 80072d0:	1c85      	adds	r5, r0, #2
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d057      	beq.n	8007386 <_strtoul_l.constprop.0+0xd6>
 80072d6:	2b10      	cmp	r3, #16
 80072d8:	d109      	bne.n	80072ee <_strtoul_l.constprop.0+0x3e>
 80072da:	2c30      	cmp	r4, #48	; 0x30
 80072dc:	d107      	bne.n	80072ee <_strtoul_l.constprop.0+0x3e>
 80072de:	7828      	ldrb	r0, [r5, #0]
 80072e0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 80072e4:	2858      	cmp	r0, #88	; 0x58
 80072e6:	d149      	bne.n	800737c <_strtoul_l.constprop.0+0xcc>
 80072e8:	2310      	movs	r3, #16
 80072ea:	786c      	ldrb	r4, [r5, #1]
 80072ec:	3502      	adds	r5, #2
 80072ee:	f04f 38ff 	mov.w	r8, #4294967295
 80072f2:	fbb8 f8f3 	udiv	r8, r8, r3
 80072f6:	2700      	movs	r7, #0
 80072f8:	fb03 f908 	mul.w	r9, r3, r8
 80072fc:	4638      	mov	r0, r7
 80072fe:	ea6f 0909 	mvn.w	r9, r9
 8007302:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007306:	f1bc 0f09 	cmp.w	ip, #9
 800730a:	d814      	bhi.n	8007336 <_strtoul_l.constprop.0+0x86>
 800730c:	4664      	mov	r4, ip
 800730e:	42a3      	cmp	r3, r4
 8007310:	dd22      	ble.n	8007358 <_strtoul_l.constprop.0+0xa8>
 8007312:	2f00      	cmp	r7, #0
 8007314:	db1d      	blt.n	8007352 <_strtoul_l.constprop.0+0xa2>
 8007316:	4580      	cmp	r8, r0
 8007318:	d31b      	bcc.n	8007352 <_strtoul_l.constprop.0+0xa2>
 800731a:	d101      	bne.n	8007320 <_strtoul_l.constprop.0+0x70>
 800731c:	45a1      	cmp	r9, r4
 800731e:	db18      	blt.n	8007352 <_strtoul_l.constprop.0+0xa2>
 8007320:	2701      	movs	r7, #1
 8007322:	fb00 4003 	mla	r0, r0, r3, r4
 8007326:	f815 4b01 	ldrb.w	r4, [r5], #1
 800732a:	e7ea      	b.n	8007302 <_strtoul_l.constprop.0+0x52>
 800732c:	2c2b      	cmp	r4, #43	; 0x2b
 800732e:	bf04      	itt	eq
 8007330:	782c      	ldrbeq	r4, [r5, #0]
 8007332:	1c85      	addeq	r5, r0, #2
 8007334:	e7cd      	b.n	80072d2 <_strtoul_l.constprop.0+0x22>
 8007336:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800733a:	f1bc 0f19 	cmp.w	ip, #25
 800733e:	d801      	bhi.n	8007344 <_strtoul_l.constprop.0+0x94>
 8007340:	3c37      	subs	r4, #55	; 0x37
 8007342:	e7e4      	b.n	800730e <_strtoul_l.constprop.0+0x5e>
 8007344:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007348:	f1bc 0f19 	cmp.w	ip, #25
 800734c:	d804      	bhi.n	8007358 <_strtoul_l.constprop.0+0xa8>
 800734e:	3c57      	subs	r4, #87	; 0x57
 8007350:	e7dd      	b.n	800730e <_strtoul_l.constprop.0+0x5e>
 8007352:	f04f 37ff 	mov.w	r7, #4294967295
 8007356:	e7e6      	b.n	8007326 <_strtoul_l.constprop.0+0x76>
 8007358:	2f00      	cmp	r7, #0
 800735a:	da07      	bge.n	800736c <_strtoul_l.constprop.0+0xbc>
 800735c:	2322      	movs	r3, #34	; 0x22
 800735e:	f04f 30ff 	mov.w	r0, #4294967295
 8007362:	f8ce 3000 	str.w	r3, [lr]
 8007366:	b932      	cbnz	r2, 8007376 <_strtoul_l.constprop.0+0xc6>
 8007368:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800736c:	b106      	cbz	r6, 8007370 <_strtoul_l.constprop.0+0xc0>
 800736e:	4240      	negs	r0, r0
 8007370:	2a00      	cmp	r2, #0
 8007372:	d0f9      	beq.n	8007368 <_strtoul_l.constprop.0+0xb8>
 8007374:	b107      	cbz	r7, 8007378 <_strtoul_l.constprop.0+0xc8>
 8007376:	1e69      	subs	r1, r5, #1
 8007378:	6011      	str	r1, [r2, #0]
 800737a:	e7f5      	b.n	8007368 <_strtoul_l.constprop.0+0xb8>
 800737c:	2430      	movs	r4, #48	; 0x30
 800737e:	2b00      	cmp	r3, #0
 8007380:	d1b5      	bne.n	80072ee <_strtoul_l.constprop.0+0x3e>
 8007382:	2308      	movs	r3, #8
 8007384:	e7b3      	b.n	80072ee <_strtoul_l.constprop.0+0x3e>
 8007386:	2c30      	cmp	r4, #48	; 0x30
 8007388:	d0a9      	beq.n	80072de <_strtoul_l.constprop.0+0x2e>
 800738a:	230a      	movs	r3, #10
 800738c:	e7af      	b.n	80072ee <_strtoul_l.constprop.0+0x3e>
 800738e:	bf00      	nop
 8007390:	08007a86 	.word	0x08007a86

08007394 <_strtoul_r>:
 8007394:	f7ff bf8c 	b.w	80072b0 <_strtoul_l.constprop.0>

08007398 <__submore>:
 8007398:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800739c:	460c      	mov	r4, r1
 800739e:	6b49      	ldr	r1, [r1, #52]	; 0x34
 80073a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80073a4:	4299      	cmp	r1, r3
 80073a6:	d11b      	bne.n	80073e0 <__submore+0x48>
 80073a8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80073ac:	f000 f8be 	bl	800752c <_malloc_r>
 80073b0:	b918      	cbnz	r0, 80073ba <__submore+0x22>
 80073b2:	f04f 30ff 	mov.w	r0, #4294967295
 80073b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80073ba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80073be:	63a3      	str	r3, [r4, #56]	; 0x38
 80073c0:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 80073c4:	6360      	str	r0, [r4, #52]	; 0x34
 80073c6:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 80073ca:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 80073ce:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80073d2:	7043      	strb	r3, [r0, #1]
 80073d4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80073d8:	7003      	strb	r3, [r0, #0]
 80073da:	6020      	str	r0, [r4, #0]
 80073dc:	2000      	movs	r0, #0
 80073de:	e7ea      	b.n	80073b6 <__submore+0x1e>
 80073e0:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80073e2:	0077      	lsls	r7, r6, #1
 80073e4:	463a      	mov	r2, r7
 80073e6:	f000 f915 	bl	8007614 <_realloc_r>
 80073ea:	4605      	mov	r5, r0
 80073ec:	2800      	cmp	r0, #0
 80073ee:	d0e0      	beq.n	80073b2 <__submore+0x1a>
 80073f0:	eb00 0806 	add.w	r8, r0, r6
 80073f4:	4601      	mov	r1, r0
 80073f6:	4632      	mov	r2, r6
 80073f8:	4640      	mov	r0, r8
 80073fa:	f7ff f801 	bl	8006400 <memcpy>
 80073fe:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 8007402:	f8c4 8000 	str.w	r8, [r4]
 8007406:	e7e9      	b.n	80073dc <__submore+0x44>

08007408 <__retarget_lock_acquire_recursive>:
 8007408:	4770      	bx	lr

0800740a <__retarget_lock_release_recursive>:
 800740a:	4770      	bx	lr

0800740c <memchr>:
 800740c:	4603      	mov	r3, r0
 800740e:	b510      	push	{r4, lr}
 8007410:	b2c9      	uxtb	r1, r1
 8007412:	4402      	add	r2, r0
 8007414:	4293      	cmp	r3, r2
 8007416:	4618      	mov	r0, r3
 8007418:	d101      	bne.n	800741e <memchr+0x12>
 800741a:	2000      	movs	r0, #0
 800741c:	e003      	b.n	8007426 <memchr+0x1a>
 800741e:	7804      	ldrb	r4, [r0, #0]
 8007420:	3301      	adds	r3, #1
 8007422:	428c      	cmp	r4, r1
 8007424:	d1f6      	bne.n	8007414 <memchr+0x8>
 8007426:	bd10      	pop	{r4, pc}

08007428 <memmove>:
 8007428:	4288      	cmp	r0, r1
 800742a:	b510      	push	{r4, lr}
 800742c:	eb01 0402 	add.w	r4, r1, r2
 8007430:	d902      	bls.n	8007438 <memmove+0x10>
 8007432:	4284      	cmp	r4, r0
 8007434:	4623      	mov	r3, r4
 8007436:	d807      	bhi.n	8007448 <memmove+0x20>
 8007438:	1e43      	subs	r3, r0, #1
 800743a:	42a1      	cmp	r1, r4
 800743c:	d008      	beq.n	8007450 <memmove+0x28>
 800743e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007442:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007446:	e7f8      	b.n	800743a <memmove+0x12>
 8007448:	4601      	mov	r1, r0
 800744a:	4402      	add	r2, r0
 800744c:	428a      	cmp	r2, r1
 800744e:	d100      	bne.n	8007452 <memmove+0x2a>
 8007450:	bd10      	pop	{r4, pc}
 8007452:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007456:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800745a:	e7f7      	b.n	800744c <memmove+0x24>

0800745c <_free_r>:
 800745c:	b538      	push	{r3, r4, r5, lr}
 800745e:	4605      	mov	r5, r0
 8007460:	2900      	cmp	r1, #0
 8007462:	d040      	beq.n	80074e6 <_free_r+0x8a>
 8007464:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007468:	1f0c      	subs	r4, r1, #4
 800746a:	2b00      	cmp	r3, #0
 800746c:	bfb8      	it	lt
 800746e:	18e4      	addlt	r4, r4, r3
 8007470:	f000 f910 	bl	8007694 <__malloc_lock>
 8007474:	4a1c      	ldr	r2, [pc, #112]	; (80074e8 <_free_r+0x8c>)
 8007476:	6813      	ldr	r3, [r2, #0]
 8007478:	b933      	cbnz	r3, 8007488 <_free_r+0x2c>
 800747a:	6063      	str	r3, [r4, #4]
 800747c:	6014      	str	r4, [r2, #0]
 800747e:	4628      	mov	r0, r5
 8007480:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007484:	f000 b90c 	b.w	80076a0 <__malloc_unlock>
 8007488:	42a3      	cmp	r3, r4
 800748a:	d908      	bls.n	800749e <_free_r+0x42>
 800748c:	6820      	ldr	r0, [r4, #0]
 800748e:	1821      	adds	r1, r4, r0
 8007490:	428b      	cmp	r3, r1
 8007492:	bf01      	itttt	eq
 8007494:	6819      	ldreq	r1, [r3, #0]
 8007496:	685b      	ldreq	r3, [r3, #4]
 8007498:	1809      	addeq	r1, r1, r0
 800749a:	6021      	streq	r1, [r4, #0]
 800749c:	e7ed      	b.n	800747a <_free_r+0x1e>
 800749e:	461a      	mov	r2, r3
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	b10b      	cbz	r3, 80074a8 <_free_r+0x4c>
 80074a4:	42a3      	cmp	r3, r4
 80074a6:	d9fa      	bls.n	800749e <_free_r+0x42>
 80074a8:	6811      	ldr	r1, [r2, #0]
 80074aa:	1850      	adds	r0, r2, r1
 80074ac:	42a0      	cmp	r0, r4
 80074ae:	d10b      	bne.n	80074c8 <_free_r+0x6c>
 80074b0:	6820      	ldr	r0, [r4, #0]
 80074b2:	4401      	add	r1, r0
 80074b4:	1850      	adds	r0, r2, r1
 80074b6:	4283      	cmp	r3, r0
 80074b8:	6011      	str	r1, [r2, #0]
 80074ba:	d1e0      	bne.n	800747e <_free_r+0x22>
 80074bc:	6818      	ldr	r0, [r3, #0]
 80074be:	685b      	ldr	r3, [r3, #4]
 80074c0:	4401      	add	r1, r0
 80074c2:	6011      	str	r1, [r2, #0]
 80074c4:	6053      	str	r3, [r2, #4]
 80074c6:	e7da      	b.n	800747e <_free_r+0x22>
 80074c8:	d902      	bls.n	80074d0 <_free_r+0x74>
 80074ca:	230c      	movs	r3, #12
 80074cc:	602b      	str	r3, [r5, #0]
 80074ce:	e7d6      	b.n	800747e <_free_r+0x22>
 80074d0:	6820      	ldr	r0, [r4, #0]
 80074d2:	1821      	adds	r1, r4, r0
 80074d4:	428b      	cmp	r3, r1
 80074d6:	bf01      	itttt	eq
 80074d8:	6819      	ldreq	r1, [r3, #0]
 80074da:	685b      	ldreq	r3, [r3, #4]
 80074dc:	1809      	addeq	r1, r1, r0
 80074de:	6021      	streq	r1, [r4, #0]
 80074e0:	6063      	str	r3, [r4, #4]
 80074e2:	6054      	str	r4, [r2, #4]
 80074e4:	e7cb      	b.n	800747e <_free_r+0x22>
 80074e6:	bd38      	pop	{r3, r4, r5, pc}
 80074e8:	20002e34 	.word	0x20002e34

080074ec <sbrk_aligned>:
 80074ec:	b570      	push	{r4, r5, r6, lr}
 80074ee:	4e0e      	ldr	r6, [pc, #56]	; (8007528 <sbrk_aligned+0x3c>)
 80074f0:	460c      	mov	r4, r1
 80074f2:	6831      	ldr	r1, [r6, #0]
 80074f4:	4605      	mov	r5, r0
 80074f6:	b911      	cbnz	r1, 80074fe <sbrk_aligned+0x12>
 80074f8:	f000 f8bc 	bl	8007674 <_sbrk_r>
 80074fc:	6030      	str	r0, [r6, #0]
 80074fe:	4621      	mov	r1, r4
 8007500:	4628      	mov	r0, r5
 8007502:	f000 f8b7 	bl	8007674 <_sbrk_r>
 8007506:	1c43      	adds	r3, r0, #1
 8007508:	d00a      	beq.n	8007520 <sbrk_aligned+0x34>
 800750a:	1cc4      	adds	r4, r0, #3
 800750c:	f024 0403 	bic.w	r4, r4, #3
 8007510:	42a0      	cmp	r0, r4
 8007512:	d007      	beq.n	8007524 <sbrk_aligned+0x38>
 8007514:	1a21      	subs	r1, r4, r0
 8007516:	4628      	mov	r0, r5
 8007518:	f000 f8ac 	bl	8007674 <_sbrk_r>
 800751c:	3001      	adds	r0, #1
 800751e:	d101      	bne.n	8007524 <sbrk_aligned+0x38>
 8007520:	f04f 34ff 	mov.w	r4, #4294967295
 8007524:	4620      	mov	r0, r4
 8007526:	bd70      	pop	{r4, r5, r6, pc}
 8007528:	20002e38 	.word	0x20002e38

0800752c <_malloc_r>:
 800752c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007530:	1ccd      	adds	r5, r1, #3
 8007532:	f025 0503 	bic.w	r5, r5, #3
 8007536:	3508      	adds	r5, #8
 8007538:	2d0c      	cmp	r5, #12
 800753a:	bf38      	it	cc
 800753c:	250c      	movcc	r5, #12
 800753e:	2d00      	cmp	r5, #0
 8007540:	4607      	mov	r7, r0
 8007542:	db01      	blt.n	8007548 <_malloc_r+0x1c>
 8007544:	42a9      	cmp	r1, r5
 8007546:	d905      	bls.n	8007554 <_malloc_r+0x28>
 8007548:	230c      	movs	r3, #12
 800754a:	2600      	movs	r6, #0
 800754c:	603b      	str	r3, [r7, #0]
 800754e:	4630      	mov	r0, r6
 8007550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007554:	4e2e      	ldr	r6, [pc, #184]	; (8007610 <_malloc_r+0xe4>)
 8007556:	f000 f89d 	bl	8007694 <__malloc_lock>
 800755a:	6833      	ldr	r3, [r6, #0]
 800755c:	461c      	mov	r4, r3
 800755e:	bb34      	cbnz	r4, 80075ae <_malloc_r+0x82>
 8007560:	4629      	mov	r1, r5
 8007562:	4638      	mov	r0, r7
 8007564:	f7ff ffc2 	bl	80074ec <sbrk_aligned>
 8007568:	1c43      	adds	r3, r0, #1
 800756a:	4604      	mov	r4, r0
 800756c:	d14d      	bne.n	800760a <_malloc_r+0xde>
 800756e:	6834      	ldr	r4, [r6, #0]
 8007570:	4626      	mov	r6, r4
 8007572:	2e00      	cmp	r6, #0
 8007574:	d140      	bne.n	80075f8 <_malloc_r+0xcc>
 8007576:	6823      	ldr	r3, [r4, #0]
 8007578:	4631      	mov	r1, r6
 800757a:	4638      	mov	r0, r7
 800757c:	eb04 0803 	add.w	r8, r4, r3
 8007580:	f000 f878 	bl	8007674 <_sbrk_r>
 8007584:	4580      	cmp	r8, r0
 8007586:	d13a      	bne.n	80075fe <_malloc_r+0xd2>
 8007588:	6821      	ldr	r1, [r4, #0]
 800758a:	3503      	adds	r5, #3
 800758c:	1a6d      	subs	r5, r5, r1
 800758e:	f025 0503 	bic.w	r5, r5, #3
 8007592:	3508      	adds	r5, #8
 8007594:	2d0c      	cmp	r5, #12
 8007596:	bf38      	it	cc
 8007598:	250c      	movcc	r5, #12
 800759a:	4638      	mov	r0, r7
 800759c:	4629      	mov	r1, r5
 800759e:	f7ff ffa5 	bl	80074ec <sbrk_aligned>
 80075a2:	3001      	adds	r0, #1
 80075a4:	d02b      	beq.n	80075fe <_malloc_r+0xd2>
 80075a6:	6823      	ldr	r3, [r4, #0]
 80075a8:	442b      	add	r3, r5
 80075aa:	6023      	str	r3, [r4, #0]
 80075ac:	e00e      	b.n	80075cc <_malloc_r+0xa0>
 80075ae:	6822      	ldr	r2, [r4, #0]
 80075b0:	1b52      	subs	r2, r2, r5
 80075b2:	d41e      	bmi.n	80075f2 <_malloc_r+0xc6>
 80075b4:	2a0b      	cmp	r2, #11
 80075b6:	d916      	bls.n	80075e6 <_malloc_r+0xba>
 80075b8:	1961      	adds	r1, r4, r5
 80075ba:	42a3      	cmp	r3, r4
 80075bc:	6025      	str	r5, [r4, #0]
 80075be:	bf18      	it	ne
 80075c0:	6059      	strne	r1, [r3, #4]
 80075c2:	6863      	ldr	r3, [r4, #4]
 80075c4:	bf08      	it	eq
 80075c6:	6031      	streq	r1, [r6, #0]
 80075c8:	5162      	str	r2, [r4, r5]
 80075ca:	604b      	str	r3, [r1, #4]
 80075cc:	4638      	mov	r0, r7
 80075ce:	f104 060b 	add.w	r6, r4, #11
 80075d2:	f000 f865 	bl	80076a0 <__malloc_unlock>
 80075d6:	f026 0607 	bic.w	r6, r6, #7
 80075da:	1d23      	adds	r3, r4, #4
 80075dc:	1af2      	subs	r2, r6, r3
 80075de:	d0b6      	beq.n	800754e <_malloc_r+0x22>
 80075e0:	1b9b      	subs	r3, r3, r6
 80075e2:	50a3      	str	r3, [r4, r2]
 80075e4:	e7b3      	b.n	800754e <_malloc_r+0x22>
 80075e6:	6862      	ldr	r2, [r4, #4]
 80075e8:	42a3      	cmp	r3, r4
 80075ea:	bf0c      	ite	eq
 80075ec:	6032      	streq	r2, [r6, #0]
 80075ee:	605a      	strne	r2, [r3, #4]
 80075f0:	e7ec      	b.n	80075cc <_malloc_r+0xa0>
 80075f2:	4623      	mov	r3, r4
 80075f4:	6864      	ldr	r4, [r4, #4]
 80075f6:	e7b2      	b.n	800755e <_malloc_r+0x32>
 80075f8:	4634      	mov	r4, r6
 80075fa:	6876      	ldr	r6, [r6, #4]
 80075fc:	e7b9      	b.n	8007572 <_malloc_r+0x46>
 80075fe:	230c      	movs	r3, #12
 8007600:	4638      	mov	r0, r7
 8007602:	603b      	str	r3, [r7, #0]
 8007604:	f000 f84c 	bl	80076a0 <__malloc_unlock>
 8007608:	e7a1      	b.n	800754e <_malloc_r+0x22>
 800760a:	6025      	str	r5, [r4, #0]
 800760c:	e7de      	b.n	80075cc <_malloc_r+0xa0>
 800760e:	bf00      	nop
 8007610:	20002e34 	.word	0x20002e34

08007614 <_realloc_r>:
 8007614:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007618:	4680      	mov	r8, r0
 800761a:	4614      	mov	r4, r2
 800761c:	460e      	mov	r6, r1
 800761e:	b921      	cbnz	r1, 800762a <_realloc_r+0x16>
 8007620:	4611      	mov	r1, r2
 8007622:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007626:	f7ff bf81 	b.w	800752c <_malloc_r>
 800762a:	b92a      	cbnz	r2, 8007638 <_realloc_r+0x24>
 800762c:	f7ff ff16 	bl	800745c <_free_r>
 8007630:	4625      	mov	r5, r4
 8007632:	4628      	mov	r0, r5
 8007634:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007638:	f000 f838 	bl	80076ac <_malloc_usable_size_r>
 800763c:	4284      	cmp	r4, r0
 800763e:	4607      	mov	r7, r0
 8007640:	d802      	bhi.n	8007648 <_realloc_r+0x34>
 8007642:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007646:	d812      	bhi.n	800766e <_realloc_r+0x5a>
 8007648:	4621      	mov	r1, r4
 800764a:	4640      	mov	r0, r8
 800764c:	f7ff ff6e 	bl	800752c <_malloc_r>
 8007650:	4605      	mov	r5, r0
 8007652:	2800      	cmp	r0, #0
 8007654:	d0ed      	beq.n	8007632 <_realloc_r+0x1e>
 8007656:	42bc      	cmp	r4, r7
 8007658:	4622      	mov	r2, r4
 800765a:	4631      	mov	r1, r6
 800765c:	bf28      	it	cs
 800765e:	463a      	movcs	r2, r7
 8007660:	f7fe fece 	bl	8006400 <memcpy>
 8007664:	4631      	mov	r1, r6
 8007666:	4640      	mov	r0, r8
 8007668:	f7ff fef8 	bl	800745c <_free_r>
 800766c:	e7e1      	b.n	8007632 <_realloc_r+0x1e>
 800766e:	4635      	mov	r5, r6
 8007670:	e7df      	b.n	8007632 <_realloc_r+0x1e>
	...

08007674 <_sbrk_r>:
 8007674:	b538      	push	{r3, r4, r5, lr}
 8007676:	2300      	movs	r3, #0
 8007678:	4d05      	ldr	r5, [pc, #20]	; (8007690 <_sbrk_r+0x1c>)
 800767a:	4604      	mov	r4, r0
 800767c:	4608      	mov	r0, r1
 800767e:	602b      	str	r3, [r5, #0]
 8007680:	f7f9 fe90 	bl	80013a4 <_sbrk>
 8007684:	1c43      	adds	r3, r0, #1
 8007686:	d102      	bne.n	800768e <_sbrk_r+0x1a>
 8007688:	682b      	ldr	r3, [r5, #0]
 800768a:	b103      	cbz	r3, 800768e <_sbrk_r+0x1a>
 800768c:	6023      	str	r3, [r4, #0]
 800768e:	bd38      	pop	{r3, r4, r5, pc}
 8007690:	20002e2c 	.word	0x20002e2c

08007694 <__malloc_lock>:
 8007694:	4801      	ldr	r0, [pc, #4]	; (800769c <__malloc_lock+0x8>)
 8007696:	f7ff beb7 	b.w	8007408 <__retarget_lock_acquire_recursive>
 800769a:	bf00      	nop
 800769c:	20002e30 	.word	0x20002e30

080076a0 <__malloc_unlock>:
 80076a0:	4801      	ldr	r0, [pc, #4]	; (80076a8 <__malloc_unlock+0x8>)
 80076a2:	f7ff beb2 	b.w	800740a <__retarget_lock_release_recursive>
 80076a6:	bf00      	nop
 80076a8:	20002e30 	.word	0x20002e30

080076ac <_malloc_usable_size_r>:
 80076ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076b0:	1f18      	subs	r0, r3, #4
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	bfbc      	itt	lt
 80076b6:	580b      	ldrlt	r3, [r1, r0]
 80076b8:	18c0      	addlt	r0, r0, r3
 80076ba:	4770      	bx	lr

080076bc <_init>:
 80076bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076be:	bf00      	nop
 80076c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076c2:	bc08      	pop	{r3}
 80076c4:	469e      	mov	lr, r3
 80076c6:	4770      	bx	lr

080076c8 <_fini>:
 80076c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076ca:	bf00      	nop
 80076cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80076ce:	bc08      	pop	{r3}
 80076d0:	469e      	mov	lr, r3
 80076d2:	4770      	bx	lr
